/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		0: 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push([687,10]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ 10:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return PlatformUtilsService; });
class PlatformUtilsService {
}


/***/ }),

/***/ 100:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return FolderView; });
class FolderView {
    constructor(f) {
        this.id = null;
        this.name = null;
        this.revisionDate = null;
        if (!f) {
            return;
        }
        this.id = f.id;
        this.revisionDate = f.revisionDate;
    }
}


/***/ }),

/***/ 108:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return FieldView; });
class FieldView {
    constructor(f) {
        this.name = null;
        this.value = null;
        this.type = null;
        this.newField = false; // Marks if the field is new and hasn't been saved
        this.showValue = false;
        if (!f) {
            return;
        }
        this.type = f.type;
    }
    get maskedValue() {
        return this.value != null ? '••••••••' : null;
    }
}


/***/ }),

/***/ 109:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return KeysRequest; });
class KeysRequest {
    constructor(publicKey, encryptedPrivateKey) {
        this.publicKey = publicKey;
        this.encryptedPrivateKey = encryptedPrivateKey;
    }
}


/***/ }),

/***/ 11:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CipherType; });
var CipherType;
(function (CipherType) {
    CipherType[CipherType["Login"] = 1] = "Login";
    CipherType[CipherType["SecureNote"] = 2] = "SecureNote";
    CipherType[CipherType["Card"] = 3] = "Card";
    CipherType[CipherType["Identity"] = 4] = "Identity";
})(CipherType || (CipherType = {}));


/***/ }),

/***/ 111:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./jslib/src/enums/cipherType.ts
var cipherType = __webpack_require__(11);

// EXTERNAL MODULE: ./jslib/src/models/api/cardApi.ts
var cardApi = __webpack_require__(228);

// EXTERNAL MODULE: ./jslib/src/models/api/fieldApi.ts
var fieldApi = __webpack_require__(229);

// EXTERNAL MODULE: ./jslib/src/models/api/identityApi.ts
var identityApi = __webpack_require__(230);

// EXTERNAL MODULE: ./jslib/src/models/api/loginApi.ts
var loginApi = __webpack_require__(231);

// EXTERNAL MODULE: ./jslib/src/models/api/loginUriApi.ts
var loginUriApi = __webpack_require__(232);

// EXTERNAL MODULE: ./jslib/src/models/api/secureNoteApi.ts
var secureNoteApi = __webpack_require__(233);

// CONCATENATED MODULE: ./jslib/src/models/request/attachmentRequest.ts
class AttachmentRequest {
}

// CONCATENATED MODULE: ./jslib/src/models/request/cipherRequest.ts
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return cipherRequest_CipherRequest; });








class cipherRequest_CipherRequest {
    constructor(cipher) {
        this.type = cipher.type;
        this.folderId = cipher.folderId;
        this.organizationId = cipher.organizationId;
        this.name = cipher.name ? cipher.name.encryptedString : null;
        this.notes = cipher.notes ? cipher.notes.encryptedString : null;
        this.favorite = cipher.favorite;
        this.lastKnownRevisionDate = cipher.revisionDate;
        switch (this.type) {
            case cipherType["a" /* CipherType */].Login:
                this.login = new loginApi["a" /* LoginApi */]();
                this.login.uris = null;
                this.login.username = cipher.login.username ? cipher.login.username.encryptedString : null;
                this.login.password = cipher.login.password ? cipher.login.password.encryptedString : null;
                this.login.passwordRevisionDate = cipher.login.passwordRevisionDate != null ?
                    cipher.login.passwordRevisionDate.toISOString() : null;
                this.login.totp = cipher.login.totp ? cipher.login.totp.encryptedString : null;
                if (cipher.login.uris != null) {
                    this.login.uris = cipher.login.uris.map((u) => {
                        const uri = new loginUriApi["a" /* LoginUriApi */]();
                        uri.uri = u.uri != null ? u.uri.encryptedString : null;
                        uri.match = u.match != null ? u.match : null;
                        return uri;
                    });
                }
                break;
            case cipherType["a" /* CipherType */].SecureNote:
                this.secureNote = new secureNoteApi["a" /* SecureNoteApi */]();
                this.secureNote.type = cipher.secureNote.type;
                break;
            case cipherType["a" /* CipherType */].Card:
                this.card = new cardApi["a" /* CardApi */]();
                this.card.cardholderName = cipher.card.cardholderName != null ?
                    cipher.card.cardholderName.encryptedString : null;
                this.card.brand = cipher.card.brand != null ? cipher.card.brand.encryptedString : null;
                this.card.number = cipher.card.number != null ? cipher.card.number.encryptedString : null;
                this.card.expMonth = cipher.card.expMonth != null ? cipher.card.expMonth.encryptedString : null;
                this.card.expYear = cipher.card.expYear != null ? cipher.card.expYear.encryptedString : null;
                this.card.code = cipher.card.code != null ? cipher.card.code.encryptedString : null;
                break;
            case cipherType["a" /* CipherType */].Identity:
                this.identity = new identityApi["a" /* IdentityApi */]();
                this.identity.title = cipher.identity.title != null ? cipher.identity.title.encryptedString : null;
                this.identity.firstName = cipher.identity.firstName != null ?
                    cipher.identity.firstName.encryptedString : null;
                this.identity.middleName = cipher.identity.middleName != null ?
                    cipher.identity.middleName.encryptedString : null;
                this.identity.lastName = cipher.identity.lastName != null ?
                    cipher.identity.lastName.encryptedString : null;
                this.identity.address1 = cipher.identity.address1 != null ?
                    cipher.identity.address1.encryptedString : null;
                this.identity.address2 = cipher.identity.address2 != null ?
                    cipher.identity.address2.encryptedString : null;
                this.identity.address3 = cipher.identity.address3 != null ?
                    cipher.identity.address3.encryptedString : null;
                this.identity.city = cipher.identity.city != null ? cipher.identity.city.encryptedString : null;
                this.identity.state = cipher.identity.state != null ? cipher.identity.state.encryptedString : null;
                this.identity.postalCode = cipher.identity.postalCode != null ?
                    cipher.identity.postalCode.encryptedString : null;
                this.identity.country = cipher.identity.country != null ?
                    cipher.identity.country.encryptedString : null;
                this.identity.company = cipher.identity.company != null ?
                    cipher.identity.company.encryptedString : null;
                this.identity.email = cipher.identity.email != null ? cipher.identity.email.encryptedString : null;
                this.identity.phone = cipher.identity.phone != null ? cipher.identity.phone.encryptedString : null;
                this.identity.ssn = cipher.identity.ssn != null ? cipher.identity.ssn.encryptedString : null;
                this.identity.username = cipher.identity.username != null ?
                    cipher.identity.username.encryptedString : null;
                this.identity.passportNumber = cipher.identity.passportNumber != null ?
                    cipher.identity.passportNumber.encryptedString : null;
                this.identity.licenseNumber = cipher.identity.licenseNumber != null ?
                    cipher.identity.licenseNumber.encryptedString : null;
                break;
            default:
                break;
        }
        if (cipher.fields != null) {
            this.fields = cipher.fields.map((f) => {
                const field = new fieldApi["a" /* FieldApi */]();
                field.type = f.type;
                field.name = f.name ? f.name.encryptedString : null;
                field.value = f.value ? f.value.encryptedString : null;
                return field;
            });
        }
        if (cipher.passwordHistory != null) {
            this.passwordHistory = [];
            cipher.passwordHistory.forEach((ph) => {
                this.passwordHistory.push({
                    lastUsedDate: ph.lastUsedDate,
                    password: ph.password ? ph.password.encryptedString : null,
                });
            });
        }
        if (cipher.attachments != null) {
            this.attachments = {};
            this.attachments2 = {};
            cipher.attachments.forEach((attachment) => {
                const fileName = attachment.fileName ? attachment.fileName.encryptedString : null;
                this.attachments[attachment.id] = fileName;
                const attachmentRequest = new AttachmentRequest();
                attachmentRequest.fileName = fileName;
                if (attachment.key != null) {
                    attachmentRequest.key = attachment.key.encryptedString;
                }
                this.attachments2[attachment.id] = attachmentRequest;
            });
        }
    }
}


/***/ }),

/***/ 12:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return BaseResponse; });
class BaseResponse {
    constructor(response) {
        this.response = response;
    }
    getResponseProperty(propertyName, response = null, exactName = false) {
        if (propertyName == null || propertyName === '') {
            throw new Error('propertyName must not be null/empty.');
        }
        if (response == null && this.response != null) {
            response = this.response;
        }
        if (response == null) {
            return null;
        }
        if (!exactName && response[propertyName] === undefined) {
            let otherCasePropertyName = null;
            if (propertyName.charAt(0) === propertyName.charAt(0).toUpperCase()) {
                otherCasePropertyName = propertyName.charAt(0).toLowerCase();
            }
            else {
                otherCasePropertyName = propertyName.charAt(0).toUpperCase();
            }
            if (propertyName.length > 1) {
                otherCasePropertyName += propertyName.slice(1);
            }
            propertyName = otherCasePropertyName;
            if (response[propertyName] === undefined) {
                propertyName = propertyName.toLowerCase();
            }
            if (response[propertyName] === undefined) {
                propertyName = propertyName.toUpperCase();
            }
        }
        return response[propertyName];
    }
}


/***/ }),

/***/ 123:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./jslib/src/enums/twoFactorProviderType.ts
var twoFactorProviderType = __webpack_require__(14);

// CONCATENATED MODULE: ./jslib/src/models/domain/authResult.ts
class AuthResult {
    constructor() {
        this.twoFactor = false;
        this.resetMasterPassword = false;
        this.twoFactorProviders = null;
    }
}

// CONCATENATED MODULE: ./jslib/src/models/request/deviceRequest.ts
class DeviceRequest {
    constructor(appId, platformUtilsService) {
        this.type = platformUtilsService.getDevice();
        this.name = platformUtilsService.getDeviceString();
        this.identifier = appId;
        this.pushToken = null;
    }
}

// EXTERNAL MODULE: ./jslib/src/models/request/keysRequest.ts
var keysRequest = __webpack_require__(109);

// CONCATENATED MODULE: ./jslib/src/models/request/preloginRequest.ts
class PreloginRequest {
    constructor(email) {
        this.email = email;
    }
}

// CONCATENATED MODULE: ./jslib/src/models/request/tokenRequest.ts
class TokenRequest {
    constructor(credentials, codes, clientIdClientSecret, provider, token, remember, device) {
        if (credentials != null && credentials.length > 1) {
            this.email = credentials[0];
            this.masterPasswordHash = credentials[1];
        }
        else if (codes != null && codes.length > 2) {
            this.code = codes[0];
            this.codeVerifier = codes[1];
            this.redirectUri = codes[2];
        }
        else if (clientIdClientSecret != null && clientIdClientSecret.length > 1) {
            this.clientId = clientIdClientSecret[0];
            this.clientSecret = clientIdClientSecret[1];
        }
        this.token = token;
        this.provider = provider;
        this.remember = remember;
        this.device = device != null ? device : null;
    }
    toIdentityToken(clientId) {
        const obj = {
            scope: 'api offline_access',
            client_id: clientId,
        };
        if (this.clientSecret != null) {
            obj.scope = 'api';
            obj.grant_type = 'client_credentials';
            obj.client_secret = this.clientSecret;
        }
        else if (this.masterPasswordHash != null && this.email != null) {
            obj.grant_type = 'password';
            obj.username = this.email;
            obj.password = this.masterPasswordHash;
        }
        else if (this.code != null && this.codeVerifier != null && this.redirectUri != null) {
            obj.grant_type = 'authorization_code';
            obj.code = this.code;
            obj.code_verifier = this.codeVerifier;
            obj.redirect_uri = this.redirectUri;
        }
        else {
            throw new Error('must provide credentials or codes');
        }
        if (this.device) {
            obj.deviceType = this.device.type;
            obj.deviceIdentifier = this.device.identifier;
            obj.deviceName = this.device.name;
            // no push tokens for browser apps yet
            // obj.devicePushToken = this.device.pushToken;
        }
        if (this.token && this.provider != null) {
            obj.twoFactorToken = this.token;
            obj.twoFactorProvider = this.provider;
            obj.twoFactorRemember = this.remember ? '1' : '0';
        }
        return obj;
    }
}

// CONCATENATED MODULE: ./jslib/src/services/auth.service.ts
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return TwoFactorProviders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return auth_service_AuthService; });
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};






const TwoFactorProviders = {
    [twoFactorProviderType["a" /* TwoFactorProviderType */].Authenticator]: {
        type: twoFactorProviderType["a" /* TwoFactorProviderType */].Authenticator,
        name: null,
        description: null,
        priority: 1,
        sort: 1,
        premium: false,
    },
    [twoFactorProviderType["a" /* TwoFactorProviderType */].Yubikey]: {
        type: twoFactorProviderType["a" /* TwoFactorProviderType */].Yubikey,
        name: null,
        description: null,
        priority: 3,
        sort: 2,
        premium: true,
    },
    [twoFactorProviderType["a" /* TwoFactorProviderType */].Duo]: {
        type: twoFactorProviderType["a" /* TwoFactorProviderType */].Duo,
        name: 'Duo',
        description: null,
        priority: 2,
        sort: 3,
        premium: true,
    },
    [twoFactorProviderType["a" /* TwoFactorProviderType */].OrganizationDuo]: {
        type: twoFactorProviderType["a" /* TwoFactorProviderType */].OrganizationDuo,
        name: 'Duo (Organization)',
        description: null,
        priority: 10,
        sort: 4,
        premium: false,
    },
    [twoFactorProviderType["a" /* TwoFactorProviderType */].U2f]: {
        type: twoFactorProviderType["a" /* TwoFactorProviderType */].U2f,
        name: null,
        description: null,
        priority: 4,
        sort: 5,
        premium: true,
    },
    [twoFactorProviderType["a" /* TwoFactorProviderType */].Email]: {
        type: twoFactorProviderType["a" /* TwoFactorProviderType */].Email,
        name: null,
        description: null,
        priority: 0,
        sort: 6,
        premium: false,
    },
};
class auth_service_AuthService {
    constructor(cryptoService, apiService, userService, tokenService, appIdService, i18nService, platformUtilsService, messagingService, vaultTimeoutService, setCryptoKeys = true) {
        this.cryptoService = cryptoService;
        this.apiService = apiService;
        this.userService = userService;
        this.tokenService = tokenService;
        this.appIdService = appIdService;
        this.i18nService = i18nService;
        this.platformUtilsService = platformUtilsService;
        this.messagingService = messagingService;
        this.vaultTimeoutService = vaultTimeoutService;
        this.setCryptoKeys = setCryptoKeys;
        this.selectedTwoFactorProviderType = null;
    }
    init() {
        TwoFactorProviders[twoFactorProviderType["a" /* TwoFactorProviderType */].Email].name = this.i18nService.t('emailTitle');
        TwoFactorProviders[twoFactorProviderType["a" /* TwoFactorProviderType */].Email].description = this.i18nService.t('emailDesc');
        TwoFactorProviders[twoFactorProviderType["a" /* TwoFactorProviderType */].Authenticator].name = this.i18nService.t('authenticatorAppTitle');
        TwoFactorProviders[twoFactorProviderType["a" /* TwoFactorProviderType */].Authenticator].description =
            this.i18nService.t('authenticatorAppDesc');
        TwoFactorProviders[twoFactorProviderType["a" /* TwoFactorProviderType */].Duo].description = this.i18nService.t('duoDesc');
        TwoFactorProviders[twoFactorProviderType["a" /* TwoFactorProviderType */].OrganizationDuo].name =
            'Duo (' + this.i18nService.t('organization') + ')';
        TwoFactorProviders[twoFactorProviderType["a" /* TwoFactorProviderType */].OrganizationDuo].description =
            this.i18nService.t('duoOrganizationDesc');
        TwoFactorProviders[twoFactorProviderType["a" /* TwoFactorProviderType */].U2f].name = this.i18nService.t('u2fTitle');
        TwoFactorProviders[twoFactorProviderType["a" /* TwoFactorProviderType */].U2f].description = this.i18nService.t('u2fDesc');
        TwoFactorProviders[twoFactorProviderType["a" /* TwoFactorProviderType */].Yubikey].name = this.i18nService.t('yubiKeyTitle');
        TwoFactorProviders[twoFactorProviderType["a" /* TwoFactorProviderType */].Yubikey].description = this.i18nService.t('yubiKeyDesc');
    }
    logIn(email, masterPassword) {
        return __awaiter(this, void 0, void 0, function* () {
            this.selectedTwoFactorProviderType = null;
            const key = yield this.makePreloginKey(masterPassword, email);
            const hashedPassword = yield this.cryptoService.hashPassword(masterPassword, key);
            return yield this.logInHelper(email, hashedPassword, null, null, null, null, null, key, null, null, null);
        });
    }
    logInSso(code, codeVerifier, redirectUrl) {
        return __awaiter(this, void 0, void 0, function* () {
            this.selectedTwoFactorProviderType = null;
            return yield this.logInHelper(null, null, code, codeVerifier, redirectUrl, null, null, null, null, null, null);
        });
    }
    logInApiKey(clientId, clientSecret) {
        return __awaiter(this, void 0, void 0, function* () {
            this.selectedTwoFactorProviderType = null;
            return yield this.logInHelper(null, null, null, null, null, clientId, clientSecret, null, null, null, null);
        });
    }
    logInTwoFactor(twoFactorProvider, twoFactorToken, remember) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.logInHelper(this.email, this.masterPasswordHash, this.code, this.codeVerifier, this.ssoRedirectUrl, this.clientId, this.clientSecret, this.key, twoFactorProvider, twoFactorToken, remember);
        });
    }
    logInComplete(email, masterPassword, twoFactorProvider, twoFactorToken, remember) {
        return __awaiter(this, void 0, void 0, function* () {
            this.selectedTwoFactorProviderType = null;
            const key = yield this.makePreloginKey(masterPassword, email);
            const hashedPassword = yield this.cryptoService.hashPassword(masterPassword, key);
            return yield this.logInHelper(email, hashedPassword, null, null, null, null, null, key, twoFactorProvider, twoFactorToken, remember);
        });
    }
    logInSsoComplete(code, codeVerifier, redirectUrl, twoFactorProvider, twoFactorToken, remember) {
        return __awaiter(this, void 0, void 0, function* () {
            this.selectedTwoFactorProviderType = null;
            return yield this.logInHelper(null, null, code, codeVerifier, redirectUrl, null, null, null, twoFactorProvider, twoFactorToken, remember);
        });
    }
    logInApiKeyComplete(clientId, clientSecret, twoFactorProvider, twoFactorToken, remember) {
        return __awaiter(this, void 0, void 0, function* () {
            this.selectedTwoFactorProviderType = null;
            return yield this.logInHelper(null, null, null, null, null, clientId, clientSecret, null, twoFactorProvider, twoFactorToken, remember);
        });
    }
    logOut(callback) {
        callback();
        this.messagingService.send('loggedOut');
    }
    getSupportedTwoFactorProviders(win) {
        const providers = [];
        if (this.twoFactorProvidersData == null) {
            return providers;
        }
        if (this.twoFactorProvidersData.has(twoFactorProviderType["a" /* TwoFactorProviderType */].OrganizationDuo) &&
            this.platformUtilsService.supportsDuo()) {
            providers.push(TwoFactorProviders[twoFactorProviderType["a" /* TwoFactorProviderType */].OrganizationDuo]);
        }
        if (this.twoFactorProvidersData.has(twoFactorProviderType["a" /* TwoFactorProviderType */].Authenticator)) {
            providers.push(TwoFactorProviders[twoFactorProviderType["a" /* TwoFactorProviderType */].Authenticator]);
        }
        if (this.twoFactorProvidersData.has(twoFactorProviderType["a" /* TwoFactorProviderType */].Yubikey)) {
            providers.push(TwoFactorProviders[twoFactorProviderType["a" /* TwoFactorProviderType */].Yubikey]);
        }
        if (this.twoFactorProvidersData.has(twoFactorProviderType["a" /* TwoFactorProviderType */].Duo) && this.platformUtilsService.supportsDuo()) {
            providers.push(TwoFactorProviders[twoFactorProviderType["a" /* TwoFactorProviderType */].Duo]);
        }
        if (this.twoFactorProvidersData.has(twoFactorProviderType["a" /* TwoFactorProviderType */].U2f) && this.platformUtilsService.supportsU2f(win)) {
            providers.push(TwoFactorProviders[twoFactorProviderType["a" /* TwoFactorProviderType */].U2f]);
        }
        if (this.twoFactorProvidersData.has(twoFactorProviderType["a" /* TwoFactorProviderType */].Email)) {
            providers.push(TwoFactorProviders[twoFactorProviderType["a" /* TwoFactorProviderType */].Email]);
        }
        return providers;
    }
    getDefaultTwoFactorProvider(u2fSupported) {
        if (this.twoFactorProvidersData == null) {
            return null;
        }
        if (this.selectedTwoFactorProviderType != null &&
            this.twoFactorProvidersData.has(this.selectedTwoFactorProviderType)) {
            return this.selectedTwoFactorProviderType;
        }
        let providerType = null;
        let providerPriority = -1;
        this.twoFactorProvidersData.forEach((value, type) => {
            const provider = TwoFactorProviders[type];
            if (provider != null && provider.priority > providerPriority) {
                if (type === twoFactorProviderType["a" /* TwoFactorProviderType */].U2f && !u2fSupported) {
                    return;
                }
                providerType = type;
                providerPriority = provider.priority;
            }
        });
        return providerType;
    }
    makePreloginKey(masterPassword, email) {
        return __awaiter(this, void 0, void 0, function* () {
            email = email.trim().toLowerCase();
            let kdf = null;
            let kdfIterations = null;
            try {
                const preloginResponse = yield this.apiService.postPrelogin(new PreloginRequest(email));
                if (preloginResponse != null) {
                    kdf = preloginResponse.kdf;
                    kdfIterations = preloginResponse.kdfIterations;
                }
            }
            catch (e) {
                if (e == null || e.statusCode !== 404) {
                    throw e;
                }
            }
            return this.cryptoService.makeKey(masterPassword, email, kdf, kdfIterations);
        });
    }
    authingWithApiKey() {
        return this.clientId != null && this.clientSecret != null;
    }
    authingWithSso() {
        return this.code != null && this.codeVerifier != null && this.ssoRedirectUrl != null;
    }
    authingWithPassword() {
        return this.email != null && this.masterPasswordHash != null;
    }
    logInHelper(email, hashedPassword, code, codeVerifier, redirectUrl, clientId, clientSecret, key, twoFactorProvider, twoFactorToken, remember) {
        return __awaiter(this, void 0, void 0, function* () {
            const storedTwoFactorToken = yield this.tokenService.getTwoFactorToken(email);
            const appId = yield this.appIdService.getAppId();
            const deviceRequest = new DeviceRequest(appId, this.platformUtilsService);
            let emailPassword = [];
            let codeCodeVerifier = [];
            let clientIdClientSecret = [];
            if (email != null && hashedPassword != null) {
                emailPassword = [email, hashedPassword];
            }
            else {
                emailPassword = null;
            }
            if (code != null && codeVerifier != null && redirectUrl != null) {
                codeCodeVerifier = [code, codeVerifier, redirectUrl];
            }
            else {
                codeCodeVerifier = null;
            }
            if (clientId != null && clientSecret != null) {
                clientIdClientSecret = [clientId, clientSecret];
            }
            else {
                clientIdClientSecret = null;
            }
            let request;
            if (twoFactorToken != null && twoFactorProvider != null) {
                request = new TokenRequest(emailPassword, codeCodeVerifier, clientIdClientSecret, twoFactorProvider, twoFactorToken, remember, deviceRequest);
            }
            else if (storedTwoFactorToken != null) {
                request = new TokenRequest(emailPassword, codeCodeVerifier, clientIdClientSecret, twoFactorProviderType["a" /* TwoFactorProviderType */].Remember, storedTwoFactorToken, false, deviceRequest);
            }
            else {
                request = new TokenRequest(emailPassword, codeCodeVerifier, clientIdClientSecret, null, null, false, deviceRequest);
            }
            const response = yield this.apiService.postIdentityToken(request);
            this.clearState();
            const result = new AuthResult();
            result.twoFactor = !response.accessToken;
            if (result.twoFactor) {
                // two factor required
                const twoFactorResponse = response;
                this.email = email;
                this.masterPasswordHash = hashedPassword;
                this.code = code;
                this.codeVerifier = codeVerifier;
                this.ssoRedirectUrl = redirectUrl;
                this.clientId = clientId;
                this.clientSecret = clientSecret;
                this.key = this.setCryptoKeys ? key : null;
                this.twoFactorProvidersData = twoFactorResponse.twoFactorProviders2;
                result.twoFactorProviders = twoFactorResponse.twoFactorProviders2;
                return result;
            }
            const tokenResponse = response;
            result.resetMasterPassword = tokenResponse.resetMasterPassword;
            if (tokenResponse.twoFactorToken != null) {
                yield this.tokenService.setTwoFactorToken(tokenResponse.twoFactorToken, email);
            }
            yield this.tokenService.setTokens(tokenResponse.accessToken, tokenResponse.refreshToken);
            yield this.userService.setInformation(this.tokenService.getUserId(), this.tokenService.getEmail(), tokenResponse.kdf, tokenResponse.kdfIterations);
            if (this.setCryptoKeys) {
                if (key != null) {
                    yield this.cryptoService.setKey(key);
                }
                if (hashedPassword != null) {
                    yield this.cryptoService.setKeyHash(hashedPassword);
                }
                // Skip this step during SSO new user flow. No key is returned from server.
                if (code == null || tokenResponse.key != null) {
                    yield this.cryptoService.setEncKey(tokenResponse.key);
                    // User doesn't have a key pair yet (old account), let's generate one for them
                    if (tokenResponse.privateKey == null) {
                        try {
                            const keyPair = yield this.cryptoService.makeKeyPair();
                            yield this.apiService.postAccountKeys(new keysRequest["a" /* KeysRequest */](keyPair[0], keyPair[1].encryptedString));
                            tokenResponse.privateKey = keyPair[1].encryptedString;
                        }
                        catch (e) {
                            // tslint:disable-next-line
                            console.error(e);
                        }
                    }
                    yield this.cryptoService.setEncPrivateKey(tokenResponse.privateKey);
                }
            }
            if (this.vaultTimeoutService != null) {
                this.vaultTimeoutService.biometricLocked = false;
            }
            this.messagingService.send('loggedIn');
            return result;
        });
    }
    clearState() {
        this.key = null;
        this.email = null;
        this.masterPasswordHash = null;
        this.code = null;
        this.codeVerifier = null;
        this.ssoRedirectUrl = null;
        this.clientId = null;
        this.clientSecret = null;
        this.twoFactorProvidersData = null;
        this.selectedTwoFactorProviderType = null;
    }
}


/***/ }),

/***/ 129:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Cipher; });
/* harmony import */ var _enums_cipherType__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(11);
/* harmony import */ var _data_cipherData__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(76);
/* harmony import */ var _view_cipherView__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(72);
/* harmony import */ var _attachment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(242);
/* harmony import */ var _card__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(243);
/* harmony import */ var _domainBase__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(30);
/* harmony import */ var _field__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(244);
/* harmony import */ var _identity__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(245);
/* harmony import */ var _login__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(246);
/* harmony import */ var _password__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(248);
/* harmony import */ var _secureNote__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(249);
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};











class Cipher extends _domainBase__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"] {
    constructor(obj, alreadyEncrypted = false, localData = null) {
        super();
        if (obj == null) {
            return;
        }
        this.buildDomainModel(this, obj, {
            id: null,
            userId: null,
            organizationId: null,
            folderId: null,
            name: null,
            notes: null,
        }, alreadyEncrypted, ['id', 'userId', 'organizationId', 'folderId']);
        this.type = obj.type;
        this.favorite = obj.favorite;
        this.organizationUseTotp = obj.organizationUseTotp;
        this.edit = obj.edit;
        if (obj.viewPassword != null) {
            this.viewPassword = obj.viewPassword;
        }
        else {
            this.viewPassword = true; // Default for already synced Ciphers without viewPassword
        }
        this.revisionDate = obj.revisionDate != null ? new Date(obj.revisionDate) : null;
        this.collectionIds = obj.collectionIds;
        this.localData = localData;
        this.deletedDate = obj.deletedDate != null ? new Date(obj.deletedDate) : null;
        switch (this.type) {
            case _enums_cipherType__WEBPACK_IMPORTED_MODULE_0__[/* CipherType */ "a"].Login:
                this.login = new _login__WEBPACK_IMPORTED_MODULE_8__[/* Login */ "a"](obj.login, alreadyEncrypted);
                break;
            case _enums_cipherType__WEBPACK_IMPORTED_MODULE_0__[/* CipherType */ "a"].SecureNote:
                this.secureNote = new _secureNote__WEBPACK_IMPORTED_MODULE_10__[/* SecureNote */ "a"](obj.secureNote, alreadyEncrypted);
                break;
            case _enums_cipherType__WEBPACK_IMPORTED_MODULE_0__[/* CipherType */ "a"].Card:
                this.card = new _card__WEBPACK_IMPORTED_MODULE_4__[/* Card */ "a"](obj.card, alreadyEncrypted);
                break;
            case _enums_cipherType__WEBPACK_IMPORTED_MODULE_0__[/* CipherType */ "a"].Identity:
                this.identity = new _identity__WEBPACK_IMPORTED_MODULE_7__[/* Identity */ "a"](obj.identity, alreadyEncrypted);
                break;
            default:
                break;
        }
        if (obj.attachments != null) {
            this.attachments = obj.attachments.map((a) => new _attachment__WEBPACK_IMPORTED_MODULE_3__[/* Attachment */ "a"](a, alreadyEncrypted));
        }
        else {
            this.attachments = null;
        }
        if (obj.fields != null) {
            this.fields = obj.fields.map((f) => new _field__WEBPACK_IMPORTED_MODULE_6__[/* Field */ "a"](f, alreadyEncrypted));
        }
        else {
            this.fields = null;
        }
        if (obj.passwordHistory != null) {
            this.passwordHistory = obj.passwordHistory.map((ph) => new _password__WEBPACK_IMPORTED_MODULE_9__[/* Password */ "a"](ph, alreadyEncrypted));
        }
        else {
            this.passwordHistory = null;
        }
    }
    decrypt() {
        return __awaiter(this, void 0, void 0, function* () {
            const model = new _view_cipherView__WEBPACK_IMPORTED_MODULE_2__[/* CipherView */ "a"](this);
            yield this.decryptObj(model, {
                name: null,
                notes: null,
            }, this.organizationId);
            switch (this.type) {
                case _enums_cipherType__WEBPACK_IMPORTED_MODULE_0__[/* CipherType */ "a"].Login:
                    model.login = yield this.login.decrypt(this.organizationId);
                    break;
                case _enums_cipherType__WEBPACK_IMPORTED_MODULE_0__[/* CipherType */ "a"].SecureNote:
                    model.secureNote = yield this.secureNote.decrypt(this.organizationId);
                    break;
                case _enums_cipherType__WEBPACK_IMPORTED_MODULE_0__[/* CipherType */ "a"].Card:
                    model.card = yield this.card.decrypt(this.organizationId);
                    break;
                case _enums_cipherType__WEBPACK_IMPORTED_MODULE_0__[/* CipherType */ "a"].Identity:
                    model.identity = yield this.identity.decrypt(this.organizationId);
                    break;
                default:
                    break;
            }
            const orgId = this.organizationId;
            if (this.attachments != null && this.attachments.length > 0) {
                const attachments = [];
                yield this.attachments.reduce((promise, attachment) => {
                    return promise.then(() => {
                        return attachment.decrypt(orgId);
                    }).then((decAttachment) => {
                        attachments.push(decAttachment);
                    });
                }, Promise.resolve());
                model.attachments = attachments;
            }
            if (this.fields != null && this.fields.length > 0) {
                const fields = [];
                yield this.fields.reduce((promise, field) => {
                    return promise.then(() => {
                        return field.decrypt(orgId);
                    }).then((decField) => {
                        fields.push(decField);
                    });
                }, Promise.resolve());
                model.fields = fields;
            }
            if (this.passwordHistory != null && this.passwordHistory.length > 0) {
                const passwordHistory = [];
                yield this.passwordHistory.reduce((promise, ph) => {
                    return promise.then(() => {
                        return ph.decrypt(orgId);
                    }).then((decPh) => {
                        passwordHistory.push(decPh);
                    });
                }, Promise.resolve());
                model.passwordHistory = passwordHistory;
            }
            return model;
        });
    }
    toCipherData(userId) {
        const c = new _data_cipherData__WEBPACK_IMPORTED_MODULE_1__[/* CipherData */ "a"]();
        c.id = this.id;
        c.organizationId = this.organizationId;
        c.folderId = this.folderId;
        c.userId = this.organizationId != null ? userId : null;
        c.edit = this.edit;
        c.viewPassword = this.viewPassword;
        c.organizationUseTotp = this.organizationUseTotp;
        c.favorite = this.favorite;
        c.revisionDate = this.revisionDate != null ? this.revisionDate.toISOString() : null;
        c.type = this.type;
        c.collectionIds = this.collectionIds;
        c.deletedDate = this.deletedDate != null ? this.deletedDate.toISOString() : null;
        this.buildDataModel(this, c, {
            name: null,
            notes: null,
        });
        switch (c.type) {
            case _enums_cipherType__WEBPACK_IMPORTED_MODULE_0__[/* CipherType */ "a"].Login:
                c.login = this.login.toLoginData();
                break;
            case _enums_cipherType__WEBPACK_IMPORTED_MODULE_0__[/* CipherType */ "a"].SecureNote:
                c.secureNote = this.secureNote.toSecureNoteData();
                break;
            case _enums_cipherType__WEBPACK_IMPORTED_MODULE_0__[/* CipherType */ "a"].Card:
                c.card = this.card.toCardData();
                break;
            case _enums_cipherType__WEBPACK_IMPORTED_MODULE_0__[/* CipherType */ "a"].Identity:
                c.identity = this.identity.toIdentityData();
                break;
            default:
                break;
        }
        if (this.fields != null) {
            c.fields = this.fields.map((f) => f.toFieldData());
        }
        if (this.attachments != null) {
            c.attachments = this.attachments.map((a) => a.toAttachmentData());
        }
        if (this.passwordHistory != null) {
            c.passwordHistory = this.passwordHistory.map((ph) => ph.toPasswordHistoryData());
        }
        return c;
    }
}


/***/ }),

/***/ 13:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return BrowserApi; });
/* harmony import */ var _safariApp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(28);
/* harmony import */ var jslib_misc_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8);
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class BrowserApi {
    static getTabFromCurrentWindowId() {
        return __awaiter(this, void 0, void 0, function* () {
            if (BrowserApi.isChromeApi) {
                return yield BrowserApi.tabsQueryFirst({
                    active: true,
                    windowId: chrome.windows.WINDOW_ID_CURRENT,
                });
            }
            else if (BrowserApi.isSafariApi) {
                return yield BrowserApi.getTabFromCurrentWindow();
            }
        });
    }
    static getTabFromCurrentWindow() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield BrowserApi.tabsQueryFirst({
                active: true,
                currentWindow: true,
            });
        });
    }
    static getActiveTabs() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield BrowserApi.tabsQuery({
                active: true,
            });
        });
    }
    static tabsQuery(options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (BrowserApi.isChromeApi) {
                return new Promise((resolve) => {
                    chrome.tabs.query(options, (tabs) => {
                        resolve(tabs);
                    });
                });
            }
            else if (BrowserApi.isSafariApi) {
                const tabs = yield _safariApp__WEBPACK_IMPORTED_MODULE_0__[/* SafariApp */ "a"].sendMessageToApp('tabs_query', JSON.stringify(options));
                return tabs != null ? JSON.parse(tabs) : null;
            }
        });
    }
    static tabsQueryFirst(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const tabs = yield BrowserApi.tabsQuery(options);
            if (tabs.length > 0) {
                return tabs[0];
            }
            return null;
        });
    }
    static tabSendMessageData(tab, command, data = null) {
        const obj = {
            command: command,
        };
        if (data != null) {
            obj.data = data;
        }
        return BrowserApi.tabSendMessage(tab, obj);
    }
    static tabSendMessage(tab, obj, options = null) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!tab || !tab.id) {
                return;
            }
            if (BrowserApi.isChromeApi) {
                return new Promise((resolve) => {
                    chrome.tabs.sendMessage(tab.id, obj, options, () => {
                        if (chrome.runtime.lastError) {
                            // Some error happened
                        }
                        resolve();
                    });
                });
            }
            else if (BrowserApi.isSafariApi) {
                if (options != null && options.frameId != null && obj.bitwardenFrameId == null) {
                    obj.bitwardenFrameId = options.frameId;
                }
                yield _safariApp__WEBPACK_IMPORTED_MODULE_0__[/* SafariApp */ "a"].sendMessageToApp('tabs_message', JSON.stringify({
                    tab: tab,
                    obj: JSON.stringify(obj),
                    options: options,
                }), true);
            }
        });
    }
    static getBackgroundPage() {
        if (BrowserApi.isChromeApi) {
            return chrome.extension.getBackgroundPage();
        }
        else if (BrowserApi.isSafariApi) {
            return window;
        }
        else {
            return null;
        }
    }
    static getApplicationVersion() {
        if (BrowserApi.isChromeApi) {
            return chrome.runtime.getManifest().version;
        }
        else if (BrowserApi.isSafariApi) {
            return window.bitwardenApplicationVersion;
        }
        else {
            return null;
        }
    }
    static isPopupOpen() {
        return __awaiter(this, void 0, void 0, function* () {
            if (BrowserApi.isChromeApi) {
                return Promise.resolve(chrome.extension.getViews({ type: 'popup' }).length > 0);
            }
            else if (BrowserApi.isSafariApi) {
                const open = yield _safariApp__WEBPACK_IMPORTED_MODULE_0__[/* SafariApp */ "a"].sendMessageToApp('isPopoverOpen');
                return open === 'true';
            }
            else {
                return Promise.resolve(false);
            }
        });
    }
    static createNewTab(url, extensionPage = false) {
        if (BrowserApi.isChromeApi) {
            chrome.tabs.create({ url: url });
        }
        else if (BrowserApi.isSafariApi) {
            _safariApp__WEBPACK_IMPORTED_MODULE_0__[/* SafariApp */ "a"].sendMessageToApp('createNewTab', url, true);
        }
    }
    static messageListener(name, callback) {
        if (BrowserApi.isChromeApi) {
            chrome.runtime.onMessage.addListener((msg, sender, response) => {
                callback(msg, sender, response);
            });
        }
        else if (BrowserApi.isSafariApi) {
            _safariApp__WEBPACK_IMPORTED_MODULE_0__[/* SafariApp */ "a"].addMessageListener(name, (message, sender, response) => {
                if (message.bitwardenFrameId != null) {
                    if (sender != null && typeof (sender) === 'object' && sender.frameId == null) {
                        sender.frameId = message.bitwardenFrameId;
                    }
                }
                callback(message, sender, response);
            });
        }
    }
    static closePopup(win) {
        if (BrowserApi.isWebExtensionsApi && BrowserApi.isFirefoxOnAndroid) {
            // Reactivating the active tab dismisses the popup tab. The promise final
            // condition is only called if the popup wasn't already dismissed (future proofing).
            // ref: https://bugzilla.mozilla.org/show_bug.cgi?id=1433604
            browser.tabs.update({ active: true }).finally(win.close);
        }
        else if (BrowserApi.isWebExtensionsApi || BrowserApi.isChromeApi) {
            win.close();
        }
        else if (BrowserApi.isSafariApi) {
            _safariApp__WEBPACK_IMPORTED_MODULE_0__[/* SafariApp */ "a"].sendMessageToApp('hidePopover');
        }
    }
    static downloadFile(win, blobData, blobOptions, fileName) {
        if (BrowserApi.isSafariApi) {
            const type = blobOptions != null ? blobOptions.type : null;
            let data = null;
            if (type === 'text/plain' && typeof (blobData) === 'string') {
                data = blobData;
            }
            else {
                data = jslib_misc_utils__WEBPACK_IMPORTED_MODULE_1__[/* Utils */ "a"].fromBufferToB64(blobData);
            }
            _safariApp__WEBPACK_IMPORTED_MODULE_0__[/* SafariApp */ "a"].sendMessageToApp('downloadFile', JSON.stringify({
                blobData: data,
                blobOptions: blobOptions,
                fileName: fileName,
            }), true);
        }
        else {
            const blob = new Blob([blobData], blobOptions);
            if (navigator.msSaveOrOpenBlob) {
                navigator.msSaveBlob(blob, fileName);
            }
            else {
                const a = win.document.createElement('a');
                a.href = URL.createObjectURL(blob);
                a.download = fileName;
                win.document.body.appendChild(a);
                a.click();
                win.document.body.removeChild(a);
            }
        }
    }
    static gaFilter() {
        return "production" !== 'production';
    }
    static getUILanguage(win) {
        if (BrowserApi.isSafariApi) {
            return win.navigator.language;
        }
        else {
            return chrome.i18n.getUILanguage();
        }
    }
    static reloadExtension(win) {
        if (win != null) {
            return win.location.reload(true);
        }
        else if (BrowserApi.isSafariApi) {
            _safariApp__WEBPACK_IMPORTED_MODULE_0__[/* SafariApp */ "a"].sendMessageToApp('reloadExtension');
        }
        else if (!BrowserApi.isSafariApi) {
            return chrome.runtime.reload();
        }
    }
    static reloadOpenWindows() {
        if (!BrowserApi.isSafariApi) {
            const views = chrome.extension.getViews();
            views.filter((w) => w.location.href != null).forEach((w) => {
                w.location.reload();
            });
        }
    }
}
BrowserApi.isWebExtensionsApi = (typeof browser !== 'undefined');
BrowserApi.isSafariApi = window.safariAppExtension === true;
BrowserApi.isChromeApi = !BrowserApi.isSafariApi && (typeof chrome !== 'undefined');
BrowserApi.isFirefoxOnAndroid = navigator.userAgent.indexOf('Firefox/') !== -1 &&
    navigator.userAgent.indexOf('Android') !== -1;


/***/ }),

/***/ 14:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return TwoFactorProviderType; });
var TwoFactorProviderType;
(function (TwoFactorProviderType) {
    TwoFactorProviderType[TwoFactorProviderType["Authenticator"] = 0] = "Authenticator";
    TwoFactorProviderType[TwoFactorProviderType["Email"] = 1] = "Email";
    TwoFactorProviderType[TwoFactorProviderType["Duo"] = 2] = "Duo";
    TwoFactorProviderType[TwoFactorProviderType["Yubikey"] = 3] = "Yubikey";
    TwoFactorProviderType[TwoFactorProviderType["U2f"] = 4] = "U2f";
    TwoFactorProviderType[TwoFactorProviderType["Remember"] = 5] = "Remember";
    TwoFactorProviderType[TwoFactorProviderType["OrganizationDuo"] = 6] = "OrganizationDuo";
})(TwoFactorProviderType || (TwoFactorProviderType = {}));


/***/ }),

/***/ 144:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SecureNoteType; });
var SecureNoteType;
(function (SecureNoteType) {
    SecureNoteType[SecureNoteType["Generic"] = 0] = "Generic";
})(SecureNoteType || (SecureNoteType = {}));


/***/ }),

/***/ 145:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return AnalyticsIds; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Analytics; });
/* harmony import */ var _services_constants_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6);
/* harmony import */ var _enums_deviceType__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(15);
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


const GaObj = 'ga';
const AnalyticsIds = {
    [_enums_deviceType__WEBPACK_IMPORTED_MODULE_1__[/* DeviceType */ "a"].ChromeExtension]: 'UA-81915606-6',
    [_enums_deviceType__WEBPACK_IMPORTED_MODULE_1__[/* DeviceType */ "a"].FirefoxExtension]: 'UA-81915606-7',
    [_enums_deviceType__WEBPACK_IMPORTED_MODULE_1__[/* DeviceType */ "a"].OperaExtension]: 'UA-81915606-8',
    [_enums_deviceType__WEBPACK_IMPORTED_MODULE_1__[/* DeviceType */ "a"].EdgeExtension]: 'UA-81915606-9',
    [_enums_deviceType__WEBPACK_IMPORTED_MODULE_1__[/* DeviceType */ "a"].VivaldiExtension]: 'UA-81915606-15',
    [_enums_deviceType__WEBPACK_IMPORTED_MODULE_1__[/* DeviceType */ "a"].SafariExtension]: 'UA-81915606-16',
    [_enums_deviceType__WEBPACK_IMPORTED_MODULE_1__[/* DeviceType */ "a"].WindowsDesktop]: 'UA-81915606-17',
    [_enums_deviceType__WEBPACK_IMPORTED_MODULE_1__[/* DeviceType */ "a"].LinuxDesktop]: 'UA-81915606-19',
    [_enums_deviceType__WEBPACK_IMPORTED_MODULE_1__[/* DeviceType */ "a"].MacOsDesktop]: 'UA-81915606-18',
};
class Analytics {
    constructor(win, gaFilter, platformUtilsService, storageService, appIdService, dependencyResolver) {
        this.gaFilter = gaFilter;
        this.platformUtilsService = platformUtilsService;
        this.storageService = storageService;
        this.appIdService = appIdService;
        this.dependencyResolver = dependencyResolver;
        this.gaTrackingId = null;
        this.defaultDisabled = false;
        if (dependencyResolver != null) {
            const deps = dependencyResolver();
            if (platformUtilsService == null && deps.platformUtilsService) {
                this.platformUtilsService = deps.platformUtilsService;
            }
            if (storageService == null && deps.storageService) {
                this.storageService = deps.storageService;
            }
            if (appIdService == null && deps.appIdService) {
                this.appIdService = deps.appIdService;
            }
        }
        this.appVersion = this.platformUtilsService.getApplicationVersion();
        this.defaultDisabled = this.platformUtilsService.getDevice() === _enums_deviceType__WEBPACK_IMPORTED_MODULE_1__[/* DeviceType */ "a"].FirefoxExtension ||
            this.platformUtilsService.isMacAppStore();
        this.gaTrackingId = this.platformUtilsService.analyticsId();
        win.GoogleAnalyticsObject = GaObj;
        win[GaObj] = (action, param1, param2) => __awaiter(this, void 0, void 0, function* () {
            yield this.ga(action, param1, param2);
        });
    }
    ga(action, param1, param2) {
        return __awaiter(this, void 0, void 0, function* () {
            return;
            if (this.gaFilter != null && this.gaFilter()) {
                return;
            }
            const disabled = yield this.storageService.get(_services_constants_service__WEBPACK_IMPORTED_MODULE_0__[/* ConstantsService */ "a"].disableGaKey);
            if ((this.defaultDisabled && disabled == null) || disabled != null && disabled) {
                return;
            }
            if (action !== 'send' || !param1) {
                return;
            }
            const gaAnonAppId = yield this.appIdService.getAnonymousAppId();
            const version = encodeURIComponent(this.appVersion);
            let message = 'v=1&tid=' + this.gaTrackingId + '&cid=' + gaAnonAppId + '&cd1=' + version;
            if (param1 === 'pageview' && param2) {
                message += this.gaTrackPageView(param2);
            }
            else if (typeof param1 === 'object' && param1.hitType === 'pageview') {
                message += this.gaTrackPageView(param1.page);
            }
            else if (param1 === 'event' && param2) {
                message += this.gaTrackEvent(param2);
            }
            else if (typeof param1 === 'object' && param1.hitType === 'event') {
                message += this.gaTrackEvent(param1);
            }
            const request = new XMLHttpRequest();
            request.open('POST', 'https://www.google-analytics.com/collect', true);
            request.send(message);
        });
    }
    gaTrackEvent(options) {
        return '&t=event&ec=' + (options.eventCategory ? encodeURIComponent(options.eventCategory) : 'Event') +
            '&ea=' + encodeURIComponent(options.eventAction) +
            (options.eventLabel ? '&el=' + encodeURIComponent(options.eventLabel) : '') +
            (options.eventValue ? '&ev=' + encodeURIComponent(options.eventValue) : '') +
            (options.page ? '&dp=' + this.cleanPagePath(options.page) : '');
    }
    gaTrackPageView(pagePath) {
        return '&t=pageview&dp=' + this.cleanPagePath(pagePath);
    }
    cleanPagePath(pagePath) {
        const paramIndex = pagePath.indexOf('?');
        if (paramIndex > -1) {
            pagePath = pagePath.substring(0, paramIndex);
        }
        if (pagePath.indexOf('!/') === 0 || pagePath.indexOf('#/') === 0) {
            pagePath = pagePath.substring(1);
        }
        const pathParts = pagePath.split('/');
        const newPathParts = [];
        pathParts.forEach((p) => {
            if (p.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i)) {
                newPathParts.push('__guid__');
            }
            else {
                newPathParts.push(p);
            }
        });
        return encodeURIComponent(newPathParts.join('/'));
    }
}


/***/ }),

/***/ 148:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return KdfType; });
var KdfType;
(function (KdfType) {
    KdfType[KdfType["PBKDF2_SHA256"] = 0] = "PBKDF2_SHA256";
})(KdfType || (KdfType = {}));


/***/ }),

/***/ 149:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return OrganizationUserStatusType; });
var OrganizationUserStatusType;
(function (OrganizationUserStatusType) {
    OrganizationUserStatusType[OrganizationUserStatusType["Invited"] = 0] = "Invited";
    OrganizationUserStatusType[OrganizationUserStatusType["Accepted"] = 1] = "Accepted";
    OrganizationUserStatusType[OrganizationUserStatusType["Confirmed"] = 2] = "Confirmed";
})(OrganizationUserStatusType || (OrganizationUserStatusType = {}));


/***/ }),

/***/ 15:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DeviceType; });
var DeviceType;
(function (DeviceType) {
    DeviceType[DeviceType["Android"] = 0] = "Android";
    DeviceType[DeviceType["iOS"] = 1] = "iOS";
    DeviceType[DeviceType["ChromeExtension"] = 2] = "ChromeExtension";
    DeviceType[DeviceType["FirefoxExtension"] = 3] = "FirefoxExtension";
    DeviceType[DeviceType["OperaExtension"] = 4] = "OperaExtension";
    DeviceType[DeviceType["EdgeExtension"] = 5] = "EdgeExtension";
    DeviceType[DeviceType["WindowsDesktop"] = 6] = "WindowsDesktop";
    DeviceType[DeviceType["MacOsDesktop"] = 7] = "MacOsDesktop";
    DeviceType[DeviceType["LinuxDesktop"] = 8] = "LinuxDesktop";
    DeviceType[DeviceType["ChromeBrowser"] = 9] = "ChromeBrowser";
    DeviceType[DeviceType["FirefoxBrowser"] = 10] = "FirefoxBrowser";
    DeviceType[DeviceType["OperaBrowser"] = 11] = "OperaBrowser";
    DeviceType[DeviceType["EdgeBrowser"] = 12] = "EdgeBrowser";
    DeviceType[DeviceType["IEBrowser"] = 13] = "IEBrowser";
    DeviceType[DeviceType["UnknownBrowser"] = 14] = "UnknownBrowser";
    DeviceType[DeviceType["AndroidAmazon"] = 15] = "AndroidAmazon";
    DeviceType[DeviceType["UWP"] = 16] = "UWP";
    DeviceType[DeviceType["SafariBrowser"] = 17] = "SafariBrowser";
    DeviceType[DeviceType["VivaldiBrowser"] = 18] = "VivaldiBrowser";
    DeviceType[DeviceType["VivaldiExtension"] = 19] = "VivaldiExtension";
    DeviceType[DeviceType["SafariExtension"] = 20] = "SafariExtension";
})(DeviceType || (DeviceType = {}));


/***/ }),

/***/ 152:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SendData; });
/* harmony import */ var _enums_sendType__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(52);
/* harmony import */ var _sendFileData__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(250);
/* harmony import */ var _sendTextData__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(251);



class SendData {
    constructor(response, userId) {
        if (response == null) {
            return;
        }
        this.id = response.id;
        this.accessId = response.accessId;
        this.userId = userId;
        this.type = response.type;
        this.name = response.name;
        this.notes = response.notes;
        this.key = response.key;
        this.maxAccessCount = response.maxAccessCount;
        this.accessCount = response.accessCount;
        this.revisionDate = response.revisionDate;
        this.expirationDate = response.expirationDate;
        this.deletionDate = response.deletionDate;
        this.password = response.password;
        this.disabled = response.disable;
        switch (this.type) {
            case _enums_sendType__WEBPACK_IMPORTED_MODULE_0__[/* SendType */ "a"].Text:
                this.text = new _sendTextData__WEBPACK_IMPORTED_MODULE_2__[/* SendTextData */ "a"](response.text);
                break;
            case _enums_sendType__WEBPACK_IMPORTED_MODULE_0__[/* SendType */ "a"].File:
                this.file = new _sendFileData__WEBPACK_IMPORTED_MODULE_1__[/* SendFileData */ "a"](response.file);
                break;
            default:
                break;
        }
    }
}


/***/ }),

/***/ 164:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SendFileApi; });
/* harmony import */ var _response_baseResponse__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(12);

class SendFileApi extends _response_baseResponse__WEBPACK_IMPORTED_MODULE_0__[/* BaseResponse */ "a"] {
    constructor(data = null) {
        super(data);
        if (data == null) {
            return;
        }
        this.id = this.getResponseProperty('Id');
        this.url = this.getResponseProperty('Url');
        this.fileName = this.getResponseProperty('FileName');
        this.key = this.getResponseProperty('Key');
        this.size = this.getResponseProperty('Size');
        this.sizeName = this.getResponseProperty('SizeName');
    }
}


/***/ }),

/***/ 165:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SendTextApi; });
/* harmony import */ var _response_baseResponse__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(12);

class SendTextApi extends _response_baseResponse__WEBPACK_IMPORTED_MODULE_0__[/* BaseResponse */ "a"] {
    constructor(data = null) {
        super(data);
        if (data == null) {
            return;
        }
        this.text = this.getResponseProperty('Text');
        this.hidden = this.getResponseProperty('Hidden') || false;
    }
}


/***/ }),

/***/ 184:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AttachmentView; });
class AttachmentView {
    constructor(a) {
        this.id = null;
        this.url = null;
        this.size = null;
        this.sizeName = null;
        this.fileName = null;
        this.key = null;
        if (!a) {
            return;
        }
        this.id = a.id;
        this.url = a.url;
        this.size = a.size;
        this.sizeName = a.sizeName;
    }
    get fileSize() {
        try {
            if (this.size != null) {
                return parseInt(this.size, null);
            }
        }
        catch (_a) { }
        return 0;
    }
}


/***/ }),

/***/ 185:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return StateService; });
class StateService {
    constructor() {
        this.state = {};
    }
    get(key) {
        if (this.state.hasOwnProperty(key)) {
            return Promise.resolve(this.state[key]);
        }
        return Promise.resolve(null);
    }
    save(key, obj) {
        this.state[key] = obj;
        return Promise.resolve();
    }
    remove(key) {
        delete this.state[key];
        return Promise.resolve();
    }
    purge() {
        this.state = {};
        return Promise.resolve();
    }
}


/***/ }),

/***/ 188:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return BrowserMessagingService; });
/* harmony import */ var _browser_browserApi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(13);
/* harmony import */ var _browser_safariApp__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(28);


class BrowserMessagingService {
    send(subscriber, arg = {}) {
        const message = Object.assign({}, { command: subscriber }, arg);
        if (_browser_browserApi__WEBPACK_IMPORTED_MODULE_0__[/* BrowserApi */ "a"].isSafariApi) {
            _browser_safariApp__WEBPACK_IMPORTED_MODULE_1__[/* SafariApp */ "a"].sendMessageToApp(subscriber, arg);
            _browser_safariApp__WEBPACK_IMPORTED_MODULE_1__[/* SafariApp */ "a"].sendMessageToListeners(message, 'BrowserMessagingService', null);
        }
        else {
            chrome.runtime.sendMessage(message);
        }
    }
}


/***/ }),

/***/ 189:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SearchService; });
/* harmony import */ var lunr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(91);
/* harmony import */ var lunr__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lunr__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _enums_cipherType__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(11);
/* harmony import */ var _enums_fieldType__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(46);
/* harmony import */ var _enums_uriMatchType__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(25);
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




class SearchService {
    constructor(cipherService) {
        this.cipherService = cipherService;
        this.indexing = false;
        this.index = null;
    }
    clearIndex() {
        this.index = null;
    }
    isSearchable(query) {
        const notSearchable = query == null || (this.index == null && query.length < 2) ||
            (this.index != null && query.length < 2 && query.indexOf('>') !== 0);
        return !notSearchable;
    }
    indexCiphers() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.indexing) {
                return;
            }
            // tslint:disable-next-line
            console.time('search indexing');
            this.indexing = true;
            this.index = null;
            const builder = new lunr__WEBPACK_IMPORTED_MODULE_0__["Builder"]();
            builder.ref('id');
            builder.field('shortid', { boost: 100, extractor: (c) => c.id.substr(0, 8) });
            builder.field('name', { boost: 10 });
            builder.field('subtitle', {
                boost: 5,
                extractor: (c) => {
                    if (c.subTitle != null && c.type === _enums_cipherType__WEBPACK_IMPORTED_MODULE_1__[/* CipherType */ "a"].Card) {
                        return c.subTitle.replace(/\*/g, '');
                    }
                    return c.subTitle;
                },
            });
            builder.field('notes');
            builder.field('login.username', {
                extractor: (c) => c.type === _enums_cipherType__WEBPACK_IMPORTED_MODULE_1__[/* CipherType */ "a"].Login && c.login != null ? c.login.username : null,
            });
            builder.field('login.uris', { boost: 2, extractor: (c) => this.uriExtractor(c) });
            builder.field('fields', { extractor: (c) => this.fieldExtractor(c, false) });
            builder.field('fields_joined', { extractor: (c) => this.fieldExtractor(c, true) });
            builder.field('attachments', { extractor: (c) => this.attachmentExtractor(c, false) });
            builder.field('attachments_joined', { extractor: (c) => this.attachmentExtractor(c, true) });
            builder.field('organizationid', { extractor: (c) => c.organizationId });
            const ciphers = yield this.cipherService.getAllDecrypted();
            ciphers.forEach((c) => builder.add(c));
            this.index = builder.build();
            this.indexing = false;
            // tslint:disable-next-line
            console.timeEnd('search indexing');
        });
    }
    searchCiphers(query, filter = null, ciphers = null) {
        return __awaiter(this, void 0, void 0, function* () {
            const results = [];
            if (query != null) {
                query = query.trim().toLowerCase();
            }
            if (query === '') {
                query = null;
            }
            if (ciphers == null) {
                ciphers = yield this.cipherService.getAllDecrypted();
            }
            if (filter != null && Array.isArray(filter) && filter.length > 0) {
                ciphers = ciphers.filter((c) => filter.every((f) => f == null || f(c)));
            }
            else if (filter != null) {
                ciphers = ciphers.filter(filter);
            }
            if (!this.isSearchable(query)) {
                return ciphers;
            }
            if (this.indexing) {
                yield new Promise((r) => setTimeout(r, 250));
                if (this.indexing) {
                    yield new Promise((r) => setTimeout(r, 500));
                }
            }
            const index = this.getIndexForSearch();
            if (index == null) {
                // Fall back to basic search if index is not available
                return this.searchCiphersBasic(ciphers, query);
            }
            const ciphersMap = new Map();
            ciphers.forEach((c) => ciphersMap.set(c.id, c));
            let searchResults = null;
            const isQueryString = query != null && query.length > 1 && query.indexOf('>') === 0;
            if (isQueryString) {
                try {
                    searchResults = index.search(query.substr(1).trim());
                }
                catch (_a) { }
            }
            else {
                // tslint:disable-next-line
                const soWild = lunr__WEBPACK_IMPORTED_MODULE_0__["Query"].wildcard.LEADING | lunr__WEBPACK_IMPORTED_MODULE_0__["Query"].wildcard.TRAILING;
                searchResults = index.query((q) => {
                    lunr__WEBPACK_IMPORTED_MODULE_0__["tokenizer"](query).forEach((token) => {
                        const t = token.toString();
                        q.term(t, { fields: ['name'], wildcard: soWild });
                        q.term(t, { fields: ['subtitle'], wildcard: soWild });
                        q.term(t, { fields: ['login.uris'], wildcard: soWild });
                        q.term(t, {});
                    });
                });
            }
            if (searchResults != null) {
                searchResults.forEach((r) => {
                    if (ciphersMap.has(r.ref)) {
                        results.push(ciphersMap.get(r.ref));
                    }
                });
            }
            return results;
        });
    }
    searchCiphersBasic(ciphers, query, deleted = false) {
        query = query.trim().toLowerCase();
        return ciphers.filter((c) => {
            if (deleted !== c.isDeleted) {
                return false;
            }
            if (c.name != null && c.name.toLowerCase().indexOf(query) > -1) {
                return true;
            }
            if (query.length >= 8 && c.id.startsWith(query)) {
                return true;
            }
            if (c.subTitle != null && c.subTitle.toLowerCase().indexOf(query) > -1) {
                return true;
            }
            if (c.login && c.login.uri != null && c.login.uri.toLowerCase().indexOf(query) > -1) {
                return true;
            }
            return false;
        });
    }
    getIndexForSearch() {
        return this.index;
    }
    fieldExtractor(c, joined) {
        if (!c.hasFields) {
            return null;
        }
        let fields = [];
        c.fields.forEach((f) => {
            if (f.name != null) {
                fields.push(f.name);
            }
            if (f.type === _enums_fieldType__WEBPACK_IMPORTED_MODULE_2__[/* FieldType */ "a"].Text && f.value != null) {
                fields.push(f.value);
            }
        });
        fields = fields.filter((f) => f.trim() !== '');
        if (fields.length === 0) {
            return null;
        }
        return joined ? fields.join(' ') : fields;
    }
    attachmentExtractor(c, joined) {
        if (!c.hasAttachments) {
            return null;
        }
        let attachments = [];
        c.attachments.forEach((a) => {
            if (a != null && a.fileName != null) {
                if (joined && a.fileName.indexOf('.') > -1) {
                    attachments.push(a.fileName.substr(0, a.fileName.lastIndexOf('.')));
                }
                else {
                    attachments.push(a.fileName);
                }
            }
        });
        attachments = attachments.filter((f) => f.trim() !== '');
        if (attachments.length === 0) {
            return null;
        }
        return joined ? attachments.join(' ') : attachments;
    }
    uriExtractor(c) {
        if (c.type !== _enums_cipherType__WEBPACK_IMPORTED_MODULE_1__[/* CipherType */ "a"].Login || c.login == null || !c.login.hasUris) {
            return null;
        }
        const uris = [];
        c.login.uris.forEach((u) => {
            if (u.uri == null || u.uri === '') {
                return;
            }
            if (u.hostname != null) {
                uris.push(u.hostname);
                return;
            }
            let uri = u.uri;
            if (u.match !== _enums_uriMatchType__WEBPACK_IMPORTED_MODULE_3__[/* UriMatchType */ "a"].RegularExpression) {
                const protocolIndex = uri.indexOf('://');
                if (protocolIndex > -1) {
                    uri = uri.substr(protocolIndex + 3);
                }
                const queryIndex = uri.search(/\?|&|#/);
                if (queryIndex > -1) {
                    uri = uri.substring(0, queryIndex);
                }
            }
            uris.push(uri);
        });
        return uris.length > 0 ? uris : null;
    }
}


/***/ }),

/***/ 194:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return PasswordHistoryView; });
class PasswordHistoryView {
    constructor(ph) {
        this.password = null;
        this.lastUsedDate = null;
        if (!ph) {
            return;
        }
        this.lastUsedDate = ph.lastUsedDate;
    }
}


/***/ }),

/***/ 195:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return sequentialize; });
/**
 * Use as a Decorator on async functions, it will prevent multiple 'active' calls as the same time
 *
 * If a promise was returned from a previous call to this function, that hasn't yet resolved it will
 * be returned, instead of calling the original function again
 *
 * Results are not cached, once the promise has returned, the next call will result in a fresh call
 *
 * Read more at https://github.com/bitwarden/jslib/pull/7
 */
function sequentialize(cacheKey) {
    return (target, propertyKey, descriptor) => {
        const originalMethod = descriptor.value;
        const caches = new Map();
        const getCache = (obj) => {
            let cache = caches.get(obj);
            if (cache != null) {
                return cache;
            }
            cache = new Map();
            caches.set(obj, cache);
            return cache;
        };
        return {
            value: function (...args) {
                const cache = getCache(this);
                const argsCacheKey = cacheKey(args);
                let response = cache.get(argsCacheKey);
                if (response != null) {
                    return response;
                }
                const onFinally = () => {
                    cache.delete(argsCacheKey);
                    if (cache.size === 0) {
                        caches.delete(this);
                    }
                };
                response = originalMethod.apply(this, args).then((val) => {
                    onFinally();
                    return val;
                }).catch((err) => {
                    onFinally();
                    throw err;
                });
                cache.set(argsCacheKey, response);
                return response;
            },
        };
    };
}


/***/ }),

/***/ 21:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return EncryptionType; });
var EncryptionType;
(function (EncryptionType) {
    EncryptionType[EncryptionType["AesCbc256_B64"] = 0] = "AesCbc256_B64";
    EncryptionType[EncryptionType["AesCbc128_HmacSha256_B64"] = 1] = "AesCbc128_HmacSha256_B64";
    EncryptionType[EncryptionType["AesCbc256_HmacSha256_B64"] = 2] = "AesCbc256_HmacSha256_B64";
    EncryptionType[EncryptionType["Rsa2048_OaepSha256_B64"] = 3] = "Rsa2048_OaepSha256_B64";
    EncryptionType[EncryptionType["Rsa2048_OaepSha1_B64"] = 4] = "Rsa2048_OaepSha1_B64";
    EncryptionType[EncryptionType["Rsa2048_OaepSha256_HmacSha256_B64"] = 5] = "Rsa2048_OaepSha256_HmacSha256_B64";
    EncryptionType[EncryptionType["Rsa2048_OaepSha1_HmacSha256_B64"] = 6] = "Rsa2048_OaepSha1_HmacSha256_B64";
})(EncryptionType || (EncryptionType = {}));


/***/ }),

/***/ 228:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CardApi; });
/* harmony import */ var _response_baseResponse__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(12);

class CardApi extends _response_baseResponse__WEBPACK_IMPORTED_MODULE_0__[/* BaseResponse */ "a"] {
    constructor(data = null) {
        super(data);
        if (data == null) {
            return;
        }
        this.cardholderName = this.getResponseProperty('CardholderName');
        this.brand = this.getResponseProperty('Brand');
        this.number = this.getResponseProperty('Number');
        this.expMonth = this.getResponseProperty('ExpMonth');
        this.expYear = this.getResponseProperty('ExpYear');
        this.code = this.getResponseProperty('Code');
    }
}


/***/ }),

/***/ 229:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return FieldApi; });
/* harmony import */ var _response_baseResponse__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(12);

class FieldApi extends _response_baseResponse__WEBPACK_IMPORTED_MODULE_0__[/* BaseResponse */ "a"] {
    constructor(data = null) {
        super(data);
        if (data == null) {
            return;
        }
        this.type = this.getResponseProperty('Type');
        this.name = this.getResponseProperty('Name');
        this.value = this.getResponseProperty('Value');
    }
}


/***/ }),

/***/ 230:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return IdentityApi; });
/* harmony import */ var _response_baseResponse__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(12);

class IdentityApi extends _response_baseResponse__WEBPACK_IMPORTED_MODULE_0__[/* BaseResponse */ "a"] {
    constructor(data = null) {
        super(data);
        if (data == null) {
            return;
        }
        this.title = this.getResponseProperty('Title');
        this.firstName = this.getResponseProperty('FirstName');
        this.middleName = this.getResponseProperty('MiddleName');
        this.lastName = this.getResponseProperty('LastName');
        this.address1 = this.getResponseProperty('Address1');
        this.address2 = this.getResponseProperty('Address2');
        this.address3 = this.getResponseProperty('Address3');
        this.city = this.getResponseProperty('City');
        this.state = this.getResponseProperty('State');
        this.postalCode = this.getResponseProperty('PostalCode');
        this.country = this.getResponseProperty('Country');
        this.company = this.getResponseProperty('Company');
        this.email = this.getResponseProperty('Email');
        this.phone = this.getResponseProperty('Phone');
        this.ssn = this.getResponseProperty('SSN');
        this.username = this.getResponseProperty('Username');
        this.passportNumber = this.getResponseProperty('PassportNumber');
        this.licenseNumber = this.getResponseProperty('LicenseNumber');
    }
}


/***/ }),

/***/ 231:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return LoginApi; });
/* harmony import */ var _response_baseResponse__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(12);
/* harmony import */ var _loginUriApi__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(232);


class LoginApi extends _response_baseResponse__WEBPACK_IMPORTED_MODULE_0__[/* BaseResponse */ "a"] {
    constructor(data = null) {
        super(data);
        if (data == null) {
            return;
        }
        this.username = this.getResponseProperty('Username');
        this.password = this.getResponseProperty('Password');
        this.passwordRevisionDate = this.getResponseProperty('PasswordRevisionDate');
        this.totp = this.getResponseProperty('Totp');
        const uris = this.getResponseProperty('Uris');
        if (uris != null) {
            this.uris = uris.map((u) => new _loginUriApi__WEBPACK_IMPORTED_MODULE_1__[/* LoginUriApi */ "a"](u));
        }
    }
}


/***/ }),

/***/ 232:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return LoginUriApi; });
/* harmony import */ var _response_baseResponse__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(12);

class LoginUriApi extends _response_baseResponse__WEBPACK_IMPORTED_MODULE_0__[/* BaseResponse */ "a"] {
    constructor(data = null) {
        super(data);
        this.match = null;
        if (data == null) {
            return;
        }
        this.uri = this.getResponseProperty('Uri');
        const match = this.getResponseProperty('Match');
        this.match = match != null ? match : null;
    }
}


/***/ }),

/***/ 233:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SecureNoteApi; });
/* harmony import */ var _response_baseResponse__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(12);

class SecureNoteApi extends _response_baseResponse__WEBPACK_IMPORTED_MODULE_0__[/* BaseResponse */ "a"] {
    constructor(data = null) {
        super(data);
        if (data == null) {
            return;
        }
        this.type = this.getResponseProperty('Type');
    }
}


/***/ }),

/***/ 234:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AttachmentData; });
class AttachmentData {
    constructor(response) {
        if (response == null) {
            return;
        }
        this.id = response.id;
        this.url = response.url;
        this.fileName = response.fileName;
        this.key = response.key;
        this.size = response.size;
        this.sizeName = response.sizeName;
    }
}


/***/ }),

/***/ 235:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CardData; });
class CardData {
    constructor(data) {
        if (data == null) {
            return;
        }
        this.cardholderName = data.cardholderName;
        this.brand = data.brand;
        this.number = data.number;
        this.expMonth = data.expMonth;
        this.expYear = data.expYear;
        this.code = data.code;
    }
}


/***/ }),

/***/ 236:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return FieldData; });
class FieldData {
    constructor(response) {
        if (response == null) {
            return;
        }
        this.type = response.type;
        this.name = response.name;
        this.value = response.value;
    }
}


/***/ }),

/***/ 237:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return IdentityData; });
class IdentityData {
    constructor(data) {
        if (data == null) {
            return;
        }
        this.title = data.title;
        this.firstName = data.firstName;
        this.middleName = data.middleName;
        this.lastName = data.lastName;
        this.address1 = data.address1;
        this.address2 = data.address2;
        this.address3 = data.address3;
        this.city = data.city;
        this.state = data.state;
        this.postalCode = data.postalCode;
        this.country = data.country;
        this.company = data.company;
        this.email = data.email;
        this.phone = data.phone;
        this.ssn = data.ssn;
        this.username = data.username;
        this.passportNumber = data.passportNumber;
        this.licenseNumber = data.licenseNumber;
    }
}


/***/ }),

/***/ 238:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return LoginData; });
/* harmony import */ var _loginUriData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(239);

class LoginData {
    constructor(data) {
        if (data == null) {
            return;
        }
        this.username = data.username;
        this.password = data.password;
        this.passwordRevisionDate = data.passwordRevisionDate;
        this.totp = data.totp;
        if (data.uris) {
            this.uris = data.uris.map((u) => new _loginUriData__WEBPACK_IMPORTED_MODULE_0__[/* LoginUriData */ "a"](u));
        }
    }
}


/***/ }),

/***/ 239:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return LoginUriData; });
class LoginUriData {
    constructor(data) {
        this.match = null;
        if (data == null) {
            return;
        }
        this.uri = data.uri;
        this.match = data.match;
    }
}


/***/ }),

/***/ 24:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return PopupUtilsService; });
/* harmony import */ var _browser_browserApi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(13);
/* harmony import */ var jslib_abstractions_platformUtils_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(10);


class PopupUtilsService {
    constructor(platformUtilsService) {
        this.platformUtilsService = platformUtilsService;
    }
    inSidebar(win) {
        return win.location.search !== '' && win.location.search.indexOf('uilocation=sidebar') > -1;
    }
    inTab(win) {
        return win.location.search !== '' && win.location.search.indexOf('uilocation=tab') > -1;
    }
    inPopout(win) {
        return win.location.search !== '' && win.location.search.indexOf('uilocation=popout') > -1;
    }
    inPopup(win) {
        return win.location.search === '' || win.location.search.indexOf('uilocation=') === -1 ||
            win.location.search.indexOf('uilocation=popup') > -1;
    }
    getContentScrollY(win) {
        const content = win.document.getElementsByTagName('content')[0];
        return content.scrollTop;
    }
    setContentScrollY(win, scrollY) {
        if (scrollY != null) {
            const content = win.document.getElementsByTagName('content')[0];
            content.scrollTop = scrollY;
        }
    }
    popOut(win) {
        let href = win.location.href;
        if ((typeof chrome !== 'undefined') && chrome.windows && chrome.windows.create) {
            if (href.indexOf('?uilocation=') > -1) {
                href = href.replace('uilocation=popup', 'uilocation=popout')
                    .replace('uilocation=tab', 'uilocation=popout')
                    .replace('uilocation=sidebar', 'uilocation=popout');
            }
            else {
                const hrefParts = href.split('#');
                href = hrefParts[0] + '?uilocation=popout' + (hrefParts.length > 0 ? '#' + hrefParts[1] : '');
            }
            const bodyRect = document.querySelector('body').getBoundingClientRect();
            chrome.windows.create({
                url: href,
                type: 'popup',
                width: Math.round(bodyRect.width ? bodyRect.width + 60 : 375),
                height: Math.round(bodyRect.height || 600),
            });
            if (this.inPopup(win)) {
                _browser_browserApi__WEBPACK_IMPORTED_MODULE_0__[/* BrowserApi */ "a"].closePopup(win);
            }
        }
        else if ((typeof chrome !== 'undefined') && chrome.tabs && chrome.tabs.create) {
            href = href.replace('uilocation=popup', 'uilocation=tab')
                .replace('uilocation=popout', 'uilocation=tab')
                .replace('uilocation=sidebar', 'uilocation=tab');
            chrome.tabs.create({
                url: href,
            });
        }
        else if ((typeof safari !== 'undefined')) {
            // Safari can't open popup in full page tab :(
        }
    }
}


/***/ }),

/***/ 240:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return PasswordHistoryData; });
class PasswordHistoryData {
    constructor(response) {
        if (response == null) {
            return;
        }
        this.password = response.password;
        this.lastUsedDate = response.lastUsedDate;
    }
}


/***/ }),

/***/ 241:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SecureNoteData; });
class SecureNoteData {
    constructor(data) {
        if (data == null) {
            return;
        }
        this.type = data.type;
    }
}


/***/ }),

/***/ 242:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Attachment; });
/* harmony import */ var _data_attachmentData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(234);
/* harmony import */ var _view_attachmentView__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(184);
/* harmony import */ var _domainBase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(30);
/* harmony import */ var _symmetricCryptoKey__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(65);
/* harmony import */ var _misc_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(8);
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





class Attachment extends _domainBase__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"] {
    constructor(obj, alreadyEncrypted = false) {
        super();
        if (obj == null) {
            return;
        }
        this.size = obj.size;
        this.buildDomainModel(this, obj, {
            id: null,
            url: null,
            sizeName: null,
            fileName: null,
            key: null,
        }, alreadyEncrypted, ['id', 'url', 'sizeName']);
    }
    decrypt(orgId) {
        return __awaiter(this, void 0, void 0, function* () {
            const view = yield this.decryptObj(new _view_attachmentView__WEBPACK_IMPORTED_MODULE_1__[/* AttachmentView */ "a"](this), {
                fileName: null,
            }, orgId);
            if (this.key != null) {
                let cryptoService;
                const containerService = _misc_utils__WEBPACK_IMPORTED_MODULE_4__[/* Utils */ "a"].global.bitwardenContainerService;
                if (containerService) {
                    cryptoService = containerService.getCryptoService();
                }
                else {
                    throw new Error('global bitwardenContainerService not initialized.');
                }
                try {
                    const orgKey = yield cryptoService.getOrgKey(orgId);
                    const decValue = yield cryptoService.decryptToBytes(this.key, orgKey);
                    view.key = new _symmetricCryptoKey__WEBPACK_IMPORTED_MODULE_3__[/* SymmetricCryptoKey */ "a"](decValue);
                }
                catch (e) {
                    // TODO: error?
                }
            }
            return view;
        });
    }
    toAttachmentData() {
        const a = new _data_attachmentData__WEBPACK_IMPORTED_MODULE_0__[/* AttachmentData */ "a"]();
        a.size = this.size;
        this.buildDataModel(this, a, {
            id: null,
            url: null,
            sizeName: null,
            fileName: null,
            key: null,
        }, ['id', 'url', 'sizeName']);
        return a;
    }
}


/***/ }),

/***/ 243:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Card; });
/* harmony import */ var _data_cardData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(235);
/* harmony import */ var _domainBase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(30);
/* harmony import */ var _view_cardView__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(73);



class Card extends _domainBase__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"] {
    constructor(obj, alreadyEncrypted = false) {
        super();
        if (obj == null) {
            return;
        }
        this.buildDomainModel(this, obj, {
            cardholderName: null,
            brand: null,
            number: null,
            expMonth: null,
            expYear: null,
            code: null,
        }, alreadyEncrypted, []);
    }
    decrypt(orgId) {
        return this.decryptObj(new _view_cardView__WEBPACK_IMPORTED_MODULE_2__[/* CardView */ "a"](this), {
            cardholderName: null,
            brand: null,
            number: null,
            expMonth: null,
            expYear: null,
            code: null,
        }, orgId);
    }
    toCardData() {
        const c = new _data_cardData__WEBPACK_IMPORTED_MODULE_0__[/* CardData */ "a"]();
        this.buildDataModel(this, c, {
            cardholderName: null,
            brand: null,
            number: null,
            expMonth: null,
            expYear: null,
            code: null,
        });
        return c;
    }
}


/***/ }),

/***/ 244:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Field; });
/* harmony import */ var _data_fieldData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(236);
/* harmony import */ var _domainBase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(30);
/* harmony import */ var _view_fieldView__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(108);



class Field extends _domainBase__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"] {
    constructor(obj, alreadyEncrypted = false) {
        super();
        if (obj == null) {
            return;
        }
        this.type = obj.type;
        this.buildDomainModel(this, obj, {
            name: null,
            value: null,
        }, alreadyEncrypted, []);
    }
    decrypt(orgId) {
        return this.decryptObj(new _view_fieldView__WEBPACK_IMPORTED_MODULE_2__[/* FieldView */ "a"](this), {
            name: null,
            value: null,
        }, orgId);
    }
    toFieldData() {
        const f = new _data_fieldData__WEBPACK_IMPORTED_MODULE_0__[/* FieldData */ "a"]();
        this.buildDataModel(this, f, {
            name: null,
            value: null,
            type: null,
        }, ['type']);
        return f;
    }
}


/***/ }),

/***/ 245:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Identity; });
/* harmony import */ var _data_identityData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(237);
/* harmony import */ var _domainBase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(30);
/* harmony import */ var _view_identityView__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(74);



class Identity extends _domainBase__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"] {
    constructor(obj, alreadyEncrypted = false) {
        super();
        if (obj == null) {
            return;
        }
        this.buildDomainModel(this, obj, {
            title: null,
            firstName: null,
            middleName: null,
            lastName: null,
            address1: null,
            address2: null,
            address3: null,
            city: null,
            state: null,
            postalCode: null,
            country: null,
            company: null,
            email: null,
            phone: null,
            ssn: null,
            username: null,
            passportNumber: null,
            licenseNumber: null,
        }, alreadyEncrypted, []);
    }
    decrypt(orgId) {
        return this.decryptObj(new _view_identityView__WEBPACK_IMPORTED_MODULE_2__[/* IdentityView */ "a"](this), {
            title: null,
            firstName: null,
            middleName: null,
            lastName: null,
            address1: null,
            address2: null,
            address3: null,
            city: null,
            state: null,
            postalCode: null,
            country: null,
            company: null,
            email: null,
            phone: null,
            ssn: null,
            username: null,
            passportNumber: null,
            licenseNumber: null,
        }, orgId);
    }
    toIdentityData() {
        const i = new _data_identityData__WEBPACK_IMPORTED_MODULE_0__[/* IdentityData */ "a"]();
        this.buildDataModel(this, i, {
            title: null,
            firstName: null,
            middleName: null,
            lastName: null,
            address1: null,
            address2: null,
            address3: null,
            city: null,
            state: null,
            postalCode: null,
            country: null,
            company: null,
            email: null,
            phone: null,
            ssn: null,
            username: null,
            passportNumber: null,
            licenseNumber: null,
        });
        return i;
    }
}


/***/ }),

/***/ 246:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Login; });
/* harmony import */ var _loginUri__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(247);
/* harmony import */ var _data_loginData__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(238);
/* harmony import */ var _view_loginView__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(60);
/* harmony import */ var _domainBase__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(30);
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




class Login extends _domainBase__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"] {
    constructor(obj, alreadyEncrypted = false) {
        super();
        if (obj == null) {
            return;
        }
        this.passwordRevisionDate = obj.passwordRevisionDate != null ? new Date(obj.passwordRevisionDate) : null;
        this.buildDomainModel(this, obj, {
            username: null,
            password: null,
            totp: null,
        }, alreadyEncrypted, []);
        if (obj.uris) {
            this.uris = [];
            obj.uris.forEach((u) => {
                this.uris.push(new _loginUri__WEBPACK_IMPORTED_MODULE_0__[/* LoginUri */ "a"](u, alreadyEncrypted));
            });
        }
    }
    decrypt(orgId) {
        return __awaiter(this, void 0, void 0, function* () {
            const view = yield this.decryptObj(new _view_loginView__WEBPACK_IMPORTED_MODULE_2__[/* LoginView */ "a"](this), {
                username: null,
                password: null,
                totp: null,
            }, orgId);
            if (this.uris != null) {
                view.uris = [];
                for (let i = 0; i < this.uris.length; i++) {
                    const uri = yield this.uris[i].decrypt(orgId);
                    view.uris.push(uri);
                }
            }
            return view;
        });
    }
    toLoginData() {
        const l = new _data_loginData__WEBPACK_IMPORTED_MODULE_1__[/* LoginData */ "a"]();
        l.passwordRevisionDate = this.passwordRevisionDate != null ? this.passwordRevisionDate.toISOString() : null;
        this.buildDataModel(this, l, {
            username: null,
            password: null,
            totp: null,
        });
        if (this.uris != null && this.uris.length > 0) {
            l.uris = [];
            this.uris.forEach((u) => {
                l.uris.push(u.toLoginUriData());
            });
        }
        return l;
    }
}


/***/ }),

/***/ 247:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return LoginUri; });
/* harmony import */ var _data_loginUriData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(239);
/* harmony import */ var _view_loginUriView__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(78);
/* harmony import */ var _domainBase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(30);



class LoginUri extends _domainBase__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"] {
    constructor(obj, alreadyEncrypted = false) {
        super();
        if (obj == null) {
            return;
        }
        this.match = obj.match;
        this.buildDomainModel(this, obj, {
            uri: null,
        }, alreadyEncrypted, []);
    }
    decrypt(orgId) {
        return this.decryptObj(new _view_loginUriView__WEBPACK_IMPORTED_MODULE_1__[/* LoginUriView */ "a"](this), {
            uri: null,
        }, orgId);
    }
    toLoginUriData() {
        const u = new _data_loginUriData__WEBPACK_IMPORTED_MODULE_0__[/* LoginUriData */ "a"]();
        this.buildDataModel(this, u, {
            uri: null,
        }, ['match']);
        return u;
    }
}


/***/ }),

/***/ 248:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Password; });
/* harmony import */ var _data_passwordHistoryData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(240);
/* harmony import */ var _domainBase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(30);
/* harmony import */ var _view_passwordHistoryView__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(194);



class Password extends _domainBase__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"] {
    constructor(obj, alreadyEncrypted = false) {
        super();
        if (obj == null) {
            return;
        }
        this.buildDomainModel(this, obj, {
            password: null,
        }, alreadyEncrypted);
        this.lastUsedDate = new Date(obj.lastUsedDate);
    }
    decrypt(orgId) {
        return this.decryptObj(new _view_passwordHistoryView__WEBPACK_IMPORTED_MODULE_2__[/* PasswordHistoryView */ "a"](this), {
            password: null,
        }, orgId);
    }
    toPasswordHistoryData() {
        const ph = new _data_passwordHistoryData__WEBPACK_IMPORTED_MODULE_0__[/* PasswordHistoryData */ "a"]();
        ph.lastUsedDate = this.lastUsedDate.toISOString();
        this.buildDataModel(this, ph, {
            password: null,
        });
        return ph;
    }
}


/***/ }),

/***/ 249:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SecureNote; });
/* harmony import */ var _data_secureNoteData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(241);
/* harmony import */ var _domainBase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(30);
/* harmony import */ var _view_secureNoteView__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(75);



class SecureNote extends _domainBase__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"] {
    constructor(obj, alreadyEncrypted = false) {
        super();
        if (obj == null) {
            return;
        }
        this.type = obj.type;
    }
    decrypt(orgId) {
        return Promise.resolve(new _view_secureNoteView__WEBPACK_IMPORTED_MODULE_2__[/* SecureNoteView */ "a"](this));
    }
    toSecureNoteData() {
        const n = new _data_secureNoteData__WEBPACK_IMPORTED_MODULE_0__[/* SecureNoteData */ "a"]();
        n.type = this.type;
        return n;
    }
}


/***/ }),

/***/ 25:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return UriMatchType; });
var UriMatchType;
(function (UriMatchType) {
    UriMatchType[UriMatchType["Domain"] = 0] = "Domain";
    UriMatchType[UriMatchType["Host"] = 1] = "Host";
    UriMatchType[UriMatchType["StartsWith"] = 2] = "StartsWith";
    UriMatchType[UriMatchType["Exact"] = 3] = "Exact";
    UriMatchType[UriMatchType["RegularExpression"] = 4] = "RegularExpression";
    UriMatchType[UriMatchType["Never"] = 5] = "Never";
})(UriMatchType || (UriMatchType = {}));


/***/ }),

/***/ 250:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SendFileData; });
class SendFileData {
    constructor(data) {
        if (data == null) {
            return;
        }
        this.id = data.id;
        this.url = data.url;
        this.fileName = data.fileName;
        this.key = data.key;
        this.size = data.size;
        this.sizeName = data.sizeName;
    }
}


/***/ }),

/***/ 251:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SendTextData; });
class SendTextData {
    constructor(data) {
        if (data == null) {
            return;
        }
        this.text = data.text;
        this.hidden = data.hidden;
    }
}


/***/ }),

/***/ 252:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SendFileView; });
class SendFileView {
    constructor(f) {
        this.id = null;
        this.url = null;
        this.size = null;
        this.sizeName = null;
        this.fileName = null;
        if (!f) {
            return;
        }
        this.id = f.id;
        this.url = f.url;
        this.size = f.size;
        this.sizeName = f.sizeName;
    }
    get fileSize() {
        try {
            if (this.size != null) {
                return parseInt(this.size, null);
            }
        }
        catch (_a) { }
        return 0;
    }
}


/***/ }),

/***/ 253:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SendTextView; });
class SendTextView {
    constructor(t) {
        this.text = null;
        if (!t) {
            return;
        }
        this.hidden = t.hidden;
    }
    get maskedText() {
        return this.text != null ? '••••••••' : null;
    }
}


/***/ }),

/***/ 254:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SendFile; });
/* harmony import */ var _domainBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(30);
/* harmony import */ var _data_sendFileData__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(250);
/* harmony import */ var _view_sendFileView__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(252);
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class SendFile extends _domainBase__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"] {
    constructor(obj, alreadyEncrypted = false) {
        super();
        if (obj == null) {
            return;
        }
        this.size = obj.size;
        this.buildDomainModel(this, obj, {
            id: null,
            url: null,
            sizeName: null,
            fileName: null,
        }, alreadyEncrypted, ['id', 'url', 'sizeName']);
    }
    decrypt(key) {
        return __awaiter(this, void 0, void 0, function* () {
            const view = yield this.decryptObj(new _view_sendFileView__WEBPACK_IMPORTED_MODULE_2__[/* SendFileView */ "a"](this), {
                fileName: null,
            }, null, key);
            return view;
        });
    }
    toSendFileData() {
        const f = new _data_sendFileData__WEBPACK_IMPORTED_MODULE_1__[/* SendFileData */ "a"]();
        f.size = this.size;
        this.buildDataModel(this, f, {
            id: null,
            url: null,
            sizeName: null,
            fileName: null,
        }, ['id', 'url', 'sizeName']);
        return f;
    }
}


/***/ }),

/***/ 255:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SendText; });
/* harmony import */ var _domainBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(30);
/* harmony import */ var _data_sendTextData__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(251);
/* harmony import */ var _view_sendTextView__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(253);



class SendText extends _domainBase__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"] {
    constructor(obj, alreadyEncrypted = false) {
        super();
        if (obj == null) {
            return;
        }
        this.hidden = obj.hidden;
        this.buildDomainModel(this, obj, {
            text: null,
        }, alreadyEncrypted, []);
    }
    decrypt(key) {
        return this.decryptObj(new _view_sendTextView__WEBPACK_IMPORTED_MODULE_2__[/* SendTextView */ "a"](this), {
            text: null,
        }, null, key);
    }
    toSendTextData() {
        const t = new _data_sendTextData__WEBPACK_IMPORTED_MODULE_1__[/* SendTextData */ "a"]();
        this.buildDataModel(this, t, {
            text: null,
            hidden: null,
        }, ['hidden']);
        return t;
    }
}


/***/ }),

/***/ 257:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./jslib/src/enums/sendType.ts
var sendType = __webpack_require__(52);

// EXTERNAL MODULE: ./jslib/src/misc/utils.ts
var utils = __webpack_require__(8);

// EXTERNAL MODULE: ./jslib/src/models/data/sendData.ts
var sendData = __webpack_require__(152);

// EXTERNAL MODULE: ./jslib/src/models/view/sendFileView.ts
var sendFileView = __webpack_require__(252);

// EXTERNAL MODULE: ./jslib/src/models/view/sendTextView.ts
var sendTextView = __webpack_require__(253);

// CONCATENATED MODULE: ./jslib/src/models/view/sendView.ts



class sendView_SendView {
    constructor(s) {
        this.id = null;
        this.accessId = null;
        this.name = null;
        this.notes = null;
        this.type = null;
        this.text = new sendTextView["a" /* SendTextView */]();
        this.file = new sendFileView["a" /* SendFileView */]();
        this.maxAccessCount = null;
        this.accessCount = 0;
        this.revisionDate = null;
        this.deletionDate = null;
        this.expirationDate = null;
        this.password = null;
        this.disabled = false;
        if (!s) {
            return;
        }
        this.id = s.id;
        this.accessId = s.accessId;
        this.type = s.type;
        this.maxAccessCount = s.maxAccessCount;
        this.accessCount = s.accessCount;
        this.revisionDate = s.revisionDate;
        this.deletionDate = s.deletionDate;
        this.expirationDate = s.expirationDate;
        this.disabled = s.disabled;
        this.password = s.password;
    }
    get urlB64Key() {
        return utils["a" /* Utils */].fromBufferToUrlB64(this.key);
    }
}

// EXTERNAL MODULE: ./jslib/src/models/domain/domainBase.ts
var domainBase = __webpack_require__(30);

// EXTERNAL MODULE: ./jslib/src/models/domain/sendFile.ts
var sendFile = __webpack_require__(254);

// EXTERNAL MODULE: ./jslib/src/models/domain/sendText.ts
var sendText = __webpack_require__(255);

// CONCATENATED MODULE: ./jslib/src/models/domain/send.ts
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return send_Send; });
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};







class send_Send extends domainBase["a" /* default */] {
    constructor(obj, alreadyEncrypted = false) {
        super();
        if (obj == null) {
            return;
        }
        this.buildDomainModel(this, obj, {
            id: null,
            accessId: null,
            userId: null,
            name: null,
            notes: null,
            key: null,
        }, alreadyEncrypted, ['id', 'accessId', 'userId']);
        this.type = obj.type;
        this.maxAccessCount = obj.maxAccessCount;
        this.accessCount = obj.accessCount;
        this.password = obj.password;
        this.disabled = obj.disabled;
        this.revisionDate = obj.revisionDate != null ? new Date(obj.revisionDate) : null;
        this.deletionDate = obj.deletionDate != null ? new Date(obj.deletionDate) : null;
        this.expirationDate = obj.expirationDate != null ? new Date(obj.expirationDate) : null;
        switch (this.type) {
            case sendType["a" /* SendType */].Text:
                this.text = new sendText["a" /* SendText */](obj.text, alreadyEncrypted);
                break;
            case sendType["a" /* SendType */].File:
                this.file = new sendFile["a" /* SendFile */](obj.file, alreadyEncrypted);
                break;
            default:
                break;
        }
    }
    decrypt() {
        return __awaiter(this, void 0, void 0, function* () {
            const model = new sendView_SendView(this);
            let cryptoService;
            const containerService = utils["a" /* Utils */].global.bitwardenContainerService;
            if (containerService) {
                cryptoService = containerService.getCryptoService();
            }
            else {
                throw new Error('global bitwardenContainerService not initialized.');
            }
            try {
                model.key = yield cryptoService.decryptToBytes(this.key, null);
                model.cryptoKey = yield cryptoService.makeSendKey(model.key);
            }
            catch (e) {
                // TODO: error?
            }
            yield this.decryptObj(model, {
                name: null,
                notes: null,
            }, null, model.cryptoKey);
            switch (this.type) {
                case sendType["a" /* SendType */].File:
                    model.file = yield this.file.decrypt(model.cryptoKey);
                    break;
                case sendType["a" /* SendType */].Text:
                    model.text = yield this.text.decrypt(model.cryptoKey);
                    break;
                default:
                    break;
            }
            return model;
        });
    }
    toSendData(userId) {
        const s = new sendData["a" /* SendData */]();
        s.id = this.id;
        s.accessId = this.accessId;
        s.userId = userId;
        s.maxAccessCount = this.maxAccessCount;
        s.accessCount = this.accessCount;
        s.disabled = this.disabled;
        s.password = this.password;
        s.revisionDate = this.revisionDate != null ? this.revisionDate.toISOString() : null;
        s.deletionDate = this.deletionDate != null ? this.deletionDate.toISOString() : null;
        s.expirationDate = this.expirationDate != null ? this.expirationDate.toISOString() : null;
        s.type = this.type;
        this.buildDataModel(this, s, {
            name: null,
            notes: null,
            key: null,
        });
        switch (s.type) {
            case sendType["a" /* SendType */].File:
                s.text = this.text.toSendTextData();
                break;
            case sendType["a" /* SendType */].Text:
                s.file = this.file.toSendFileData();
                break;
            default:
                break;
        }
        return s;
    }
}


/***/ }),

/***/ 28:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SafariApp; });
/* harmony import */ var _browserApi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(13);

class SafariApp {
    static init() {
        if (window.bitwardenSafariAppInited) {
            return;
        }
        window.bitwardenSafariAppInited = true;
        if (_browserApi__WEBPACK_IMPORTED_MODULE_0__[/* BrowserApi */ "a"].isSafariApi) {
            window.bitwardenSafariAppRequests =
                new Map();
            window.bitwardenSafariAppMessageListeners =
                new Map();
            window.bitwardenSafariAppMessageReceiver = (message) => {
                SafariApp.receiveMessageFromApp(message);
            };
            setInterval(() => SafariApp.cleanupOldRequests(), 5 * 60000); // every 5 mins
        }
    }
    static sendMessageToApp(command, data = null, resolveNow = false) {
        if (!_browserApi__WEBPACK_IMPORTED_MODULE_0__[/* BrowserApi */ "a"].isSafariApi) {
            return Promise.resolve(null);
        }
        return new Promise((resolve) => {
            const now = new Date();
            const messageId = now.getTime().toString() + '_' + Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);
            window.webkit.messageHandlers.bitwardenApp.postMessage(JSON.stringify({
                id: messageId,
                command: command,
                data: data,
                responseData: null,
            }));
            if (resolveNow) {
                resolve();
            }
            else {
                window.bitwardenSafariAppRequests.set(messageId, {
                    resolve: resolve,
                    timeoutDate: new Date(now.getTime() + 5 * 60000),
                });
            }
        });
    }
    static addMessageListener(name, callback) {
        window.bitwardenSafariAppMessageListeners.set(name, callback);
    }
    static sendMessageToListeners(message, sender, response) {
        window.bitwardenSafariAppMessageListeners.forEach((f) => f(message, sender, response));
    }
    static receiveMessageFromApp(message) {
        if (message == null) {
            return;
        }
        if ((message.id == null || message.id === '') && message.command === 'app_message') {
            try {
                const msg = JSON.parse(message.data);
                SafariApp.sendMessageToListeners(msg, {
                    id: 'app_message',
                    tab: message.senderTab,
                }, null);
            }
            catch (_a) { }
        }
        else if (message.id != null && window.bitwardenSafariAppRequests.has(message.id)) {
            const p = window.bitwardenSafariAppRequests.get(message.id);
            p.resolve(message.responseData);
            window.bitwardenSafariAppRequests.delete(message.id);
        }
    }
    static cleanupOldRequests() {
        const removeIds = [];
        window.bitwardenSafariAppRequests
            .forEach((v, key) => {
            if (v.timeoutDate < new Date()) {
                removeIds.push(key);
            }
        });
        removeIds.forEach((id) => {
            window.bitwardenSafariAppRequests.delete(id);
        });
    }
}


/***/ }),

/***/ 30:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Domain; });
/* harmony import */ var _cipherString__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(63);
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

class Domain {
    buildDomainModel(domain, dataObj, map, alreadyEncrypted, notEncList = []) {
        for (const prop in map) {
            if (!map.hasOwnProperty(prop)) {
                continue;
            }
            const objProp = dataObj[(map[prop] || prop)];
            if (alreadyEncrypted === true || notEncList.indexOf(prop) > -1) {
                domain[prop] = objProp ? objProp : null;
            }
            else {
                domain[prop] = objProp ? new _cipherString__WEBPACK_IMPORTED_MODULE_0__[/* CipherString */ "a"](objProp) : null;
            }
        }
    }
    buildDataModel(domain, dataObj, map, notCipherStringList = []) {
        for (const prop in map) {
            if (!map.hasOwnProperty(prop)) {
                continue;
            }
            const objProp = domain[(map[prop] || prop)];
            if (notCipherStringList.indexOf(prop) > -1) {
                dataObj[prop] = objProp != null ? objProp : null;
            }
            else {
                dataObj[prop] = objProp != null ? objProp.encryptedString : null;
            }
        }
    }
    decryptObj(viewModel, map, orgId, key = null) {
        return __awaiter(this, void 0, void 0, function* () {
            const promises = [];
            const self = this;
            for (const prop in map) {
                if (!map.hasOwnProperty(prop)) {
                    continue;
                }
                // tslint:disable-next-line
                (function (theProp) {
                    const p = Promise.resolve().then(() => {
                        const mapProp = map[theProp] || theProp;
                        if (self[mapProp]) {
                            return self[mapProp].decrypt(orgId, key);
                        }
                        return null;
                    }).then((val) => {
                        viewModel[theProp] = val;
                    });
                    promises.push(p);
                })(prop);
            }
            yield Promise.all(promises);
            return viewModel;
        });
    }
}


/***/ }),

/***/ 315:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CipherBulkDeleteRequest; });
class CipherBulkDeleteRequest {
    constructor(ids, organizationId) {
        this.ids = ids == null ? [] : ids;
        this.organizationId = organizationId;
    }
}


/***/ }),

/***/ 365:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CipherService; });
/* unused harmony export ɵ0 */
/* harmony import */ var _enums_cipherType__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(11);
/* harmony import */ var _enums_fieldType__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(46);
/* harmony import */ var _enums_uriMatchType__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(25);
/* harmony import */ var _models_data_cipherData__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(76);
/* harmony import */ var _models_domain_attachment__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(242);
/* harmony import */ var _models_domain_card__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(243);
/* harmony import */ var _models_domain_cipher__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(129);
/* harmony import */ var _models_domain_field__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(244);
/* harmony import */ var _models_domain_identity__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(245);
/* harmony import */ var _models_domain_login__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(246);
/* harmony import */ var _models_domain_loginUri__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(247);
/* harmony import */ var _models_domain_password__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(248);
/* harmony import */ var _models_domain_secureNote__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(249);
/* harmony import */ var _models_request_cipherBulkDeleteRequest__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(315);
/* harmony import */ var _models_request_cipherBulkMoveRequest__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(427);
/* harmony import */ var _models_request_cipherBulkRestoreRequest__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(428);
/* harmony import */ var _models_request_cipherBulkShareRequest__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(441);
/* harmony import */ var _models_request_cipherCollectionsRequest__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(429);
/* harmony import */ var _models_request_cipherCreateRequest__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(430);
/* harmony import */ var _models_request_cipherRequest__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(111);
/* harmony import */ var _models_request_cipherShareRequest__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(431);
/* harmony import */ var _models_view_passwordHistoryView__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(194);
/* harmony import */ var _models_domain_sortedCiphersCache__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(432);
/* harmony import */ var _constants_service__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(6);
/* harmony import */ var _misc_sequentialize__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(195);
/* harmony import */ var _misc_utils__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(8);
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


























const Keys = {
    ciphersPrefix: 'ciphers_',
    localData: 'sitesLocalData',
    neverDomains: 'neverDomains',
};
const DomainMatchBlacklist = new Map([
    ['google.com', new Set(['script.google.com'])],
]);
const ɵ0 = () => 'getAllDecrypted';
class CipherService {
    constructor(cryptoService, userService, settingsService, apiService, storageService, i18nService, searchService) {
        this.cryptoService = cryptoService;
        this.userService = userService;
        this.settingsService = settingsService;
        this.apiService = apiService;
        this.storageService = storageService;
        this.i18nService = i18nService;
        this.searchService = searchService;
        this.sortedCiphersCache = new _models_domain_sortedCiphersCache__WEBPACK_IMPORTED_MODULE_22__[/* SortedCiphersCache */ "a"](this.sortCiphersByLastUsed);
    }
    get decryptedCipherCache() {
        return this._decryptedCipherCache;
    }
    set decryptedCipherCache(value) {
        this._decryptedCipherCache = value;
        if (this.searchService != null) {
            if (value == null) {
                this.searchService().clearIndex();
            }
            else {
                this.searchService().indexCiphers();
            }
        }
    }
    clearCache() {
        this.decryptedCipherCache = null;
        this.sortedCiphersCache.clear();
    }
    encrypt(model, key, originalCipher = null) {
        return __awaiter(this, void 0, void 0, function* () {
            // Adjust password history
            if (model.id != null) {
                if (originalCipher == null) {
                    originalCipher = yield this.get(model.id);
                }
                if (originalCipher != null) {
                    const existingCipher = yield originalCipher.decrypt();
                    model.passwordHistory = existingCipher.passwordHistory || [];
                    if (model.type === _enums_cipherType__WEBPACK_IMPORTED_MODULE_0__[/* CipherType */ "a"].Login && existingCipher.type === _enums_cipherType__WEBPACK_IMPORTED_MODULE_0__[/* CipherType */ "a"].Login) {
                        if (existingCipher.login.password != null && existingCipher.login.password !== '' &&
                            existingCipher.login.password !== model.login.password) {
                            const ph = new _models_view_passwordHistoryView__WEBPACK_IMPORTED_MODULE_21__[/* PasswordHistoryView */ "a"]();
                            ph.password = existingCipher.login.password;
                            ph.lastUsedDate = model.login.passwordRevisionDate = new Date();
                            model.passwordHistory.splice(0, 0, ph);
                        }
                        else {
                            model.login.passwordRevisionDate = existingCipher.login.passwordRevisionDate;
                        }
                    }
                    if (existingCipher.hasFields) {
                        const existingHiddenFields = existingCipher.fields.filter((f) => f.type === _enums_fieldType__WEBPACK_IMPORTED_MODULE_1__[/* FieldType */ "a"].Hidden &&
                            f.name != null && f.name !== '' && f.value != null && f.value !== '');
                        const hiddenFields = model.fields == null ? [] :
                            model.fields.filter((f) => f.type === _enums_fieldType__WEBPACK_IMPORTED_MODULE_1__[/* FieldType */ "a"].Hidden && f.name != null && f.name !== '');
                        existingHiddenFields.forEach((ef) => {
                            const matchedField = hiddenFields.find((f) => f.name === ef.name);
                            if (matchedField == null || matchedField.value !== ef.value) {
                                const ph = new _models_view_passwordHistoryView__WEBPACK_IMPORTED_MODULE_21__[/* PasswordHistoryView */ "a"]();
                                ph.password = ef.name + ': ' + ef.value;
                                ph.lastUsedDate = new Date();
                                model.passwordHistory.splice(0, 0, ph);
                            }
                        });
                    }
                }
                if (model.passwordHistory != null && model.passwordHistory.length === 0) {
                    model.passwordHistory = null;
                }
                else if (model.passwordHistory != null && model.passwordHistory.length > 5) {
                    // only save last 5 history
                    model.passwordHistory = model.passwordHistory.slice(0, 5);
                }
            }
            const cipher = new _models_domain_cipher__WEBPACK_IMPORTED_MODULE_6__[/* Cipher */ "a"]();
            cipher.id = model.id;
            cipher.folderId = model.folderId;
            cipher.favorite = model.favorite;
            cipher.organizationId = model.organizationId;
            cipher.type = model.type;
            cipher.collectionIds = model.collectionIds;
            cipher.revisionDate = model.revisionDate;
            if (key == null && cipher.organizationId != null) {
                key = yield this.cryptoService.getOrgKey(cipher.organizationId);
                if (key == null) {
                    throw new Error('Cannot encrypt cipher for organization. No key.');
                }
            }
            yield Promise.all([
                this.encryptObjProperty(model, cipher, {
                    name: null,
                    notes: null,
                }, key),
                this.encryptCipherData(cipher, model, key),
                this.encryptFields(model.fields, key).then((fields) => {
                    cipher.fields = fields;
                }),
                this.encryptPasswordHistories(model.passwordHistory, key).then((ph) => {
                    cipher.passwordHistory = ph;
                }),
                this.encryptAttachments(model.attachments, key).then((attachments) => {
                    cipher.attachments = attachments;
                }),
            ]);
            return cipher;
        });
    }
    encryptAttachments(attachmentsModel, key) {
        return __awaiter(this, void 0, void 0, function* () {
            if (attachmentsModel == null || attachmentsModel.length === 0) {
                return null;
            }
            const promises = [];
            const encAttachments = [];
            attachmentsModel.forEach((model) => __awaiter(this, void 0, void 0, function* () {
                const attachment = new _models_domain_attachment__WEBPACK_IMPORTED_MODULE_4__[/* Attachment */ "a"]();
                attachment.id = model.id;
                attachment.size = model.size;
                attachment.sizeName = model.sizeName;
                attachment.url = model.url;
                const promise = this.encryptObjProperty(model, attachment, {
                    fileName: null,
                }, key).then(() => __awaiter(this, void 0, void 0, function* () {
                    if (model.key != null) {
                        attachment.key = yield this.cryptoService.encrypt(model.key.key, key);
                    }
                    encAttachments.push(attachment);
                }));
                promises.push(promise);
            }));
            yield Promise.all(promises);
            return encAttachments;
        });
    }
    encryptFields(fieldsModel, key) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!fieldsModel || !fieldsModel.length) {
                return null;
            }
            const self = this;
            const encFields = [];
            yield fieldsModel.reduce((promise, field) => {
                return promise.then(() => {
                    return self.encryptField(field, key);
                }).then((encField) => {
                    encFields.push(encField);
                });
            }, Promise.resolve());
            return encFields;
        });
    }
    encryptField(fieldModel, key) {
        return __awaiter(this, void 0, void 0, function* () {
            const field = new _models_domain_field__WEBPACK_IMPORTED_MODULE_7__[/* Field */ "a"]();
            field.type = fieldModel.type;
            // normalize boolean type field values
            if (fieldModel.type === _enums_fieldType__WEBPACK_IMPORTED_MODULE_1__[/* FieldType */ "a"].Boolean && fieldModel.value !== 'true') {
                fieldModel.value = 'false';
            }
            yield this.encryptObjProperty(fieldModel, field, {
                name: null,
                value: null,
            }, key);
            return field;
        });
    }
    encryptPasswordHistories(phModels, key) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!phModels || !phModels.length) {
                return null;
            }
            const self = this;
            const encPhs = [];
            yield phModels.reduce((promise, ph) => {
                return promise.then(() => {
                    return self.encryptPasswordHistory(ph, key);
                }).then((encPh) => {
                    encPhs.push(encPh);
                });
            }, Promise.resolve());
            return encPhs;
        });
    }
    encryptPasswordHistory(phModel, key) {
        return __awaiter(this, void 0, void 0, function* () {
            const ph = new _models_domain_password__WEBPACK_IMPORTED_MODULE_11__[/* Password */ "a"]();
            ph.lastUsedDate = phModel.lastUsedDate;
            yield this.encryptObjProperty(phModel, ph, {
                password: null,
            }, key);
            return ph;
        });
    }
    get(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const userId = yield this.userService.getUserId();
            const localData = yield this.storageService.get(Keys.localData);
            const ciphers = yield this.storageService.get(Keys.ciphersPrefix + userId);
            if (ciphers == null || !ciphers.hasOwnProperty(id)) {
                return null;
            }
            return new _models_domain_cipher__WEBPACK_IMPORTED_MODULE_6__[/* Cipher */ "a"](ciphers[id], false, localData ? localData[id] : null);
        });
    }
    getAll() {
        return __awaiter(this, void 0, void 0, function* () {
            const userId = yield this.userService.getUserId();
            const localData = yield this.storageService.get(Keys.localData);
            const ciphers = yield this.storageService.get(Keys.ciphersPrefix + userId);
            const response = [];
            for (const id in ciphers) {
                if (ciphers.hasOwnProperty(id)) {
                    response.push(new _models_domain_cipher__WEBPACK_IMPORTED_MODULE_6__[/* Cipher */ "a"](ciphers[id], false, localData ? localData[id] : null));
                }
            }
            return response;
        });
    }
    getAllDecrypted() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.decryptedCipherCache != null) {
                return this.decryptedCipherCache;
            }
            const decCiphers = [];
            const hasKey = yield this.cryptoService.hasKey();
            if (!hasKey) {
                throw new Error('No key.');
            }
            const promises = [];
            const ciphers = yield this.getAll();
            ciphers.forEach((cipher) => {
                promises.push(cipher.decrypt().then((c) => decCiphers.push(c)));
            });
            yield Promise.all(promises);
            decCiphers.sort(this.getLocaleSortingFunction());
            this.decryptedCipherCache = decCiphers;
            return this.decryptedCipherCache;
        });
    }
    getAllDecryptedForGrouping(groupingId, folder = true) {
        return __awaiter(this, void 0, void 0, function* () {
            const ciphers = yield this.getAllDecrypted();
            return ciphers.filter((cipher) => {
                if (cipher.isDeleted) {
                    return false;
                }
                if (folder && cipher.folderId === groupingId) {
                    return true;
                }
                else if (!folder && cipher.collectionIds != null && cipher.collectionIds.indexOf(groupingId) > -1) {
                    return true;
                }
                return false;
            });
        });
    }
    getAllDecryptedForUrl(url, includeOtherTypes, defaultMatch = null) {
        return __awaiter(this, void 0, void 0, function* () {
            if (url == null && includeOtherTypes == null) {
                return Promise.resolve([]);
            }
            const domain = _misc_utils__WEBPACK_IMPORTED_MODULE_25__[/* Utils */ "a"].getDomain(url);
            const eqDomainsPromise = domain == null ? Promise.resolve([]) :
                this.settingsService.getEquivalentDomains().then((eqDomains) => {
                    let matches = [];
                    eqDomains.forEach((eqDomain) => {
                        if (eqDomain.length && eqDomain.indexOf(domain) >= 0) {
                            matches = matches.concat(eqDomain);
                        }
                    });
                    if (!matches.length) {
                        matches.push(domain);
                    }
                    return matches;
                });
            const result = yield Promise.all([eqDomainsPromise, this.getAllDecrypted()]);
            const matchingDomains = result[0];
            const ciphers = result[1];
            if (defaultMatch == null) {
                defaultMatch = yield this.storageService.get(_constants_service__WEBPACK_IMPORTED_MODULE_23__[/* ConstantsService */ "a"].defaultUriMatch);
                if (defaultMatch == null) {
                    defaultMatch = _enums_uriMatchType__WEBPACK_IMPORTED_MODULE_2__[/* UriMatchType */ "a"].Domain;
                }
            }
            return ciphers.filter((cipher) => {
                if (cipher.deletedDate != null) {
                    return false;
                }
                if (includeOtherTypes != null && includeOtherTypes.indexOf(cipher.type) > -1) {
                    return true;
                }
                if (url != null && cipher.type === _enums_cipherType__WEBPACK_IMPORTED_MODULE_0__[/* CipherType */ "a"].Login && cipher.login.uris != null) {
                    for (let i = 0; i < cipher.login.uris.length; i++) {
                        const u = cipher.login.uris[i];
                        if (u.uri == null) {
                            continue;
                        }
                        const match = u.match == null ? defaultMatch : u.match;
                        switch (match) {
                            case _enums_uriMatchType__WEBPACK_IMPORTED_MODULE_2__[/* UriMatchType */ "a"].Domain:
                                if (domain != null && u.domain != null && matchingDomains.indexOf(u.domain) > -1) {
                                    if (DomainMatchBlacklist.has(u.domain)) {
                                        const domainUrlHost = _misc_utils__WEBPACK_IMPORTED_MODULE_25__[/* Utils */ "a"].getHost(url);
                                        if (!DomainMatchBlacklist.get(u.domain).has(domainUrlHost)) {
                                            return true;
                                        }
                                    }
                                    else {
                                        return true;
                                    }
                                }
                                break;
                            case _enums_uriMatchType__WEBPACK_IMPORTED_MODULE_2__[/* UriMatchType */ "a"].Host:
                                const urlHost = _misc_utils__WEBPACK_IMPORTED_MODULE_25__[/* Utils */ "a"].getHost(url);
                                if (urlHost != null && urlHost === _misc_utils__WEBPACK_IMPORTED_MODULE_25__[/* Utils */ "a"].getHost(u.uri)) {
                                    return true;
                                }
                                break;
                            case _enums_uriMatchType__WEBPACK_IMPORTED_MODULE_2__[/* UriMatchType */ "a"].Exact:
                                if (url === u.uri) {
                                    return true;
                                }
                                break;
                            case _enums_uriMatchType__WEBPACK_IMPORTED_MODULE_2__[/* UriMatchType */ "a"].StartsWith:
                                if (url.startsWith(u.uri)) {
                                    return true;
                                }
                                break;
                            case _enums_uriMatchType__WEBPACK_IMPORTED_MODULE_2__[/* UriMatchType */ "a"].RegularExpression:
                                try {
                                    const regex = new RegExp(u.uri, 'i');
                                    if (regex.test(url)) {
                                        return true;
                                    }
                                }
                                catch (_a) { }
                                break;
                            case _enums_uriMatchType__WEBPACK_IMPORTED_MODULE_2__[/* UriMatchType */ "a"].Never:
                            default:
                                break;
                        }
                    }
                }
                return false;
            });
        });
    }
    getAllFromApiForOrganization(organizationId) {
        return __awaiter(this, void 0, void 0, function* () {
            const ciphers = yield this.apiService.getCiphersOrganization(organizationId);
            if (ciphers != null && ciphers.data != null && ciphers.data.length) {
                const decCiphers = [];
                const promises = [];
                ciphers.data.forEach((r) => {
                    const data = new _models_data_cipherData__WEBPACK_IMPORTED_MODULE_3__[/* CipherData */ "a"](r);
                    const cipher = new _models_domain_cipher__WEBPACK_IMPORTED_MODULE_6__[/* Cipher */ "a"](data);
                    promises.push(cipher.decrypt().then((c) => decCiphers.push(c)));
                });
                yield Promise.all(promises);
                decCiphers.sort(this.getLocaleSortingFunction());
                return decCiphers;
            }
            else {
                return [];
            }
        });
    }
    getLastUsedForUrl(url) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.getCipherForUrl(url, true, false);
        });
    }
    getLastLaunchedForUrl(url) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.getCipherForUrl(url, false, true);
        });
    }
    getNextCipherForUrl(url) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.getCipherForUrl(url, false, false);
        });
    }
    updateLastUsedIndexForUrl(url) {
        this.sortedCiphersCache.updateLastUsedIndex(url);
    }
    updateLastUsedDate(id) {
        return __awaiter(this, void 0, void 0, function* () {
            let ciphersLocalData = yield this.storageService.get(Keys.localData);
            if (!ciphersLocalData) {
                ciphersLocalData = {};
            }
            if (ciphersLocalData[id]) {
                ciphersLocalData[id].lastUsedDate = new Date().getTime();
            }
            else {
                ciphersLocalData[id] = {
                    lastUsedDate: new Date().getTime(),
                };
            }
            yield this.storageService.save(Keys.localData, ciphersLocalData);
            if (this.decryptedCipherCache == null) {
                return;
            }
            for (let i = 0; i < this.decryptedCipherCache.length; i++) {
                const cached = this.decryptedCipherCache[i];
                if (cached.id === id) {
                    cached.localData = ciphersLocalData[id];
                    break;
                }
            }
        });
    }
    updateLastLaunchedDate(id) {
        return __awaiter(this, void 0, void 0, function* () {
            let ciphersLocalData = yield this.storageService.get(Keys.localData);
            if (!ciphersLocalData) {
                ciphersLocalData = {};
            }
            if (ciphersLocalData[id]) {
                ciphersLocalData[id].lastLaunched = new Date().getTime();
            }
            else {
                ciphersLocalData[id] = {
                    lastUsedDate: new Date().getTime(),
                };
            }
            yield this.storageService.save(Keys.localData, ciphersLocalData);
            if (this.decryptedCipherCache == null) {
                return;
            }
            for (let i = 0; i < this.decryptedCipherCache.length; i++) {
                const cached = this.decryptedCipherCache[i];
                if (cached.id === id) {
                    cached.localData = ciphersLocalData[id];
                    break;
                }
            }
        });
    }
    saveNeverDomain(domain) {
        return __awaiter(this, void 0, void 0, function* () {
            if (domain == null) {
                return;
            }
            let domains = yield this.storageService.get(Keys.neverDomains);
            if (!domains) {
                domains = {};
            }
            domains[domain] = null;
            yield this.storageService.save(Keys.neverDomains, domains);
        });
    }
    saveWithServer(cipher) {
        return __awaiter(this, void 0, void 0, function* () {
            let response;
            if (cipher.id == null) {
                if (cipher.collectionIds != null) {
                    const request = new _models_request_cipherCreateRequest__WEBPACK_IMPORTED_MODULE_18__[/* CipherCreateRequest */ "a"](cipher);
                    response = yield this.apiService.postCipherCreate(request);
                }
                else {
                    const request = new _models_request_cipherRequest__WEBPACK_IMPORTED_MODULE_19__[/* CipherRequest */ "a"](cipher);
                    response = yield this.apiService.postCipher(request);
                }
                cipher.id = response.id;
            }
            else {
                const request = new _models_request_cipherRequest__WEBPACK_IMPORTED_MODULE_19__[/* CipherRequest */ "a"](cipher);
                response = yield this.apiService.putCipher(cipher.id, request);
            }
            const userId = yield this.userService.getUserId();
            const data = new _models_data_cipherData__WEBPACK_IMPORTED_MODULE_3__[/* CipherData */ "a"](response, userId, cipher.collectionIds);
            yield this.upsert(data);
        });
    }
    shareWithServer(cipher, organizationId, collectionIds) {
        return __awaiter(this, void 0, void 0, function* () {
            const attachmentPromises = [];
            if (cipher.attachments != null) {
                cipher.attachments.forEach((attachment) => {
                    if (attachment.key == null) {
                        attachmentPromises.push(this.shareAttachmentWithServer(attachment, cipher.id, organizationId));
                    }
                });
            }
            yield Promise.all(attachmentPromises);
            cipher.organizationId = organizationId;
            cipher.collectionIds = collectionIds;
            const encCipher = yield this.encrypt(cipher);
            const request = new _models_request_cipherShareRequest__WEBPACK_IMPORTED_MODULE_20__[/* CipherShareRequest */ "a"](encCipher);
            const response = yield this.apiService.putShareCipher(cipher.id, request);
            const userId = yield this.userService.getUserId();
            const data = new _models_data_cipherData__WEBPACK_IMPORTED_MODULE_3__[/* CipherData */ "a"](response, userId, collectionIds);
            yield this.upsert(data);
        });
    }
    shareManyWithServer(ciphers, organizationId, collectionIds) {
        return __awaiter(this, void 0, void 0, function* () {
            const promises = [];
            const encCiphers = [];
            for (const cipher of ciphers) {
                cipher.organizationId = organizationId;
                cipher.collectionIds = collectionIds;
                promises.push(this.encrypt(cipher).then((c) => {
                    encCiphers.push(c);
                }));
            }
            yield Promise.all(promises);
            const request = new _models_request_cipherBulkShareRequest__WEBPACK_IMPORTED_MODULE_16__[/* CipherBulkShareRequest */ "a"](encCiphers, collectionIds);
            yield this.apiService.putShareCiphers(request);
            const userId = yield this.userService.getUserId();
            yield this.upsert(encCiphers.map((c) => c.toCipherData(userId)));
        });
    }
    saveAttachmentWithServer(cipher, unencryptedFile, admin = false) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.readAsArrayBuffer(unencryptedFile);
            reader.onload = (evt) => __awaiter(this, void 0, void 0, function* () {
                try {
                    const cData = yield this.saveAttachmentRawWithServer(cipher, unencryptedFile.name, evt.target.result, admin);
                    resolve(cData);
                }
                catch (e) {
                    reject(e);
                }
            });
            reader.onerror = (evt) => {
                reject('Error reading file.');
            };
        });
    }
    saveAttachmentRawWithServer(cipher, filename, data, admin = false) {
        return __awaiter(this, void 0, void 0, function* () {
            const key = yield this.cryptoService.getOrgKey(cipher.organizationId);
            const encFileName = yield this.cryptoService.encrypt(filename, key);
            const dataEncKey = yield this.cryptoService.makeEncKey(key);
            const encData = yield this.cryptoService.encryptToBytes(data, dataEncKey[0]);
            const fd = new FormData();
            try {
                const blob = new Blob([encData], { type: 'application/octet-stream' });
                fd.append('key', dataEncKey[1].encryptedString);
                fd.append('data', blob, encFileName.encryptedString);
            }
            catch (e) {
                if (_misc_utils__WEBPACK_IMPORTED_MODULE_25__[/* Utils */ "a"].isNode && !_misc_utils__WEBPACK_IMPORTED_MODULE_25__[/* Utils */ "a"].isBrowser) {
                    fd.append('key', dataEncKey[1].encryptedString);
                    fd.append('data', Buffer.from(encData), {
                        filepath: encFileName.encryptedString,
                        contentType: 'application/octet-stream',
                    });
                }
                else {
                    throw e;
                }
            }
            let response;
            try {
                if (admin) {
                    response = yield this.apiService.postCipherAttachmentAdmin(cipher.id, fd);
                }
                else {
                    response = yield this.apiService.postCipherAttachment(cipher.id, fd);
                }
            }
            catch (e) {
                throw new Error(e.getSingleMessage());
            }
            const userId = yield this.userService.getUserId();
            const cData = new _models_data_cipherData__WEBPACK_IMPORTED_MODULE_3__[/* CipherData */ "a"](response, userId, cipher.collectionIds);
            if (!admin) {
                yield this.upsert(cData);
            }
            return new _models_domain_cipher__WEBPACK_IMPORTED_MODULE_6__[/* Cipher */ "a"](cData);
        });
    }
    saveCollectionsWithServer(cipher) {
        return __awaiter(this, void 0, void 0, function* () {
            const request = new _models_request_cipherCollectionsRequest__WEBPACK_IMPORTED_MODULE_17__[/* CipherCollectionsRequest */ "a"](cipher.collectionIds);
            yield this.apiService.putCipherCollections(cipher.id, request);
            const userId = yield this.userService.getUserId();
            const data = cipher.toCipherData(userId);
            yield this.upsert(data);
        });
    }
    upsert(cipher) {
        return __awaiter(this, void 0, void 0, function* () {
            const userId = yield this.userService.getUserId();
            let ciphers = yield this.storageService.get(Keys.ciphersPrefix + userId);
            if (ciphers == null) {
                ciphers = {};
            }
            if (cipher instanceof _models_data_cipherData__WEBPACK_IMPORTED_MODULE_3__[/* CipherData */ "a"]) {
                const c = cipher;
                ciphers[c.id] = c;
            }
            else {
                cipher.forEach((c) => {
                    ciphers[c.id] = c;
                });
            }
            yield this.storageService.save(Keys.ciphersPrefix + userId, ciphers);
            this.decryptedCipherCache = null;
        });
    }
    replace(ciphers) {
        return __awaiter(this, void 0, void 0, function* () {
            const userId = yield this.userService.getUserId();
            yield this.storageService.save(Keys.ciphersPrefix + userId, ciphers);
            this.decryptedCipherCache = null;
        });
    }
    clear(userId) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.storageService.remove(Keys.ciphersPrefix + userId);
            this.clearCache();
        });
    }
    moveManyWithServer(ids, folderId) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.apiService.putMoveCiphers(new _models_request_cipherBulkMoveRequest__WEBPACK_IMPORTED_MODULE_14__[/* CipherBulkMoveRequest */ "a"](ids, folderId));
            const userId = yield this.userService.getUserId();
            let ciphers = yield this.storageService.get(Keys.ciphersPrefix + userId);
            if (ciphers == null) {
                ciphers = {};
            }
            ids.forEach((id) => {
                if (ciphers.hasOwnProperty(id)) {
                    ciphers[id].folderId = folderId;
                }
            });
            yield this.storageService.save(Keys.ciphersPrefix + userId, ciphers);
            this.decryptedCipherCache = null;
        });
    }
    delete(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const userId = yield this.userService.getUserId();
            const ciphers = yield this.storageService.get(Keys.ciphersPrefix + userId);
            if (ciphers == null) {
                return;
            }
            if (typeof id === 'string') {
                if (ciphers[id] == null) {
                    return;
                }
                delete ciphers[id];
            }
            else {
                id.forEach((i) => {
                    delete ciphers[i];
                });
            }
            yield this.storageService.save(Keys.ciphersPrefix + userId, ciphers);
            this.decryptedCipherCache = null;
        });
    }
    deleteWithServer(id) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.apiService.deleteCipher(id);
            yield this.delete(id);
        });
    }
    deleteManyWithServer(ids) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.apiService.deleteManyCiphers(new _models_request_cipherBulkDeleteRequest__WEBPACK_IMPORTED_MODULE_13__[/* CipherBulkDeleteRequest */ "a"](ids));
            yield this.delete(ids);
        });
    }
    deleteAttachment(id, attachmentId) {
        return __awaiter(this, void 0, void 0, function* () {
            const userId = yield this.userService.getUserId();
            const ciphers = yield this.storageService.get(Keys.ciphersPrefix + userId);
            if (ciphers == null || !ciphers.hasOwnProperty(id) || ciphers[id].attachments == null) {
                return;
            }
            for (let i = 0; i < ciphers[id].attachments.length; i++) {
                if (ciphers[id].attachments[i].id === attachmentId) {
                    ciphers[id].attachments.splice(i, 1);
                }
            }
            yield this.storageService.save(Keys.ciphersPrefix + userId, ciphers);
            this.decryptedCipherCache = null;
        });
    }
    deleteAttachmentWithServer(id, attachmentId) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.apiService.deleteCipherAttachment(id, attachmentId);
            }
            catch (e) {
                return Promise.reject(e.getSingleMessage());
            }
            yield this.deleteAttachment(id, attachmentId);
        });
    }
    sortCiphersByLastUsed(a, b) {
        const aLastUsed = a.localData && a.localData.lastUsedDate ? a.localData.lastUsedDate : null;
        const bLastUsed = b.localData && b.localData.lastUsedDate ? b.localData.lastUsedDate : null;
        const bothNotNull = aLastUsed != null && bLastUsed != null;
        if (bothNotNull && aLastUsed < bLastUsed) {
            return 1;
        }
        if (aLastUsed != null && bLastUsed == null) {
            return -1;
        }
        if (bothNotNull && aLastUsed > bLastUsed) {
            return -1;
        }
        if (bLastUsed != null && aLastUsed == null) {
            return 1;
        }
        return 0;
    }
    sortCiphersByLastUsedThenName(a, b) {
        const result = this.sortCiphersByLastUsed(a, b);
        if (result !== 0) {
            return result;
        }
        return this.getLocaleSortingFunction()(a, b);
    }
    getLocaleSortingFunction() {
        return (a, b) => {
            let aName = a.name;
            let bName = b.name;
            if (aName == null && bName != null) {
                return -1;
            }
            if (aName != null && bName == null) {
                return 1;
            }
            if (aName == null && bName == null) {
                return 0;
            }
            const result = this.i18nService.collator ? this.i18nService.collator.compare(aName, bName) :
                aName.localeCompare(bName);
            if (result !== 0 || a.type !== _enums_cipherType__WEBPACK_IMPORTED_MODULE_0__[/* CipherType */ "a"].Login || b.type !== _enums_cipherType__WEBPACK_IMPORTED_MODULE_0__[/* CipherType */ "a"].Login) {
                return result;
            }
            if (a.login.username != null) {
                aName += a.login.username;
            }
            if (b.login.username != null) {
                bName += b.login.username;
            }
            return this.i18nService.collator ? this.i18nService.collator.compare(aName, bName) :
                aName.localeCompare(bName);
        };
    }
    softDelete(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const userId = yield this.userService.getUserId();
            const ciphers = yield this.storageService.get(Keys.ciphersPrefix + userId);
            if (ciphers == null) {
                return;
            }
            const setDeletedDate = (cipherId) => {
                if (ciphers[cipherId] == null) {
                    return;
                }
                ciphers[cipherId].deletedDate = new Date().toISOString();
            };
            if (typeof id === 'string') {
                setDeletedDate(id);
            }
            else {
                id.forEach(setDeletedDate);
            }
            yield this.storageService.save(Keys.ciphersPrefix + userId, ciphers);
            this.decryptedCipherCache = null;
        });
    }
    softDeleteWithServer(id) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.apiService.putDeleteCipher(id);
            yield this.softDelete(id);
        });
    }
    softDeleteManyWithServer(ids) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.apiService.putDeleteManyCiphers(new _models_request_cipherBulkDeleteRequest__WEBPACK_IMPORTED_MODULE_13__[/* CipherBulkDeleteRequest */ "a"](ids));
            yield this.softDelete(ids);
        });
    }
    restore(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const userId = yield this.userService.getUserId();
            const ciphers = yield this.storageService.get(Keys.ciphersPrefix + userId);
            if (ciphers == null) {
                return;
            }
            const clearDeletedDate = (cipherId) => {
                if (ciphers[cipherId] == null) {
                    return;
                }
                ciphers[cipherId].deletedDate = null;
            };
            if (typeof id === 'string') {
                clearDeletedDate(id);
            }
            else {
                id.forEach(clearDeletedDate);
            }
            yield this.storageService.save(Keys.ciphersPrefix + userId, ciphers);
            this.decryptedCipherCache = null;
        });
    }
    restoreWithServer(id) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.apiService.putRestoreCipher(id);
            yield this.restore(id);
        });
    }
    restoreManyWithServer(ids) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.apiService.putRestoreManyCiphers(new _models_request_cipherBulkRestoreRequest__WEBPACK_IMPORTED_MODULE_15__[/* CipherBulkRestoreRequest */ "a"](ids));
            yield this.restore(ids);
        });
    }
    // Helpers
    shareAttachmentWithServer(attachmentView, cipherId, organizationId) {
        return __awaiter(this, void 0, void 0, function* () {
            const attachmentResponse = yield this.apiService.nativeFetch(new Request(attachmentView.url, { cache: 'no-store' }));
            if (attachmentResponse.status !== 200) {
                throw Error('Failed to download attachment: ' + attachmentResponse.status.toString());
            }
            const buf = yield attachmentResponse.arrayBuffer();
            const decBuf = yield this.cryptoService.decryptFromBytes(buf, null);
            const key = yield this.cryptoService.getOrgKey(organizationId);
            const encFileName = yield this.cryptoService.encrypt(attachmentView.fileName, key);
            const dataEncKey = yield this.cryptoService.makeEncKey(key);
            const encData = yield this.cryptoService.encryptToBytes(decBuf, dataEncKey[0]);
            const fd = new FormData();
            try {
                const blob = new Blob([encData], { type: 'application/octet-stream' });
                fd.append('key', dataEncKey[1].encryptedString);
                fd.append('data', blob, encFileName.encryptedString);
            }
            catch (e) {
                if (_misc_utils__WEBPACK_IMPORTED_MODULE_25__[/* Utils */ "a"].isNode && !_misc_utils__WEBPACK_IMPORTED_MODULE_25__[/* Utils */ "a"].isBrowser) {
                    fd.append('key', dataEncKey[1].encryptedString);
                    fd.append('data', Buffer.from(encData), {
                        filepath: encFileName.encryptedString,
                        contentType: 'application/octet-stream',
                    });
                }
                else {
                    throw e;
                }
            }
            try {
                yield this.apiService.postShareCipherAttachment(cipherId, attachmentView.id, fd, organizationId);
            }
            catch (e) {
                throw new Error(e.getSingleMessage());
            }
        });
    }
    encryptObjProperty(model, obj, map, key) {
        return __awaiter(this, void 0, void 0, function* () {
            const promises = [];
            const self = this;
            for (const prop in map) {
                if (!map.hasOwnProperty(prop)) {
                    continue;
                }
                // tslint:disable-next-line
                (function (theProp, theObj) {
                    const p = Promise.resolve().then(() => {
                        const modelProp = model[(map[theProp] || theProp)];
                        if (modelProp && modelProp !== '') {
                            return self.cryptoService.encrypt(modelProp, key);
                        }
                        return null;
                    }).then((val) => {
                        theObj[theProp] = val;
                    });
                    promises.push(p);
                })(prop, obj);
            }
            yield Promise.all(promises);
        });
    }
    encryptCipherData(cipher, model, key) {
        return __awaiter(this, void 0, void 0, function* () {
            switch (cipher.type) {
                case _enums_cipherType__WEBPACK_IMPORTED_MODULE_0__[/* CipherType */ "a"].Login:
                    cipher.login = new _models_domain_login__WEBPACK_IMPORTED_MODULE_9__[/* Login */ "a"]();
                    cipher.login.passwordRevisionDate = model.login.passwordRevisionDate;
                    yield this.encryptObjProperty(model.login, cipher.login, {
                        username: null,
                        password: null,
                        totp: null,
                    }, key);
                    if (model.login.uris != null) {
                        cipher.login.uris = [];
                        for (let i = 0; i < model.login.uris.length; i++) {
                            const loginUri = new _models_domain_loginUri__WEBPACK_IMPORTED_MODULE_10__[/* LoginUri */ "a"]();
                            loginUri.match = model.login.uris[i].match;
                            yield this.encryptObjProperty(model.login.uris[i], loginUri, {
                                uri: null,
                            }, key);
                            cipher.login.uris.push(loginUri);
                        }
                    }
                    return;
                case _enums_cipherType__WEBPACK_IMPORTED_MODULE_0__[/* CipherType */ "a"].SecureNote:
                    cipher.secureNote = new _models_domain_secureNote__WEBPACK_IMPORTED_MODULE_12__[/* SecureNote */ "a"]();
                    cipher.secureNote.type = model.secureNote.type;
                    return;
                case _enums_cipherType__WEBPACK_IMPORTED_MODULE_0__[/* CipherType */ "a"].Card:
                    cipher.card = new _models_domain_card__WEBPACK_IMPORTED_MODULE_5__[/* Card */ "a"]();
                    yield this.encryptObjProperty(model.card, cipher.card, {
                        cardholderName: null,
                        brand: null,
                        number: null,
                        expMonth: null,
                        expYear: null,
                        code: null,
                    }, key);
                    return;
                case _enums_cipherType__WEBPACK_IMPORTED_MODULE_0__[/* CipherType */ "a"].Identity:
                    cipher.identity = new _models_domain_identity__WEBPACK_IMPORTED_MODULE_8__[/* Identity */ "a"]();
                    yield this.encryptObjProperty(model.identity, cipher.identity, {
                        title: null,
                        firstName: null,
                        middleName: null,
                        lastName: null,
                        address1: null,
                        address2: null,
                        address3: null,
                        city: null,
                        state: null,
                        postalCode: null,
                        country: null,
                        company: null,
                        email: null,
                        phone: null,
                        ssn: null,
                        username: null,
                        passportNumber: null,
                        licenseNumber: null,
                    }, key);
                    return;
                default:
                    throw new Error('Unknown cipher type.');
            }
        });
    }
    getCipherForUrl(url, lastUsed, lastLaunched) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.sortedCiphersCache.isCached(url)) {
                const ciphers = yield this.getAllDecryptedForUrl(url);
                if (!ciphers) {
                    return null;
                }
                this.sortedCiphersCache.addCiphers(url, ciphers);
            }
            if (lastLaunched) {
                return this.sortedCiphersCache.getLastLaunched(url);
            }
            else if (lastUsed) {
                return this.sortedCiphersCache.getLastUsed(url);
            }
            else {
                return this.sortedCiphersCache.getNext(url);
            }
        });
    }
}
__decorate([
    Object(_misc_sequentialize__WEBPACK_IMPORTED_MODULE_24__[/* sequentialize */ "a"])(ɵ0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], CipherService.prototype, "getAllDecrypted", null);


/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(55).Buffer))

/***/ }),

/***/ 377:
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 427:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CipherBulkMoveRequest; });
class CipherBulkMoveRequest {
    constructor(ids, folderId) {
        this.ids = ids == null ? [] : ids;
        this.folderId = folderId;
    }
}


/***/ }),

/***/ 428:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CipherBulkRestoreRequest; });
class CipherBulkRestoreRequest {
    constructor(ids) {
        this.ids = ids == null ? [] : ids;
    }
}


/***/ }),

/***/ 429:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CipherCollectionsRequest; });
class CipherCollectionsRequest {
    constructor(collectionIds) {
        this.collectionIds = collectionIds == null ? [] : collectionIds;
    }
}


/***/ }),

/***/ 43:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return EventType; });
var EventType;
(function (EventType) {
    EventType[EventType["User_LoggedIn"] = 1000] = "User_LoggedIn";
    EventType[EventType["User_ChangedPassword"] = 1001] = "User_ChangedPassword";
    EventType[EventType["User_Updated2fa"] = 1002] = "User_Updated2fa";
    EventType[EventType["User_Disabled2fa"] = 1003] = "User_Disabled2fa";
    EventType[EventType["User_Recovered2fa"] = 1004] = "User_Recovered2fa";
    EventType[EventType["User_FailedLogIn"] = 1005] = "User_FailedLogIn";
    EventType[EventType["User_FailedLogIn2fa"] = 1006] = "User_FailedLogIn2fa";
    EventType[EventType["User_ClientExportedVault"] = 1007] = "User_ClientExportedVault";
    EventType[EventType["Cipher_Created"] = 1100] = "Cipher_Created";
    EventType[EventType["Cipher_Updated"] = 1101] = "Cipher_Updated";
    EventType[EventType["Cipher_Deleted"] = 1102] = "Cipher_Deleted";
    EventType[EventType["Cipher_AttachmentCreated"] = 1103] = "Cipher_AttachmentCreated";
    EventType[EventType["Cipher_AttachmentDeleted"] = 1104] = "Cipher_AttachmentDeleted";
    EventType[EventType["Cipher_Shared"] = 1105] = "Cipher_Shared";
    EventType[EventType["Cipher_UpdatedCollections"] = 1106] = "Cipher_UpdatedCollections";
    EventType[EventType["Cipher_ClientViewed"] = 1107] = "Cipher_ClientViewed";
    EventType[EventType["Cipher_ClientToggledPasswordVisible"] = 1108] = "Cipher_ClientToggledPasswordVisible";
    EventType[EventType["Cipher_ClientToggledHiddenFieldVisible"] = 1109] = "Cipher_ClientToggledHiddenFieldVisible";
    EventType[EventType["Cipher_ClientToggledCardCodeVisible"] = 1110] = "Cipher_ClientToggledCardCodeVisible";
    EventType[EventType["Cipher_ClientCopiedPassword"] = 1111] = "Cipher_ClientCopiedPassword";
    EventType[EventType["Cipher_ClientCopiedHiddenField"] = 1112] = "Cipher_ClientCopiedHiddenField";
    EventType[EventType["Cipher_ClientCopiedCardCode"] = 1113] = "Cipher_ClientCopiedCardCode";
    EventType[EventType["Cipher_ClientAutofilled"] = 1114] = "Cipher_ClientAutofilled";
    EventType[EventType["Cipher_SoftDeleted"] = 1115] = "Cipher_SoftDeleted";
    EventType[EventType["Cipher_Restored"] = 1116] = "Cipher_Restored";
    EventType[EventType["Collection_Created"] = 1300] = "Collection_Created";
    EventType[EventType["Collection_Updated"] = 1301] = "Collection_Updated";
    EventType[EventType["Collection_Deleted"] = 1302] = "Collection_Deleted";
    EventType[EventType["Group_Created"] = 1400] = "Group_Created";
    EventType[EventType["Group_Updated"] = 1401] = "Group_Updated";
    EventType[EventType["Group_Deleted"] = 1402] = "Group_Deleted";
    EventType[EventType["OrganizationUser_Invited"] = 1500] = "OrganizationUser_Invited";
    EventType[EventType["OrganizationUser_Confirmed"] = 1501] = "OrganizationUser_Confirmed";
    EventType[EventType["OrganizationUser_Updated"] = 1502] = "OrganizationUser_Updated";
    EventType[EventType["OrganizationUser_Removed"] = 1503] = "OrganizationUser_Removed";
    EventType[EventType["OrganizationUser_UpdatedGroups"] = 1504] = "OrganizationUser_UpdatedGroups";
    EventType[EventType["Organization_Updated"] = 1600] = "Organization_Updated";
    EventType[EventType["Organization_PurgedVault"] = 1601] = "Organization_PurgedVault";
    // Organization_ClientExportedVault = 1602,
    EventType[EventType["Policy_Created"] = 1700] = "Policy_Created";
    EventType[EventType["Policy_Updated"] = 1701] = "Policy_Updated";
    EventType[EventType["Policy_Deleted"] = 1702] = "Policy_Deleted";
})(EventType || (EventType = {}));


/***/ }),

/***/ 430:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CipherCreateRequest; });
/* harmony import */ var _cipherRequest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(111);

class CipherCreateRequest {
    constructor(cipher) {
        this.cipher = new _cipherRequest__WEBPACK_IMPORTED_MODULE_0__[/* CipherRequest */ "a"](cipher);
        this.collectionIds = cipher.collectionIds;
    }
}


/***/ }),

/***/ 431:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CipherShareRequest; });
/* harmony import */ var _cipherRequest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(111);

class CipherShareRequest {
    constructor(cipher) {
        this.cipher = new _cipherRequest__WEBPACK_IMPORTED_MODULE_0__[/* CipherRequest */ "a"](cipher);
        this.collectionIds = cipher.collectionIds;
    }
}


/***/ }),

/***/ 432:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SortedCiphersCache; });
const CacheTTL = 3000;
class SortedCiphersCache {
    constructor(comparator) {
        this.comparator = comparator;
        this.sortedCiphersByUrl = new Map();
        this.timeouts = new Map();
    }
    isCached(url) {
        return this.sortedCiphersByUrl.has(url);
    }
    addCiphers(url, ciphers) {
        ciphers.sort(this.comparator);
        this.sortedCiphersByUrl.set(url, new Ciphers(ciphers));
        this.resetTimer(url);
    }
    getLastUsed(url) {
        this.resetTimer(url);
        return this.isCached(url) ? this.sortedCiphersByUrl.get(url).getLastUsed() : null;
    }
    getLastLaunched(url) {
        return this.isCached(url) ? this.sortedCiphersByUrl.get(url).getLastLaunched() : null;
    }
    getNext(url) {
        this.resetTimer(url);
        return this.isCached(url) ? this.sortedCiphersByUrl.get(url).getNext() : null;
    }
    updateLastUsedIndex(url) {
        if (this.isCached(url)) {
            this.sortedCiphersByUrl.get(url).updateLastUsedIndex();
        }
    }
    clear() {
        this.sortedCiphersByUrl.clear();
        this.timeouts.clear();
    }
    resetTimer(url) {
        clearTimeout(this.timeouts.get(url));
        this.timeouts.set(url, setTimeout(() => {
            this.sortedCiphersByUrl.delete(url);
            this.timeouts.delete(url);
        }, CacheTTL));
    }
}
class Ciphers {
    constructor(ciphers) {
        this.ciphers = ciphers;
        this.lastUsedIndex = -1;
    }
    getLastUsed() {
        this.lastUsedIndex = Math.max(this.lastUsedIndex, 0);
        return this.ciphers[this.lastUsedIndex];
    }
    getLastLaunched() {
        const usedCiphers = this.ciphers.filter(cipher => { var _a; return (_a = cipher.localData) === null || _a === void 0 ? void 0 : _a.lastLaunched; });
        const sortedCiphers = usedCiphers.sort((x, y) => y.localData.lastLaunched.valueOf() - x.localData.lastLaunched.valueOf());
        return sortedCiphers[0];
    }
    getNextIndex() {
        return (this.lastUsedIndex + 1) % this.ciphers.length;
    }
    getNext() {
        return this.ciphers[this.getNextIndex()];
    }
    updateLastUsedIndex() {
        this.lastUsedIndex = this.getNextIndex();
    }
}


/***/ }),

/***/ 437:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SendService; });
/* harmony import */ var _models_data_sendData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(152);
/* harmony import */ var _models_request_sendRequest__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(438);
/* harmony import */ var _models_domain_send__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(257);
/* harmony import */ var _models_domain_sendFile__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(254);
/* harmony import */ var _models_domain_sendText__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(255);
/* harmony import */ var _enums_sendType__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(52);
/* harmony import */ var _misc_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(8);
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};







const Keys = {
    sendsPrefix: 'sends_',
};
class SendService {
    constructor(cryptoService, userService, apiService, storageService, i18nService, cryptoFunctionService) {
        this.cryptoService = cryptoService;
        this.userService = userService;
        this.apiService = apiService;
        this.storageService = storageService;
        this.i18nService = i18nService;
        this.cryptoFunctionService = cryptoFunctionService;
    }
    clearCache() {
        this.decryptedSendCache = null;
    }
    encrypt(model, file, password, key) {
        return __awaiter(this, void 0, void 0, function* () {
            let fileData = null;
            const send = new _models_domain_send__WEBPACK_IMPORTED_MODULE_2__[/* Send */ "a"]();
            send.id = model.id;
            send.type = model.type;
            send.disabled = model.disabled;
            send.maxAccessCount = model.maxAccessCount;
            if (model.key == null) {
                model.key = yield this.cryptoFunctionService.randomBytes(16);
                model.cryptoKey = yield this.cryptoService.makeSendKey(model.key);
            }
            if (password != null) {
                const passwordHash = yield this.cryptoFunctionService.pbkdf2(password, model.key, 'sha256', 100000);
                send.password = _misc_utils__WEBPACK_IMPORTED_MODULE_6__[/* Utils */ "a"].fromBufferToB64(passwordHash);
            }
            send.key = yield this.cryptoService.encrypt(model.key, key);
            send.name = yield this.cryptoService.encrypt(model.name, model.cryptoKey);
            send.notes = yield this.cryptoService.encrypt(model.notes, model.cryptoKey);
            if (send.type === _enums_sendType__WEBPACK_IMPORTED_MODULE_5__[/* SendType */ "a"].Text) {
                send.text = new _models_domain_sendText__WEBPACK_IMPORTED_MODULE_4__[/* SendText */ "a"]();
                send.text.text = yield this.cryptoService.encrypt(model.text.text, model.cryptoKey);
                send.text.hidden = model.text.hidden;
            }
            else if (send.type === _enums_sendType__WEBPACK_IMPORTED_MODULE_5__[/* SendType */ "a"].File) {
                send.file = new _models_domain_sendFile__WEBPACK_IMPORTED_MODULE_3__[/* SendFile */ "a"]();
                if (file != null) {
                    fileData = yield this.parseFile(send, file, model.cryptoKey);
                }
            }
            return [send, fileData];
        });
    }
    get(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const userId = yield this.userService.getUserId();
            const sends = yield this.storageService.get(Keys.sendsPrefix + userId);
            if (sends == null || !sends.hasOwnProperty(id)) {
                return null;
            }
            return new _models_domain_send__WEBPACK_IMPORTED_MODULE_2__[/* Send */ "a"](sends[id]);
        });
    }
    getAll() {
        return __awaiter(this, void 0, void 0, function* () {
            const userId = yield this.userService.getUserId();
            const sends = yield this.storageService.get(Keys.sendsPrefix + userId);
            const response = [];
            for (const id in sends) {
                if (sends.hasOwnProperty(id)) {
                    response.push(new _models_domain_send__WEBPACK_IMPORTED_MODULE_2__[/* Send */ "a"](sends[id]));
                }
            }
            return response;
        });
    }
    getAllDecrypted() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.decryptedSendCache != null) {
                return this.decryptedSendCache;
            }
            const hasKey = yield this.cryptoService.hasKey();
            if (!hasKey) {
                throw new Error('No key.');
            }
            const decSends = [];
            const promises = [];
            const sends = yield this.getAll();
            sends.forEach((send) => {
                promises.push(send.decrypt().then((f) => decSends.push(f)));
            });
            yield Promise.all(promises);
            decSends.sort(_misc_utils__WEBPACK_IMPORTED_MODULE_6__[/* Utils */ "a"].getSortFunction(this.i18nService, 'name'));
            this.decryptedSendCache = decSends;
            return this.decryptedSendCache;
        });
    }
    saveWithServer(sendData) {
        return __awaiter(this, void 0, void 0, function* () {
            const request = new _models_request_sendRequest__WEBPACK_IMPORTED_MODULE_1__[/* SendRequest */ "a"](sendData[0]);
            let response;
            if (sendData[0].id == null) {
                if (sendData[0].type === _enums_sendType__WEBPACK_IMPORTED_MODULE_5__[/* SendType */ "a"].Text) {
                    response = yield this.apiService.postSend(request);
                }
                else {
                    const fd = new FormData();
                    try {
                        const blob = new Blob([sendData[1]], { type: 'application/octet-stream' });
                        fd.append('model', JSON.stringify(request));
                        fd.append('data', blob, sendData[0].file.fileName.encryptedString);
                    }
                    catch (e) {
                        if (_misc_utils__WEBPACK_IMPORTED_MODULE_6__[/* Utils */ "a"].isNode && !_misc_utils__WEBPACK_IMPORTED_MODULE_6__[/* Utils */ "a"].isBrowser) {
                            fd.append('model', JSON.stringify(request));
                            fd.append('data', Buffer.from(sendData[1]), {
                                filepath: sendData[0].file.fileName.encryptedString,
                                contentType: 'application/octet-stream',
                            });
                        }
                        else {
                            throw e;
                        }
                    }
                    response = yield this.apiService.postSendFile(fd);
                }
                sendData[0].id = response.id;
            }
            else {
                response = yield this.apiService.putSend(sendData[0].id, request);
            }
            const userId = yield this.userService.getUserId();
            const data = new _models_data_sendData__WEBPACK_IMPORTED_MODULE_0__[/* SendData */ "a"](response, userId);
            yield this.upsert(data);
        });
    }
    upsert(send) {
        return __awaiter(this, void 0, void 0, function* () {
            const userId = yield this.userService.getUserId();
            let sends = yield this.storageService.get(Keys.sendsPrefix + userId);
            if (sends == null) {
                sends = {};
            }
            if (send instanceof _models_data_sendData__WEBPACK_IMPORTED_MODULE_0__[/* SendData */ "a"]) {
                const s = send;
                sends[s.id] = s;
            }
            else {
                send.forEach((s) => {
                    sends[s.id] = s;
                });
            }
            yield this.storageService.save(Keys.sendsPrefix + userId, sends);
            this.decryptedSendCache = null;
        });
    }
    replace(sends) {
        return __awaiter(this, void 0, void 0, function* () {
            const userId = yield this.userService.getUserId();
            yield this.storageService.save(Keys.sendsPrefix + userId, sends);
            this.decryptedSendCache = null;
        });
    }
    clear(userId) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.storageService.remove(Keys.sendsPrefix + userId);
            this.decryptedSendCache = null;
        });
    }
    delete(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const userId = yield this.userService.getUserId();
            const sends = yield this.storageService.get(Keys.sendsPrefix + userId);
            if (sends == null) {
                return;
            }
            if (typeof id === 'string') {
                if (sends[id] == null) {
                    return;
                }
                delete sends[id];
            }
            else {
                id.forEach((i) => {
                    delete sends[i];
                });
            }
            yield this.storageService.save(Keys.sendsPrefix + userId, sends);
            this.decryptedSendCache = null;
        });
    }
    deleteWithServer(id) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.apiService.deleteSend(id);
            yield this.delete(id);
        });
    }
    parseFile(send, file, key) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.readAsArrayBuffer(file);
            reader.onload = (evt) => __awaiter(this, void 0, void 0, function* () {
                try {
                    send.file.fileName = yield this.cryptoService.encrypt(file.name, key);
                    const fileData = yield this.cryptoService.encryptToBytes(evt.target.result, key);
                    resolve(fileData);
                }
                catch (e) {
                    reject(e);
                }
            });
            reader.onerror = (evt) => {
                reject('Error reading file.');
            };
        });
    }
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(55).Buffer))

/***/ }),

/***/ 438:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SendRequest; });
/* harmony import */ var _enums_sendType__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(52);
/* harmony import */ var _api_sendFileApi__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(164);
/* harmony import */ var _api_sendTextApi__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(165);



class SendRequest {
    constructor(send) {
        this.type = send.type;
        this.name = send.name ? send.name.encryptedString : null;
        this.notes = send.notes ? send.notes.encryptedString : null;
        this.maxAccessCount = send.maxAccessCount;
        this.expirationDate = send.expirationDate != null ? send.expirationDate.toISOString() : null;
        this.deletionDate = send.deletionDate != null ? send.deletionDate.toISOString() : null;
        this.key = send.key != null ? send.key.encryptedString : null;
        this.password = send.password;
        this.disabled = send.disabled;
        switch (this.type) {
            case _enums_sendType__WEBPACK_IMPORTED_MODULE_0__[/* SendType */ "a"].Text:
                this.text = new _api_sendTextApi__WEBPACK_IMPORTED_MODULE_2__[/* SendTextApi */ "a"]();
                this.text.text = send.text.text != null ? send.text.text.encryptedString : null;
                this.text.hidden = send.text.hidden;
                break;
            case _enums_sendType__WEBPACK_IMPORTED_MODULE_0__[/* SendType */ "a"].File:
                this.file = new _api_sendFileApi__WEBPACK_IMPORTED_MODULE_1__[/* SendFileApi */ "a"]();
                this.file.fileName = send.file.fileName != null ? send.file.fileName.encryptedString : null;
                break;
            default:
                break;
        }
    }
}


/***/ }),

/***/ 441:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./jslib/src/models/request/cipherRequest.ts + 1 modules
var cipherRequest = __webpack_require__(111);

// CONCATENATED MODULE: ./jslib/src/models/request/cipherWithIdRequest.ts

class cipherWithIdRequest_CipherWithIdRequest extends cipherRequest["a" /* CipherRequest */] {
    constructor(cipher) {
        super(cipher);
        this.id = cipher.id;
    }
}

// CONCATENATED MODULE: ./jslib/src/models/request/cipherBulkShareRequest.ts
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return cipherBulkShareRequest_CipherBulkShareRequest; });

class cipherBulkShareRequest_CipherBulkShareRequest {
    constructor(ciphers, collectionIds) {
        if (ciphers != null) {
            this.ciphers = [];
            ciphers.forEach((c) => {
                this.ciphers.push(new cipherWithIdRequest_CipherWithIdRequest(c));
            });
        }
        this.collectionIds = collectionIds;
    }
}


/***/ }),

/***/ 46:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return FieldType; });
var FieldType;
(function (FieldType) {
    FieldType[FieldType["Text"] = 0] = "Text";
    FieldType[FieldType["Hidden"] = 1] = "Hidden";
    FieldType[FieldType["Boolean"] = 2] = "Boolean";
})(FieldType || (FieldType = {}));


/***/ }),

/***/ 52:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SendType; });
var SendType;
(function (SendType) {
    SendType[SendType["Text"] = 0] = "Text";
    SendType[SendType["File"] = 1] = "File";
})(SendType || (SendType = {}));


/***/ }),

/***/ 6:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ConstantsService; });
class ConstantsService {
    constructor() {
        this.environmentUrlsKey = ConstantsService.environmentUrlsKey;
        this.disableGaKey = ConstantsService.disableGaKey;
        this.disableAddLoginNotificationKey = ConstantsService.disableAddLoginNotificationKey;
        this.disableContextMenuItemKey = ConstantsService.disableContextMenuItemKey;
        this.disableFaviconKey = ConstantsService.disableFaviconKey;
        this.disableAutoTotpCopyKey = ConstantsService.disableAutoTotpCopyKey;
        this.enableAutoFillOnPageLoadKey = ConstantsService.enableAutoFillOnPageLoadKey;
        this.vaultTimeoutKey = ConstantsService.vaultTimeoutKey;
        this.vaultTimeoutActionKey = ConstantsService.vaultTimeoutActionKey;
        this.lastActiveKey = ConstantsService.lastActiveKey;
        this.neverDomainsKey = ConstantsService.neverDomainsKey;
        this.installedVersionKey = ConstantsService.installedVersionKey;
        this.localeKey = ConstantsService.localeKey;
        this.themeKey = ConstantsService.themeKey;
        this.collapsedGroupingsKey = ConstantsService.collapsedGroupingsKey;
        this.autoConfirmFingerprints = ConstantsService.autoConfirmFingerprints;
        this.dontShowCardsCurrentTab = ConstantsService.dontShowCardsCurrentTab;
        this.dontShowIdentitiesCurrentTab = ConstantsService.dontShowIdentitiesCurrentTab;
        this.defaultUriMatch = ConstantsService.defaultUriMatch;
        this.pinProtectedKey = ConstantsService.pinProtectedKey;
        this.protectedPin = ConstantsService.protectedPin;
        this.clearClipboardKey = ConstantsService.clearClipboardKey;
        this.eventCollectionKey = ConstantsService.eventCollectionKey;
        this.ssoCodeVerifierKey = ConstantsService.ssoCodeVerifierKey;
        this.ssoStateKey = ConstantsService.ssoStateKey;
        this.biometricUnlockKey = ConstantsService.biometricUnlockKey;
        this.biometricText = ConstantsService.biometricText;
        this.biometricAwaitingAcceptance = ConstantsService.biometricAwaitingAcceptance;
    }
}
ConstantsService.environmentUrlsKey = 'environmentUrls';
ConstantsService.disableGaKey = 'disableGa';
ConstantsService.disableAddLoginNotificationKey = 'disableAddLoginNotification';
ConstantsService.disableChangedPasswordNotificationKey = 'disableChangedPasswordNotification';
ConstantsService.disableContextMenuItemKey = 'disableContextMenuItem';
ConstantsService.disableFaviconKey = 'disableFavicon';
ConstantsService.disableAutoTotpCopyKey = 'disableAutoTotpCopy';
ConstantsService.enableAutoFillOnPageLoadKey = 'enableAutoFillOnPageLoad';
ConstantsService.vaultTimeoutKey = 'lockOption';
ConstantsService.vaultTimeoutActionKey = 'vaultTimeoutAction';
ConstantsService.lastActiveKey = 'lastActive';
ConstantsService.neverDomainsKey = 'neverDomains';
ConstantsService.installedVersionKey = 'installedVersion';
ConstantsService.localeKey = 'locale';
ConstantsService.themeKey = 'theme';
ConstantsService.collapsedGroupingsKey = 'collapsedGroupings';
ConstantsService.autoConfirmFingerprints = 'autoConfirmFingerprints';
ConstantsService.dontShowCardsCurrentTab = 'dontShowCardsCurrentTab';
ConstantsService.dontShowIdentitiesCurrentTab = 'dontShowIdentitiesCurrentTab';
ConstantsService.defaultUriMatch = 'defaultUriMatch';
ConstantsService.pinProtectedKey = 'pinProtectedKey';
ConstantsService.protectedPin = 'protectedPin';
ConstantsService.clearClipboardKey = 'clearClipboardKey';
ConstantsService.eventCollectionKey = 'eventCollection';
ConstantsService.ssoCodeVerifierKey = 'ssoCodeVerifier';
ConstantsService.ssoStateKey = 'ssoState';
ConstantsService.biometricUnlockKey = 'biometric';
ConstantsService.biometricText = 'biometricText';
ConstantsService.biometricAwaitingAcceptance = 'biometricAwaitingAcceptance';


/***/ }),

/***/ 60:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return LoginView; });
class LoginView {
    constructor(l) {
        this.username = null;
        this.password = null;
        this.passwordRevisionDate = null;
        this.totp = null;
        this.uris = null;
        if (!l) {
            return;
        }
        this.passwordRevisionDate = l.passwordRevisionDate;
    }
    get uri() {
        return this.hasUris ? this.uris[0].uri : null;
    }
    get maskedPassword() {
        return this.password != null ? '••••••••' : null;
    }
    get subTitle() {
        return this.username;
    }
    get canLaunch() {
        return this.hasUris && this.uris.some((u) => u.canLaunch);
    }
    get launchUri() {
        if (this.hasUris) {
            const uri = this.uris.find((u) => u.canLaunch);
            if (uri != null) {
                return uri.launchUri;
            }
        }
        return null;
    }
    get hasUris() {
        return this.uris != null && this.uris.length > 0;
    }
}


/***/ }),

/***/ 63:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CipherString; });
/* harmony import */ var _enums_encryptionType__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(21);
/* harmony import */ var _misc_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8);
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class CipherString {
    constructor(encryptedStringOrType, data, iv, mac) {
        if (data != null) {
            // data and header
            const encType = encryptedStringOrType;
            if (iv != null) {
                this.encryptedString = encType + '.' + iv + '|' + data;
            }
            else {
                this.encryptedString = encType + '.' + data;
            }
            // mac
            if (mac != null) {
                this.encryptedString += ('|' + mac);
            }
            this.encryptionType = encType;
            this.data = data;
            this.iv = iv;
            this.mac = mac;
            return;
        }
        this.encryptedString = encryptedStringOrType;
        if (!this.encryptedString) {
            return;
        }
        const headerPieces = this.encryptedString.split('.');
        let encPieces = null;
        if (headerPieces.length === 2) {
            try {
                this.encryptionType = parseInt(headerPieces[0], null);
                encPieces = headerPieces[1].split('|');
            }
            catch (e) {
                return;
            }
        }
        else {
            encPieces = this.encryptedString.split('|');
            this.encryptionType = encPieces.length === 3 ? _enums_encryptionType__WEBPACK_IMPORTED_MODULE_0__[/* EncryptionType */ "a"].AesCbc128_HmacSha256_B64 :
                _enums_encryptionType__WEBPACK_IMPORTED_MODULE_0__[/* EncryptionType */ "a"].AesCbc256_B64;
        }
        switch (this.encryptionType) {
            case _enums_encryptionType__WEBPACK_IMPORTED_MODULE_0__[/* EncryptionType */ "a"].AesCbc128_HmacSha256_B64:
            case _enums_encryptionType__WEBPACK_IMPORTED_MODULE_0__[/* EncryptionType */ "a"].AesCbc256_HmacSha256_B64:
                if (encPieces.length !== 3) {
                    return;
                }
                this.iv = encPieces[0];
                this.data = encPieces[1];
                this.mac = encPieces[2];
                break;
            case _enums_encryptionType__WEBPACK_IMPORTED_MODULE_0__[/* EncryptionType */ "a"].AesCbc256_B64:
                if (encPieces.length !== 2) {
                    return;
                }
                this.iv = encPieces[0];
                this.data = encPieces[1];
                break;
            case _enums_encryptionType__WEBPACK_IMPORTED_MODULE_0__[/* EncryptionType */ "a"].Rsa2048_OaepSha256_B64:
            case _enums_encryptionType__WEBPACK_IMPORTED_MODULE_0__[/* EncryptionType */ "a"].Rsa2048_OaepSha1_B64:
                if (encPieces.length !== 1) {
                    return;
                }
                this.data = encPieces[0];
                break;
            default:
                return;
        }
    }
    decrypt(orgId, key = null) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.decryptedValue != null) {
                return this.decryptedValue;
            }
            let cryptoService;
            const containerService = _misc_utils__WEBPACK_IMPORTED_MODULE_1__[/* Utils */ "a"].global.bitwardenContainerService;
            if (containerService) {
                cryptoService = containerService.getCryptoService();
            }
            else {
                throw new Error('global bitwardenContainerService not initialized.');
            }
            try {
                if (key == null) {
                    key = yield cryptoService.getOrgKey(orgId);
                }
                this.decryptedValue = yield cryptoService.decryptToUtf8(this, key);
            }
            catch (e) {
                this.decryptedValue = '[error: cannot decrypt]';
            }
            return this.decryptedValue;
        });
    }
}


/***/ }),

/***/ 65:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SymmetricCryptoKey; });
/* harmony import */ var _enums_encryptionType__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(21);
/* harmony import */ var _misc_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8);


class SymmetricCryptoKey {
    constructor(key, encType) {
        if (key == null) {
            throw new Error('Must provide key');
        }
        if (encType == null) {
            if (key.byteLength === 32) {
                encType = _enums_encryptionType__WEBPACK_IMPORTED_MODULE_0__[/* EncryptionType */ "a"].AesCbc256_B64;
            }
            else if (key.byteLength === 64) {
                encType = _enums_encryptionType__WEBPACK_IMPORTED_MODULE_0__[/* EncryptionType */ "a"].AesCbc256_HmacSha256_B64;
            }
            else {
                throw new Error('Unable to determine encType.');
            }
        }
        this.key = key;
        this.encType = encType;
        if (encType === _enums_encryptionType__WEBPACK_IMPORTED_MODULE_0__[/* EncryptionType */ "a"].AesCbc256_B64 && key.byteLength === 32) {
            this.encKey = key;
            this.macKey = null;
        }
        else if (encType === _enums_encryptionType__WEBPACK_IMPORTED_MODULE_0__[/* EncryptionType */ "a"].AesCbc128_HmacSha256_B64 && key.byteLength === 32) {
            this.encKey = key.slice(0, 16);
            this.macKey = key.slice(16, 32);
        }
        else if (encType === _enums_encryptionType__WEBPACK_IMPORTED_MODULE_0__[/* EncryptionType */ "a"].AesCbc256_HmacSha256_B64 && key.byteLength === 64) {
            this.encKey = key.slice(0, 32);
            this.macKey = key.slice(32, 64);
        }
        else {
            throw new Error('Unsupported encType/key length.');
        }
        if (this.key != null) {
            this.keyB64 = _misc_utils__WEBPACK_IMPORTED_MODULE_1__[/* Utils */ "a"].fromBufferToB64(this.key);
        }
        if (this.encKey != null) {
            this.encKeyB64 = _misc_utils__WEBPACK_IMPORTED_MODULE_1__[/* Utils */ "a"].fromBufferToB64(this.encKey);
        }
        if (this.macKey != null) {
            this.macKeyB64 = _misc_utils__WEBPACK_IMPORTED_MODULE_1__[/* Utils */ "a"].fromBufferToB64(this.macKey);
        }
    }
}


/***/ }),

/***/ 655:
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 657:
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 687:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

// EXTERNAL MODULE: ./jslib/src/enums/cipherType.ts
var cipherType = __webpack_require__(11);

// EXTERNAL MODULE: ./jslib/src/enums/deviceType.ts
var deviceType = __webpack_require__(15);

// EXTERNAL MODULE: ./jslib/src/enums/encryptionType.ts
var encryptionType = __webpack_require__(21);

// EXTERNAL MODULE: ./jslib/src/enums/fieldType.ts
var fieldType = __webpack_require__(46);

// CONCATENATED MODULE: ./jslib/src/enums/logLevelType.ts
var LogLevelType;
(function (LogLevelType) {
    LogLevelType[LogLevelType["Debug"] = 0] = "Debug";
    LogLevelType[LogLevelType["Info"] = 1] = "Info";
    LogLevelType[LogLevelType["Warning"] = 2] = "Warning";
    LogLevelType[LogLevelType["Error"] = 3] = "Error";
})(LogLevelType || (LogLevelType = {}));

// EXTERNAL MODULE: ./jslib/src/enums/secureNoteType.ts
var secureNoteType = __webpack_require__(144);

// EXTERNAL MODULE: ./jslib/src/enums/twoFactorProviderType.ts
var twoFactorProviderType = __webpack_require__(14);

// EXTERNAL MODULE: ./jslib/src/enums/uriMatchType.ts
var uriMatchType = __webpack_require__(25);

// CONCATENATED MODULE: ./jslib/src/enums/index.ts









// EXTERNAL MODULE: ./jslib/src/models/response/baseResponse.ts
var baseResponse = __webpack_require__(12);

// CONCATENATED MODULE: ./jslib/src/models/response/apiKeyResponse.ts

class apiKeyResponse_ApiKeyResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.apiKey = this.getResponseProperty('ApiKey');
    }
}

// CONCATENATED MODULE: ./jslib/src/models/response/billingResponse.ts

class billingResponse_BillingResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.invoices = [];
        this.transactions = [];
        this.balance = this.getResponseProperty('Balance');
        const paymentSource = this.getResponseProperty('PaymentSource');
        const transactions = this.getResponseProperty('Transactions');
        const invoices = this.getResponseProperty('Invoices');
        this.paymentSource = paymentSource == null ? null : new billingResponse_BillingSourceResponse(paymentSource);
        if (transactions != null) {
            this.transactions = transactions.map((t) => new billingResponse_BillingTransactionResponse(t));
        }
        if (invoices != null) {
            this.invoices = invoices.map((i) => new billingResponse_BillingInvoiceResponse(i));
        }
    }
}
class billingResponse_BillingSourceResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.type = this.getResponseProperty('Type');
        this.cardBrand = this.getResponseProperty('CardBrand');
        this.description = this.getResponseProperty('Description');
        this.needsVerification = this.getResponseProperty('NeedsVerification');
    }
}
class billingResponse_BillingInvoiceResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.url = this.getResponseProperty('Url');
        this.pdfUrl = this.getResponseProperty('PdfUrl');
        this.number = this.getResponseProperty('Number');
        this.paid = this.getResponseProperty('Paid');
        this.date = this.getResponseProperty('Date');
        this.amount = this.getResponseProperty('Amount');
    }
}
class billingResponse_BillingTransactionResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.createdDate = this.getResponseProperty('CreatedDate');
        this.amount = this.getResponseProperty('Amount');
        this.refunded = this.getResponseProperty('Refunded');
        this.partiallyRefunded = this.getResponseProperty('PartiallyRefunded');
        this.refundedAmount = this.getResponseProperty('RefundedAmount');
        this.type = this.getResponseProperty('Type');
        this.paymentMethodType = this.getResponseProperty('PaymentMethodType');
        this.details = this.getResponseProperty('Details');
    }
}

// CONCATENATED MODULE: ./jslib/src/models/response/breachAccountResponse.ts

class breachAccountResponse_BreachAccountResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.addedDate = this.getResponseProperty('AddedDate');
        this.breachDate = this.getResponseProperty('BreachDate');
        this.dataClasses = this.getResponseProperty('DataClasses');
        this.description = this.getResponseProperty('Description');
        this.domain = this.getResponseProperty('Domain');
        this.isActive = this.getResponseProperty('IsActive');
        this.isVerified = this.getResponseProperty('IsVerified');
        this.logoPath = this.getResponseProperty('LogoPath');
        this.modifiedDate = this.getResponseProperty('ModifiedDate');
        this.name = this.getResponseProperty('Name');
        this.pwnCount = this.getResponseProperty('PwnCount');
        this.title = this.getResponseProperty('Title');
    }
}

// CONCATENATED MODULE: ./jslib/src/models/response/attachmentResponse.ts

class attachmentResponse_AttachmentResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.id = this.getResponseProperty('Id');
        this.url = this.getResponseProperty('Url');
        this.fileName = this.getResponseProperty('FileName');
        this.key = this.getResponseProperty('Key');
        this.size = this.getResponseProperty('Size');
        this.sizeName = this.getResponseProperty('SizeName');
    }
}

// CONCATENATED MODULE: ./jslib/src/models/response/passwordHistoryResponse.ts

class passwordHistoryResponse_PasswordHistoryResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.password = this.getResponseProperty('Password');
        this.lastUsedDate = this.getResponseProperty('LastUsedDate');
    }
}

// EXTERNAL MODULE: ./jslib/src/models/api/cardApi.ts
var cardApi = __webpack_require__(228);

// EXTERNAL MODULE: ./jslib/src/models/api/fieldApi.ts
var fieldApi = __webpack_require__(229);

// EXTERNAL MODULE: ./jslib/src/models/api/identityApi.ts
var identityApi = __webpack_require__(230);

// EXTERNAL MODULE: ./jslib/src/models/api/loginApi.ts
var loginApi = __webpack_require__(231);

// EXTERNAL MODULE: ./jslib/src/models/api/secureNoteApi.ts
var secureNoteApi = __webpack_require__(233);

// CONCATENATED MODULE: ./jslib/src/models/response/cipherResponse.ts








class cipherResponse_CipherResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.id = this.getResponseProperty('Id');
        this.organizationId = this.getResponseProperty('OrganizationId');
        this.folderId = this.getResponseProperty('FolderId') || null;
        this.type = this.getResponseProperty('Type');
        this.name = this.getResponseProperty('Name');
        this.notes = this.getResponseProperty('Notes');
        this.favorite = this.getResponseProperty('Favorite') || false;
        this.edit = !!this.getResponseProperty('Edit');
        if (this.getResponseProperty('ViewPassword') == null) {
            this.viewPassword = true;
        }
        else {
            this.viewPassword = this.getResponseProperty('ViewPassword');
        }
        this.organizationUseTotp = this.getResponseProperty('OrganizationUseTotp');
        this.revisionDate = this.getResponseProperty('RevisionDate');
        this.collectionIds = this.getResponseProperty('CollectionIds');
        this.deletedDate = this.getResponseProperty('DeletedDate');
        const login = this.getResponseProperty('Login');
        if (login != null) {
            this.login = new loginApi["a" /* LoginApi */](login);
        }
        const card = this.getResponseProperty('Card');
        if (card != null) {
            this.card = new cardApi["a" /* CardApi */](card);
        }
        const identity = this.getResponseProperty('Identity');
        if (identity != null) {
            this.identity = new identityApi["a" /* IdentityApi */](identity);
        }
        const secureNote = this.getResponseProperty('SecureNote');
        if (secureNote != null) {
            this.secureNote = new secureNoteApi["a" /* SecureNoteApi */](secureNote);
        }
        const fields = this.getResponseProperty('Fields');
        if (fields != null) {
            this.fields = fields.map((f) => new fieldApi["a" /* FieldApi */](f));
        }
        const attachments = this.getResponseProperty('Attachments');
        if (attachments != null) {
            this.attachments = attachments.map((a) => new attachmentResponse_AttachmentResponse(a));
        }
        const passwordHistory = this.getResponseProperty('PasswordHistory');
        if (passwordHistory != null) {
            this.passwordHistory = passwordHistory.map((h) => new passwordHistoryResponse_PasswordHistoryResponse(h));
        }
    }
}

// CONCATENATED MODULE: ./jslib/src/models/response/selectionReadOnlyResponse.ts

class selectionReadOnlyResponse_SelectionReadOnlyResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.id = this.getResponseProperty('Id');
        this.readOnly = this.getResponseProperty('ReadOnly');
        this.hidePasswords = this.getResponseProperty('HidePasswords');
    }
}

// CONCATENATED MODULE: ./jslib/src/models/response/collectionResponse.ts


class collectionResponse_CollectionResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.id = this.getResponseProperty('Id');
        this.organizationId = this.getResponseProperty('OrganizationId');
        this.name = this.getResponseProperty('Name');
        this.externalId = this.getResponseProperty('ExternalId');
    }
}
class CollectionDetailsResponse extends collectionResponse_CollectionResponse {
    constructor(response) {
        super(response);
        this.readOnly = this.getResponseProperty('ReadOnly') || false;
    }
}
class collectionResponse_CollectionGroupDetailsResponse extends collectionResponse_CollectionResponse {
    constructor(response) {
        super(response);
        this.groups = [];
        const groups = this.getResponseProperty('Groups');
        if (groups != null) {
            this.groups = groups.map((g) => new selectionReadOnlyResponse_SelectionReadOnlyResponse(g));
        }
    }
}

// CONCATENATED MODULE: ./jslib/src/models/response/globalDomainResponse.ts

class globalDomainResponse_GlobalDomainResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.type = this.getResponseProperty('Type');
        this.domains = this.getResponseProperty('Domains');
        this.excluded = this.getResponseProperty('Excluded');
    }
}

// CONCATENATED MODULE: ./jslib/src/models/response/domainsResponse.ts


class domainsResponse_DomainsResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.globalEquivalentDomains = [];
        this.equivalentDomains = this.getResponseProperty('EquivalentDomains');
        const globalEquivalentDomains = this.getResponseProperty('GlobalEquivalentDomains');
        if (globalEquivalentDomains != null) {
            this.globalEquivalentDomains = globalEquivalentDomains.map((d) => new globalDomainResponse_GlobalDomainResponse(d));
        }
        else {
            this.globalEquivalentDomains = [];
        }
    }
}

// CONCATENATED MODULE: ./jslib/src/models/response/errorResponse.ts

class errorResponse_ErrorResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response, status, identityResponse) {
        super(response);
        let errorModel = null;
        if (response != null) {
            const responseErrorModel = this.getResponseProperty('ErrorModel');
            if (responseErrorModel && identityResponse) {
                errorModel = responseErrorModel;
            }
            else {
                errorModel = response;
            }
        }
        if (errorModel) {
            this.message = this.getResponseProperty('Message', errorModel);
            this.validationErrors = this.getResponseProperty('ValidationErrors', errorModel);
        }
        else {
            if (status === 429) {
                this.message = 'Rate limit exceeded. Try again later.';
            }
        }
        this.statusCode = status;
    }
    getSingleMessage() {
        if (this.validationErrors == null) {
            return this.message;
        }
        for (const key in this.validationErrors) {
            if (!this.validationErrors.hasOwnProperty(key)) {
                continue;
            }
            if (this.validationErrors[key].length) {
                return this.validationErrors[key][0];
            }
        }
        return this.message;
    }
    getAllMessages() {
        const messages = [];
        if (this.validationErrors == null) {
            return messages;
        }
        for (const key in this.validationErrors) {
            if (!this.validationErrors.hasOwnProperty(key)) {
                continue;
            }
            this.validationErrors[key].forEach((item) => {
                let prefix = '';
                if (key.indexOf('[') > -1 && key.indexOf(']') > -1) {
                    const lastSep = key.lastIndexOf('.');
                    prefix = key.substr(0, lastSep > -1 ? lastSep : key.length) + ': ';
                }
                messages.push(prefix + item);
            });
        }
        return messages;
    }
}

// CONCATENATED MODULE: ./jslib/src/models/response/eventResponse.ts

class eventResponse_EventResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.type = this.getResponseProperty('Type');
        this.userId = this.getResponseProperty('UserId');
        this.organizationId = this.getResponseProperty('OrganizationId');
        this.cipherId = this.getResponseProperty('CipherId');
        this.collectionId = this.getResponseProperty('CollectionId');
        this.groupId = this.getResponseProperty('GroupId');
        this.organizationUserId = this.getResponseProperty('OrganizationUserId');
        this.actingUserId = this.getResponseProperty('ActingUserId');
        this.date = this.getResponseProperty('Date');
        this.deviceType = this.getResponseProperty('DeviceType');
        this.ipAddress = this.getResponseProperty('IpAddress');
    }
}

// CONCATENATED MODULE: ./jslib/src/models/response/folderResponse.ts

class folderResponse_FolderResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.id = this.getResponseProperty('Id');
        this.name = this.getResponseProperty('Name');
        this.revisionDate = this.getResponseProperty('RevisionDate');
    }
}

// CONCATENATED MODULE: ./jslib/src/models/response/groupResponse.ts


class groupResponse_GroupResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.id = this.getResponseProperty('Id');
        this.organizationId = this.getResponseProperty('OrganizationId');
        this.name = this.getResponseProperty('Name');
        this.accessAll = this.getResponseProperty('AccessAll');
        this.externalId = this.getResponseProperty('ExternalId');
    }
}
class groupResponse_GroupDetailsResponse extends groupResponse_GroupResponse {
    constructor(response) {
        super(response);
        this.collections = [];
        const collections = this.getResponseProperty('Collections');
        if (collections != null) {
            this.collections = collections.map((c) => new selectionReadOnlyResponse_SelectionReadOnlyResponse(c));
        }
    }
}

// CONCATENATED MODULE: ./jslib/src/models/response/identityTokenResponse.ts

class identityTokenResponse_IdentityTokenResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.accessToken = response.access_token;
        this.expiresIn = response.expires_in;
        this.refreshToken = response.refresh_token;
        this.tokenType = response.token_type;
        this.resetMasterPassword = this.getResponseProperty('ResetMasterPassword');
        this.privateKey = this.getResponseProperty('PrivateKey');
        this.key = this.getResponseProperty('Key');
        this.twoFactorToken = this.getResponseProperty('TwoFactorToken');
        this.kdf = this.getResponseProperty('Kdf');
        this.kdfIterations = this.getResponseProperty('KdfIterations');
    }
}

// CONCATENATED MODULE: ./jslib/src/models/response/identityTwoFactorResponse.ts

class identityTwoFactorResponse_IdentityTwoFactorResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.twoFactorProviders2 = new Map();
        this.twoFactorProviders = this.getResponseProperty('TwoFactorProviders');
        const twoFactorProviders2 = this.getResponseProperty('TwoFactorProviders2');
        if (twoFactorProviders2 != null) {
            for (const prop in twoFactorProviders2) {
                if (twoFactorProviders2.hasOwnProperty(prop)) {
                    this.twoFactorProviders2.set(parseInt(prop, null), twoFactorProviders2[prop]);
                }
            }
        }
    }
}

// CONCATENATED MODULE: ./jslib/src/models/response/listResponse.ts

class listResponse_ListResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response, t) {
        super(response);
        const data = this.getResponseProperty('Data');
        this.data = data == null ? [] : data.map((dr) => new t(dr));
        this.continuationToken = this.getResponseProperty('ContinuationToken');
    }
}

// CONCATENATED MODULE: ./jslib/src/models/response/planResponse.ts

class planResponse_PlanResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.type = this.getResponseProperty('Type');
        this.product = this.getResponseProperty('Product');
        this.name = this.getResponseProperty('Name');
        this.isAnnual = this.getResponseProperty('IsAnnual');
        this.nameLocalizationKey = this.getResponseProperty('NameLocalizationKey');
        this.descriptionLocalizationKey = this.getResponseProperty('DescriptionLocalizationKey');
        this.canBeUsedByBusiness = this.getResponseProperty('CanBeUsedByBusiness');
        this.baseSeats = this.getResponseProperty('BaseSeats');
        this.baseStorageGb = this.getResponseProperty('BaseStorageGb');
        this.maxCollections = this.getResponseProperty('MaxCollections');
        this.maxUsers = this.getResponseProperty('MaxUsers');
        this.hasAdditionalSeatsOption = this.getResponseProperty('HasAdditionalSeatsOption');
        this.maxAdditionalSeats = this.getResponseProperty('MaxAdditionalSeats');
        this.hasAdditionalStorageOption = this.getResponseProperty('HasAdditionalStorageOption');
        this.maxAdditionalStorage = this.getResponseProperty('MaxAdditionalStorage');
        this.hasPremiumAccessOption = this.getResponseProperty('HasPremiumAccessOption');
        this.trialPeriodDays = this.getResponseProperty('TrialPeriodDays');
        this.hasSelfHost = this.getResponseProperty('HasSelfHost');
        this.hasPolicies = this.getResponseProperty('HasPolicies');
        this.hasGroups = this.getResponseProperty('HasGroups');
        this.hasDirectory = this.getResponseProperty('HasDirectory');
        this.hasEvents = this.getResponseProperty('HasEvents');
        this.hasTotp = this.getResponseProperty('HasTotp');
        this.has2fa = this.getResponseProperty('Has2fa');
        this.hasApi = this.getResponseProperty('HasApi');
        this.hasSso = this.getResponseProperty('HasSso');
        this.usersGetPremium = this.getResponseProperty('UsersGetPremium');
        this.upgradeSortOrder = this.getResponseProperty('UpgradeSortOrder');
        this.displaySortOrder = this.getResponseProperty('SortOrder');
        this.legacyYear = this.getResponseProperty('LegacyYear');
        this.disabled = this.getResponseProperty('Disabled');
        this.stripePlanId = this.getResponseProperty('StripePlanId');
        this.stripeSeatPlanId = this.getResponseProperty('StripeSeatPlanId');
        this.stripeStoragePlanId = this.getResponseProperty('StripeStoragePlanId');
        this.stripePremiumAccessPlanId = this.getResponseProperty('StripePremiumAccessPlanId');
        this.basePrice = this.getResponseProperty('BasePrice');
        this.seatPrice = this.getResponseProperty('SeatPrice');
        this.additionalStoragePricePerGb = this.getResponseProperty('AdditionalStoragePricePerGb');
        this.premiumAccessOptionPrice = this.getResponseProperty('PremiumAccessOptionPrice');
    }
}

// CONCATENATED MODULE: ./jslib/src/models/response/organizationResponse.ts


class organizationResponse_OrganizationResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.id = this.getResponseProperty('Id');
        this.identifier = this.getResponseProperty('Identifier');
        this.name = this.getResponseProperty('Name');
        this.businessName = this.getResponseProperty('BusinessName');
        this.businessAddress1 = this.getResponseProperty('BusinessAddress1');
        this.businessAddress2 = this.getResponseProperty('BusinessAddress2');
        this.businessAddress3 = this.getResponseProperty('BusinessAddress3');
        this.businessCountry = this.getResponseProperty('BusinessCountry');
        this.businessTaxNumber = this.getResponseProperty('BusinessTaxNumber');
        this.billingEmail = this.getResponseProperty('BillingEmail');
        const plan = this.getResponseProperty('Plan');
        this.plan = plan == null ? null : new planResponse_PlanResponse(plan);
        this.planType = this.getResponseProperty('PlanType');
        this.seats = this.getResponseProperty('Seats');
        this.maxCollections = this.getResponseProperty('MaxCollections');
        this.maxStorageGb = this.getResponseProperty('MaxStorageGb');
        this.useGroups = this.getResponseProperty('UseGroups');
        this.useDirectory = this.getResponseProperty('UseDirectory');
        this.useEvents = this.getResponseProperty('UseEvents');
        this.useTotp = this.getResponseProperty('UseTotp');
        this.use2fa = this.getResponseProperty('Use2fa');
        this.useApi = this.getResponseProperty('UseApi');
    }
}

// CONCATENATED MODULE: ./jslib/src/models/response/subscriptionResponse.ts

class subscriptionResponse_SubscriptionResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.storageName = this.getResponseProperty('StorageName');
        this.storageGb = this.getResponseProperty('StorageGb');
        this.maxStorageGb = this.getResponseProperty('MaxStorageGb');
        this.license = this.getResponseProperty('License');
        this.expiration = this.getResponseProperty('Expiration');
        this.usingInAppPurchase = this.getResponseProperty('UsingInAppPurchase');
        const subscription = this.getResponseProperty('Subscription');
        const upcomingInvoice = this.getResponseProperty('UpcomingInvoice');
        this.subscription = subscription == null ? null : new subscriptionResponse_BillingSubscriptionResponse(subscription);
        this.upcomingInvoice = upcomingInvoice == null ? null :
            new subscriptionResponse_BillingSubscriptionUpcomingInvoiceResponse(upcomingInvoice);
    }
}
class subscriptionResponse_BillingSubscriptionResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.items = [];
        this.trialEndDate = this.getResponseProperty('TrialStartDate');
        this.trialEndDate = this.getResponseProperty('TrialEndDate');
        this.periodStartDate = this.getResponseProperty('PeriodStartDate');
        this.periodEndDate = this.getResponseProperty('PeriodEndDate');
        this.cancelledDate = this.getResponseProperty('CancelledDate');
        this.cancelAtEndDate = this.getResponseProperty('CancelAtEndDate');
        this.status = this.getResponseProperty('Status');
        this.cancelled = this.getResponseProperty('Cancelled');
        const items = this.getResponseProperty('Items');
        if (items != null) {
            this.items = items.map((i) => new subscriptionResponse_BillingSubscriptionItemResponse(i));
        }
    }
}
class subscriptionResponse_BillingSubscriptionItemResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.name = this.getResponseProperty('Name');
        this.amount = this.getResponseProperty('Amount');
        this.quantity = this.getResponseProperty('Quantity');
        this.interval = this.getResponseProperty('Interval');
    }
}
class subscriptionResponse_BillingSubscriptionUpcomingInvoiceResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.date = this.getResponseProperty('Date');
        this.amount = this.getResponseProperty('Amount');
    }
}

// CONCATENATED MODULE: ./jslib/src/models/response/organizationSubscriptionResponse.ts


class organizationSubscriptionResponse_OrganizationSubscriptionResponse extends organizationResponse_OrganizationResponse {
    constructor(response) {
        super(response);
        this.storageName = this.getResponseProperty('StorageName');
        this.storageGb = this.getResponseProperty('StorageGb');
        const subscription = this.getResponseProperty('Subscription');
        this.subscription = subscription == null ? null : new subscriptionResponse_BillingSubscriptionResponse(subscription);
        const upcomingInvoice = this.getResponseProperty('UpcomingInvoice');
        this.upcomingInvoice = upcomingInvoice == null ? null :
            new subscriptionResponse_BillingSubscriptionUpcomingInvoiceResponse(upcomingInvoice);
        this.expiration = this.getResponseProperty('Expiration');
    }
}

// CONCATENATED MODULE: ./jslib/src/models/response/organizationUserResponse.ts


class organizationUserResponse_OrganizationUserResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.id = this.getResponseProperty('Id');
        this.userId = this.getResponseProperty('UserId');
        this.type = this.getResponseProperty('Type');
        this.status = this.getResponseProperty('Status');
        this.accessAll = this.getResponseProperty('AccessAll');
    }
}
class OrganizationUserUserDetailsResponse extends organizationUserResponse_OrganizationUserResponse {
    constructor(response) {
        super(response);
        this.name = this.getResponseProperty('Name');
        this.email = this.getResponseProperty('Email');
        this.twoFactorEnabled = this.getResponseProperty('TwoFactorEnabled');
    }
}
class organizationUserResponse_OrganizationUserDetailsResponse extends organizationUserResponse_OrganizationUserResponse {
    constructor(response) {
        super(response);
        this.collections = [];
        const collections = this.getResponseProperty('Collections');
        if (collections != null) {
            this.collections = collections.map((c) => new selectionReadOnlyResponse_SelectionReadOnlyResponse(c));
        }
    }
}

// CONCATENATED MODULE: ./jslib/src/models/response/profileOrganizationResponse.ts

class profileOrganizationResponse_ProfileOrganizationResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.id = this.getResponseProperty('Id');
        this.name = this.getResponseProperty('Name');
        this.usePolicies = this.getResponseProperty('UsePolicies');
        this.useGroups = this.getResponseProperty('UseGroups');
        this.useDirectory = this.getResponseProperty('UseDirectory');
        this.useEvents = this.getResponseProperty('UseEvents');
        this.useTotp = this.getResponseProperty('UseTotp');
        this.use2fa = this.getResponseProperty('Use2fa');
        this.useApi = this.getResponseProperty('UseApi');
        this.useBusinessPortal = this.getResponseProperty('UseBusinessPortal');
        this.useSso = this.getResponseProperty('UseSso');
        this.selfHost = this.getResponseProperty('SelfHost');
        this.usersGetPremium = this.getResponseProperty('UsersGetPremium');
        this.seats = this.getResponseProperty('Seats');
        this.maxCollections = this.getResponseProperty('MaxCollections');
        this.maxStorageGb = this.getResponseProperty('MaxStorageGb');
        this.key = this.getResponseProperty('Key');
        this.status = this.getResponseProperty('Status');
        this.type = this.getResponseProperty('Type');
        this.enabled = this.getResponseProperty('Enabled');
        this.ssoBound = this.getResponseProperty('SsoBound');
        this.identifier = this.getResponseProperty('Identifier');
    }
}

// CONCATENATED MODULE: ./jslib/src/models/response/profileResponse.ts


class profileResponse_ProfileResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.organizations = [];
        this.id = this.getResponseProperty('Id');
        this.name = this.getResponseProperty('Name');
        this.email = this.getResponseProperty('Email');
        this.emailVerified = this.getResponseProperty('EmailVerified');
        this.masterPasswordHint = this.getResponseProperty('MasterPasswordHint');
        this.premium = this.getResponseProperty('Premium');
        this.culture = this.getResponseProperty('Culture');
        this.twoFactorEnabled = this.getResponseProperty('TwoFactorEnabled');
        this.key = this.getResponseProperty('Key');
        this.privateKey = this.getResponseProperty('PrivateKey');
        this.securityStamp = this.getResponseProperty('SecurityStamp');
        const organizations = this.getResponseProperty('Organizations');
        if (organizations != null) {
            this.organizations = organizations.map((o) => new profileOrganizationResponse_ProfileOrganizationResponse(o));
        }
    }
}

// CONCATENATED MODULE: ./jslib/src/models/response/paymentResponse.ts


class paymentResponse_PaymentResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        const userProfile = this.getResponseProperty('UserProfile');
        if (userProfile != null) {
            this.userProfile = new profileResponse_ProfileResponse(userProfile);
        }
        this.paymentIntentClientSecret = this.getResponseProperty('PaymentIntentClientSecret');
        this.success = this.getResponseProperty('Success');
    }
}

// CONCATENATED MODULE: ./jslib/src/models/response/policyResponse.ts

class policyResponse_PolicyResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.id = this.getResponseProperty('Id');
        this.organizationId = this.getResponseProperty('OrganizationId');
        this.type = this.getResponseProperty('Type');
        this.data = this.getResponseProperty('Data');
        this.enabled = this.getResponseProperty('Enabled');
    }
}

// CONCATENATED MODULE: ./jslib/src/models/response/preloginResponse.ts

class preloginResponse_PreloginResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.kdf = this.getResponseProperty('Kdf');
        this.kdfIterations = this.getResponseProperty('KdfIterations');
    }
}

// EXTERNAL MODULE: ./jslib/src/models/api/sendFileApi.ts
var sendFileApi = __webpack_require__(164);

// EXTERNAL MODULE: ./jslib/src/models/api/sendTextApi.ts
var sendTextApi = __webpack_require__(165);

// CONCATENATED MODULE: ./jslib/src/models/response/sendAccessResponse.ts



class sendAccessResponse_SendAccessResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.id = this.getResponseProperty('Id');
        this.type = this.getResponseProperty('Type');
        this.name = this.getResponseProperty('Name');
        const text = this.getResponseProperty('Text');
        if (text != null) {
            this.text = new sendTextApi["a" /* SendTextApi */](text);
        }
        const file = this.getResponseProperty('File');
        if (file != null) {
            this.file = new sendFileApi["a" /* SendFileApi */](file);
        }
    }
}

// CONCATENATED MODULE: ./jslib/src/models/response/sendResponse.ts



class sendResponse_SendResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.id = this.getResponseProperty('Id');
        this.accessId = this.getResponseProperty('AccessId');
        this.type = this.getResponseProperty('Type');
        this.name = this.getResponseProperty('Name');
        this.notes = this.getResponseProperty('Notes');
        this.key = this.getResponseProperty('Key');
        this.maxAccessCount = this.getResponseProperty('MaxAccessCount');
        this.accessCount = this.getResponseProperty('AccessCount');
        this.revisionDate = this.getResponseProperty('RevisionDate');
        this.expirationDate = this.getResponseProperty('ExpirationDate');
        this.deletionDate = this.getResponseProperty('DeletionDate');
        this.password = this.getResponseProperty('Password');
        this.disable = this.getResponseProperty('Disabled') || false;
        const text = this.getResponseProperty('Text');
        if (text != null) {
            this.text = new sendTextApi["a" /* SendTextApi */](text);
        }
        const file = this.getResponseProperty('File');
        if (file != null) {
            this.file = new sendFileApi["a" /* SendFileApi */](file);
        }
    }
}

// CONCATENATED MODULE: ./jslib/src/models/response/syncResponse.ts








class syncResponse_SyncResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.folders = [];
        this.collections = [];
        this.ciphers = [];
        this.policies = [];
        this.sends = [];
        const profile = this.getResponseProperty('Profile');
        if (profile != null) {
            this.profile = new profileResponse_ProfileResponse(profile);
        }
        const folders = this.getResponseProperty('Folders');
        if (folders != null) {
            this.folders = folders.map((f) => new folderResponse_FolderResponse(f));
        }
        const collections = this.getResponseProperty('Collections');
        if (collections != null) {
            this.collections = collections.map((c) => new CollectionDetailsResponse(c));
        }
        const ciphers = this.getResponseProperty('Ciphers');
        if (ciphers != null) {
            this.ciphers = ciphers.map((c) => new cipherResponse_CipherResponse(c));
        }
        const domains = this.getResponseProperty('Domains');
        if (domains != null) {
            this.domains = new domainsResponse_DomainsResponse(domains);
        }
        const policies = this.getResponseProperty('Policies');
        if (policies != null) {
            this.policies = policies.map((p) => new policyResponse_PolicyResponse(p));
        }
        const sends = this.getResponseProperty('Sends');
        if (sends != null) {
            this.sends = sends.map((s) => new sendResponse_SendResponse(s));
        }
    }
}

// CONCATENATED MODULE: ./jslib/src/models/response/taxInfoResponse.ts

class taxInfoResponse_TaxInfoResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.taxId = this.getResponseProperty('TaxIdNumber');
        this.taxIdType = this.getResponseProperty('TaxIdType');
        this.line1 = this.getResponseProperty('Line1');
        this.line2 = this.getResponseProperty('Line2');
        this.city = this.getResponseProperty('City');
        this.state = this.getResponseProperty('State');
        this.postalCode = this.getResponseProperty('PostalCode');
        this.country = this.getResponseProperty('Country');
    }
}

// CONCATENATED MODULE: ./jslib/src/models/response/twoFactorAuthenticatorResponse.ts

class twoFactorAuthenticatorResponse_TwoFactorAuthenticatorResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.enabled = this.getResponseProperty('Enabled');
        this.key = this.getResponseProperty('Key');
    }
}

// CONCATENATED MODULE: ./jslib/src/models/response/twoFactorDuoResponse.ts

class twoFactorDuoResponse_TwoFactorDuoResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.enabled = this.getResponseProperty('Enabled');
        this.host = this.getResponseProperty('Host');
        this.secretKey = this.getResponseProperty('SecretKey');
        this.integrationKey = this.getResponseProperty('IntegrationKey');
    }
}

// CONCATENATED MODULE: ./jslib/src/models/response/twoFactorEmailResponse.ts

class twoFactorEmailResponse_TwoFactorEmailResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.enabled = this.getResponseProperty('Enabled');
        this.email = this.getResponseProperty('Email');
    }
}

// CONCATENATED MODULE: ./jslib/src/models/response/twoFactorProviderResponse.ts

class twoFactorProviderResponse_TwoFactorProviderResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.enabled = this.getResponseProperty('Enabled');
        this.type = this.getResponseProperty('Type');
    }
}

// CONCATENATED MODULE: ./jslib/src/models/response/twoFactorRescoverResponse.ts

class twoFactorRescoverResponse_TwoFactorRecoverResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.code = this.getResponseProperty('Code');
    }
}

// CONCATENATED MODULE: ./jslib/src/models/response/twoFactorU2fResponse.ts

class twoFactorU2fResponse_TwoFactorU2fResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.enabled = this.getResponseProperty('Enabled');
        const keys = this.getResponseProperty('Keys');
        this.keys = keys == null ? null : keys.map((k) => new twoFactorU2fResponse_KeyResponse(k));
    }
}
class twoFactorU2fResponse_KeyResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.name = this.getResponseProperty('Name');
        this.id = this.getResponseProperty('Id');
        this.compromised = this.getResponseProperty('Compromised');
    }
}
class twoFactorU2fResponse_ChallengeResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.userId = this.getResponseProperty('UserId');
        this.appId = this.getResponseProperty('AppId');
        this.challenge = this.getResponseProperty('Challenge');
        this.version = this.getResponseProperty('Version');
    }
}

// CONCATENATED MODULE: ./jslib/src/models/response/twoFactorYubiKeyResponse.ts

class twoFactorYubiKeyResponse_TwoFactorYubiKeyResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.enabled = this.getResponseProperty('Enabled');
        this.key1 = this.getResponseProperty('Key1');
        this.key2 = this.getResponseProperty('Key2');
        this.key3 = this.getResponseProperty('Key3');
        this.key4 = this.getResponseProperty('Key4');
        this.key5 = this.getResponseProperty('Key5');
        this.nfc = this.getResponseProperty('Nfc');
    }
}

// CONCATENATED MODULE: ./jslib/src/models/response/userKeyResponse.ts

class userKeyResponse_UserKeyResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.userId = this.getResponseProperty('UserId');
        this.publicKey = this.getResponseProperty('PublicKey');
    }
}

// CONCATENATED MODULE: ./jslib/src/services/api.service.ts
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




































class api_service_ApiService {
    constructor(tokenService, platformUtilsService, logoutCallback, customUserAgent = null) {
        this.tokenService = tokenService;
        this.platformUtilsService = platformUtilsService;
        this.logoutCallback = logoutCallback;
        this.customUserAgent = customUserAgent;
        this.urlsSet = false;
        this.isWebClient = false;
        this.isDesktopClient = false;
        this.usingBaseUrl = false;
        this.device = platformUtilsService.getDevice();
        this.deviceType = this.device.toString();
        this.isWebClient = this.device === deviceType["a" /* DeviceType */].IEBrowser || this.device === deviceType["a" /* DeviceType */].ChromeBrowser ||
            this.device === deviceType["a" /* DeviceType */].EdgeBrowser || this.device === deviceType["a" /* DeviceType */].FirefoxBrowser ||
            this.device === deviceType["a" /* DeviceType */].OperaBrowser || this.device === deviceType["a" /* DeviceType */].SafariBrowser ||
            this.device === deviceType["a" /* DeviceType */].UnknownBrowser || this.device === deviceType["a" /* DeviceType */].VivaldiBrowser;
        this.isDesktopClient = this.device === deviceType["a" /* DeviceType */].WindowsDesktop || this.device === deviceType["a" /* DeviceType */].MacOsDesktop ||
            this.device === deviceType["a" /* DeviceType */].LinuxDesktop;
    }
    setUrls(urls) {
        this.urlsSet = true;
        if (urls.base != null) {
            this.usingBaseUrl = true;
            this.apiBaseUrl = urls.base + '/api';
            this.identityBaseUrl = urls.base + '/identity';
            this.eventsBaseUrl = urls.base + '/events';
            return;
        }
        this.apiBaseUrl = urls.api;
        this.identityBaseUrl = urls.identity;
        this.eventsBaseUrl = urls.events;
        // Production
        if (this.apiBaseUrl == null) {
            this.apiBaseUrl = 'https://api.bitwarden.com';
        }
        if (this.identityBaseUrl == null) {
            this.identityBaseUrl = 'https://identity.bitwarden.com';
        }
        if (this.eventsBaseUrl == null) {
            this.eventsBaseUrl = 'https://events.bitwarden.com';
        }
    }
    // Auth APIs
    postIdentityToken(request) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const headers = new Headers({
                'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8',
                'Accept': 'application/json',
                'Device-Type': this.deviceType,
            });
            if (this.customUserAgent != null) {
                headers.set('User-Agent', this.customUserAgent);
            }
            const response = yield this.fetch(new Request(this.identityBaseUrl + '/connect/token', {
                body: this.qsStringify(request.toIdentityToken((_a = request.clientId) !== null && _a !== void 0 ? _a : this.platformUtilsService.identityClientId)),
                credentials: this.getCredentials(),
                cache: 'no-store',
                headers: headers,
                method: 'POST',
            }));
            let responseJson = null;
            if (this.isJsonResponse(response)) {
                responseJson = yield response.json();
            }
            if (responseJson != null) {
                if (response.status === 200) {
                    return new identityTokenResponse_IdentityTokenResponse(responseJson);
                }
                else if (response.status === 400 && responseJson.TwoFactorProviders2 &&
                    Object.keys(responseJson.TwoFactorProviders2).length) {
                    yield this.tokenService.clearTwoFactorToken(request.email);
                    return new identityTwoFactorResponse_IdentityTwoFactorResponse(responseJson);
                }
            }
            return Promise.reject(new errorResponse_ErrorResponse(responseJson, response.status, true));
        });
    }
    refreshIdentityToken() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.doRefreshToken();
            }
            catch (e) {
                return Promise.reject(null);
            }
        });
    }
    // Account APIs
    getProfile() {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/accounts/profile', null, true, true);
            return new profileResponse_ProfileResponse(r);
        });
    }
    getUserBilling() {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/accounts/billing', null, true, true);
            return new billingResponse_BillingResponse(r);
        });
    }
    getUserSubscription() {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/accounts/subscription', null, true, true);
            return new subscriptionResponse_SubscriptionResponse(r);
        });
    }
    getTaxInfo() {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/accounts/tax', null, true, true);
            return new taxInfoResponse_TaxInfoResponse(r);
        });
    }
    putProfile(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('PUT', '/accounts/profile', request, true, true);
            return new profileResponse_ProfileResponse(r);
        });
    }
    putTaxInfo(request) {
        return this.send('PUT', '/accounts/tax', request, true, false);
    }
    postPrelogin(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/accounts/prelogin', request, false, true);
            return new preloginResponse_PreloginResponse(r);
        });
    }
    postEmailToken(request) {
        return this.send('POST', '/accounts/email-token', request, true, false);
    }
    postEmail(request) {
        return this.send('POST', '/accounts/email', request, true, false);
    }
    postPassword(request) {
        return this.send('POST', '/accounts/password', request, true, false);
    }
    setPassword(request) {
        return this.send('POST', '/accounts/set-password', request, true, false);
    }
    postSecurityStamp(request) {
        return this.send('POST', '/accounts/security-stamp', request, true, false);
    }
    deleteAccount(request) {
        return this.send('DELETE', '/accounts', request, true, false);
    }
    getAccountRevisionDate() {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/accounts/revision-date', null, true, true);
            return r;
        });
    }
    postPasswordHint(request) {
        return this.send('POST', '/accounts/password-hint', request, false, false);
    }
    postRegister(request) {
        return this.send('POST', '/accounts/register', request, false, false);
    }
    postPremium(data) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/accounts/premium', data, true, true);
            return new paymentResponse_PaymentResponse(r);
        });
    }
    postIapCheck(request) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.send('POST', '/accounts/iap-check', request, true, false);
        });
    }
    postReinstatePremium() {
        return this.send('POST', '/accounts/reinstate-premium', null, true, false);
    }
    postCancelPremium() {
        return this.send('POST', '/accounts/cancel-premium', null, true, false);
    }
    postAccountStorage(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/accounts/storage', request, true, true);
            return new paymentResponse_PaymentResponse(r);
        });
    }
    postAccountPayment(request) {
        return this.send('POST', '/accounts/payment', request, true, false);
    }
    postAccountLicense(data) {
        return this.send('POST', '/accounts/license', data, true, false);
    }
    postAccountKeys(request) {
        return this.send('POST', '/accounts/keys', request, true, false);
    }
    postAccountKey(request) {
        return this.send('POST', '/accounts/key', request, true, false);
    }
    postAccountVerifyEmail() {
        return this.send('POST', '/accounts/verify-email', null, true, false);
    }
    postAccountVerifyEmailToken(request) {
        return this.send('POST', '/accounts/verify-email-token', request, false, false);
    }
    postAccountVerifyPassword(request) {
        return this.send('POST', '/accounts/verify-password', request, true, false);
    }
    postAccountRecoverDelete(request) {
        return this.send('POST', '/accounts/delete-recover', request, false, false);
    }
    postAccountRecoverDeleteToken(request) {
        return this.send('POST', '/accounts/delete-recover-token', request, false, false);
    }
    postAccountKdf(request) {
        return this.send('POST', '/accounts/kdf', request, true, false);
    }
    getEnterprisePortalSignInToken() {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/accounts/enterprise-portal-signin-token', null, true, true);
            return r;
        });
    }
    deleteSsoUser(organizationId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.send('DELETE', '/accounts/sso/' + organizationId, null, true, false);
        });
    }
    getSsoUserIdentifier() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.send('GET', '/accounts/sso/user-identifier', null, true, true);
        });
    }
    postUserApiKey(id, request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/accounts/api-key', request, true, true);
            return new apiKeyResponse_ApiKeyResponse(r);
        });
    }
    postUserRotateApiKey(id, request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/accounts/rotate-api-key', request, true, true);
            return new apiKeyResponse_ApiKeyResponse(r);
        });
    }
    // Folder APIs
    getFolder(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/folders/' + id, null, true, true);
            return new folderResponse_FolderResponse(r);
        });
    }
    postFolder(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/folders', request, true, true);
            return new folderResponse_FolderResponse(r);
        });
    }
    putFolder(id, request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('PUT', '/folders/' + id, request, true, true);
            return new folderResponse_FolderResponse(r);
        });
    }
    deleteFolder(id) {
        return this.send('DELETE', '/folders/' + id, null, true, false);
    }
    // Send APIs
    getSend(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/sends/' + id, null, true, true);
            return new sendResponse_SendResponse(r);
        });
    }
    postSendAccess(id, request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/sends/access/' + id, request, false, true);
            return new sendAccessResponse_SendAccessResponse(r);
        });
    }
    getSends() {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/sends', null, true, true);
            return new listResponse_ListResponse(r, sendResponse_SendResponse);
        });
    }
    postSend(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/sends', request, true, true);
            return new sendResponse_SendResponse(r);
        });
    }
    postSendFile(data) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/sends/file', data, true, true);
            return new sendResponse_SendResponse(r);
        });
    }
    putSend(id, request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('PUT', '/sends/' + id, request, true, true);
            return new sendResponse_SendResponse(r);
        });
    }
    putSendRemovePassword(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('PUT', '/sends/' + id + '/remove-password', null, true, true);
            return new sendResponse_SendResponse(r);
        });
    }
    deleteSend(id) {
        return this.send('DELETE', '/sends/' + id, null, true, false);
    }
    // Cipher APIs
    getCipher(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/ciphers/' + id, null, true, true);
            return new cipherResponse_CipherResponse(r);
        });
    }
    getCipherAdmin(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/ciphers/' + id + '/admin', null, true, true);
            return new cipherResponse_CipherResponse(r);
        });
    }
    getCiphersOrganization(organizationId) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/ciphers/organization-details?organizationId=' + organizationId, null, true, true);
            return new listResponse_ListResponse(r, cipherResponse_CipherResponse);
        });
    }
    postCipher(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/ciphers', request, true, true);
            return new cipherResponse_CipherResponse(r);
        });
    }
    postCipherCreate(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/ciphers/create', request, true, true);
            return new cipherResponse_CipherResponse(r);
        });
    }
    postCipherAdmin(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/ciphers/admin', request, true, true);
            return new cipherResponse_CipherResponse(r);
        });
    }
    putCipher(id, request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('PUT', '/ciphers/' + id, request, true, true);
            return new cipherResponse_CipherResponse(r);
        });
    }
    putCipherAdmin(id, request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('PUT', '/ciphers/' + id + '/admin', request, true, true);
            return new cipherResponse_CipherResponse(r);
        });
    }
    deleteCipher(id) {
        return this.send('DELETE', '/ciphers/' + id, null, true, false);
    }
    deleteCipherAdmin(id) {
        return this.send('DELETE', '/ciphers/' + id + '/admin', null, true, false);
    }
    deleteManyCiphers(request) {
        return this.send('DELETE', '/ciphers', request, true, false);
    }
    deleteManyCiphersAdmin(request) {
        return this.send('DELETE', '/ciphers/admin', request, true, false);
    }
    putMoveCiphers(request) {
        return this.send('PUT', '/ciphers/move', request, true, false);
    }
    putShareCipher(id, request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('PUT', '/ciphers/' + id + '/share', request, true, true);
            return new cipherResponse_CipherResponse(r);
        });
    }
    putShareCiphers(request) {
        return this.send('PUT', '/ciphers/share', request, true, false);
    }
    putCipherCollections(id, request) {
        return this.send('PUT', '/ciphers/' + id + '/collections', request, true, false);
    }
    putCipherCollectionsAdmin(id, request) {
        return this.send('PUT', '/ciphers/' + id + '/collections-admin', request, true, false);
    }
    postPurgeCiphers(request, organizationId = null) {
        let path = '/ciphers/purge';
        if (organizationId != null) {
            path += '?organizationId=' + organizationId;
        }
        return this.send('POST', path, request, true, false);
    }
    postImportCiphers(request) {
        return this.send('POST', '/ciphers/import', request, true, false);
    }
    postImportOrganizationCiphers(organizationId, request) {
        return this.send('POST', '/ciphers/import-organization?organizationId=' + organizationId, request, true, false);
    }
    putDeleteCipher(id) {
        return this.send('PUT', '/ciphers/' + id + '/delete', null, true, false);
    }
    putDeleteCipherAdmin(id) {
        return this.send('PUT', '/ciphers/' + id + '/delete-admin', null, true, false);
    }
    putDeleteManyCiphers(request) {
        return this.send('PUT', '/ciphers/delete', request, true, false);
    }
    putDeleteManyCiphersAdmin(request) {
        return this.send('PUT', '/ciphers/delete-admin', request, true, false);
    }
    putRestoreCipher(id) {
        return this.send('PUT', '/ciphers/' + id + '/restore', null, true, false);
    }
    putRestoreCipherAdmin(id) {
        return this.send('PUT', '/ciphers/' + id + '/restore-admin', null, true, false);
    }
    putRestoreManyCiphers(request) {
        return this.send('PUT', '/ciphers/restore', request, true, false);
    }
    // Attachments APIs
    postCipherAttachment(id, data) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/ciphers/' + id + '/attachment', data, true, true);
            return new cipherResponse_CipherResponse(r);
        });
    }
    postCipherAttachmentAdmin(id, data) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/ciphers/' + id + '/attachment-admin', data, true, true);
            return new cipherResponse_CipherResponse(r);
        });
    }
    deleteCipherAttachment(id, attachmentId) {
        return this.send('DELETE', '/ciphers/' + id + '/attachment/' + attachmentId, null, true, false);
    }
    deleteCipherAttachmentAdmin(id, attachmentId) {
        return this.send('DELETE', '/ciphers/' + id + '/attachment/' + attachmentId + '/admin', null, true, false);
    }
    postShareCipherAttachment(id, attachmentId, data, organizationId) {
        return this.send('POST', '/ciphers/' + id + '/attachment/' +
            attachmentId + '/share?organizationId=' + organizationId, data, true, false);
    }
    // Collections APIs
    getCollectionDetails(organizationId, id) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/organizations/' + organizationId + '/collections/' + id + '/details', null, true, true);
            return new collectionResponse_CollectionGroupDetailsResponse(r);
        });
    }
    getUserCollections() {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/collections', null, true, true);
            return new listResponse_ListResponse(r, collectionResponse_CollectionResponse);
        });
    }
    getCollections(organizationId) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/organizations/' + organizationId + '/collections', null, true, true);
            return new listResponse_ListResponse(r, collectionResponse_CollectionResponse);
        });
    }
    getCollectionUsers(organizationId, id) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/organizations/' + organizationId + '/collections/' + id + '/users', null, true, true);
            return r.map((dr) => new selectionReadOnlyResponse_SelectionReadOnlyResponse(dr));
        });
    }
    postCollection(organizationId, request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/organizations/' + organizationId + '/collections', request, true, true);
            return new collectionResponse_CollectionResponse(r);
        });
    }
    putCollection(organizationId, id, request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('PUT', '/organizations/' + organizationId + '/collections/' + id, request, true, true);
            return new collectionResponse_CollectionResponse(r);
        });
    }
    putCollectionUsers(organizationId, id, request) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.send('PUT', '/organizations/' + organizationId + '/collections/' + id + '/users', request, true, false);
        });
    }
    deleteCollection(organizationId, id) {
        return this.send('DELETE', '/organizations/' + organizationId + '/collections/' + id, null, true, false);
    }
    deleteCollectionUser(organizationId, id, organizationUserId) {
        return this.send('DELETE', '/organizations/' + organizationId + '/collections/' + id + '/user/' + organizationUserId, null, true, false);
    }
    // Groups APIs
    getGroupDetails(organizationId, id) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/organizations/' + organizationId + '/groups/' + id + '/details', null, true, true);
            return new groupResponse_GroupDetailsResponse(r);
        });
    }
    getGroups(organizationId) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/organizations/' + organizationId + '/groups', null, true, true);
            return new listResponse_ListResponse(r, groupResponse_GroupResponse);
        });
    }
    getGroupUsers(organizationId, id) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/organizations/' + organizationId + '/groups/' + id + '/users', null, true, true);
            return r;
        });
    }
    postGroup(organizationId, request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/organizations/' + organizationId + '/groups', request, true, true);
            return new groupResponse_GroupResponse(r);
        });
    }
    putGroup(organizationId, id, request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('PUT', '/organizations/' + organizationId + '/groups/' + id, request, true, true);
            return new groupResponse_GroupResponse(r);
        });
    }
    putGroupUsers(organizationId, id, request) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.send('PUT', '/organizations/' + organizationId + '/groups/' + id + '/users', request, true, false);
        });
    }
    deleteGroup(organizationId, id) {
        return this.send('DELETE', '/organizations/' + organizationId + '/groups/' + id, null, true, false);
    }
    deleteGroupUser(organizationId, id, organizationUserId) {
        return this.send('DELETE', '/organizations/' + organizationId + '/groups/' + id + '/user/' + organizationUserId, null, true, false);
    }
    // Policy APIs
    getPolicy(organizationId, type) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/organizations/' + organizationId + '/policies/' + type, null, true, true);
            return new policyResponse_PolicyResponse(r);
        });
    }
    getPolicies(organizationId) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/organizations/' + organizationId + '/policies', null, true, true);
            return new listResponse_ListResponse(r, policyResponse_PolicyResponse);
        });
    }
    getPoliciesByToken(organizationId, token, email, organizationUserId) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/organizations/' + organizationId + '/policies/token?' +
                'token=' + encodeURIComponent(token) + '&email=' + encodeURIComponent(email) +
                '&organizationUserId=' + organizationUserId, null, false, true);
            return new listResponse_ListResponse(r, policyResponse_PolicyResponse);
        });
    }
    putPolicy(organizationId, type, request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('PUT', '/organizations/' + organizationId + '/policies/' + type, request, true, true);
            return new policyResponse_PolicyResponse(r);
        });
    }
    // Organization User APIs
    getOrganizationUser(organizationId, id) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/organizations/' + organizationId + '/users/' + id, null, true, true);
            return new organizationUserResponse_OrganizationUserDetailsResponse(r);
        });
    }
    getOrganizationUserGroups(organizationId, id) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/organizations/' + organizationId + '/users/' + id + '/groups', null, true, true);
            return r;
        });
    }
    getOrganizationUsers(organizationId) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/organizations/' + organizationId + '/users', null, true, true);
            return new listResponse_ListResponse(r, OrganizationUserUserDetailsResponse);
        });
    }
    postOrganizationUserInvite(organizationId, request) {
        return this.send('POST', '/organizations/' + organizationId + '/users/invite', request, true, false);
    }
    postOrganizationUserReinvite(organizationId, id) {
        return this.send('POST', '/organizations/' + organizationId + '/users/' + id + '/reinvite', null, true, false);
    }
    postOrganizationUserAccept(organizationId, id, request) {
        return this.send('POST', '/organizations/' + organizationId + '/users/' + id + '/accept', request, true, false);
    }
    postOrganizationUserConfirm(organizationId, id, request) {
        return this.send('POST', '/organizations/' + organizationId + '/users/' + id + '/confirm', request, true, false);
    }
    putOrganizationUser(organizationId, id, request) {
        return this.send('PUT', '/organizations/' + organizationId + '/users/' + id, request, true, false);
    }
    putOrganizationUserGroups(organizationId, id, request) {
        return this.send('PUT', '/organizations/' + organizationId + '/users/' + id + '/groups', request, true, false);
    }
    deleteOrganizationUser(organizationId, id) {
        return this.send('DELETE', '/organizations/' + organizationId + '/users/' + id, null, true, false);
    }
    // Plan APIs
    getPlans() {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/plans/', null, true, true);
            return new listResponse_ListResponse(r, planResponse_PlanResponse);
        });
    }
    postImportDirectory(organizationId, request) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.send('POST', '/organizations/' + organizationId + '/import', request, true, false);
        });
    }
    // Settings APIs
    getSettingsDomains() {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/settings/domains', null, true, true);
            return new domainsResponse_DomainsResponse(r);
        });
    }
    putSettingsDomains(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('PUT', '/settings/domains', request, true, true);
            return new domainsResponse_DomainsResponse(r);
        });
    }
    // Sync APIs
    getSync() {
        return __awaiter(this, void 0, void 0, function* () {
            const path = this.isDesktopClient || this.isWebClient ? '/sync?excludeDomains=true' : '/sync';
            const r = yield this.send('GET', path, null, true, true);
            return new syncResponse_SyncResponse(r);
        });
    }
    // Two-factor APIs
    getTwoFactorProviders() {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/two-factor', null, true, true);
            return new listResponse_ListResponse(r, twoFactorProviderResponse_TwoFactorProviderResponse);
        });
    }
    getTwoFactorOrganizationProviders(organizationId) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/organizations/' + organizationId + '/two-factor', null, true, true);
            return new listResponse_ListResponse(r, twoFactorProviderResponse_TwoFactorProviderResponse);
        });
    }
    getTwoFactorAuthenticator(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/two-factor/get-authenticator', request, true, true);
            return new twoFactorAuthenticatorResponse_TwoFactorAuthenticatorResponse(r);
        });
    }
    getTwoFactorEmail(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/two-factor/get-email', request, true, true);
            return new twoFactorEmailResponse_TwoFactorEmailResponse(r);
        });
    }
    getTwoFactorDuo(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/two-factor/get-duo', request, true, true);
            return new twoFactorDuoResponse_TwoFactorDuoResponse(r);
        });
    }
    getTwoFactorOrganizationDuo(organizationId, request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/organizations/' + organizationId + '/two-factor/get-duo', request, true, true);
            return new twoFactorDuoResponse_TwoFactorDuoResponse(r);
        });
    }
    getTwoFactorYubiKey(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/two-factor/get-yubikey', request, true, true);
            return new twoFactorYubiKeyResponse_TwoFactorYubiKeyResponse(r);
        });
    }
    getTwoFactorU2f(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/two-factor/get-u2f', request, true, true);
            return new twoFactorU2fResponse_TwoFactorU2fResponse(r);
        });
    }
    getTwoFactorU2fChallenge(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/two-factor/get-u2f-challenge', request, true, true);
            return new twoFactorU2fResponse_ChallengeResponse(r);
        });
    }
    getTwoFactorRecover(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/two-factor/get-recover', request, true, true);
            return new twoFactorRescoverResponse_TwoFactorRecoverResponse(r);
        });
    }
    putTwoFactorAuthenticator(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('PUT', '/two-factor/authenticator', request, true, true);
            return new twoFactorAuthenticatorResponse_TwoFactorAuthenticatorResponse(r);
        });
    }
    putTwoFactorEmail(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('PUT', '/two-factor/email', request, true, true);
            return new twoFactorEmailResponse_TwoFactorEmailResponse(r);
        });
    }
    putTwoFactorDuo(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('PUT', '/two-factor/duo', request, true, true);
            return new twoFactorDuoResponse_TwoFactorDuoResponse(r);
        });
    }
    putTwoFactorOrganizationDuo(organizationId, request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('PUT', '/organizations/' + organizationId + '/two-factor/duo', request, true, true);
            return new twoFactorDuoResponse_TwoFactorDuoResponse(r);
        });
    }
    putTwoFactorYubiKey(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('PUT', '/two-factor/yubikey', request, true, true);
            return new twoFactorYubiKeyResponse_TwoFactorYubiKeyResponse(r);
        });
    }
    putTwoFactorU2f(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('PUT', '/two-factor/u2f', request, true, true);
            return new twoFactorU2fResponse_TwoFactorU2fResponse(r);
        });
    }
    deleteTwoFactorU2f(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('DELETE', '/two-factor/u2f', request, true, true);
            return new twoFactorU2fResponse_TwoFactorU2fResponse(r);
        });
    }
    putTwoFactorDisable(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('PUT', '/two-factor/disable', request, true, true);
            return new twoFactorProviderResponse_TwoFactorProviderResponse(r);
        });
    }
    putTwoFactorOrganizationDisable(organizationId, request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('PUT', '/organizations/' + organizationId + '/two-factor/disable', request, true, true);
            return new twoFactorProviderResponse_TwoFactorProviderResponse(r);
        });
    }
    postTwoFactorRecover(request) {
        return this.send('POST', '/two-factor/recover', request, false, false);
    }
    postTwoFactorEmailSetup(request) {
        return this.send('POST', '/two-factor/send-email', request, true, false);
    }
    postTwoFactorEmail(request) {
        return this.send('POST', '/two-factor/send-email-login', request, false, false);
    }
    // Organization APIs
    getOrganization(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/organizations/' + id, null, true, true);
            return new organizationResponse_OrganizationResponse(r);
        });
    }
    getOrganizationBilling(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/organizations/' + id + '/billing', null, true, true);
            return new billingResponse_BillingResponse(r);
        });
    }
    getOrganizationSubscription(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/organizations/' + id + '/subscription', null, true, true);
            return new organizationSubscriptionResponse_OrganizationSubscriptionResponse(r);
        });
    }
    getOrganizationLicense(id, installationId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.send('GET', '/organizations/' + id + '/license?installationId=' + installationId, null, true, true);
        });
    }
    getOrganizationTaxInfo(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/organizations/' + id + '/tax', null, true, true);
            return new taxInfoResponse_TaxInfoResponse(r);
        });
    }
    postOrganization(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/organizations', request, true, true);
            return new organizationResponse_OrganizationResponse(r);
        });
    }
    putOrganization(id, request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('PUT', '/organizations/' + id, request, true, true);
            return new organizationResponse_OrganizationResponse(r);
        });
    }
    putOrganizationTaxInfo(id, request) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.send('PUT', '/organizations/' + id + '/tax', request, true, false);
        });
    }
    postLeaveOrganization(id) {
        return this.send('POST', '/organizations/' + id + '/leave', null, true, false);
    }
    postOrganizationLicense(data) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/organizations/license', data, true, true);
            return new organizationResponse_OrganizationResponse(r);
        });
    }
    postOrganizationLicenseUpdate(id, data) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.send('POST', '/organizations/' + id + '/license', data, true, false);
        });
    }
    postOrganizationApiKey(id, request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/organizations/' + id + '/api-key', request, true, true);
            return new apiKeyResponse_ApiKeyResponse(r);
        });
    }
    postOrganizationRotateApiKey(id, request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/organizations/' + id + '/rotate-api-key', request, true, true);
            return new apiKeyResponse_ApiKeyResponse(r);
        });
    }
    postOrganizationUpgrade(id, request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/organizations/' + id + '/upgrade', request, true, true);
            return new paymentResponse_PaymentResponse(r);
        });
    }
    postOrganizationSeat(id, request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/organizations/' + id + '/seat', request, true, true);
            return new paymentResponse_PaymentResponse(r);
        });
    }
    postOrganizationStorage(id, request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/organizations/' + id + '/storage', request, true, true);
            return new paymentResponse_PaymentResponse(r);
        });
    }
    postOrganizationPayment(id, request) {
        return this.send('POST', '/organizations/' + id + '/payment', request, true, false);
    }
    postOrganizationVerifyBank(id, request) {
        return this.send('POST', '/organizations/' + id + '/verify-bank', request, true, false);
    }
    postOrganizationCancel(id) {
        return this.send('POST', '/organizations/' + id + '/cancel', null, true, false);
    }
    postOrganizationReinstate(id) {
        return this.send('POST', '/organizations/' + id + '/reinstate', null, true, false);
    }
    deleteOrganization(id, request) {
        return this.send('DELETE', '/organizations/' + id, request, true, false);
    }
    // Event APIs
    getEvents(start, end, token) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', this.addEventParameters('/events', start, end, token), null, true, true);
            return new listResponse_ListResponse(r, eventResponse_EventResponse);
        });
    }
    getEventsCipher(id, start, end, token) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', this.addEventParameters('/ciphers/' + id + '/events', start, end, token), null, true, true);
            return new listResponse_ListResponse(r, eventResponse_EventResponse);
        });
    }
    getEventsOrganization(id, start, end, token) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', this.addEventParameters('/organizations/' + id + '/events', start, end, token), null, true, true);
            return new listResponse_ListResponse(r, eventResponse_EventResponse);
        });
    }
    getEventsOrganizationUser(organizationId, id, start, end, token) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', this.addEventParameters('/organizations/' + organizationId + '/users/' + id + '/events', start, end, token), null, true, true);
            return new listResponse_ListResponse(r, eventResponse_EventResponse);
        });
    }
    postEventsCollect(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const authHeader = yield this.getActiveBearerToken();
            const headers = new Headers({
                'Device-Type': this.deviceType,
                'Authorization': 'Bearer ' + authHeader,
                'Content-Type': 'application/json; charset=utf-8',
            });
            if (this.customUserAgent != null) {
                headers.set('User-Agent', this.customUserAgent);
            }
            const response = yield this.fetch(new Request(this.eventsBaseUrl + '/collect', {
                cache: 'no-store',
                credentials: this.getCredentials(),
                method: 'POST',
                body: JSON.stringify(request),
                headers: headers,
            }));
            if (response.status !== 200) {
                return Promise.reject('Event post failed.');
            }
        });
    }
    // User APIs
    getUserPublicKey(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/users/' + id + '/public-key', null, true, true);
            return new userKeyResponse_UserKeyResponse(r);
        });
    }
    // HIBP APIs
    getHibpBreach(username) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('GET', '/hibp/breach?username=' + username, null, true, true);
            return r.map((a) => new breachAccountResponse_BreachAccountResponse(a));
        });
    }
    // Misc
    postBitPayInvoice(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/bitpay-invoice', request, true, true);
            return r;
        });
    }
    postSetupPayment() {
        return __awaiter(this, void 0, void 0, function* () {
            const r = yield this.send('POST', '/setup-payment', null, true, true);
            return r;
        });
    }
    // Helpers
    getActiveBearerToken() {
        return __awaiter(this, void 0, void 0, function* () {
            let accessToken = yield this.tokenService.getToken();
            if (this.tokenService.tokenNeedsRefresh()) {
                const tokenResponse = yield this.doRefreshToken();
                accessToken = tokenResponse.accessToken;
            }
            return accessToken;
        });
    }
    fetch(request) {
        if (request.method === 'GET') {
            request.headers.set('Cache-Control', 'no-store');
            request.headers.set('Pragma', 'no-cache');
        }
        return this.nativeFetch(request);
    }
    nativeFetch(request) {
        return fetch(request);
    }
    preValidateSso(identifier) {
        return __awaiter(this, void 0, void 0, function* () {
            if (identifier == null || identifier === '') {
                throw new Error('Organization Identifier was not provided.');
            }
            const headers = new Headers({
                'Accept': 'application/json',
                'Device-Type': this.deviceType,
            });
            if (this.customUserAgent != null) {
                headers.set('User-Agent', this.customUserAgent);
            }
            const path = `/account/prevalidate?domainHint=${encodeURIComponent(identifier)}`;
            const response = yield this.fetch(new Request(this.identityBaseUrl + path, {
                cache: 'no-store',
                credentials: this.getCredentials(),
                headers: headers,
                method: 'GET',
            }));
            if (response.status === 200) {
                return true;
            }
            else {
                const error = yield this.handleError(response, false, true);
                return Promise.reject(error);
            }
        });
    }
    send(method, path, body, authed, hasResponse) {
        return __awaiter(this, void 0, void 0, function* () {
            const headers = new Headers({
                'Device-Type': this.deviceType,
            });
            if (this.customUserAgent != null) {
                headers.set('User-Agent', this.customUserAgent);
            }
            const requestInit = {
                cache: 'no-store',
                credentials: this.getCredentials(),
                method: method,
            };
            if (authed) {
                const authHeader = yield this.getActiveBearerToken();
                headers.set('Authorization', 'Bearer ' + authHeader);
            }
            if (body != null) {
                if (typeof body === 'string') {
                    requestInit.body = body;
                    headers.set('Content-Type', 'application/x-www-form-urlencoded; charset=utf-8');
                }
                else if (typeof body === 'object') {
                    if (body instanceof FormData) {
                        requestInit.body = body;
                    }
                    else {
                        headers.set('Content-Type', 'application/json; charset=utf-8');
                        requestInit.body = JSON.stringify(body);
                    }
                }
            }
            if (hasResponse) {
                headers.set('Accept', 'application/json');
            }
            requestInit.headers = headers;
            const response = yield this.fetch(new Request(this.apiBaseUrl + path, requestInit));
            if (hasResponse && response.status === 200) {
                const responseJson = yield response.json();
                return responseJson;
            }
            else if (response.status !== 200) {
                const error = yield this.handleError(response, false, authed);
                return Promise.reject(error);
            }
        });
    }
    handleError(response, tokenError, authed) {
        return __awaiter(this, void 0, void 0, function* () {
            if (authed && ((tokenError && response.status === 400) || response.status === 401 || response.status === 403)) {
                yield this.logoutCallback(true);
                return null;
            }
            let responseJson = null;
            if (this.isJsonResponse(response)) {
                responseJson = yield response.json();
            }
            return new errorResponse_ErrorResponse(responseJson, response.status, tokenError);
        });
    }
    doRefreshToken() {
        return __awaiter(this, void 0, void 0, function* () {
            const refreshToken = yield this.tokenService.getRefreshToken();
            if (refreshToken == null || refreshToken === '') {
                throw new Error();
            }
            const headers = new Headers({
                'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8',
                'Accept': 'application/json',
                'Device-Type': this.deviceType,
            });
            if (this.customUserAgent != null) {
                headers.set('User-Agent', this.customUserAgent);
            }
            const decodedToken = this.tokenService.decodeToken();
            const response = yield this.fetch(new Request(this.identityBaseUrl + '/connect/token', {
                body: this.qsStringify({
                    grant_type: 'refresh_token',
                    client_id: decodedToken.client_id,
                    refresh_token: refreshToken,
                }),
                cache: 'no-store',
                credentials: this.getCredentials(),
                headers: headers,
                method: 'POST',
            }));
            if (response.status === 200) {
                const responseJson = yield response.json();
                const tokenResponse = new identityTokenResponse_IdentityTokenResponse(responseJson);
                yield this.tokenService.setTokens(tokenResponse.accessToken, tokenResponse.refreshToken);
                return tokenResponse;
            }
            else {
                const error = yield this.handleError(response, true, true);
                return Promise.reject(error);
            }
        });
    }
    qsStringify(params) {
        return Object.keys(params).map((key) => {
            return encodeURIComponent(key) + '=' + encodeURIComponent(params[key]);
        }).join('&');
    }
    getCredentials() {
        if (this.device !== deviceType["a" /* DeviceType */].SafariExtension && (!this.isWebClient || this.usingBaseUrl)) {
            return 'include';
        }
        return undefined;
    }
    addEventParameters(base, start, end, token) {
        if (start != null) {
            base += ('?start=' + start);
        }
        if (end != null) {
            base += (base.indexOf('?') > -1 ? '&' : '?');
            base += ('end=' + end);
        }
        if (token != null) {
            base += (base.indexOf('?') > -1 ? '&' : '?');
            base += ('continuationToken=' + token);
        }
        return base;
    }
    isJsonResponse(response) {
        const typeHeader = response.headers.get('content-type');
        return typeHeader != null && typeHeader.indexOf('application/json') > -1;
    }
}

// EXTERNAL MODULE: ./jslib/src/misc/utils.ts
var utils = __webpack_require__(8);

// CONCATENATED MODULE: ./jslib/src/services/appId.service.ts
var appId_service_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

class appId_service_AppIdService {
    constructor(storageService) {
        this.storageService = storageService;
    }
    getAppId() {
        return this.makeAndGetAppId('appId');
    }
    getAnonymousAppId() {
        return this.makeAndGetAppId('anonymousAppId');
    }
    makeAndGetAppId(key) {
        return appId_service_awaiter(this, void 0, void 0, function* () {
            const existingId = yield this.storageService.get(key);
            if (existingId != null) {
                return existingId;
            }
            const guid = utils["a" /* Utils */].newGuid();
            yield this.storageService.save(key, guid);
            return guid;
        });
    }
}

// CONCATENATED MODULE: ./jslib/src/misc/throttle.ts
/**
 * Use as a Decorator on async functions, it will limit how many times the function can be
 * in-flight at a time.
 *
 * Calls beyond the limit will be queued, and run when one of the active calls finishes
 */
function throttle(limit, throttleKey) {
    return (target, propertyKey, descriptor) => {
        const originalMethod = descriptor.value;
        const allThrottles = new Map();
        const getThrottles = (obj) => {
            let throttles = allThrottles.get(obj);
            if (throttles != null) {
                return throttles;
            }
            throttles = new Map();
            allThrottles.set(obj, throttles);
            return throttles;
        };
        return {
            value: function (...args) {
                const throttles = getThrottles(this);
                const argsThrottleKey = throttleKey(args);
                let queue = throttles.get(argsThrottleKey);
                if (queue == null) {
                    queue = [];
                    throttles.set(argsThrottleKey, queue);
                }
                return new Promise((resolve, reject) => {
                    const exec = () => {
                        const onFinally = () => {
                            queue.splice(queue.indexOf(exec), 1);
                            if (queue.length >= limit) {
                                queue[limit - 1]();
                            }
                            else if (queue.length === 0) {
                                throttles.delete(argsThrottleKey);
                                if (throttles.size === 0) {
                                    allThrottles.delete(this);
                                }
                            }
                        };
                        originalMethod.apply(this, args).then((val) => {
                            onFinally();
                            return val;
                        }).catch((err) => {
                            onFinally();
                            throw err;
                        }).then(resolve, reject);
                    };
                    queue.push(exec);
                    if (queue.length <= limit) {
                        exec();
                    }
                });
            },
        };
    };
}

// CONCATENATED MODULE: ./jslib/src/services/audit.service.ts
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var audit_service_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


const PwnedPasswordsApi = 'https://api.pwnedpasswords.com/range/';
const ɵ0 = () => 'passwordLeaked';
class audit_service_AuditService {
    constructor(cryptoFunctionService, apiService) {
        this.cryptoFunctionService = cryptoFunctionService;
        this.apiService = apiService;
    }
    passwordLeaked(password) {
        return audit_service_awaiter(this, void 0, void 0, function* () {
            const hashBytes = yield this.cryptoFunctionService.hash(password, 'sha1');
            const hash = utils["a" /* Utils */].fromBufferToHex(hashBytes).toUpperCase();
            const hashStart = hash.substr(0, 5);
            const hashEnding = hash.substr(5);
            const response = yield this.apiService.nativeFetch(new Request(PwnedPasswordsApi + hashStart));
            const leakedHashes = yield response.text();
            const match = leakedHashes.split(/\r?\n/).find((v) => {
                return v.split(':')[0] === hashEnding;
            });
            return match != null ? parseInt(match.split(':')[1], 10) : 0;
        });
    }
    breachedAccounts(username) {
        return audit_service_awaiter(this, void 0, void 0, function* () {
            try {
                return yield this.apiService.getHibpBreach(username);
            }
            catch (e) {
                const error = e;
                if (error.statusCode === 404) {
                    return [];
                }
                throw new Error();
            }
        });
    }
}
__decorate([
    throttle(100, ɵ0),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], audit_service_AuditService.prototype, "passwordLeaked", null);


// EXTERNAL MODULE: ./jslib/src/services/auth.service.ts + 4 modules
var auth_service = __webpack_require__(123);

// EXTERNAL MODULE: ./jslib/src/services/cipher.service.ts
var cipher_service = __webpack_require__(365);

// CONCATENATED MODULE: ./jslib/src/models/data/collectionData.ts
class CollectionData {
    constructor(response) {
        this.id = response.id;
        this.organizationId = response.organizationId;
        this.name = response.name;
        this.externalId = response.externalId;
        this.readOnly = response.readOnly;
    }
}

// CONCATENATED MODULE: ./jslib/src/models/view/collectionView.ts

class collectionView_CollectionView {
    constructor(c) {
        this.id = null;
        this.organizationId = null;
        this.name = null;
        this.externalId = null;
        this.readOnly = null;
        this.hidePasswords = null;
        if (!c) {
            return;
        }
        this.id = c.id;
        this.organizationId = c.organizationId;
        this.externalId = c.externalId;
        if (c instanceof collection_Collection) {
            this.readOnly = c.readOnly;
            this.hidePasswords = c.hidePasswords;
        }
    }
}

// EXTERNAL MODULE: ./jslib/src/models/domain/domainBase.ts
var domainBase = __webpack_require__(30);

// CONCATENATED MODULE: ./jslib/src/models/domain/collection.ts


class collection_Collection extends domainBase["a" /* default */] {
    constructor(obj, alreadyEncrypted = false) {
        super();
        if (obj == null) {
            return;
        }
        this.buildDomainModel(this, obj, {
            id: null,
            organizationId: null,
            name: null,
            externalId: null,
            readOnly: null,
            hidePasswords: null,
        }, alreadyEncrypted, ['id', 'organizationId', 'externalId', 'readOnly', 'hidePasswords']);
    }
    decrypt() {
        return this.decryptObj(new collectionView_CollectionView(this), {
            name: null,
        }, this.organizationId);
    }
}

// CONCATENATED MODULE: ./jslib/src/models/domain/treeNode.ts
class TreeNode {
    constructor(node, name, parent) {
        this.children = [];
        this.parent = parent;
        this.node = node;
        this.node.name = name;
    }
}

// CONCATENATED MODULE: ./jslib/src/misc/serviceUtils.ts

class serviceUtils_ServiceUtils {
    static nestedTraverse(nodeTree, partIndex, parts, obj, parent, delimiter) {
        if (parts.length <= partIndex) {
            return;
        }
        const end = partIndex === parts.length - 1;
        const partName = parts[partIndex];
        for (let i = 0; i < nodeTree.length; i++) {
            if (nodeTree[i].node.name !== parts[partIndex]) {
                continue;
            }
            if (end && nodeTree[i].node.id !== obj.id) {
                // Another node with the same name.
                nodeTree.push(new TreeNode(obj, partName, parent));
                return;
            }
            serviceUtils_ServiceUtils.nestedTraverse(nodeTree[i].children, partIndex + 1, parts, obj, nodeTree[i].node, delimiter);
            return;
        }
        if (nodeTree.filter((n) => n.node.name === partName).length === 0) {
            if (end) {
                nodeTree.push(new TreeNode(obj, partName, parent));
                return;
            }
            const newPartName = parts[partIndex] + delimiter + parts[partIndex + 1];
            serviceUtils_ServiceUtils.nestedTraverse(nodeTree, 0, [newPartName, ...parts.slice(partIndex + 2)], obj, parent, delimiter);
        }
    }
    static getTreeNodeObject(nodeTree, id) {
        for (let i = 0; i < nodeTree.length; i++) {
            if (nodeTree[i].node.id === id) {
                return nodeTree[i];
            }
            else if (nodeTree[i].children != null) {
                const node = serviceUtils_ServiceUtils.getTreeNodeObject(nodeTree[i].children, id);
                if (node !== null) {
                    return node;
                }
            }
        }
        return null;
    }
}

// CONCATENATED MODULE: ./jslib/src/services/collection.service.ts
var collection_service_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};





const Keys = {
    collectionsPrefix: 'collections_',
};
const NestingDelimiter = '/';
class collection_service_CollectionService {
    constructor(cryptoService, userService, storageService, i18nService) {
        this.cryptoService = cryptoService;
        this.userService = userService;
        this.storageService = storageService;
        this.i18nService = i18nService;
    }
    clearCache() {
        this.decryptedCollectionCache = null;
    }
    encrypt(model) {
        return collection_service_awaiter(this, void 0, void 0, function* () {
            if (model.organizationId == null) {
                throw new Error('Collection has no organization id.');
            }
            const key = yield this.cryptoService.getOrgKey(model.organizationId);
            if (key == null) {
                throw new Error('No key for this collection\'s organization.');
            }
            const collection = new collection_Collection();
            collection.id = model.id;
            collection.organizationId = model.organizationId;
            collection.readOnly = model.readOnly;
            collection.name = yield this.cryptoService.encrypt(model.name, key);
            return collection;
        });
    }
    decryptMany(collections) {
        return collection_service_awaiter(this, void 0, void 0, function* () {
            if (collections == null) {
                return [];
            }
            const decCollections = [];
            const promises = [];
            collections.forEach((collection) => {
                promises.push(collection.decrypt().then((c) => decCollections.push(c)));
            });
            yield Promise.all(promises);
            return decCollections.sort(utils["a" /* Utils */].getSortFunction(this.i18nService, 'name'));
        });
    }
    get(id) {
        return collection_service_awaiter(this, void 0, void 0, function* () {
            const userId = yield this.userService.getUserId();
            const collections = yield this.storageService.get(Keys.collectionsPrefix + userId);
            if (collections == null || !collections.hasOwnProperty(id)) {
                return null;
            }
            return new collection_Collection(collections[id]);
        });
    }
    getAll() {
        return collection_service_awaiter(this, void 0, void 0, function* () {
            const userId = yield this.userService.getUserId();
            const collections = yield this.storageService.get(Keys.collectionsPrefix + userId);
            const response = [];
            for (const id in collections) {
                if (collections.hasOwnProperty(id)) {
                    response.push(new collection_Collection(collections[id]));
                }
            }
            return response;
        });
    }
    getAllDecrypted() {
        return collection_service_awaiter(this, void 0, void 0, function* () {
            if (this.decryptedCollectionCache != null) {
                return this.decryptedCollectionCache;
            }
            const hasKey = yield this.cryptoService.hasKey();
            if (!hasKey) {
                throw new Error('No key.');
            }
            const collections = yield this.getAll();
            this.decryptedCollectionCache = yield this.decryptMany(collections);
            return this.decryptedCollectionCache;
        });
    }
    getAllNested(collections = null) {
        return collection_service_awaiter(this, void 0, void 0, function* () {
            if (collections == null) {
                collections = yield this.getAllDecrypted();
            }
            const nodes = [];
            collections.forEach((c) => {
                const collectionCopy = new collectionView_CollectionView();
                collectionCopy.id = c.id;
                collectionCopy.organizationId = c.organizationId;
                const parts = c.name != null ? c.name.replace(/^\/+|\/+$/g, '').split(NestingDelimiter) : [];
                serviceUtils_ServiceUtils.nestedTraverse(nodes, 0, parts, collectionCopy, null, NestingDelimiter);
            });
            return nodes;
        });
    }
    getNested(id) {
        return collection_service_awaiter(this, void 0, void 0, function* () {
            const collections = yield this.getAllNested();
            return serviceUtils_ServiceUtils.getTreeNodeObject(collections, id);
        });
    }
    upsert(collection) {
        return collection_service_awaiter(this, void 0, void 0, function* () {
            const userId = yield this.userService.getUserId();
            let collections = yield this.storageService.get(Keys.collectionsPrefix + userId);
            if (collections == null) {
                collections = {};
            }
            if (collection instanceof CollectionData) {
                const c = collection;
                collections[c.id] = c;
            }
            else {
                collection.forEach((c) => {
                    collections[c.id] = c;
                });
            }
            yield this.storageService.save(Keys.collectionsPrefix + userId, collections);
            this.decryptedCollectionCache = null;
        });
    }
    replace(collections) {
        return collection_service_awaiter(this, void 0, void 0, function* () {
            const userId = yield this.userService.getUserId();
            yield this.storageService.save(Keys.collectionsPrefix + userId, collections);
            this.decryptedCollectionCache = null;
        });
    }
    clear(userId) {
        return collection_service_awaiter(this, void 0, void 0, function* () {
            yield this.storageService.remove(Keys.collectionsPrefix + userId);
            this.decryptedCollectionCache = null;
        });
    }
    delete(id) {
        return collection_service_awaiter(this, void 0, void 0, function* () {
            const userId = yield this.userService.getUserId();
            const collections = yield this.storageService.get(Keys.collectionsPrefix + userId);
            if (collections == null) {
                return;
            }
            if (typeof id === 'string') {
                const i = id;
                delete collections[id];
            }
            else {
                id.forEach((i) => {
                    delete collections[i];
                });
            }
            yield this.storageService.save(Keys.collectionsPrefix + userId, collections);
            this.decryptedCollectionCache = null;
        });
    }
}

// EXTERNAL MODULE: ./jslib/src/services/constants.service.ts
var constants_service = __webpack_require__(6);

// CONCATENATED MODULE: ./jslib/src/services/container.service.ts
class ContainerService {
    constructor(cryptoService) {
        this.cryptoService = cryptoService;
    }
    // deprecated, use attachToGlobal instead
    attachToWindow(win) {
        this.attachToGlobal(win);
    }
    attachToGlobal(global) {
        if (!global.bitwardenContainerService) {
            global.bitwardenContainerService = this;
        }
    }
    getCryptoService() {
        return this.cryptoService;
    }
}

// EXTERNAL MODULE: ./node_modules/big-integer/BigInteger.js
var BigInteger = __webpack_require__(433);

// EXTERNAL MODULE: ./jslib/src/enums/kdfType.ts
var kdfType = __webpack_require__(148);

// EXTERNAL MODULE: ./jslib/src/models/domain/cipherString.ts
var domain_cipherString = __webpack_require__(63);

// CONCATENATED MODULE: ./jslib/src/models/domain/encryptedObject.ts
class EncryptedObject {
}

// EXTERNAL MODULE: ./jslib/src/models/domain/symmetricCryptoKey.ts
var symmetricCryptoKey = __webpack_require__(65);

// EXTERNAL MODULE: ./jslib/src/misc/sequentialize.ts
var sequentialize = __webpack_require__(195);

// CONCATENATED MODULE: ./jslib/src/misc/wordlist.ts
// EFF's Long Wordlist from https://www.eff.org/dice
const EEFLongWordList = [
    'abacus',
    'abdomen',
    'abdominal',
    'abide',
    'abiding',
    'ability',
    'ablaze',
    'able',
    'abnormal',
    'abrasion',
    'abrasive',
    'abreast',
    'abridge',
    'abroad',
    'abruptly',
    'absence',
    'absentee',
    'absently',
    'absinthe',
    'absolute',
    'absolve',
    'abstain',
    'abstract',
    'absurd',
    'accent',
    'acclaim',
    'acclimate',
    'accompany',
    'account',
    'accuracy',
    'accurate',
    'accustom',
    'acetone',
    'achiness',
    'aching',
    'acid',
    'acorn',
    'acquaint',
    'acquire',
    'acre',
    'acrobat',
    'acronym',
    'acting',
    'action',
    'activate',
    'activator',
    'active',
    'activism',
    'activist',
    'activity',
    'actress',
    'acts',
    'acutely',
    'acuteness',
    'aeration',
    'aerobics',
    'aerosol',
    'aerospace',
    'afar',
    'affair',
    'affected',
    'affecting',
    'affection',
    'affidavit',
    'affiliate',
    'affirm',
    'affix',
    'afflicted',
    'affluent',
    'afford',
    'affront',
    'aflame',
    'afloat',
    'aflutter',
    'afoot',
    'afraid',
    'afterglow',
    'afterlife',
    'aftermath',
    'aftermost',
    'afternoon',
    'aged',
    'ageless',
    'agency',
    'agenda',
    'agent',
    'aggregate',
    'aghast',
    'agile',
    'agility',
    'aging',
    'agnostic',
    'agonize',
    'agonizing',
    'agony',
    'agreeable',
    'agreeably',
    'agreed',
    'agreeing',
    'agreement',
    'aground',
    'ahead',
    'ahoy',
    'aide',
    'aids',
    'aim',
    'ajar',
    'alabaster',
    'alarm',
    'albatross',
    'album',
    'alfalfa',
    'algebra',
    'algorithm',
    'alias',
    'alibi',
    'alienable',
    'alienate',
    'aliens',
    'alike',
    'alive',
    'alkaline',
    'alkalize',
    'almanac',
    'almighty',
    'almost',
    'aloe',
    'aloft',
    'aloha',
    'alone',
    'alongside',
    'aloof',
    'alphabet',
    'alright',
    'although',
    'altitude',
    'alto',
    'aluminum',
    'alumni',
    'always',
    'amaretto',
    'amaze',
    'amazingly',
    'amber',
    'ambiance',
    'ambiguity',
    'ambiguous',
    'ambition',
    'ambitious',
    'ambulance',
    'ambush',
    'amendable',
    'amendment',
    'amends',
    'amenity',
    'amiable',
    'amicably',
    'amid',
    'amigo',
    'amino',
    'amiss',
    'ammonia',
    'ammonium',
    'amnesty',
    'amniotic',
    'among',
    'amount',
    'amperage',
    'ample',
    'amplifier',
    'amplify',
    'amply',
    'amuck',
    'amulet',
    'amusable',
    'amused',
    'amusement',
    'amuser',
    'amusing',
    'anaconda',
    'anaerobic',
    'anagram',
    'anatomist',
    'anatomy',
    'anchor',
    'anchovy',
    'ancient',
    'android',
    'anemia',
    'anemic',
    'aneurism',
    'anew',
    'angelfish',
    'angelic',
    'anger',
    'angled',
    'angler',
    'angles',
    'angling',
    'angrily',
    'angriness',
    'anguished',
    'angular',
    'animal',
    'animate',
    'animating',
    'animation',
    'animator',
    'anime',
    'animosity',
    'ankle',
    'annex',
    'annotate',
    'announcer',
    'annoying',
    'annually',
    'annuity',
    'anointer',
    'another',
    'answering',
    'antacid',
    'antarctic',
    'anteater',
    'antelope',
    'antennae',
    'anthem',
    'anthill',
    'anthology',
    'antibody',
    'antics',
    'antidote',
    'antihero',
    'antiquely',
    'antiques',
    'antiquity',
    'antirust',
    'antitoxic',
    'antitrust',
    'antiviral',
    'antivirus',
    'antler',
    'antonym',
    'antsy',
    'anvil',
    'anybody',
    'anyhow',
    'anymore',
    'anyone',
    'anyplace',
    'anything',
    'anytime',
    'anyway',
    'anywhere',
    'aorta',
    'apache',
    'apostle',
    'appealing',
    'appear',
    'appease',
    'appeasing',
    'appendage',
    'appendix',
    'appetite',
    'appetizer',
    'applaud',
    'applause',
    'apple',
    'appliance',
    'applicant',
    'applied',
    'apply',
    'appointee',
    'appraisal',
    'appraiser',
    'apprehend',
    'approach',
    'approval',
    'approve',
    'apricot',
    'april',
    'apron',
    'aptitude',
    'aptly',
    'aqua',
    'aqueduct',
    'arbitrary',
    'arbitrate',
    'ardently',
    'area',
    'arena',
    'arguable',
    'arguably',
    'argue',
    'arise',
    'armadillo',
    'armband',
    'armchair',
    'armed',
    'armful',
    'armhole',
    'arming',
    'armless',
    'armoire',
    'armored',
    'armory',
    'armrest',
    'army',
    'aroma',
    'arose',
    'around',
    'arousal',
    'arrange',
    'array',
    'arrest',
    'arrival',
    'arrive',
    'arrogance',
    'arrogant',
    'arson',
    'art',
    'ascend',
    'ascension',
    'ascent',
    'ascertain',
    'ashamed',
    'ashen',
    'ashes',
    'ashy',
    'aside',
    'askew',
    'asleep',
    'asparagus',
    'aspect',
    'aspirate',
    'aspire',
    'aspirin',
    'astonish',
    'astound',
    'astride',
    'astrology',
    'astronaut',
    'astronomy',
    'astute',
    'atlantic',
    'atlas',
    'atom',
    'atonable',
    'atop',
    'atrium',
    'atrocious',
    'atrophy',
    'attach',
    'attain',
    'attempt',
    'attendant',
    'attendee',
    'attention',
    'attentive',
    'attest',
    'attic',
    'attire',
    'attitude',
    'attractor',
    'attribute',
    'atypical',
    'auction',
    'audacious',
    'audacity',
    'audible',
    'audibly',
    'audience',
    'audio',
    'audition',
    'augmented',
    'august',
    'authentic',
    'author',
    'autism',
    'autistic',
    'autograph',
    'automaker',
    'automated',
    'automatic',
    'autopilot',
    'available',
    'avalanche',
    'avatar',
    'avenge',
    'avenging',
    'avenue',
    'average',
    'aversion',
    'avert',
    'aviation',
    'aviator',
    'avid',
    'avoid',
    'await',
    'awaken',
    'award',
    'aware',
    'awhile',
    'awkward',
    'awning',
    'awoke',
    'awry',
    'axis',
    'babble',
    'babbling',
    'babied',
    'baboon',
    'backache',
    'backboard',
    'backboned',
    'backdrop',
    'backed',
    'backer',
    'backfield',
    'backfire',
    'backhand',
    'backing',
    'backlands',
    'backlash',
    'backless',
    'backlight',
    'backlit',
    'backlog',
    'backpack',
    'backpedal',
    'backrest',
    'backroom',
    'backshift',
    'backside',
    'backslid',
    'backspace',
    'backspin',
    'backstab',
    'backstage',
    'backtalk',
    'backtrack',
    'backup',
    'backward',
    'backwash',
    'backwater',
    'backyard',
    'bacon',
    'bacteria',
    'bacterium',
    'badass',
    'badge',
    'badland',
    'badly',
    'badness',
    'baffle',
    'baffling',
    'bagel',
    'bagful',
    'baggage',
    'bagged',
    'baggie',
    'bagginess',
    'bagging',
    'baggy',
    'bagpipe',
    'baguette',
    'baked',
    'bakery',
    'bakeshop',
    'baking',
    'balance',
    'balancing',
    'balcony',
    'balmy',
    'balsamic',
    'bamboo',
    'banana',
    'banish',
    'banister',
    'banjo',
    'bankable',
    'bankbook',
    'banked',
    'banker',
    'banking',
    'banknote',
    'bankroll',
    'banner',
    'bannister',
    'banshee',
    'banter',
    'barbecue',
    'barbed',
    'barbell',
    'barber',
    'barcode',
    'barge',
    'bargraph',
    'barista',
    'baritone',
    'barley',
    'barmaid',
    'barman',
    'barn',
    'barometer',
    'barrack',
    'barracuda',
    'barrel',
    'barrette',
    'barricade',
    'barrier',
    'barstool',
    'bartender',
    'barterer',
    'bash',
    'basically',
    'basics',
    'basil',
    'basin',
    'basis',
    'basket',
    'batboy',
    'batch',
    'bath',
    'baton',
    'bats',
    'battalion',
    'battered',
    'battering',
    'battery',
    'batting',
    'battle',
    'bauble',
    'bazooka',
    'blabber',
    'bladder',
    'blade',
    'blah',
    'blame',
    'blaming',
    'blanching',
    'blandness',
    'blank',
    'blaspheme',
    'blasphemy',
    'blast',
    'blatancy',
    'blatantly',
    'blazer',
    'blazing',
    'bleach',
    'bleak',
    'bleep',
    'blemish',
    'blend',
    'bless',
    'blighted',
    'blimp',
    'bling',
    'blinked',
    'blinker',
    'blinking',
    'blinks',
    'blip',
    'blissful',
    'blitz',
    'blizzard',
    'bloated',
    'bloating',
    'blob',
    'blog',
    'bloomers',
    'blooming',
    'blooper',
    'blot',
    'blouse',
    'blubber',
    'bluff',
    'bluish',
    'blunderer',
    'blunt',
    'blurb',
    'blurred',
    'blurry',
    'blurt',
    'blush',
    'blustery',
    'boaster',
    'boastful',
    'boasting',
    'boat',
    'bobbed',
    'bobbing',
    'bobble',
    'bobcat',
    'bobsled',
    'bobtail',
    'bodacious',
    'body',
    'bogged',
    'boggle',
    'bogus',
    'boil',
    'bok',
    'bolster',
    'bolt',
    'bonanza',
    'bonded',
    'bonding',
    'bondless',
    'boned',
    'bonehead',
    'boneless',
    'bonelike',
    'boney',
    'bonfire',
    'bonnet',
    'bonsai',
    'bonus',
    'bony',
    'boogeyman',
    'boogieman',
    'book',
    'boondocks',
    'booted',
    'booth',
    'bootie',
    'booting',
    'bootlace',
    'bootleg',
    'boots',
    'boozy',
    'borax',
    'boring',
    'borough',
    'borrower',
    'borrowing',
    'boss',
    'botanical',
    'botanist',
    'botany',
    'botch',
    'both',
    'bottle',
    'bottling',
    'bottom',
    'bounce',
    'bouncing',
    'bouncy',
    'bounding',
    'boundless',
    'bountiful',
    'bovine',
    'boxcar',
    'boxer',
    'boxing',
    'boxlike',
    'boxy',
    'breach',
    'breath',
    'breeches',
    'breeching',
    'breeder',
    'breeding',
    'breeze',
    'breezy',
    'brethren',
    'brewery',
    'brewing',
    'briar',
    'bribe',
    'brick',
    'bride',
    'bridged',
    'brigade',
    'bright',
    'brilliant',
    'brim',
    'bring',
    'brink',
    'brisket',
    'briskly',
    'briskness',
    'bristle',
    'brittle',
    'broadband',
    'broadcast',
    'broaden',
    'broadly',
    'broadness',
    'broadside',
    'broadways',
    'broiler',
    'broiling',
    'broken',
    'broker',
    'bronchial',
    'bronco',
    'bronze',
    'bronzing',
    'brook',
    'broom',
    'brought',
    'browbeat',
    'brownnose',
    'browse',
    'browsing',
    'bruising',
    'brunch',
    'brunette',
    'brunt',
    'brush',
    'brussels',
    'brute',
    'brutishly',
    'bubble',
    'bubbling',
    'bubbly',
    'buccaneer',
    'bucked',
    'bucket',
    'buckle',
    'buckshot',
    'buckskin',
    'bucktooth',
    'buckwheat',
    'buddhism',
    'buddhist',
    'budding',
    'buddy',
    'budget',
    'buffalo',
    'buffed',
    'buffer',
    'buffing',
    'buffoon',
    'buggy',
    'bulb',
    'bulge',
    'bulginess',
    'bulgur',
    'bulk',
    'bulldog',
    'bulldozer',
    'bullfight',
    'bullfrog',
    'bullhorn',
    'bullion',
    'bullish',
    'bullpen',
    'bullring',
    'bullseye',
    'bullwhip',
    'bully',
    'bunch',
    'bundle',
    'bungee',
    'bunion',
    'bunkbed',
    'bunkhouse',
    'bunkmate',
    'bunny',
    'bunt',
    'busboy',
    'bush',
    'busily',
    'busload',
    'bust',
    'busybody',
    'buzz',
    'cabana',
    'cabbage',
    'cabbie',
    'cabdriver',
    'cable',
    'caboose',
    'cache',
    'cackle',
    'cacti',
    'cactus',
    'caddie',
    'caddy',
    'cadet',
    'cadillac',
    'cadmium',
    'cage',
    'cahoots',
    'cake',
    'calamari',
    'calamity',
    'calcium',
    'calculate',
    'calculus',
    'caliber',
    'calibrate',
    'calm',
    'caloric',
    'calorie',
    'calzone',
    'camcorder',
    'cameo',
    'camera',
    'camisole',
    'camper',
    'campfire',
    'camping',
    'campsite',
    'campus',
    'canal',
    'canary',
    'cancel',
    'candied',
    'candle',
    'candy',
    'cane',
    'canine',
    'canister',
    'cannabis',
    'canned',
    'canning',
    'cannon',
    'cannot',
    'canola',
    'canon',
    'canopener',
    'canopy',
    'canteen',
    'canyon',
    'capable',
    'capably',
    'capacity',
    'cape',
    'capillary',
    'capital',
    'capitol',
    'capped',
    'capricorn',
    'capsize',
    'capsule',
    'caption',
    'captivate',
    'captive',
    'captivity',
    'capture',
    'caramel',
    'carat',
    'caravan',
    'carbon',
    'cardboard',
    'carded',
    'cardiac',
    'cardigan',
    'cardinal',
    'cardstock',
    'carefully',
    'caregiver',
    'careless',
    'caress',
    'caretaker',
    'cargo',
    'caring',
    'carless',
    'carload',
    'carmaker',
    'carnage',
    'carnation',
    'carnival',
    'carnivore',
    'carol',
    'carpenter',
    'carpentry',
    'carpool',
    'carport',
    'carried',
    'carrot',
    'carrousel',
    'carry',
    'cartel',
    'cartload',
    'carton',
    'cartoon',
    'cartridge',
    'cartwheel',
    'carve',
    'carving',
    'carwash',
    'cascade',
    'case',
    'cash',
    'casing',
    'casino',
    'casket',
    'cassette',
    'casually',
    'casualty',
    'catacomb',
    'catalog',
    'catalyst',
    'catalyze',
    'catapult',
    'cataract',
    'catatonic',
    'catcall',
    'catchable',
    'catcher',
    'catching',
    'catchy',
    'caterer',
    'catering',
    'catfight',
    'catfish',
    'cathedral',
    'cathouse',
    'catlike',
    'catnap',
    'catnip',
    'catsup',
    'cattail',
    'cattishly',
    'cattle',
    'catty',
    'catwalk',
    'caucasian',
    'caucus',
    'causal',
    'causation',
    'cause',
    'causing',
    'cauterize',
    'caution',
    'cautious',
    'cavalier',
    'cavalry',
    'caviar',
    'cavity',
    'cedar',
    'celery',
    'celestial',
    'celibacy',
    'celibate',
    'celtic',
    'cement',
    'census',
    'ceramics',
    'ceremony',
    'certainly',
    'certainty',
    'certified',
    'certify',
    'cesarean',
    'cesspool',
    'chafe',
    'chaffing',
    'chain',
    'chair',
    'chalice',
    'challenge',
    'chamber',
    'chamomile',
    'champion',
    'chance',
    'change',
    'channel',
    'chant',
    'chaos',
    'chaperone',
    'chaplain',
    'chapped',
    'chaps',
    'chapter',
    'character',
    'charbroil',
    'charcoal',
    'charger',
    'charging',
    'chariot',
    'charity',
    'charm',
    'charred',
    'charter',
    'charting',
    'chase',
    'chasing',
    'chaste',
    'chastise',
    'chastity',
    'chatroom',
    'chatter',
    'chatting',
    'chatty',
    'cheating',
    'cheddar',
    'cheek',
    'cheer',
    'cheese',
    'cheesy',
    'chef',
    'chemicals',
    'chemist',
    'chemo',
    'cherisher',
    'cherub',
    'chess',
    'chest',
    'chevron',
    'chevy',
    'chewable',
    'chewer',
    'chewing',
    'chewy',
    'chief',
    'chihuahua',
    'childcare',
    'childhood',
    'childish',
    'childless',
    'childlike',
    'chili',
    'chill',
    'chimp',
    'chip',
    'chirping',
    'chirpy',
    'chitchat',
    'chivalry',
    'chive',
    'chloride',
    'chlorine',
    'choice',
    'chokehold',
    'choking',
    'chomp',
    'chooser',
    'choosing',
    'choosy',
    'chop',
    'chosen',
    'chowder',
    'chowtime',
    'chrome',
    'chubby',
    'chuck',
    'chug',
    'chummy',
    'chump',
    'chunk',
    'churn',
    'chute',
    'cider',
    'cilantro',
    'cinch',
    'cinema',
    'cinnamon',
    'circle',
    'circling',
    'circular',
    'circulate',
    'circus',
    'citable',
    'citadel',
    'citation',
    'citizen',
    'citric',
    'citrus',
    'city',
    'civic',
    'civil',
    'clad',
    'claim',
    'clambake',
    'clammy',
    'clamor',
    'clamp',
    'clamshell',
    'clang',
    'clanking',
    'clapped',
    'clapper',
    'clapping',
    'clarify',
    'clarinet',
    'clarity',
    'clash',
    'clasp',
    'class',
    'clatter',
    'clause',
    'clavicle',
    'claw',
    'clay',
    'clean',
    'clear',
    'cleat',
    'cleaver',
    'cleft',
    'clench',
    'clergyman',
    'clerical',
    'clerk',
    'clever',
    'clicker',
    'client',
    'climate',
    'climatic',
    'cling',
    'clinic',
    'clinking',
    'clip',
    'clique',
    'cloak',
    'clobber',
    'clock',
    'clone',
    'cloning',
    'closable',
    'closure',
    'clothes',
    'clothing',
    'cloud',
    'clover',
    'clubbed',
    'clubbing',
    'clubhouse',
    'clump',
    'clumsily',
    'clumsy',
    'clunky',
    'clustered',
    'clutch',
    'clutter',
    'coach',
    'coagulant',
    'coastal',
    'coaster',
    'coasting',
    'coastland',
    'coastline',
    'coat',
    'coauthor',
    'cobalt',
    'cobbler',
    'cobweb',
    'cocoa',
    'coconut',
    'cod',
    'coeditor',
    'coerce',
    'coexist',
    'coffee',
    'cofounder',
    'cognition',
    'cognitive',
    'cogwheel',
    'coherence',
    'coherent',
    'cohesive',
    'coil',
    'coke',
    'cola',
    'cold',
    'coleslaw',
    'coliseum',
    'collage',
    'collapse',
    'collar',
    'collected',
    'collector',
    'collide',
    'collie',
    'collision',
    'colonial',
    'colonist',
    'colonize',
    'colony',
    'colossal',
    'colt',
    'coma',
    'come',
    'comfort',
    'comfy',
    'comic',
    'coming',
    'comma',
    'commence',
    'commend',
    'comment',
    'commerce',
    'commode',
    'commodity',
    'commodore',
    'common',
    'commotion',
    'commute',
    'commuting',
    'compacted',
    'compacter',
    'compactly',
    'compactor',
    'companion',
    'company',
    'compare',
    'compel',
    'compile',
    'comply',
    'component',
    'composed',
    'composer',
    'composite',
    'compost',
    'composure',
    'compound',
    'compress',
    'comprised',
    'computer',
    'computing',
    'comrade',
    'concave',
    'conceal',
    'conceded',
    'concept',
    'concerned',
    'concert',
    'conch',
    'concierge',
    'concise',
    'conclude',
    'concrete',
    'concur',
    'condense',
    'condiment',
    'condition',
    'condone',
    'conducive',
    'conductor',
    'conduit',
    'cone',
    'confess',
    'confetti',
    'confidant',
    'confident',
    'confider',
    'confiding',
    'configure',
    'confined',
    'confining',
    'confirm',
    'conflict',
    'conform',
    'confound',
    'confront',
    'confused',
    'confusing',
    'confusion',
    'congenial',
    'congested',
    'congrats',
    'congress',
    'conical',
    'conjoined',
    'conjure',
    'conjuror',
    'connected',
    'connector',
    'consensus',
    'consent',
    'console',
    'consoling',
    'consonant',
    'constable',
    'constant',
    'constrain',
    'constrict',
    'construct',
    'consult',
    'consumer',
    'consuming',
    'contact',
    'container',
    'contempt',
    'contend',
    'contented',
    'contently',
    'contents',
    'contest',
    'context',
    'contort',
    'contour',
    'contrite',
    'control',
    'contusion',
    'convene',
    'convent',
    'copartner',
    'cope',
    'copied',
    'copier',
    'copilot',
    'coping',
    'copious',
    'copper',
    'copy',
    'coral',
    'cork',
    'cornball',
    'cornbread',
    'corncob',
    'cornea',
    'corned',
    'corner',
    'cornfield',
    'cornflake',
    'cornhusk',
    'cornmeal',
    'cornstalk',
    'corny',
    'coronary',
    'coroner',
    'corporal',
    'corporate',
    'corral',
    'correct',
    'corridor',
    'corrode',
    'corroding',
    'corrosive',
    'corsage',
    'corset',
    'cortex',
    'cosigner',
    'cosmetics',
    'cosmic',
    'cosmos',
    'cosponsor',
    'cost',
    'cottage',
    'cotton',
    'couch',
    'cough',
    'could',
    'countable',
    'countdown',
    'counting',
    'countless',
    'country',
    'county',
    'courier',
    'covenant',
    'cover',
    'coveted',
    'coveting',
    'coyness',
    'cozily',
    'coziness',
    'cozy',
    'crabbing',
    'crabgrass',
    'crablike',
    'crabmeat',
    'cradle',
    'cradling',
    'crafter',
    'craftily',
    'craftsman',
    'craftwork',
    'crafty',
    'cramp',
    'cranberry',
    'crane',
    'cranial',
    'cranium',
    'crank',
    'crate',
    'crave',
    'craving',
    'crawfish',
    'crawlers',
    'crawling',
    'crayfish',
    'crayon',
    'crazed',
    'crazily',
    'craziness',
    'crazy',
    'creamed',
    'creamer',
    'creamlike',
    'crease',
    'creasing',
    'creatable',
    'create',
    'creation',
    'creative',
    'creature',
    'credible',
    'credibly',
    'credit',
    'creed',
    'creme',
    'creole',
    'crepe',
    'crept',
    'crescent',
    'crested',
    'cresting',
    'crestless',
    'crevice',
    'crewless',
    'crewman',
    'crewmate',
    'crib',
    'cricket',
    'cried',
    'crier',
    'crimp',
    'crimson',
    'cringe',
    'cringing',
    'crinkle',
    'crinkly',
    'crisped',
    'crisping',
    'crisply',
    'crispness',
    'crispy',
    'criteria',
    'critter',
    'croak',
    'crock',
    'crook',
    'croon',
    'crop',
    'cross',
    'crouch',
    'crouton',
    'crowbar',
    'crowd',
    'crown',
    'crucial',
    'crudely',
    'crudeness',
    'cruelly',
    'cruelness',
    'cruelty',
    'crumb',
    'crummiest',
    'crummy',
    'crumpet',
    'crumpled',
    'cruncher',
    'crunching',
    'crunchy',
    'crusader',
    'crushable',
    'crushed',
    'crusher',
    'crushing',
    'crust',
    'crux',
    'crying',
    'cryptic',
    'crystal',
    'cubbyhole',
    'cube',
    'cubical',
    'cubicle',
    'cucumber',
    'cuddle',
    'cuddly',
    'cufflink',
    'culinary',
    'culminate',
    'culpable',
    'culprit',
    'cultivate',
    'cultural',
    'culture',
    'cupbearer',
    'cupcake',
    'cupid',
    'cupped',
    'cupping',
    'curable',
    'curator',
    'curdle',
    'cure',
    'curfew',
    'curing',
    'curled',
    'curler',
    'curliness',
    'curling',
    'curly',
    'curry',
    'curse',
    'cursive',
    'cursor',
    'curtain',
    'curtly',
    'curtsy',
    'curvature',
    'curve',
    'curvy',
    'cushy',
    'cusp',
    'cussed',
    'custard',
    'custodian',
    'custody',
    'customary',
    'customer',
    'customize',
    'customs',
    'cut',
    'cycle',
    'cyclic',
    'cycling',
    'cyclist',
    'cylinder',
    'cymbal',
    'cytoplasm',
    'cytoplast',
    'dab',
    'dad',
    'daffodil',
    'dagger',
    'daily',
    'daintily',
    'dainty',
    'dairy',
    'daisy',
    'dallying',
    'dance',
    'dancing',
    'dandelion',
    'dander',
    'dandruff',
    'dandy',
    'danger',
    'dangle',
    'dangling',
    'daredevil',
    'dares',
    'daringly',
    'darkened',
    'darkening',
    'darkish',
    'darkness',
    'darkroom',
    'darling',
    'darn',
    'dart',
    'darwinism',
    'dash',
    'dastardly',
    'data',
    'datebook',
    'dating',
    'daughter',
    'daunting',
    'dawdler',
    'dawn',
    'daybed',
    'daybreak',
    'daycare',
    'daydream',
    'daylight',
    'daylong',
    'dayroom',
    'daytime',
    'dazzler',
    'dazzling',
    'deacon',
    'deafening',
    'deafness',
    'dealer',
    'dealing',
    'dealmaker',
    'dealt',
    'dean',
    'debatable',
    'debate',
    'debating',
    'debit',
    'debrief',
    'debtless',
    'debtor',
    'debug',
    'debunk',
    'decade',
    'decaf',
    'decal',
    'decathlon',
    'decay',
    'deceased',
    'deceit',
    'deceiver',
    'deceiving',
    'december',
    'decency',
    'decent',
    'deception',
    'deceptive',
    'decibel',
    'decidable',
    'decimal',
    'decimeter',
    'decipher',
    'deck',
    'declared',
    'decline',
    'decode',
    'decompose',
    'decorated',
    'decorator',
    'decoy',
    'decrease',
    'decree',
    'dedicate',
    'dedicator',
    'deduce',
    'deduct',
    'deed',
    'deem',
    'deepen',
    'deeply',
    'deepness',
    'deface',
    'defacing',
    'defame',
    'default',
    'defeat',
    'defection',
    'defective',
    'defendant',
    'defender',
    'defense',
    'defensive',
    'deferral',
    'deferred',
    'defiance',
    'defiant',
    'defile',
    'defiling',
    'define',
    'definite',
    'deflate',
    'deflation',
    'deflator',
    'deflected',
    'deflector',
    'defog',
    'deforest',
    'defraud',
    'defrost',
    'deftly',
    'defuse',
    'defy',
    'degraded',
    'degrading',
    'degrease',
    'degree',
    'dehydrate',
    'deity',
    'dejected',
    'delay',
    'delegate',
    'delegator',
    'delete',
    'deletion',
    'delicacy',
    'delicate',
    'delicious',
    'delighted',
    'delirious',
    'delirium',
    'deliverer',
    'delivery',
    'delouse',
    'delta',
    'deluge',
    'delusion',
    'deluxe',
    'demanding',
    'demeaning',
    'demeanor',
    'demise',
    'democracy',
    'democrat',
    'demote',
    'demotion',
    'demystify',
    'denatured',
    'deniable',
    'denial',
    'denim',
    'denote',
    'dense',
    'density',
    'dental',
    'dentist',
    'denture',
    'deny',
    'deodorant',
    'deodorize',
    'departed',
    'departure',
    'depict',
    'deplete',
    'depletion',
    'deplored',
    'deploy',
    'deport',
    'depose',
    'depraved',
    'depravity',
    'deprecate',
    'depress',
    'deprive',
    'depth',
    'deputize',
    'deputy',
    'derail',
    'deranged',
    'derby',
    'derived',
    'desecrate',
    'deserve',
    'deserving',
    'designate',
    'designed',
    'designer',
    'designing',
    'deskbound',
    'desktop',
    'deskwork',
    'desolate',
    'despair',
    'despise',
    'despite',
    'destiny',
    'destitute',
    'destruct',
    'detached',
    'detail',
    'detection',
    'detective',
    'detector',
    'detention',
    'detergent',
    'detest',
    'detonate',
    'detonator',
    'detoxify',
    'detract',
    'deuce',
    'devalue',
    'deviancy',
    'deviant',
    'deviate',
    'deviation',
    'deviator',
    'device',
    'devious',
    'devotedly',
    'devotee',
    'devotion',
    'devourer',
    'devouring',
    'devoutly',
    'dexterity',
    'dexterous',
    'diabetes',
    'diabetic',
    'diabolic',
    'diagnoses',
    'diagnosis',
    'diagram',
    'dial',
    'diameter',
    'diaper',
    'diaphragm',
    'diary',
    'dice',
    'dicing',
    'dictate',
    'dictation',
    'dictator',
    'difficult',
    'diffused',
    'diffuser',
    'diffusion',
    'diffusive',
    'dig',
    'dilation',
    'diligence',
    'diligent',
    'dill',
    'dilute',
    'dime',
    'diminish',
    'dimly',
    'dimmed',
    'dimmer',
    'dimness',
    'dimple',
    'diner',
    'dingbat',
    'dinghy',
    'dinginess',
    'dingo',
    'dingy',
    'dining',
    'dinner',
    'diocese',
    'dioxide',
    'diploma',
    'dipped',
    'dipper',
    'dipping',
    'directed',
    'direction',
    'directive',
    'directly',
    'directory',
    'direness',
    'dirtiness',
    'disabled',
    'disagree',
    'disallow',
    'disarm',
    'disarray',
    'disaster',
    'disband',
    'disbelief',
    'disburse',
    'discard',
    'discern',
    'discharge',
    'disclose',
    'discolor',
    'discount',
    'discourse',
    'discover',
    'discuss',
    'disdain',
    'disengage',
    'disfigure',
    'disgrace',
    'dish',
    'disinfect',
    'disjoin',
    'disk',
    'dislike',
    'disliking',
    'dislocate',
    'dislodge',
    'disloyal',
    'dismantle',
    'dismay',
    'dismiss',
    'dismount',
    'disobey',
    'disorder',
    'disown',
    'disparate',
    'disparity',
    'dispatch',
    'dispense',
    'dispersal',
    'dispersed',
    'disperser',
    'displace',
    'display',
    'displease',
    'disposal',
    'dispose',
    'disprove',
    'dispute',
    'disregard',
    'disrupt',
    'dissuade',
    'distance',
    'distant',
    'distaste',
    'distill',
    'distinct',
    'distort',
    'distract',
    'distress',
    'district',
    'distrust',
    'ditch',
    'ditto',
    'ditzy',
    'dividable',
    'divided',
    'dividend',
    'dividers',
    'dividing',
    'divinely',
    'diving',
    'divinity',
    'divisible',
    'divisibly',
    'division',
    'divisive',
    'divorcee',
    'dizziness',
    'dizzy',
    'doable',
    'docile',
    'dock',
    'doctrine',
    'document',
    'dodge',
    'dodgy',
    'doily',
    'doing',
    'dole',
    'dollar',
    'dollhouse',
    'dollop',
    'dolly',
    'dolphin',
    'domain',
    'domelike',
    'domestic',
    'dominion',
    'dominoes',
    'donated',
    'donation',
    'donator',
    'donor',
    'donut',
    'doodle',
    'doorbell',
    'doorframe',
    'doorknob',
    'doorman',
    'doormat',
    'doornail',
    'doorpost',
    'doorstep',
    'doorstop',
    'doorway',
    'doozy',
    'dork',
    'dormitory',
    'dorsal',
    'dosage',
    'dose',
    'dotted',
    'doubling',
    'douche',
    'dove',
    'down',
    'dowry',
    'doze',
    'drab',
    'dragging',
    'dragonfly',
    'dragonish',
    'dragster',
    'drainable',
    'drainage',
    'drained',
    'drainer',
    'drainpipe',
    'dramatic',
    'dramatize',
    'drank',
    'drapery',
    'drastic',
    'draw',
    'dreaded',
    'dreadful',
    'dreadlock',
    'dreamboat',
    'dreamily',
    'dreamland',
    'dreamless',
    'dreamlike',
    'dreamt',
    'dreamy',
    'drearily',
    'dreary',
    'drench',
    'dress',
    'drew',
    'dribble',
    'dried',
    'drier',
    'drift',
    'driller',
    'drilling',
    'drinkable',
    'drinking',
    'dripping',
    'drippy',
    'drivable',
    'driven',
    'driver',
    'driveway',
    'driving',
    'drizzle',
    'drizzly',
    'drone',
    'drool',
    'droop',
    'drop-down',
    'dropbox',
    'dropkick',
    'droplet',
    'dropout',
    'dropper',
    'drove',
    'drown',
    'drowsily',
    'drudge',
    'drum',
    'dry',
    'dubbed',
    'dubiously',
    'duchess',
    'duckbill',
    'ducking',
    'duckling',
    'ducktail',
    'ducky',
    'duct',
    'dude',
    'duffel',
    'dugout',
    'duh',
    'duke',
    'duller',
    'dullness',
    'duly',
    'dumping',
    'dumpling',
    'dumpster',
    'duo',
    'dupe',
    'duplex',
    'duplicate',
    'duplicity',
    'durable',
    'durably',
    'duration',
    'duress',
    'during',
    'dusk',
    'dust',
    'dutiful',
    'duty',
    'duvet',
    'dwarf',
    'dweeb',
    'dwelled',
    'dweller',
    'dwelling',
    'dwindle',
    'dwindling',
    'dynamic',
    'dynamite',
    'dynasty',
    'dyslexia',
    'dyslexic',
    'each',
    'eagle',
    'earache',
    'eardrum',
    'earflap',
    'earful',
    'earlobe',
    'early',
    'earmark',
    'earmuff',
    'earphone',
    'earpiece',
    'earplugs',
    'earring',
    'earshot',
    'earthen',
    'earthlike',
    'earthling',
    'earthly',
    'earthworm',
    'earthy',
    'earwig',
    'easeful',
    'easel',
    'easiest',
    'easily',
    'easiness',
    'easing',
    'eastbound',
    'eastcoast',
    'easter',
    'eastward',
    'eatable',
    'eaten',
    'eatery',
    'eating',
    'eats',
    'ebay',
    'ebony',
    'ebook',
    'ecard',
    'eccentric',
    'echo',
    'eclair',
    'eclipse',
    'ecologist',
    'ecology',
    'economic',
    'economist',
    'economy',
    'ecosphere',
    'ecosystem',
    'edge',
    'edginess',
    'edging',
    'edgy',
    'edition',
    'editor',
    'educated',
    'education',
    'educator',
    'eel',
    'effective',
    'effects',
    'efficient',
    'effort',
    'eggbeater',
    'egging',
    'eggnog',
    'eggplant',
    'eggshell',
    'egomaniac',
    'egotism',
    'egotistic',
    'either',
    'eject',
    'elaborate',
    'elastic',
    'elated',
    'elbow',
    'eldercare',
    'elderly',
    'eldest',
    'electable',
    'election',
    'elective',
    'elephant',
    'elevate',
    'elevating',
    'elevation',
    'elevator',
    'eleven',
    'elf',
    'eligible',
    'eligibly',
    'eliminate',
    'elite',
    'elitism',
    'elixir',
    'elk',
    'ellipse',
    'elliptic',
    'elm',
    'elongated',
    'elope',
    'eloquence',
    'eloquent',
    'elsewhere',
    'elude',
    'elusive',
    'elves',
    'email',
    'embargo',
    'embark',
    'embassy',
    'embattled',
    'embellish',
    'ember',
    'embezzle',
    'emblaze',
    'emblem',
    'embody',
    'embolism',
    'emboss',
    'embroider',
    'emcee',
    'emerald',
    'emergency',
    'emission',
    'emit',
    'emote',
    'emoticon',
    'emotion',
    'empathic',
    'empathy',
    'emperor',
    'emphases',
    'emphasis',
    'emphasize',
    'emphatic',
    'empirical',
    'employed',
    'employee',
    'employer',
    'emporium',
    'empower',
    'emptier',
    'emptiness',
    'empty',
    'emu',
    'enable',
    'enactment',
    'enamel',
    'enchanted',
    'enchilada',
    'encircle',
    'enclose',
    'enclosure',
    'encode',
    'encore',
    'encounter',
    'encourage',
    'encroach',
    'encrust',
    'encrypt',
    'endanger',
    'endeared',
    'endearing',
    'ended',
    'ending',
    'endless',
    'endnote',
    'endocrine',
    'endorphin',
    'endorse',
    'endowment',
    'endpoint',
    'endurable',
    'endurance',
    'enduring',
    'energetic',
    'energize',
    'energy',
    'enforced',
    'enforcer',
    'engaged',
    'engaging',
    'engine',
    'engorge',
    'engraved',
    'engraver',
    'engraving',
    'engross',
    'engulf',
    'enhance',
    'enigmatic',
    'enjoyable',
    'enjoyably',
    'enjoyer',
    'enjoying',
    'enjoyment',
    'enlarged',
    'enlarging',
    'enlighten',
    'enlisted',
    'enquirer',
    'enrage',
    'enrich',
    'enroll',
    'enslave',
    'ensnare',
    'ensure',
    'entail',
    'entangled',
    'entering',
    'entertain',
    'enticing',
    'entire',
    'entitle',
    'entity',
    'entomb',
    'entourage',
    'entrap',
    'entree',
    'entrench',
    'entrust',
    'entryway',
    'entwine',
    'enunciate',
    'envelope',
    'enviable',
    'enviably',
    'envious',
    'envision',
    'envoy',
    'envy',
    'enzyme',
    'epic',
    'epidemic',
    'epidermal',
    'epidermis',
    'epidural',
    'epilepsy',
    'epileptic',
    'epilogue',
    'epiphany',
    'episode',
    'equal',
    'equate',
    'equation',
    'equator',
    'equinox',
    'equipment',
    'equity',
    'equivocal',
    'eradicate',
    'erasable',
    'erased',
    'eraser',
    'erasure',
    'ergonomic',
    'errand',
    'errant',
    'erratic',
    'error',
    'erupt',
    'escalate',
    'escalator',
    'escapable',
    'escapade',
    'escapist',
    'escargot',
    'eskimo',
    'esophagus',
    'espionage',
    'espresso',
    'esquire',
    'essay',
    'essence',
    'essential',
    'establish',
    'estate',
    'esteemed',
    'estimate',
    'estimator',
    'estranged',
    'estrogen',
    'etching',
    'eternal',
    'eternity',
    'ethanol',
    'ether',
    'ethically',
    'ethics',
    'euphemism',
    'evacuate',
    'evacuee',
    'evade',
    'evaluate',
    'evaluator',
    'evaporate',
    'evasion',
    'evasive',
    'even',
    'everglade',
    'evergreen',
    'everybody',
    'everyday',
    'everyone',
    'evict',
    'evidence',
    'evident',
    'evil',
    'evoke',
    'evolution',
    'evolve',
    'exact',
    'exalted',
    'example',
    'excavate',
    'excavator',
    'exceeding',
    'exception',
    'excess',
    'exchange',
    'excitable',
    'exciting',
    'exclaim',
    'exclude',
    'excluding',
    'exclusion',
    'exclusive',
    'excretion',
    'excretory',
    'excursion',
    'excusable',
    'excusably',
    'excuse',
    'exemplary',
    'exemplify',
    'exemption',
    'exerciser',
    'exert',
    'exes',
    'exfoliate',
    'exhale',
    'exhaust',
    'exhume',
    'exile',
    'existing',
    'exit',
    'exodus',
    'exonerate',
    'exorcism',
    'exorcist',
    'expand',
    'expanse',
    'expansion',
    'expansive',
    'expectant',
    'expedited',
    'expediter',
    'expel',
    'expend',
    'expenses',
    'expensive',
    'expert',
    'expire',
    'expiring',
    'explain',
    'expletive',
    'explicit',
    'explode',
    'exploit',
    'explore',
    'exploring',
    'exponent',
    'exporter',
    'exposable',
    'expose',
    'exposure',
    'express',
    'expulsion',
    'exquisite',
    'extended',
    'extending',
    'extent',
    'extenuate',
    'exterior',
    'external',
    'extinct',
    'extortion',
    'extradite',
    'extras',
    'extrovert',
    'extrude',
    'extruding',
    'exuberant',
    'fable',
    'fabric',
    'fabulous',
    'facebook',
    'facecloth',
    'facedown',
    'faceless',
    'facelift',
    'faceplate',
    'faceted',
    'facial',
    'facility',
    'facing',
    'facsimile',
    'faction',
    'factoid',
    'factor',
    'factsheet',
    'factual',
    'faculty',
    'fade',
    'fading',
    'failing',
    'falcon',
    'fall',
    'false',
    'falsify',
    'fame',
    'familiar',
    'family',
    'famine',
    'famished',
    'fanatic',
    'fancied',
    'fanciness',
    'fancy',
    'fanfare',
    'fang',
    'fanning',
    'fantasize',
    'fantastic',
    'fantasy',
    'fascism',
    'fastball',
    'faster',
    'fasting',
    'fastness',
    'faucet',
    'favorable',
    'favorably',
    'favored',
    'favoring',
    'favorite',
    'fax',
    'feast',
    'federal',
    'fedora',
    'feeble',
    'feed',
    'feel',
    'feisty',
    'feline',
    'felt-tip',
    'feminine',
    'feminism',
    'feminist',
    'feminize',
    'femur',
    'fence',
    'fencing',
    'fender',
    'ferment',
    'fernlike',
    'ferocious',
    'ferocity',
    'ferret',
    'ferris',
    'ferry',
    'fervor',
    'fester',
    'festival',
    'festive',
    'festivity',
    'fetal',
    'fetch',
    'fever',
    'fiber',
    'fiction',
    'fiddle',
    'fiddling',
    'fidelity',
    'fidgeting',
    'fidgety',
    'fifteen',
    'fifth',
    'fiftieth',
    'fifty',
    'figment',
    'figure',
    'figurine',
    'filing',
    'filled',
    'filler',
    'filling',
    'film',
    'filter',
    'filth',
    'filtrate',
    'finale',
    'finalist',
    'finalize',
    'finally',
    'finance',
    'financial',
    'finch',
    'fineness',
    'finer',
    'finicky',
    'finished',
    'finisher',
    'finishing',
    'finite',
    'finless',
    'finlike',
    'fiscally',
    'fit',
    'five',
    'flaccid',
    'flagman',
    'flagpole',
    'flagship',
    'flagstick',
    'flagstone',
    'flail',
    'flakily',
    'flaky',
    'flame',
    'flammable',
    'flanked',
    'flanking',
    'flannels',
    'flap',
    'flaring',
    'flashback',
    'flashbulb',
    'flashcard',
    'flashily',
    'flashing',
    'flashy',
    'flask',
    'flatbed',
    'flatfoot',
    'flatly',
    'flatness',
    'flatten',
    'flattered',
    'flatterer',
    'flattery',
    'flattop',
    'flatware',
    'flatworm',
    'flavored',
    'flavorful',
    'flavoring',
    'flaxseed',
    'fled',
    'fleshed',
    'fleshy',
    'flick',
    'flier',
    'flight',
    'flinch',
    'fling',
    'flint',
    'flip',
    'flirt',
    'float',
    'flock',
    'flogging',
    'flop',
    'floral',
    'florist',
    'floss',
    'flounder',
    'flyable',
    'flyaway',
    'flyer',
    'flying',
    'flyover',
    'flypaper',
    'foam',
    'foe',
    'fog',
    'foil',
    'folic',
    'folk',
    'follicle',
    'follow',
    'fondling',
    'fondly',
    'fondness',
    'fondue',
    'font',
    'food',
    'fool',
    'footage',
    'football',
    'footbath',
    'footboard',
    'footer',
    'footgear',
    'foothill',
    'foothold',
    'footing',
    'footless',
    'footman',
    'footnote',
    'footpad',
    'footpath',
    'footprint',
    'footrest',
    'footsie',
    'footsore',
    'footwear',
    'footwork',
    'fossil',
    'foster',
    'founder',
    'founding',
    'fountain',
    'fox',
    'foyer',
    'fraction',
    'fracture',
    'fragile',
    'fragility',
    'fragment',
    'fragrance',
    'fragrant',
    'frail',
    'frame',
    'framing',
    'frantic',
    'fraternal',
    'frayed',
    'fraying',
    'frays',
    'freckled',
    'freckles',
    'freebase',
    'freebee',
    'freebie',
    'freedom',
    'freefall',
    'freehand',
    'freeing',
    'freeload',
    'freely',
    'freemason',
    'freeness',
    'freestyle',
    'freeware',
    'freeway',
    'freewill',
    'freezable',
    'freezing',
    'freight',
    'french',
    'frenzied',
    'frenzy',
    'frequency',
    'frequent',
    'fresh',
    'fretful',
    'fretted',
    'friction',
    'friday',
    'fridge',
    'fried',
    'friend',
    'frighten',
    'frightful',
    'frigidity',
    'frigidly',
    'frill',
    'fringe',
    'frisbee',
    'frisk',
    'fritter',
    'frivolous',
    'frolic',
    'from',
    'front',
    'frostbite',
    'frosted',
    'frostily',
    'frosting',
    'frostlike',
    'frosty',
    'froth',
    'frown',
    'frozen',
    'fructose',
    'frugality',
    'frugally',
    'fruit',
    'frustrate',
    'frying',
    'gab',
    'gaffe',
    'gag',
    'gainfully',
    'gaining',
    'gains',
    'gala',
    'gallantly',
    'galleria',
    'gallery',
    'galley',
    'gallon',
    'gallows',
    'gallstone',
    'galore',
    'galvanize',
    'gambling',
    'game',
    'gaming',
    'gamma',
    'gander',
    'gangly',
    'gangrene',
    'gangway',
    'gap',
    'garage',
    'garbage',
    'garden',
    'gargle',
    'garland',
    'garlic',
    'garment',
    'garnet',
    'garnish',
    'garter',
    'gas',
    'gatherer',
    'gathering',
    'gating',
    'gauging',
    'gauntlet',
    'gauze',
    'gave',
    'gawk',
    'gazing',
    'gear',
    'gecko',
    'geek',
    'geiger',
    'gem',
    'gender',
    'generic',
    'generous',
    'genetics',
    'genre',
    'gentile',
    'gentleman',
    'gently',
    'gents',
    'geography',
    'geologic',
    'geologist',
    'geology',
    'geometric',
    'geometry',
    'geranium',
    'gerbil',
    'geriatric',
    'germicide',
    'germinate',
    'germless',
    'germproof',
    'gestate',
    'gestation',
    'gesture',
    'getaway',
    'getting',
    'getup',
    'giant',
    'gibberish',
    'giblet',
    'giddily',
    'giddiness',
    'giddy',
    'gift',
    'gigabyte',
    'gigahertz',
    'gigantic',
    'giggle',
    'giggling',
    'giggly',
    'gigolo',
    'gilled',
    'gills',
    'gimmick',
    'girdle',
    'giveaway',
    'given',
    'giver',
    'giving',
    'gizmo',
    'gizzard',
    'glacial',
    'glacier',
    'glade',
    'gladiator',
    'gladly',
    'glamorous',
    'glamour',
    'glance',
    'glancing',
    'glandular',
    'glare',
    'glaring',
    'glass',
    'glaucoma',
    'glazing',
    'gleaming',
    'gleeful',
    'glider',
    'gliding',
    'glimmer',
    'glimpse',
    'glisten',
    'glitch',
    'glitter',
    'glitzy',
    'gloater',
    'gloating',
    'gloomily',
    'gloomy',
    'glorified',
    'glorifier',
    'glorify',
    'glorious',
    'glory',
    'gloss',
    'glove',
    'glowing',
    'glowworm',
    'glucose',
    'glue',
    'gluten',
    'glutinous',
    'glutton',
    'gnarly',
    'gnat',
    'goal',
    'goatskin',
    'goes',
    'goggles',
    'going',
    'goldfish',
    'goldmine',
    'goldsmith',
    'golf',
    'goliath',
    'gonad',
    'gondola',
    'gone',
    'gong',
    'good',
    'gooey',
    'goofball',
    'goofiness',
    'goofy',
    'google',
    'goon',
    'gopher',
    'gore',
    'gorged',
    'gorgeous',
    'gory',
    'gosling',
    'gossip',
    'gothic',
    'gotten',
    'gout',
    'gown',
    'grab',
    'graceful',
    'graceless',
    'gracious',
    'gradation',
    'graded',
    'grader',
    'gradient',
    'grading',
    'gradually',
    'graduate',
    'graffiti',
    'grafted',
    'grafting',
    'grain',
    'granddad',
    'grandkid',
    'grandly',
    'grandma',
    'grandpa',
    'grandson',
    'granite',
    'granny',
    'granola',
    'grant',
    'granular',
    'grape',
    'graph',
    'grapple',
    'grappling',
    'grasp',
    'grass',
    'gratified',
    'gratify',
    'grating',
    'gratitude',
    'gratuity',
    'gravel',
    'graveness',
    'graves',
    'graveyard',
    'gravitate',
    'gravity',
    'gravy',
    'gray',
    'grazing',
    'greasily',
    'greedily',
    'greedless',
    'greedy',
    'green',
    'greeter',
    'greeting',
    'grew',
    'greyhound',
    'grid',
    'grief',
    'grievance',
    'grieving',
    'grievous',
    'grill',
    'grimace',
    'grimacing',
    'grime',
    'griminess',
    'grimy',
    'grinch',
    'grinning',
    'grip',
    'gristle',
    'grit',
    'groggily',
    'groggy',
    'groin',
    'groom',
    'groove',
    'grooving',
    'groovy',
    'grope',
    'ground',
    'grouped',
    'grout',
    'grove',
    'grower',
    'growing',
    'growl',
    'grub',
    'grudge',
    'grudging',
    'grueling',
    'gruffly',
    'grumble',
    'grumbling',
    'grumbly',
    'grumpily',
    'grunge',
    'grunt',
    'guacamole',
    'guidable',
    'guidance',
    'guide',
    'guiding',
    'guileless',
    'guise',
    'gulf',
    'gullible',
    'gully',
    'gulp',
    'gumball',
    'gumdrop',
    'gumminess',
    'gumming',
    'gummy',
    'gurgle',
    'gurgling',
    'guru',
    'gush',
    'gusto',
    'gusty',
    'gutless',
    'guts',
    'gutter',
    'guy',
    'guzzler',
    'gyration',
    'habitable',
    'habitant',
    'habitat',
    'habitual',
    'hacked',
    'hacker',
    'hacking',
    'hacksaw',
    'had',
    'haggler',
    'haiku',
    'half',
    'halogen',
    'halt',
    'halved',
    'halves',
    'hamburger',
    'hamlet',
    'hammock',
    'hamper',
    'hamster',
    'hamstring',
    'handbag',
    'handball',
    'handbook',
    'handbrake',
    'handcart',
    'handclap',
    'handclasp',
    'handcraft',
    'handcuff',
    'handed',
    'handful',
    'handgrip',
    'handgun',
    'handheld',
    'handiness',
    'handiwork',
    'handlebar',
    'handled',
    'handler',
    'handling',
    'handmade',
    'handoff',
    'handpick',
    'handprint',
    'handrail',
    'handsaw',
    'handset',
    'handsfree',
    'handshake',
    'handstand',
    'handwash',
    'handwork',
    'handwoven',
    'handwrite',
    'handyman',
    'hangnail',
    'hangout',
    'hangover',
    'hangup',
    'hankering',
    'hankie',
    'hanky',
    'haphazard',
    'happening',
    'happier',
    'happiest',
    'happily',
    'happiness',
    'happy',
    'harbor',
    'hardcopy',
    'hardcore',
    'hardcover',
    'harddisk',
    'hardened',
    'hardener',
    'hardening',
    'hardhat',
    'hardhead',
    'hardiness',
    'hardly',
    'hardness',
    'hardship',
    'hardware',
    'hardwired',
    'hardwood',
    'hardy',
    'harmful',
    'harmless',
    'harmonica',
    'harmonics',
    'harmonize',
    'harmony',
    'harness',
    'harpist',
    'harsh',
    'harvest',
    'hash',
    'hassle',
    'haste',
    'hastily',
    'hastiness',
    'hasty',
    'hatbox',
    'hatchback',
    'hatchery',
    'hatchet',
    'hatching',
    'hatchling',
    'hate',
    'hatless',
    'hatred',
    'haunt',
    'haven',
    'hazard',
    'hazelnut',
    'hazily',
    'haziness',
    'hazing',
    'hazy',
    'headache',
    'headband',
    'headboard',
    'headcount',
    'headdress',
    'headed',
    'header',
    'headfirst',
    'headgear',
    'heading',
    'headlamp',
    'headless',
    'headlock',
    'headphone',
    'headpiece',
    'headrest',
    'headroom',
    'headscarf',
    'headset',
    'headsman',
    'headstand',
    'headstone',
    'headway',
    'headwear',
    'heap',
    'heat',
    'heave',
    'heavily',
    'heaviness',
    'heaving',
    'hedge',
    'hedging',
    'heftiness',
    'hefty',
    'helium',
    'helmet',
    'helper',
    'helpful',
    'helping',
    'helpless',
    'helpline',
    'hemlock',
    'hemstitch',
    'hence',
    'henchman',
    'henna',
    'herald',
    'herbal',
    'herbicide',
    'herbs',
    'heritage',
    'hermit',
    'heroics',
    'heroism',
    'herring',
    'herself',
    'hertz',
    'hesitancy',
    'hesitant',
    'hesitate',
    'hexagon',
    'hexagram',
    'hubcap',
    'huddle',
    'huddling',
    'huff',
    'hug',
    'hula',
    'hulk',
    'hull',
    'human',
    'humble',
    'humbling',
    'humbly',
    'humid',
    'humiliate',
    'humility',
    'humming',
    'hummus',
    'humongous',
    'humorist',
    'humorless',
    'humorous',
    'humpback',
    'humped',
    'humvee',
    'hunchback',
    'hundredth',
    'hunger',
    'hungrily',
    'hungry',
    'hunk',
    'hunter',
    'hunting',
    'huntress',
    'huntsman',
    'hurdle',
    'hurled',
    'hurler',
    'hurling',
    'hurray',
    'hurricane',
    'hurried',
    'hurry',
    'hurt',
    'husband',
    'hush',
    'husked',
    'huskiness',
    'hut',
    'hybrid',
    'hydrant',
    'hydrated',
    'hydration',
    'hydrogen',
    'hydroxide',
    'hyperlink',
    'hypertext',
    'hyphen',
    'hypnoses',
    'hypnosis',
    'hypnotic',
    'hypnotism',
    'hypnotist',
    'hypnotize',
    'hypocrisy',
    'hypocrite',
    'ibuprofen',
    'ice',
    'iciness',
    'icing',
    'icky',
    'icon',
    'icy',
    'idealism',
    'idealist',
    'idealize',
    'ideally',
    'idealness',
    'identical',
    'identify',
    'identity',
    'ideology',
    'idiocy',
    'idiom',
    'idly',
    'igloo',
    'ignition',
    'ignore',
    'iguana',
    'illicitly',
    'illusion',
    'illusive',
    'image',
    'imaginary',
    'imagines',
    'imaging',
    'imbecile',
    'imitate',
    'imitation',
    'immature',
    'immerse',
    'immersion',
    'imminent',
    'immobile',
    'immodest',
    'immorally',
    'immortal',
    'immovable',
    'immovably',
    'immunity',
    'immunize',
    'impaired',
    'impale',
    'impart',
    'impatient',
    'impeach',
    'impeding',
    'impending',
    'imperfect',
    'imperial',
    'impish',
    'implant',
    'implement',
    'implicate',
    'implicit',
    'implode',
    'implosion',
    'implosive',
    'imply',
    'impolite',
    'important',
    'importer',
    'impose',
    'imposing',
    'impotence',
    'impotency',
    'impotent',
    'impound',
    'imprecise',
    'imprint',
    'imprison',
    'impromptu',
    'improper',
    'improve',
    'improving',
    'improvise',
    'imprudent',
    'impulse',
    'impulsive',
    'impure',
    'impurity',
    'iodine',
    'iodize',
    'ion',
    'ipad',
    'iphone',
    'ipod',
    'irate',
    'irk',
    'iron',
    'irregular',
    'irrigate',
    'irritable',
    'irritably',
    'irritant',
    'irritate',
    'islamic',
    'islamist',
    'isolated',
    'isolating',
    'isolation',
    'isotope',
    'issue',
    'issuing',
    'italicize',
    'italics',
    'item',
    'itinerary',
    'itunes',
    'ivory',
    'ivy',
    'jab',
    'jackal',
    'jacket',
    'jackknife',
    'jackpot',
    'jailbird',
    'jailbreak',
    'jailer',
    'jailhouse',
    'jalapeno',
    'jam',
    'janitor',
    'january',
    'jargon',
    'jarring',
    'jasmine',
    'jaundice',
    'jaunt',
    'java',
    'jawed',
    'jawless',
    'jawline',
    'jaws',
    'jaybird',
    'jaywalker',
    'jazz',
    'jeep',
    'jeeringly',
    'jellied',
    'jelly',
    'jersey',
    'jester',
    'jet',
    'jiffy',
    'jigsaw',
    'jimmy',
    'jingle',
    'jingling',
    'jinx',
    'jitters',
    'jittery',
    'job',
    'jockey',
    'jockstrap',
    'jogger',
    'jogging',
    'john',
    'joining',
    'jokester',
    'jokingly',
    'jolliness',
    'jolly',
    'jolt',
    'jot',
    'jovial',
    'joyfully',
    'joylessly',
    'joyous',
    'joyride',
    'joystick',
    'jubilance',
    'jubilant',
    'judge',
    'judgingly',
    'judicial',
    'judiciary',
    'judo',
    'juggle',
    'juggling',
    'jugular',
    'juice',
    'juiciness',
    'juicy',
    'jujitsu',
    'jukebox',
    'july',
    'jumble',
    'jumbo',
    'jump',
    'junction',
    'juncture',
    'june',
    'junior',
    'juniper',
    'junkie',
    'junkman',
    'junkyard',
    'jurist',
    'juror',
    'jury',
    'justice',
    'justifier',
    'justify',
    'justly',
    'justness',
    'juvenile',
    'kabob',
    'kangaroo',
    'karaoke',
    'karate',
    'karma',
    'kebab',
    'keenly',
    'keenness',
    'keep',
    'keg',
    'kelp',
    'kennel',
    'kept',
    'kerchief',
    'kerosene',
    'kettle',
    'kick',
    'kiln',
    'kilobyte',
    'kilogram',
    'kilometer',
    'kilowatt',
    'kilt',
    'kimono',
    'kindle',
    'kindling',
    'kindly',
    'kindness',
    'kindred',
    'kinetic',
    'kinfolk',
    'king',
    'kinship',
    'kinsman',
    'kinswoman',
    'kissable',
    'kisser',
    'kissing',
    'kitchen',
    'kite',
    'kitten',
    'kitty',
    'kiwi',
    'kleenex',
    'knapsack',
    'knee',
    'knelt',
    'knickers',
    'knoll',
    'koala',
    'kooky',
    'kosher',
    'krypton',
    'kudos',
    'kung',
    'labored',
    'laborer',
    'laboring',
    'laborious',
    'labrador',
    'ladder',
    'ladies',
    'ladle',
    'ladybug',
    'ladylike',
    'lagged',
    'lagging',
    'lagoon',
    'lair',
    'lake',
    'lance',
    'landed',
    'landfall',
    'landfill',
    'landing',
    'landlady',
    'landless',
    'landline',
    'landlord',
    'landmark',
    'landmass',
    'landmine',
    'landowner',
    'landscape',
    'landside',
    'landslide',
    'language',
    'lankiness',
    'lanky',
    'lantern',
    'lapdog',
    'lapel',
    'lapped',
    'lapping',
    'laptop',
    'lard',
    'large',
    'lark',
    'lash',
    'lasso',
    'last',
    'latch',
    'late',
    'lather',
    'latitude',
    'latrine',
    'latter',
    'latticed',
    'launch',
    'launder',
    'laundry',
    'laurel',
    'lavender',
    'lavish',
    'laxative',
    'lazily',
    'laziness',
    'lazy',
    'lecturer',
    'left',
    'legacy',
    'legal',
    'legend',
    'legged',
    'leggings',
    'legible',
    'legibly',
    'legislate',
    'lego',
    'legroom',
    'legume',
    'legwarmer',
    'legwork',
    'lemon',
    'lend',
    'length',
    'lens',
    'lent',
    'leotard',
    'lesser',
    'letdown',
    'lethargic',
    'lethargy',
    'letter',
    'lettuce',
    'level',
    'leverage',
    'levers',
    'levitate',
    'levitator',
    'liability',
    'liable',
    'liberty',
    'librarian',
    'library',
    'licking',
    'licorice',
    'lid',
    'life',
    'lifter',
    'lifting',
    'liftoff',
    'ligament',
    'likely',
    'likeness',
    'likewise',
    'liking',
    'lilac',
    'lilly',
    'lily',
    'limb',
    'limeade',
    'limelight',
    'limes',
    'limit',
    'limping',
    'limpness',
    'line',
    'lingo',
    'linguini',
    'linguist',
    'lining',
    'linked',
    'linoleum',
    'linseed',
    'lint',
    'lion',
    'lip',
    'liquefy',
    'liqueur',
    'liquid',
    'lisp',
    'list',
    'litigate',
    'litigator',
    'litmus',
    'litter',
    'little',
    'livable',
    'lived',
    'lively',
    'liver',
    'livestock',
    'lividly',
    'living',
    'lizard',
    'lubricant',
    'lubricate',
    'lucid',
    'luckily',
    'luckiness',
    'luckless',
    'lucrative',
    'ludicrous',
    'lugged',
    'lukewarm',
    'lullaby',
    'lumber',
    'luminance',
    'luminous',
    'lumpiness',
    'lumping',
    'lumpish',
    'lunacy',
    'lunar',
    'lunchbox',
    'luncheon',
    'lunchroom',
    'lunchtime',
    'lung',
    'lurch',
    'lure',
    'luridness',
    'lurk',
    'lushly',
    'lushness',
    'luster',
    'lustfully',
    'lustily',
    'lustiness',
    'lustrous',
    'lusty',
    'luxurious',
    'luxury',
    'lying',
    'lyrically',
    'lyricism',
    'lyricist',
    'lyrics',
    'macarena',
    'macaroni',
    'macaw',
    'mace',
    'machine',
    'machinist',
    'magazine',
    'magenta',
    'maggot',
    'magical',
    'magician',
    'magma',
    'magnesium',
    'magnetic',
    'magnetism',
    'magnetize',
    'magnifier',
    'magnify',
    'magnitude',
    'magnolia',
    'mahogany',
    'maimed',
    'majestic',
    'majesty',
    'majorette',
    'majority',
    'makeover',
    'maker',
    'makeshift',
    'making',
    'malformed',
    'malt',
    'mama',
    'mammal',
    'mammary',
    'mammogram',
    'manager',
    'managing',
    'manatee',
    'mandarin',
    'mandate',
    'mandatory',
    'mandolin',
    'manger',
    'mangle',
    'mango',
    'mangy',
    'manhandle',
    'manhole',
    'manhood',
    'manhunt',
    'manicotti',
    'manicure',
    'manifesto',
    'manila',
    'mankind',
    'manlike',
    'manliness',
    'manly',
    'manmade',
    'manned',
    'mannish',
    'manor',
    'manpower',
    'mantis',
    'mantra',
    'manual',
    'many',
    'map',
    'marathon',
    'marauding',
    'marbled',
    'marbles',
    'marbling',
    'march',
    'mardi',
    'margarine',
    'margarita',
    'margin',
    'marigold',
    'marina',
    'marine',
    'marital',
    'maritime',
    'marlin',
    'marmalade',
    'maroon',
    'married',
    'marrow',
    'marry',
    'marshland',
    'marshy',
    'marsupial',
    'marvelous',
    'marxism',
    'mascot',
    'masculine',
    'mashed',
    'mashing',
    'massager',
    'masses',
    'massive',
    'mastiff',
    'matador',
    'matchbook',
    'matchbox',
    'matcher',
    'matching',
    'matchless',
    'material',
    'maternal',
    'maternity',
    'math',
    'mating',
    'matriarch',
    'matrimony',
    'matrix',
    'matron',
    'matted',
    'matter',
    'maturely',
    'maturing',
    'maturity',
    'mauve',
    'maverick',
    'maximize',
    'maximum',
    'maybe',
    'mayday',
    'mayflower',
    'moaner',
    'moaning',
    'mobile',
    'mobility',
    'mobilize',
    'mobster',
    'mocha',
    'mocker',
    'mockup',
    'modified',
    'modify',
    'modular',
    'modulator',
    'module',
    'moisten',
    'moistness',
    'moisture',
    'molar',
    'molasses',
    'mold',
    'molecular',
    'molecule',
    'molehill',
    'mollusk',
    'mom',
    'monastery',
    'monday',
    'monetary',
    'monetize',
    'moneybags',
    'moneyless',
    'moneywise',
    'mongoose',
    'mongrel',
    'monitor',
    'monkhood',
    'monogamy',
    'monogram',
    'monologue',
    'monopoly',
    'monorail',
    'monotone',
    'monotype',
    'monoxide',
    'monsieur',
    'monsoon',
    'monstrous',
    'monthly',
    'monument',
    'moocher',
    'moodiness',
    'moody',
    'mooing',
    'moonbeam',
    'mooned',
    'moonlight',
    'moonlike',
    'moonlit',
    'moonrise',
    'moonscape',
    'moonshine',
    'moonstone',
    'moonwalk',
    'mop',
    'morale',
    'morality',
    'morally',
    'morbidity',
    'morbidly',
    'morphine',
    'morphing',
    'morse',
    'mortality',
    'mortally',
    'mortician',
    'mortified',
    'mortify',
    'mortuary',
    'mosaic',
    'mossy',
    'most',
    'mothball',
    'mothproof',
    'motion',
    'motivate',
    'motivator',
    'motive',
    'motocross',
    'motor',
    'motto',
    'mountable',
    'mountain',
    'mounted',
    'mounting',
    'mourner',
    'mournful',
    'mouse',
    'mousiness',
    'moustache',
    'mousy',
    'mouth',
    'movable',
    'move',
    'movie',
    'moving',
    'mower',
    'mowing',
    'much',
    'muck',
    'mud',
    'mug',
    'mulberry',
    'mulch',
    'mule',
    'mulled',
    'mullets',
    'multiple',
    'multiply',
    'multitask',
    'multitude',
    'mumble',
    'mumbling',
    'mumbo',
    'mummified',
    'mummify',
    'mummy',
    'mumps',
    'munchkin',
    'mundane',
    'municipal',
    'muppet',
    'mural',
    'murkiness',
    'murky',
    'murmuring',
    'muscular',
    'museum',
    'mushily',
    'mushiness',
    'mushroom',
    'mushy',
    'music',
    'musket',
    'muskiness',
    'musky',
    'mustang',
    'mustard',
    'muster',
    'mustiness',
    'musty',
    'mutable',
    'mutate',
    'mutation',
    'mute',
    'mutilated',
    'mutilator',
    'mutiny',
    'mutt',
    'mutual',
    'muzzle',
    'myself',
    'myspace',
    'mystified',
    'mystify',
    'myth',
    'nacho',
    'nag',
    'nail',
    'name',
    'naming',
    'nanny',
    'nanometer',
    'nape',
    'napkin',
    'napped',
    'napping',
    'nappy',
    'narrow',
    'nastily',
    'nastiness',
    'national',
    'native',
    'nativity',
    'natural',
    'nature',
    'naturist',
    'nautical',
    'navigate',
    'navigator',
    'navy',
    'nearby',
    'nearest',
    'nearly',
    'nearness',
    'neatly',
    'neatness',
    'nebula',
    'nebulizer',
    'nectar',
    'negate',
    'negation',
    'negative',
    'neglector',
    'negligee',
    'negligent',
    'negotiate',
    'nemeses',
    'nemesis',
    'neon',
    'nephew',
    'nerd',
    'nervous',
    'nervy',
    'nest',
    'net',
    'neurology',
    'neuron',
    'neurosis',
    'neurotic',
    'neuter',
    'neutron',
    'never',
    'next',
    'nibble',
    'nickname',
    'nicotine',
    'niece',
    'nifty',
    'nimble',
    'nimbly',
    'nineteen',
    'ninetieth',
    'ninja',
    'nintendo',
    'ninth',
    'nuclear',
    'nuclei',
    'nucleus',
    'nugget',
    'nullify',
    'number',
    'numbing',
    'numbly',
    'numbness',
    'numeral',
    'numerate',
    'numerator',
    'numeric',
    'numerous',
    'nuptials',
    'nursery',
    'nursing',
    'nurture',
    'nutcase',
    'nutlike',
    'nutmeg',
    'nutrient',
    'nutshell',
    'nuttiness',
    'nutty',
    'nuzzle',
    'nylon',
    'oaf',
    'oak',
    'oasis',
    'oat',
    'obedience',
    'obedient',
    'obituary',
    'object',
    'obligate',
    'obliged',
    'oblivion',
    'oblivious',
    'oblong',
    'obnoxious',
    'oboe',
    'obscure',
    'obscurity',
    'observant',
    'observer',
    'observing',
    'obsessed',
    'obsession',
    'obsessive',
    'obsolete',
    'obstacle',
    'obstinate',
    'obstruct',
    'obtain',
    'obtrusive',
    'obtuse',
    'obvious',
    'occultist',
    'occupancy',
    'occupant',
    'occupier',
    'occupy',
    'ocean',
    'ocelot',
    'octagon',
    'octane',
    'october',
    'octopus',
    'ogle',
    'oil',
    'oink',
    'ointment',
    'okay',
    'old',
    'olive',
    'olympics',
    'omega',
    'omen',
    'ominous',
    'omission',
    'omit',
    'omnivore',
    'onboard',
    'oncoming',
    'ongoing',
    'onion',
    'online',
    'onlooker',
    'only',
    'onscreen',
    'onset',
    'onshore',
    'onslaught',
    'onstage',
    'onto',
    'onward',
    'onyx',
    'oops',
    'ooze',
    'oozy',
    'opacity',
    'opal',
    'open',
    'operable',
    'operate',
    'operating',
    'operation',
    'operative',
    'operator',
    'opium',
    'opossum',
    'opponent',
    'oppose',
    'opposing',
    'opposite',
    'oppressed',
    'oppressor',
    'opt',
    'opulently',
    'osmosis',
    'other',
    'otter',
    'ouch',
    'ought',
    'ounce',
    'outage',
    'outback',
    'outbid',
    'outboard',
    'outbound',
    'outbreak',
    'outburst',
    'outcast',
    'outclass',
    'outcome',
    'outdated',
    'outdoors',
    'outer',
    'outfield',
    'outfit',
    'outflank',
    'outgoing',
    'outgrow',
    'outhouse',
    'outing',
    'outlast',
    'outlet',
    'outline',
    'outlook',
    'outlying',
    'outmatch',
    'outmost',
    'outnumber',
    'outplayed',
    'outpost',
    'outpour',
    'output',
    'outrage',
    'outrank',
    'outreach',
    'outright',
    'outscore',
    'outsell',
    'outshine',
    'outshoot',
    'outsider',
    'outskirts',
    'outsmart',
    'outsource',
    'outspoken',
    'outtakes',
    'outthink',
    'outward',
    'outweigh',
    'outwit',
    'oval',
    'ovary',
    'oven',
    'overact',
    'overall',
    'overarch',
    'overbid',
    'overbill',
    'overbite',
    'overblown',
    'overboard',
    'overbook',
    'overbuilt',
    'overcast',
    'overcoat',
    'overcome',
    'overcook',
    'overcrowd',
    'overdraft',
    'overdrawn',
    'overdress',
    'overdrive',
    'overdue',
    'overeager',
    'overeater',
    'overexert',
    'overfed',
    'overfeed',
    'overfill',
    'overflow',
    'overfull',
    'overgrown',
    'overhand',
    'overhang',
    'overhaul',
    'overhead',
    'overhear',
    'overheat',
    'overhung',
    'overjoyed',
    'overkill',
    'overlabor',
    'overlaid',
    'overlap',
    'overlay',
    'overload',
    'overlook',
    'overlord',
    'overlying',
    'overnight',
    'overpass',
    'overpay',
    'overplant',
    'overplay',
    'overpower',
    'overprice',
    'overrate',
    'overreach',
    'overreact',
    'override',
    'overripe',
    'overrule',
    'overrun',
    'overshoot',
    'overshot',
    'oversight',
    'oversized',
    'oversleep',
    'oversold',
    'overspend',
    'overstate',
    'overstay',
    'overstep',
    'overstock',
    'overstuff',
    'oversweet',
    'overtake',
    'overthrow',
    'overtime',
    'overtly',
    'overtone',
    'overture',
    'overturn',
    'overuse',
    'overvalue',
    'overview',
    'overwrite',
    'owl',
    'oxford',
    'oxidant',
    'oxidation',
    'oxidize',
    'oxidizing',
    'oxygen',
    'oxymoron',
    'oyster',
    'ozone',
    'paced',
    'pacemaker',
    'pacific',
    'pacifier',
    'pacifism',
    'pacifist',
    'pacify',
    'padded',
    'padding',
    'paddle',
    'paddling',
    'padlock',
    'pagan',
    'pager',
    'paging',
    'pajamas',
    'palace',
    'palatable',
    'palm',
    'palpable',
    'palpitate',
    'paltry',
    'pampered',
    'pamperer',
    'pampers',
    'pamphlet',
    'panama',
    'pancake',
    'pancreas',
    'panda',
    'pandemic',
    'pang',
    'panhandle',
    'panic',
    'panning',
    'panorama',
    'panoramic',
    'panther',
    'pantomime',
    'pantry',
    'pants',
    'pantyhose',
    'paparazzi',
    'papaya',
    'paper',
    'paprika',
    'papyrus',
    'parabola',
    'parachute',
    'parade',
    'paradox',
    'paragraph',
    'parakeet',
    'paralegal',
    'paralyses',
    'paralysis',
    'paralyze',
    'paramedic',
    'parameter',
    'paramount',
    'parasail',
    'parasite',
    'parasitic',
    'parcel',
    'parched',
    'parchment',
    'pardon',
    'parish',
    'parka',
    'parking',
    'parkway',
    'parlor',
    'parmesan',
    'parole',
    'parrot',
    'parsley',
    'parsnip',
    'partake',
    'parted',
    'parting',
    'partition',
    'partly',
    'partner',
    'partridge',
    'party',
    'passable',
    'passably',
    'passage',
    'passcode',
    'passenger',
    'passerby',
    'passing',
    'passion',
    'passive',
    'passivism',
    'passover',
    'passport',
    'password',
    'pasta',
    'pasted',
    'pastel',
    'pastime',
    'pastor',
    'pastrami',
    'pasture',
    'pasty',
    'patchwork',
    'patchy',
    'paternal',
    'paternity',
    'path',
    'patience',
    'patient',
    'patio',
    'patriarch',
    'patriot',
    'patrol',
    'patronage',
    'patronize',
    'pauper',
    'pavement',
    'paver',
    'pavestone',
    'pavilion',
    'paving',
    'pawing',
    'payable',
    'payback',
    'paycheck',
    'payday',
    'payee',
    'payer',
    'paying',
    'payment',
    'payphone',
    'payroll',
    'pebble',
    'pebbly',
    'pecan',
    'pectin',
    'peculiar',
    'peddling',
    'pediatric',
    'pedicure',
    'pedigree',
    'pedometer',
    'pegboard',
    'pelican',
    'pellet',
    'pelt',
    'pelvis',
    'penalize',
    'penalty',
    'pencil',
    'pendant',
    'pending',
    'penholder',
    'penknife',
    'pennant',
    'penniless',
    'penny',
    'penpal',
    'pension',
    'pentagon',
    'pentagram',
    'pep',
    'perceive',
    'percent',
    'perch',
    'percolate',
    'perennial',
    'perfected',
    'perfectly',
    'perfume',
    'periscope',
    'perish',
    'perjurer',
    'perjury',
    'perkiness',
    'perky',
    'perm',
    'peroxide',
    'perpetual',
    'perplexed',
    'persecute',
    'persevere',
    'persuaded',
    'persuader',
    'pesky',
    'peso',
    'pessimism',
    'pessimist',
    'pester',
    'pesticide',
    'petal',
    'petite',
    'petition',
    'petri',
    'petroleum',
    'petted',
    'petticoat',
    'pettiness',
    'petty',
    'petunia',
    'phantom',
    'phobia',
    'phoenix',
    'phonebook',
    'phoney',
    'phonics',
    'phoniness',
    'phony',
    'phosphate',
    'photo',
    'phrase',
    'phrasing',
    'placard',
    'placate',
    'placidly',
    'plank',
    'planner',
    'plant',
    'plasma',
    'plaster',
    'plastic',
    'plated',
    'platform',
    'plating',
    'platinum',
    'platonic',
    'platter',
    'platypus',
    'plausible',
    'plausibly',
    'playable',
    'playback',
    'player',
    'playful',
    'playgroup',
    'playhouse',
    'playing',
    'playlist',
    'playmaker',
    'playmate',
    'playoff',
    'playpen',
    'playroom',
    'playset',
    'plaything',
    'playtime',
    'plaza',
    'pleading',
    'pleat',
    'pledge',
    'plentiful',
    'plenty',
    'plethora',
    'plexiglas',
    'pliable',
    'plod',
    'plop',
    'plot',
    'plow',
    'ploy',
    'pluck',
    'plug',
    'plunder',
    'plunging',
    'plural',
    'plus',
    'plutonium',
    'plywood',
    'poach',
    'pod',
    'poem',
    'poet',
    'pogo',
    'pointed',
    'pointer',
    'pointing',
    'pointless',
    'pointy',
    'poise',
    'poison',
    'poker',
    'poking',
    'polar',
    'police',
    'policy',
    'polio',
    'polish',
    'politely',
    'polka',
    'polo',
    'polyester',
    'polygon',
    'polygraph',
    'polymer',
    'poncho',
    'pond',
    'pony',
    'popcorn',
    'pope',
    'poplar',
    'popper',
    'poppy',
    'popsicle',
    'populace',
    'popular',
    'populate',
    'porcupine',
    'pork',
    'porous',
    'porridge',
    'portable',
    'portal',
    'portfolio',
    'porthole',
    'portion',
    'portly',
    'portside',
    'poser',
    'posh',
    'posing',
    'possible',
    'possibly',
    'possum',
    'postage',
    'postal',
    'postbox',
    'postcard',
    'posted',
    'poster',
    'posting',
    'postnasal',
    'posture',
    'postwar',
    'pouch',
    'pounce',
    'pouncing',
    'pound',
    'pouring',
    'pout',
    'powdered',
    'powdering',
    'powdery',
    'power',
    'powwow',
    'pox',
    'praising',
    'prance',
    'prancing',
    'pranker',
    'prankish',
    'prankster',
    'prayer',
    'praying',
    'preacher',
    'preaching',
    'preachy',
    'preamble',
    'precinct',
    'precise',
    'precision',
    'precook',
    'precut',
    'predator',
    'predefine',
    'predict',
    'preface',
    'prefix',
    'preflight',
    'preformed',
    'pregame',
    'pregnancy',
    'pregnant',
    'preheated',
    'prelaunch',
    'prelaw',
    'prelude',
    'premiere',
    'premises',
    'premium',
    'prenatal',
    'preoccupy',
    'preorder',
    'prepaid',
    'prepay',
    'preplan',
    'preppy',
    'preschool',
    'prescribe',
    'preseason',
    'preset',
    'preshow',
    'president',
    'presoak',
    'press',
    'presume',
    'presuming',
    'preteen',
    'pretended',
    'pretender',
    'pretense',
    'pretext',
    'pretty',
    'pretzel',
    'prevail',
    'prevalent',
    'prevent',
    'preview',
    'previous',
    'prewar',
    'prewashed',
    'prideful',
    'pried',
    'primal',
    'primarily',
    'primary',
    'primate',
    'primer',
    'primp',
    'princess',
    'print',
    'prior',
    'prism',
    'prison',
    'prissy',
    'pristine',
    'privacy',
    'private',
    'privatize',
    'prize',
    'proactive',
    'probable',
    'probably',
    'probation',
    'probe',
    'probing',
    'probiotic',
    'problem',
    'procedure',
    'process',
    'proclaim',
    'procreate',
    'procurer',
    'prodigal',
    'prodigy',
    'produce',
    'product',
    'profane',
    'profanity',
    'professed',
    'professor',
    'profile',
    'profound',
    'profusely',
    'progeny',
    'prognosis',
    'program',
    'progress',
    'projector',
    'prologue',
    'prolonged',
    'promenade',
    'prominent',
    'promoter',
    'promotion',
    'prompter',
    'promptly',
    'prone',
    'prong',
    'pronounce',
    'pronto',
    'proofing',
    'proofread',
    'proofs',
    'propeller',
    'properly',
    'property',
    'proponent',
    'proposal',
    'propose',
    'props',
    'prorate',
    'protector',
    'protegee',
    'proton',
    'prototype',
    'protozoan',
    'protract',
    'protrude',
    'proud',
    'provable',
    'proved',
    'proven',
    'provided',
    'provider',
    'providing',
    'province',
    'proving',
    'provoke',
    'provoking',
    'provolone',
    'prowess',
    'prowler',
    'prowling',
    'proximity',
    'proxy',
    'prozac',
    'prude',
    'prudishly',
    'prune',
    'pruning',
    'pry',
    'psychic',
    'public',
    'publisher',
    'pucker',
    'pueblo',
    'pug',
    'pull',
    'pulmonary',
    'pulp',
    'pulsate',
    'pulse',
    'pulverize',
    'puma',
    'pumice',
    'pummel',
    'punch',
    'punctual',
    'punctuate',
    'punctured',
    'pungent',
    'punisher',
    'punk',
    'pupil',
    'puppet',
    'puppy',
    'purchase',
    'pureblood',
    'purebred',
    'purely',
    'pureness',
    'purgatory',
    'purge',
    'purging',
    'purifier',
    'purify',
    'purist',
    'puritan',
    'purity',
    'purple',
    'purplish',
    'purposely',
    'purr',
    'purse',
    'pursuable',
    'pursuant',
    'pursuit',
    'purveyor',
    'pushcart',
    'pushchair',
    'pusher',
    'pushiness',
    'pushing',
    'pushover',
    'pushpin',
    'pushup',
    'pushy',
    'putdown',
    'putt',
    'puzzle',
    'puzzling',
    'pyramid',
    'pyromania',
    'python',
    'quack',
    'quadrant',
    'quail',
    'quaintly',
    'quake',
    'quaking',
    'qualified',
    'qualifier',
    'qualify',
    'quality',
    'qualm',
    'quantum',
    'quarrel',
    'quarry',
    'quartered',
    'quarterly',
    'quarters',
    'quartet',
    'quench',
    'query',
    'quicken',
    'quickly',
    'quickness',
    'quicksand',
    'quickstep',
    'quiet',
    'quill',
    'quilt',
    'quintet',
    'quintuple',
    'quirk',
    'quit',
    'quiver',
    'quizzical',
    'quotable',
    'quotation',
    'quote',
    'rabid',
    'race',
    'racing',
    'racism',
    'rack',
    'racoon',
    'radar',
    'radial',
    'radiance',
    'radiantly',
    'radiated',
    'radiation',
    'radiator',
    'radio',
    'radish',
    'raffle',
    'raft',
    'rage',
    'ragged',
    'raging',
    'ragweed',
    'raider',
    'railcar',
    'railing',
    'railroad',
    'railway',
    'raisin',
    'rake',
    'raking',
    'rally',
    'ramble',
    'rambling',
    'ramp',
    'ramrod',
    'ranch',
    'rancidity',
    'random',
    'ranged',
    'ranger',
    'ranging',
    'ranked',
    'ranking',
    'ransack',
    'ranting',
    'rants',
    'rare',
    'rarity',
    'rascal',
    'rash',
    'rasping',
    'ravage',
    'raven',
    'ravine',
    'raving',
    'ravioli',
    'ravishing',
    'reabsorb',
    'reach',
    'reacquire',
    'reaction',
    'reactive',
    'reactor',
    'reaffirm',
    'ream',
    'reanalyze',
    'reappear',
    'reapply',
    'reappoint',
    'reapprove',
    'rearrange',
    'rearview',
    'reason',
    'reassign',
    'reassure',
    'reattach',
    'reawake',
    'rebalance',
    'rebate',
    'rebel',
    'rebirth',
    'reboot',
    'reborn',
    'rebound',
    'rebuff',
    'rebuild',
    'rebuilt',
    'reburial',
    'rebuttal',
    'recall',
    'recant',
    'recapture',
    'recast',
    'recede',
    'recent',
    'recess',
    'recharger',
    'recipient',
    'recital',
    'recite',
    'reckless',
    'reclaim',
    'recliner',
    'reclining',
    'recluse',
    'reclusive',
    'recognize',
    'recoil',
    'recollect',
    'recolor',
    'reconcile',
    'reconfirm',
    'reconvene',
    'recopy',
    'record',
    'recount',
    'recoup',
    'recovery',
    'recreate',
    'rectal',
    'rectangle',
    'rectified',
    'rectify',
    'recycled',
    'recycler',
    'recycling',
    'reemerge',
    'reenact',
    'reenter',
    'reentry',
    'reexamine',
    'referable',
    'referee',
    'reference',
    'refill',
    'refinance',
    'refined',
    'refinery',
    'refining',
    'refinish',
    'reflected',
    'reflector',
    'reflex',
    'reflux',
    'refocus',
    'refold',
    'reforest',
    'reformat',
    'reformed',
    'reformer',
    'reformist',
    'refract',
    'refrain',
    'refreeze',
    'refresh',
    'refried',
    'refueling',
    'refund',
    'refurbish',
    'refurnish',
    'refusal',
    'refuse',
    'refusing',
    'refutable',
    'refute',
    'regain',
    'regalia',
    'regally',
    'reggae',
    'regime',
    'region',
    'register',
    'registrar',
    'registry',
    'regress',
    'regretful',
    'regroup',
    'regular',
    'regulate',
    'regulator',
    'rehab',
    'reheat',
    'rehire',
    'rehydrate',
    'reimburse',
    'reissue',
    'reiterate',
    'rejoice',
    'rejoicing',
    'rejoin',
    'rekindle',
    'relapse',
    'relapsing',
    'relatable',
    'related',
    'relation',
    'relative',
    'relax',
    'relay',
    'relearn',
    'release',
    'relenting',
    'reliable',
    'reliably',
    'reliance',
    'reliant',
    'relic',
    'relieve',
    'relieving',
    'relight',
    'relish',
    'relive',
    'reload',
    'relocate',
    'relock',
    'reluctant',
    'rely',
    'remake',
    'remark',
    'remarry',
    'rematch',
    'remedial',
    'remedy',
    'remember',
    'reminder',
    'remindful',
    'remission',
    'remix',
    'remnant',
    'remodeler',
    'remold',
    'remorse',
    'remote',
    'removable',
    'removal',
    'removed',
    'remover',
    'removing',
    'rename',
    'renderer',
    'rendering',
    'rendition',
    'renegade',
    'renewable',
    'renewably',
    'renewal',
    'renewed',
    'renounce',
    'renovate',
    'renovator',
    'rentable',
    'rental',
    'rented',
    'renter',
    'reoccupy',
    'reoccur',
    'reopen',
    'reorder',
    'repackage',
    'repacking',
    'repaint',
    'repair',
    'repave',
    'repaying',
    'repayment',
    'repeal',
    'repeated',
    'repeater',
    'repent',
    'rephrase',
    'replace',
    'replay',
    'replica',
    'reply',
    'reporter',
    'repose',
    'repossess',
    'repost',
    'repressed',
    'reprimand',
    'reprint',
    'reprise',
    'reproach',
    'reprocess',
    'reproduce',
    'reprogram',
    'reps',
    'reptile',
    'reptilian',
    'repugnant',
    'repulsion',
    'repulsive',
    'repurpose',
    'reputable',
    'reputably',
    'request',
    'require',
    'requisite',
    'reroute',
    'rerun',
    'resale',
    'resample',
    'rescuer',
    'reseal',
    'research',
    'reselect',
    'reseller',
    'resemble',
    'resend',
    'resent',
    'reset',
    'reshape',
    'reshoot',
    'reshuffle',
    'residence',
    'residency',
    'resident',
    'residual',
    'residue',
    'resigned',
    'resilient',
    'resistant',
    'resisting',
    'resize',
    'resolute',
    'resolved',
    'resonant',
    'resonate',
    'resort',
    'resource',
    'respect',
    'resubmit',
    'result',
    'resume',
    'resupply',
    'resurface',
    'resurrect',
    'retail',
    'retainer',
    'retaining',
    'retake',
    'retaliate',
    'retention',
    'rethink',
    'retinal',
    'retired',
    'retiree',
    'retiring',
    'retold',
    'retool',
    'retorted',
    'retouch',
    'retrace',
    'retract',
    'retrain',
    'retread',
    'retreat',
    'retrial',
    'retrieval',
    'retriever',
    'retry',
    'return',
    'retying',
    'retype',
    'reunion',
    'reunite',
    'reusable',
    'reuse',
    'reveal',
    'reveler',
    'revenge',
    'revenue',
    'reverb',
    'revered',
    'reverence',
    'reverend',
    'reversal',
    'reverse',
    'reversing',
    'reversion',
    'revert',
    'revisable',
    'revise',
    'revision',
    'revisit',
    'revivable',
    'revival',
    'reviver',
    'reviving',
    'revocable',
    'revoke',
    'revolt',
    'revolver',
    'revolving',
    'reward',
    'rewash',
    'rewind',
    'rewire',
    'reword',
    'rework',
    'rewrap',
    'rewrite',
    'rhyme',
    'ribbon',
    'ribcage',
    'rice',
    'riches',
    'richly',
    'richness',
    'rickety',
    'ricotta',
    'riddance',
    'ridden',
    'ride',
    'riding',
    'rifling',
    'rift',
    'rigging',
    'rigid',
    'rigor',
    'rimless',
    'rimmed',
    'rind',
    'rink',
    'rinse',
    'rinsing',
    'riot',
    'ripcord',
    'ripeness',
    'ripening',
    'ripping',
    'ripple',
    'rippling',
    'riptide',
    'rise',
    'rising',
    'risk',
    'risotto',
    'ritalin',
    'ritzy',
    'rival',
    'riverbank',
    'riverbed',
    'riverboat',
    'riverside',
    'riveter',
    'riveting',
    'roamer',
    'roaming',
    'roast',
    'robbing',
    'robe',
    'robin',
    'robotics',
    'robust',
    'rockband',
    'rocker',
    'rocket',
    'rockfish',
    'rockiness',
    'rocking',
    'rocklike',
    'rockslide',
    'rockstar',
    'rocky',
    'rogue',
    'roman',
    'romp',
    'rope',
    'roping',
    'roster',
    'rosy',
    'rotten',
    'rotting',
    'rotunda',
    'roulette',
    'rounding',
    'roundish',
    'roundness',
    'roundup',
    'roundworm',
    'routine',
    'routing',
    'rover',
    'roving',
    'royal',
    'rubbed',
    'rubber',
    'rubbing',
    'rubble',
    'rubdown',
    'ruby',
    'ruckus',
    'rudder',
    'rug',
    'ruined',
    'rule',
    'rumble',
    'rumbling',
    'rummage',
    'rumor',
    'runaround',
    'rundown',
    'runner',
    'running',
    'runny',
    'runt',
    'runway',
    'rupture',
    'rural',
    'ruse',
    'rush',
    'rust',
    'rut',
    'sabbath',
    'sabotage',
    'sacrament',
    'sacred',
    'sacrifice',
    'sadden',
    'saddlebag',
    'saddled',
    'saddling',
    'sadly',
    'sadness',
    'safari',
    'safeguard',
    'safehouse',
    'safely',
    'safeness',
    'saffron',
    'saga',
    'sage',
    'sagging',
    'saggy',
    'said',
    'saint',
    'sake',
    'salad',
    'salami',
    'salaried',
    'salary',
    'saline',
    'salon',
    'saloon',
    'salsa',
    'salt',
    'salutary',
    'salute',
    'salvage',
    'salvaging',
    'salvation',
    'same',
    'sample',
    'sampling',
    'sanction',
    'sanctity',
    'sanctuary',
    'sandal',
    'sandbag',
    'sandbank',
    'sandbar',
    'sandblast',
    'sandbox',
    'sanded',
    'sandfish',
    'sanding',
    'sandlot',
    'sandpaper',
    'sandpit',
    'sandstone',
    'sandstorm',
    'sandworm',
    'sandy',
    'sanitary',
    'sanitizer',
    'sank',
    'santa',
    'sapling',
    'sappiness',
    'sappy',
    'sarcasm',
    'sarcastic',
    'sardine',
    'sash',
    'sasquatch',
    'sassy',
    'satchel',
    'satiable',
    'satin',
    'satirical',
    'satisfied',
    'satisfy',
    'saturate',
    'saturday',
    'sauciness',
    'saucy',
    'sauna',
    'savage',
    'savanna',
    'saved',
    'savings',
    'savior',
    'savor',
    'saxophone',
    'say',
    'scabbed',
    'scabby',
    'scalded',
    'scalding',
    'scale',
    'scaling',
    'scallion',
    'scallop',
    'scalping',
    'scam',
    'scandal',
    'scanner',
    'scanning',
    'scant',
    'scapegoat',
    'scarce',
    'scarcity',
    'scarecrow',
    'scared',
    'scarf',
    'scarily',
    'scariness',
    'scarring',
    'scary',
    'scavenger',
    'scenic',
    'schedule',
    'schematic',
    'scheme',
    'scheming',
    'schilling',
    'schnapps',
    'scholar',
    'science',
    'scientist',
    'scion',
    'scoff',
    'scolding',
    'scone',
    'scoop',
    'scooter',
    'scope',
    'scorch',
    'scorebook',
    'scorecard',
    'scored',
    'scoreless',
    'scorer',
    'scoring',
    'scorn',
    'scorpion',
    'scotch',
    'scoundrel',
    'scoured',
    'scouring',
    'scouting',
    'scouts',
    'scowling',
    'scrabble',
    'scraggly',
    'scrambled',
    'scrambler',
    'scrap',
    'scratch',
    'scrawny',
    'screen',
    'scribble',
    'scribe',
    'scribing',
    'scrimmage',
    'script',
    'scroll',
    'scrooge',
    'scrounger',
    'scrubbed',
    'scrubber',
    'scruffy',
    'scrunch',
    'scrutiny',
    'scuba',
    'scuff',
    'sculptor',
    'sculpture',
    'scurvy',
    'scuttle',
    'secluded',
    'secluding',
    'seclusion',
    'second',
    'secrecy',
    'secret',
    'sectional',
    'sector',
    'secular',
    'securely',
    'security',
    'sedan',
    'sedate',
    'sedation',
    'sedative',
    'sediment',
    'seduce',
    'seducing',
    'segment',
    'seismic',
    'seizing',
    'seldom',
    'selected',
    'selection',
    'selective',
    'selector',
    'self',
    'seltzer',
    'semantic',
    'semester',
    'semicolon',
    'semifinal',
    'seminar',
    'semisoft',
    'semisweet',
    'senate',
    'senator',
    'send',
    'senior',
    'senorita',
    'sensation',
    'sensitive',
    'sensitize',
    'sensually',
    'sensuous',
    'sepia',
    'september',
    'septic',
    'septum',
    'sequel',
    'sequence',
    'sequester',
    'series',
    'sermon',
    'serotonin',
    'serpent',
    'serrated',
    'serve',
    'service',
    'serving',
    'sesame',
    'sessions',
    'setback',
    'setting',
    'settle',
    'settling',
    'setup',
    'sevenfold',
    'seventeen',
    'seventh',
    'seventy',
    'severity',
    'shabby',
    'shack',
    'shaded',
    'shadily',
    'shadiness',
    'shading',
    'shadow',
    'shady',
    'shaft',
    'shakable',
    'shakily',
    'shakiness',
    'shaking',
    'shaky',
    'shale',
    'shallot',
    'shallow',
    'shame',
    'shampoo',
    'shamrock',
    'shank',
    'shanty',
    'shape',
    'shaping',
    'share',
    'sharpener',
    'sharper',
    'sharpie',
    'sharply',
    'sharpness',
    'shawl',
    'sheath',
    'shed',
    'sheep',
    'sheet',
    'shelf',
    'shell',
    'shelter',
    'shelve',
    'shelving',
    'sherry',
    'shield',
    'shifter',
    'shifting',
    'shiftless',
    'shifty',
    'shimmer',
    'shimmy',
    'shindig',
    'shine',
    'shingle',
    'shininess',
    'shining',
    'shiny',
    'ship',
    'shirt',
    'shivering',
    'shock',
    'shone',
    'shoplift',
    'shopper',
    'shopping',
    'shoptalk',
    'shore',
    'shortage',
    'shortcake',
    'shortcut',
    'shorten',
    'shorter',
    'shorthand',
    'shortlist',
    'shortly',
    'shortness',
    'shorts',
    'shortwave',
    'shorty',
    'shout',
    'shove',
    'showbiz',
    'showcase',
    'showdown',
    'shower',
    'showgirl',
    'showing',
    'showman',
    'shown',
    'showoff',
    'showpiece',
    'showplace',
    'showroom',
    'showy',
    'shrank',
    'shrapnel',
    'shredder',
    'shredding',
    'shrewdly',
    'shriek',
    'shrill',
    'shrimp',
    'shrine',
    'shrink',
    'shrivel',
    'shrouded',
    'shrubbery',
    'shrubs',
    'shrug',
    'shrunk',
    'shucking',
    'shudder',
    'shuffle',
    'shuffling',
    'shun',
    'shush',
    'shut',
    'shy',
    'siamese',
    'siberian',
    'sibling',
    'siding',
    'sierra',
    'siesta',
    'sift',
    'sighing',
    'silenced',
    'silencer',
    'silent',
    'silica',
    'silicon',
    'silk',
    'silliness',
    'silly',
    'silo',
    'silt',
    'silver',
    'similarly',
    'simile',
    'simmering',
    'simple',
    'simplify',
    'simply',
    'sincere',
    'sincerity',
    'singer',
    'singing',
    'single',
    'singular',
    'sinister',
    'sinless',
    'sinner',
    'sinuous',
    'sip',
    'siren',
    'sister',
    'sitcom',
    'sitter',
    'sitting',
    'situated',
    'situation',
    'sixfold',
    'sixteen',
    'sixth',
    'sixties',
    'sixtieth',
    'sixtyfold',
    'sizable',
    'sizably',
    'size',
    'sizing',
    'sizzle',
    'sizzling',
    'skater',
    'skating',
    'skedaddle',
    'skeletal',
    'skeleton',
    'skeptic',
    'sketch',
    'skewed',
    'skewer',
    'skid',
    'skied',
    'skier',
    'skies',
    'skiing',
    'skilled',
    'skillet',
    'skillful',
    'skimmed',
    'skimmer',
    'skimming',
    'skimpily',
    'skincare',
    'skinhead',
    'skinless',
    'skinning',
    'skinny',
    'skintight',
    'skipper',
    'skipping',
    'skirmish',
    'skirt',
    'skittle',
    'skydiver',
    'skylight',
    'skyline',
    'skype',
    'skyrocket',
    'skyward',
    'slab',
    'slacked',
    'slacker',
    'slacking',
    'slackness',
    'slacks',
    'slain',
    'slam',
    'slander',
    'slang',
    'slapping',
    'slapstick',
    'slashed',
    'slashing',
    'slate',
    'slather',
    'slaw',
    'sled',
    'sleek',
    'sleep',
    'sleet',
    'sleeve',
    'slept',
    'sliceable',
    'sliced',
    'slicer',
    'slicing',
    'slick',
    'slider',
    'slideshow',
    'sliding',
    'slighted',
    'slighting',
    'slightly',
    'slimness',
    'slimy',
    'slinging',
    'slingshot',
    'slinky',
    'slip',
    'slit',
    'sliver',
    'slobbery',
    'slogan',
    'sloped',
    'sloping',
    'sloppily',
    'sloppy',
    'slot',
    'slouching',
    'slouchy',
    'sludge',
    'slug',
    'slum',
    'slurp',
    'slush',
    'sly',
    'small',
    'smartly',
    'smartness',
    'smasher',
    'smashing',
    'smashup',
    'smell',
    'smelting',
    'smile',
    'smilingly',
    'smirk',
    'smite',
    'smith',
    'smitten',
    'smock',
    'smog',
    'smoked',
    'smokeless',
    'smokiness',
    'smoking',
    'smoky',
    'smolder',
    'smooth',
    'smother',
    'smudge',
    'smudgy',
    'smuggler',
    'smuggling',
    'smugly',
    'smugness',
    'snack',
    'snagged',
    'snaking',
    'snap',
    'snare',
    'snarl',
    'snazzy',
    'sneak',
    'sneer',
    'sneeze',
    'sneezing',
    'snide',
    'sniff',
    'snippet',
    'snipping',
    'snitch',
    'snooper',
    'snooze',
    'snore',
    'snoring',
    'snorkel',
    'snort',
    'snout',
    'snowbird',
    'snowboard',
    'snowbound',
    'snowcap',
    'snowdrift',
    'snowdrop',
    'snowfall',
    'snowfield',
    'snowflake',
    'snowiness',
    'snowless',
    'snowman',
    'snowplow',
    'snowshoe',
    'snowstorm',
    'snowsuit',
    'snowy',
    'snub',
    'snuff',
    'snuggle',
    'snugly',
    'snugness',
    'speak',
    'spearfish',
    'spearhead',
    'spearman',
    'spearmint',
    'species',
    'specimen',
    'specked',
    'speckled',
    'specks',
    'spectacle',
    'spectator',
    'spectrum',
    'speculate',
    'speech',
    'speed',
    'spellbind',
    'speller',
    'spelling',
    'spendable',
    'spender',
    'spending',
    'spent',
    'spew',
    'sphere',
    'spherical',
    'sphinx',
    'spider',
    'spied',
    'spiffy',
    'spill',
    'spilt',
    'spinach',
    'spinal',
    'spindle',
    'spinner',
    'spinning',
    'spinout',
    'spinster',
    'spiny',
    'spiral',
    'spirited',
    'spiritism',
    'spirits',
    'spiritual',
    'splashed',
    'splashing',
    'splashy',
    'splatter',
    'spleen',
    'splendid',
    'splendor',
    'splice',
    'splicing',
    'splinter',
    'splotchy',
    'splurge',
    'spoilage',
    'spoiled',
    'spoiler',
    'spoiling',
    'spoils',
    'spoken',
    'spokesman',
    'sponge',
    'spongy',
    'sponsor',
    'spoof',
    'spookily',
    'spooky',
    'spool',
    'spoon',
    'spore',
    'sporting',
    'sports',
    'sporty',
    'spotless',
    'spotlight',
    'spotted',
    'spotter',
    'spotting',
    'spotty',
    'spousal',
    'spouse',
    'spout',
    'sprain',
    'sprang',
    'sprawl',
    'spray',
    'spree',
    'sprig',
    'spring',
    'sprinkled',
    'sprinkler',
    'sprint',
    'sprite',
    'sprout',
    'spruce',
    'sprung',
    'spry',
    'spud',
    'spur',
    'sputter',
    'spyglass',
    'squabble',
    'squad',
    'squall',
    'squander',
    'squash',
    'squatted',
    'squatter',
    'squatting',
    'squeak',
    'squealer',
    'squealing',
    'squeamish',
    'squeegee',
    'squeeze',
    'squeezing',
    'squid',
    'squiggle',
    'squiggly',
    'squint',
    'squire',
    'squirt',
    'squishier',
    'squishy',
    'stability',
    'stabilize',
    'stable',
    'stack',
    'stadium',
    'staff',
    'stage',
    'staging',
    'stagnant',
    'stagnate',
    'stainable',
    'stained',
    'staining',
    'stainless',
    'stalemate',
    'staleness',
    'stalling',
    'stallion',
    'stamina',
    'stammer',
    'stamp',
    'stand',
    'stank',
    'staple',
    'stapling',
    'starboard',
    'starch',
    'stardom',
    'stardust',
    'starfish',
    'stargazer',
    'staring',
    'stark',
    'starless',
    'starlet',
    'starlight',
    'starlit',
    'starring',
    'starry',
    'starship',
    'starter',
    'starting',
    'startle',
    'startling',
    'startup',
    'starved',
    'starving',
    'stash',
    'state',
    'static',
    'statistic',
    'statue',
    'stature',
    'status',
    'statute',
    'statutory',
    'staunch',
    'stays',
    'steadfast',
    'steadier',
    'steadily',
    'steadying',
    'steam',
    'steed',
    'steep',
    'steerable',
    'steering',
    'steersman',
    'stegosaur',
    'stellar',
    'stem',
    'stench',
    'stencil',
    'step',
    'stereo',
    'sterile',
    'sterility',
    'sterilize',
    'sterling',
    'sternness',
    'sternum',
    'stew',
    'stick',
    'stiffen',
    'stiffly',
    'stiffness',
    'stifle',
    'stifling',
    'stillness',
    'stilt',
    'stimulant',
    'stimulate',
    'stimuli',
    'stimulus',
    'stinger',
    'stingily',
    'stinging',
    'stingray',
    'stingy',
    'stinking',
    'stinky',
    'stipend',
    'stipulate',
    'stir',
    'stitch',
    'stock',
    'stoic',
    'stoke',
    'stole',
    'stomp',
    'stonewall',
    'stoneware',
    'stonework',
    'stoning',
    'stony',
    'stood',
    'stooge',
    'stool',
    'stoop',
    'stoplight',
    'stoppable',
    'stoppage',
    'stopped',
    'stopper',
    'stopping',
    'stopwatch',
    'storable',
    'storage',
    'storeroom',
    'storewide',
    'storm',
    'stout',
    'stove',
    'stowaway',
    'stowing',
    'straddle',
    'straggler',
    'strained',
    'strainer',
    'straining',
    'strangely',
    'stranger',
    'strangle',
    'strategic',
    'strategy',
    'stratus',
    'straw',
    'stray',
    'streak',
    'stream',
    'street',
    'strength',
    'strenuous',
    'strep',
    'stress',
    'stretch',
    'strewn',
    'stricken',
    'strict',
    'stride',
    'strife',
    'strike',
    'striking',
    'strive',
    'striving',
    'strobe',
    'strode',
    'stroller',
    'strongbox',
    'strongly',
    'strongman',
    'struck',
    'structure',
    'strudel',
    'struggle',
    'strum',
    'strung',
    'strut',
    'stubbed',
    'stubble',
    'stubbly',
    'stubborn',
    'stucco',
    'stuck',
    'student',
    'studied',
    'studio',
    'study',
    'stuffed',
    'stuffing',
    'stuffy',
    'stumble',
    'stumbling',
    'stump',
    'stung',
    'stunned',
    'stunner',
    'stunning',
    'stunt',
    'stupor',
    'sturdily',
    'sturdy',
    'styling',
    'stylishly',
    'stylist',
    'stylized',
    'stylus',
    'suave',
    'subarctic',
    'subatomic',
    'subdivide',
    'subdued',
    'subduing',
    'subfloor',
    'subgroup',
    'subheader',
    'subject',
    'sublease',
    'sublet',
    'sublevel',
    'sublime',
    'submarine',
    'submerge',
    'submersed',
    'submitter',
    'subpanel',
    'subpar',
    'subplot',
    'subprime',
    'subscribe',
    'subscript',
    'subsector',
    'subside',
    'subsiding',
    'subsidize',
    'subsidy',
    'subsoil',
    'subsonic',
    'substance',
    'subsystem',
    'subtext',
    'subtitle',
    'subtly',
    'subtotal',
    'subtract',
    'subtype',
    'suburb',
    'subway',
    'subwoofer',
    'subzero',
    'succulent',
    'such',
    'suction',
    'sudden',
    'sudoku',
    'suds',
    'sufferer',
    'suffering',
    'suffice',
    'suffix',
    'suffocate',
    'suffrage',
    'sugar',
    'suggest',
    'suing',
    'suitable',
    'suitably',
    'suitcase',
    'suitor',
    'sulfate',
    'sulfide',
    'sulfite',
    'sulfur',
    'sulk',
    'sullen',
    'sulphate',
    'sulphuric',
    'sultry',
    'superbowl',
    'superglue',
    'superhero',
    'superior',
    'superjet',
    'superman',
    'supermom',
    'supernova',
    'supervise',
    'supper',
    'supplier',
    'supply',
    'support',
    'supremacy',
    'supreme',
    'surcharge',
    'surely',
    'sureness',
    'surface',
    'surfacing',
    'surfboard',
    'surfer',
    'surgery',
    'surgical',
    'surging',
    'surname',
    'surpass',
    'surplus',
    'surprise',
    'surreal',
    'surrender',
    'surrogate',
    'surround',
    'survey',
    'survival',
    'survive',
    'surviving',
    'survivor',
    'sushi',
    'suspect',
    'suspend',
    'suspense',
    'sustained',
    'sustainer',
    'swab',
    'swaddling',
    'swagger',
    'swampland',
    'swan',
    'swapping',
    'swarm',
    'sway',
    'swear',
    'sweat',
    'sweep',
    'swell',
    'swept',
    'swerve',
    'swifter',
    'swiftly',
    'swiftness',
    'swimmable',
    'swimmer',
    'swimming',
    'swimsuit',
    'swimwear',
    'swinger',
    'swinging',
    'swipe',
    'swirl',
    'switch',
    'swivel',
    'swizzle',
    'swooned',
    'swoop',
    'swoosh',
    'swore',
    'sworn',
    'swung',
    'sycamore',
    'sympathy',
    'symphonic',
    'symphony',
    'symptom',
    'synapse',
    'syndrome',
    'synergy',
    'synopses',
    'synopsis',
    'synthesis',
    'synthetic',
    'syrup',
    'system',
    't-shirt',
    'tabasco',
    'tabby',
    'tableful',
    'tables',
    'tablet',
    'tableware',
    'tabloid',
    'tackiness',
    'tacking',
    'tackle',
    'tackling',
    'tacky',
    'taco',
    'tactful',
    'tactical',
    'tactics',
    'tactile',
    'tactless',
    'tadpole',
    'taekwondo',
    'tag',
    'tainted',
    'take',
    'taking',
    'talcum',
    'talisman',
    'tall',
    'talon',
    'tamale',
    'tameness',
    'tamer',
    'tamper',
    'tank',
    'tanned',
    'tannery',
    'tanning',
    'tantrum',
    'tapeless',
    'tapered',
    'tapering',
    'tapestry',
    'tapioca',
    'tapping',
    'taps',
    'tarantula',
    'target',
    'tarmac',
    'tarnish',
    'tarot',
    'tartar',
    'tartly',
    'tartness',
    'task',
    'tassel',
    'taste',
    'tastiness',
    'tasting',
    'tasty',
    'tattered',
    'tattle',
    'tattling',
    'tattoo',
    'taunt',
    'tavern',
    'thank',
    'that',
    'thaw',
    'theater',
    'theatrics',
    'thee',
    'theft',
    'theme',
    'theology',
    'theorize',
    'thermal',
    'thermos',
    'thesaurus',
    'these',
    'thesis',
    'thespian',
    'thicken',
    'thicket',
    'thickness',
    'thieving',
    'thievish',
    'thigh',
    'thimble',
    'thing',
    'think',
    'thinly',
    'thinner',
    'thinness',
    'thinning',
    'thirstily',
    'thirsting',
    'thirsty',
    'thirteen',
    'thirty',
    'thong',
    'thorn',
    'those',
    'thousand',
    'thrash',
    'thread',
    'threaten',
    'threefold',
    'thrift',
    'thrill',
    'thrive',
    'thriving',
    'throat',
    'throbbing',
    'throng',
    'throttle',
    'throwaway',
    'throwback',
    'thrower',
    'throwing',
    'thud',
    'thumb',
    'thumping',
    'thursday',
    'thus',
    'thwarting',
    'thyself',
    'tiara',
    'tibia',
    'tidal',
    'tidbit',
    'tidiness',
    'tidings',
    'tidy',
    'tiger',
    'tighten',
    'tightly',
    'tightness',
    'tightrope',
    'tightwad',
    'tigress',
    'tile',
    'tiling',
    'till',
    'tilt',
    'timid',
    'timing',
    'timothy',
    'tinderbox',
    'tinfoil',
    'tingle',
    'tingling',
    'tingly',
    'tinker',
    'tinkling',
    'tinsel',
    'tinsmith',
    'tint',
    'tinwork',
    'tiny',
    'tipoff',
    'tipped',
    'tipper',
    'tipping',
    'tiptoeing',
    'tiptop',
    'tiring',
    'tissue',
    'trace',
    'tracing',
    'track',
    'traction',
    'tractor',
    'trade',
    'trading',
    'tradition',
    'traffic',
    'tragedy',
    'trailing',
    'trailside',
    'train',
    'traitor',
    'trance',
    'tranquil',
    'transfer',
    'transform',
    'translate',
    'transpire',
    'transport',
    'transpose',
    'trapdoor',
    'trapeze',
    'trapezoid',
    'trapped',
    'trapper',
    'trapping',
    'traps',
    'trash',
    'travel',
    'traverse',
    'travesty',
    'tray',
    'treachery',
    'treading',
    'treadmill',
    'treason',
    'treat',
    'treble',
    'tree',
    'trekker',
    'tremble',
    'trembling',
    'tremor',
    'trench',
    'trend',
    'trespass',
    'triage',
    'trial',
    'triangle',
    'tribesman',
    'tribunal',
    'tribune',
    'tributary',
    'tribute',
    'triceps',
    'trickery',
    'trickily',
    'tricking',
    'trickle',
    'trickster',
    'tricky',
    'tricolor',
    'tricycle',
    'trident',
    'tried',
    'trifle',
    'trifocals',
    'trillion',
    'trilogy',
    'trimester',
    'trimmer',
    'trimming',
    'trimness',
    'trinity',
    'trio',
    'tripod',
    'tripping',
    'triumph',
    'trivial',
    'trodden',
    'trolling',
    'trombone',
    'trophy',
    'tropical',
    'tropics',
    'trouble',
    'troubling',
    'trough',
    'trousers',
    'trout',
    'trowel',
    'truce',
    'truck',
    'truffle',
    'trump',
    'trunks',
    'trustable',
    'trustee',
    'trustful',
    'trusting',
    'trustless',
    'truth',
    'try',
    'tubby',
    'tubeless',
    'tubular',
    'tucking',
    'tuesday',
    'tug',
    'tuition',
    'tulip',
    'tumble',
    'tumbling',
    'tummy',
    'turban',
    'turbine',
    'turbofan',
    'turbojet',
    'turbulent',
    'turf',
    'turkey',
    'turmoil',
    'turret',
    'turtle',
    'tusk',
    'tutor',
    'tutu',
    'tux',
    'tweak',
    'tweed',
    'tweet',
    'tweezers',
    'twelve',
    'twentieth',
    'twenty',
    'twerp',
    'twice',
    'twiddle',
    'twiddling',
    'twig',
    'twilight',
    'twine',
    'twins',
    'twirl',
    'twistable',
    'twisted',
    'twister',
    'twisting',
    'twisty',
    'twitch',
    'twitter',
    'tycoon',
    'tying',
    'tyke',
    'udder',
    'ultimate',
    'ultimatum',
    'ultra',
    'umbilical',
    'umbrella',
    'umpire',
    'unabashed',
    'unable',
    'unadorned',
    'unadvised',
    'unafraid',
    'unaired',
    'unaligned',
    'unaltered',
    'unarmored',
    'unashamed',
    'unaudited',
    'unawake',
    'unaware',
    'unbaked',
    'unbalance',
    'unbeaten',
    'unbend',
    'unbent',
    'unbiased',
    'unbitten',
    'unblended',
    'unblessed',
    'unblock',
    'unbolted',
    'unbounded',
    'unboxed',
    'unbraided',
    'unbridle',
    'unbroken',
    'unbuckled',
    'unbundle',
    'unburned',
    'unbutton',
    'uncanny',
    'uncapped',
    'uncaring',
    'uncertain',
    'unchain',
    'unchanged',
    'uncharted',
    'uncheck',
    'uncivil',
    'unclad',
    'unclaimed',
    'unclamped',
    'unclasp',
    'uncle',
    'unclip',
    'uncloak',
    'unclog',
    'unclothed',
    'uncoated',
    'uncoiled',
    'uncolored',
    'uncombed',
    'uncommon',
    'uncooked',
    'uncork',
    'uncorrupt',
    'uncounted',
    'uncouple',
    'uncouth',
    'uncover',
    'uncross',
    'uncrown',
    'uncrushed',
    'uncured',
    'uncurious',
    'uncurled',
    'uncut',
    'undamaged',
    'undated',
    'undaunted',
    'undead',
    'undecided',
    'undefined',
    'underage',
    'underarm',
    'undercoat',
    'undercook',
    'undercut',
    'underdog',
    'underdone',
    'underfed',
    'underfeed',
    'underfoot',
    'undergo',
    'undergrad',
    'underhand',
    'underline',
    'underling',
    'undermine',
    'undermost',
    'underpaid',
    'underpass',
    'underpay',
    'underrate',
    'undertake',
    'undertone',
    'undertook',
    'undertow',
    'underuse',
    'underwear',
    'underwent',
    'underwire',
    'undesired',
    'undiluted',
    'undivided',
    'undocked',
    'undoing',
    'undone',
    'undrafted',
    'undress',
    'undrilled',
    'undusted',
    'undying',
    'unearned',
    'unearth',
    'unease',
    'uneasily',
    'uneasy',
    'uneatable',
    'uneaten',
    'unedited',
    'unelected',
    'unending',
    'unengaged',
    'unenvied',
    'unequal',
    'unethical',
    'uneven',
    'unexpired',
    'unexposed',
    'unfailing',
    'unfair',
    'unfasten',
    'unfazed',
    'unfeeling',
    'unfiled',
    'unfilled',
    'unfitted',
    'unfitting',
    'unfixable',
    'unfixed',
    'unflawed',
    'unfocused',
    'unfold',
    'unfounded',
    'unframed',
    'unfreeze',
    'unfrosted',
    'unfrozen',
    'unfunded',
    'unglazed',
    'ungloved',
    'unglue',
    'ungodly',
    'ungraded',
    'ungreased',
    'unguarded',
    'unguided',
    'unhappily',
    'unhappy',
    'unharmed',
    'unhealthy',
    'unheard',
    'unhearing',
    'unheated',
    'unhelpful',
    'unhidden',
    'unhinge',
    'unhitched',
    'unholy',
    'unhook',
    'unicorn',
    'unicycle',
    'unified',
    'unifier',
    'uniformed',
    'uniformly',
    'unify',
    'unimpeded',
    'uninjured',
    'uninstall',
    'uninsured',
    'uninvited',
    'union',
    'uniquely',
    'unisexual',
    'unison',
    'unissued',
    'unit',
    'universal',
    'universe',
    'unjustly',
    'unkempt',
    'unkind',
    'unknotted',
    'unknowing',
    'unknown',
    'unlaced',
    'unlatch',
    'unlawful',
    'unleaded',
    'unlearned',
    'unleash',
    'unless',
    'unleveled',
    'unlighted',
    'unlikable',
    'unlimited',
    'unlined',
    'unlinked',
    'unlisted',
    'unlit',
    'unlivable',
    'unloaded',
    'unloader',
    'unlocked',
    'unlocking',
    'unlovable',
    'unloved',
    'unlovely',
    'unloving',
    'unluckily',
    'unlucky',
    'unmade',
    'unmanaged',
    'unmanned',
    'unmapped',
    'unmarked',
    'unmasked',
    'unmasking',
    'unmatched',
    'unmindful',
    'unmixable',
    'unmixed',
    'unmolded',
    'unmoral',
    'unmovable',
    'unmoved',
    'unmoving',
    'unnamable',
    'unnamed',
    'unnatural',
    'unneeded',
    'unnerve',
    'unnerving',
    'unnoticed',
    'unopened',
    'unopposed',
    'unpack',
    'unpadded',
    'unpaid',
    'unpainted',
    'unpaired',
    'unpaved',
    'unpeeled',
    'unpicked',
    'unpiloted',
    'unpinned',
    'unplanned',
    'unplanted',
    'unpleased',
    'unpledged',
    'unplowed',
    'unplug',
    'unpopular',
    'unproven',
    'unquote',
    'unranked',
    'unrated',
    'unraveled',
    'unreached',
    'unread',
    'unreal',
    'unreeling',
    'unrefined',
    'unrelated',
    'unrented',
    'unrest',
    'unretired',
    'unrevised',
    'unrigged',
    'unripe',
    'unrivaled',
    'unroasted',
    'unrobed',
    'unroll',
    'unruffled',
    'unruly',
    'unrushed',
    'unsaddle',
    'unsafe',
    'unsaid',
    'unsalted',
    'unsaved',
    'unsavory',
    'unscathed',
    'unscented',
    'unscrew',
    'unsealed',
    'unseated',
    'unsecured',
    'unseeing',
    'unseemly',
    'unseen',
    'unselect',
    'unselfish',
    'unsent',
    'unsettled',
    'unshackle',
    'unshaken',
    'unshaved',
    'unshaven',
    'unsheathe',
    'unshipped',
    'unsightly',
    'unsigned',
    'unskilled',
    'unsliced',
    'unsmooth',
    'unsnap',
    'unsocial',
    'unsoiled',
    'unsold',
    'unsolved',
    'unsorted',
    'unspoiled',
    'unspoken',
    'unstable',
    'unstaffed',
    'unstamped',
    'unsteady',
    'unsterile',
    'unstirred',
    'unstitch',
    'unstopped',
    'unstuck',
    'unstuffed',
    'unstylish',
    'unsubtle',
    'unsubtly',
    'unsuited',
    'unsure',
    'unsworn',
    'untagged',
    'untainted',
    'untaken',
    'untamed',
    'untangled',
    'untapped',
    'untaxed',
    'unthawed',
    'unthread',
    'untidy',
    'untie',
    'until',
    'untimed',
    'untimely',
    'untitled',
    'untoasted',
    'untold',
    'untouched',
    'untracked',
    'untrained',
    'untreated',
    'untried',
    'untrimmed',
    'untrue',
    'untruth',
    'unturned',
    'untwist',
    'untying',
    'unusable',
    'unused',
    'unusual',
    'unvalued',
    'unvaried',
    'unvarying',
    'unveiled',
    'unveiling',
    'unvented',
    'unviable',
    'unvisited',
    'unvocal',
    'unwanted',
    'unwarlike',
    'unwary',
    'unwashed',
    'unwatched',
    'unweave',
    'unwed',
    'unwelcome',
    'unwell',
    'unwieldy',
    'unwilling',
    'unwind',
    'unwired',
    'unwitting',
    'unwomanly',
    'unworldly',
    'unworn',
    'unworried',
    'unworthy',
    'unwound',
    'unwoven',
    'unwrapped',
    'unwritten',
    'unzip',
    'upbeat',
    'upchuck',
    'upcoming',
    'upcountry',
    'update',
    'upfront',
    'upgrade',
    'upheaval',
    'upheld',
    'uphill',
    'uphold',
    'uplifted',
    'uplifting',
    'upload',
    'upon',
    'upper',
    'upright',
    'uprising',
    'upriver',
    'uproar',
    'uproot',
    'upscale',
    'upside',
    'upstage',
    'upstairs',
    'upstart',
    'upstate',
    'upstream',
    'upstroke',
    'upswing',
    'uptake',
    'uptight',
    'uptown',
    'upturned',
    'upward',
    'upwind',
    'uranium',
    'urban',
    'urchin',
    'urethane',
    'urgency',
    'urgent',
    'urging',
    'urologist',
    'urology',
    'usable',
    'usage',
    'useable',
    'used',
    'uselessly',
    'user',
    'usher',
    'usual',
    'utensil',
    'utility',
    'utilize',
    'utmost',
    'utopia',
    'utter',
    'vacancy',
    'vacant',
    'vacate',
    'vacation',
    'vagabond',
    'vagrancy',
    'vagrantly',
    'vaguely',
    'vagueness',
    'valiant',
    'valid',
    'valium',
    'valley',
    'valuables',
    'value',
    'vanilla',
    'vanish',
    'vanity',
    'vanquish',
    'vantage',
    'vaporizer',
    'variable',
    'variably',
    'varied',
    'variety',
    'various',
    'varmint',
    'varnish',
    'varsity',
    'varying',
    'vascular',
    'vaseline',
    'vastly',
    'vastness',
    'veal',
    'vegan',
    'veggie',
    'vehicular',
    'velcro',
    'velocity',
    'velvet',
    'vendetta',
    'vending',
    'vendor',
    'veneering',
    'vengeful',
    'venomous',
    'ventricle',
    'venture',
    'venue',
    'venus',
    'verbalize',
    'verbally',
    'verbose',
    'verdict',
    'verify',
    'verse',
    'version',
    'versus',
    'vertebrae',
    'vertical',
    'vertigo',
    'very',
    'vessel',
    'vest',
    'veteran',
    'veto',
    'vexingly',
    'viability',
    'viable',
    'vibes',
    'vice',
    'vicinity',
    'victory',
    'video',
    'viewable',
    'viewer',
    'viewing',
    'viewless',
    'viewpoint',
    'vigorous',
    'village',
    'villain',
    'vindicate',
    'vineyard',
    'vintage',
    'violate',
    'violation',
    'violator',
    'violet',
    'violin',
    'viper',
    'viral',
    'virtual',
    'virtuous',
    'virus',
    'visa',
    'viscosity',
    'viscous',
    'viselike',
    'visible',
    'visibly',
    'vision',
    'visiting',
    'visitor',
    'visor',
    'vista',
    'vitality',
    'vitalize',
    'vitally',
    'vitamins',
    'vivacious',
    'vividly',
    'vividness',
    'vixen',
    'vocalist',
    'vocalize',
    'vocally',
    'vocation',
    'voice',
    'voicing',
    'void',
    'volatile',
    'volley',
    'voltage',
    'volumes',
    'voter',
    'voting',
    'voucher',
    'vowed',
    'vowel',
    'voyage',
    'wackiness',
    'wad',
    'wafer',
    'waffle',
    'waged',
    'wager',
    'wages',
    'waggle',
    'wagon',
    'wake',
    'waking',
    'walk',
    'walmart',
    'walnut',
    'walrus',
    'waltz',
    'wand',
    'wannabe',
    'wanted',
    'wanting',
    'wasabi',
    'washable',
    'washbasin',
    'washboard',
    'washbowl',
    'washcloth',
    'washday',
    'washed',
    'washer',
    'washhouse',
    'washing',
    'washout',
    'washroom',
    'washstand',
    'washtub',
    'wasp',
    'wasting',
    'watch',
    'water',
    'waviness',
    'waving',
    'wavy',
    'whacking',
    'whacky',
    'wham',
    'wharf',
    'wheat',
    'whenever',
    'whiff',
    'whimsical',
    'whinny',
    'whiny',
    'whisking',
    'whoever',
    'whole',
    'whomever',
    'whoopee',
    'whooping',
    'whoops',
    'why',
    'wick',
    'widely',
    'widen',
    'widget',
    'widow',
    'width',
    'wieldable',
    'wielder',
    'wife',
    'wifi',
    'wikipedia',
    'wildcard',
    'wildcat',
    'wilder',
    'wildfire',
    'wildfowl',
    'wildland',
    'wildlife',
    'wildly',
    'wildness',
    'willed',
    'willfully',
    'willing',
    'willow',
    'willpower',
    'wilt',
    'wimp',
    'wince',
    'wincing',
    'wind',
    'wing',
    'winking',
    'winner',
    'winnings',
    'winter',
    'wipe',
    'wired',
    'wireless',
    'wiring',
    'wiry',
    'wisdom',
    'wise',
    'wish',
    'wisplike',
    'wispy',
    'wistful',
    'wizard',
    'wobble',
    'wobbling',
    'wobbly',
    'wok',
    'wolf',
    'wolverine',
    'womanhood',
    'womankind',
    'womanless',
    'womanlike',
    'womanly',
    'womb',
    'woof',
    'wooing',
    'wool',
    'woozy',
    'word',
    'work',
    'worried',
    'worrier',
    'worrisome',
    'worry',
    'worsening',
    'worshiper',
    'worst',
    'wound',
    'woven',
    'wow',
    'wrangle',
    'wrath',
    'wreath',
    'wreckage',
    'wrecker',
    'wrecking',
    'wrench',
    'wriggle',
    'wriggly',
    'wrinkle',
    'wrinkly',
    'wrist',
    'writing',
    'written',
    'wrongdoer',
    'wronged',
    'wrongful',
    'wrongly',
    'wrongness',
    'wrought',
    'xbox',
    'xerox',
    'yahoo',
    'yam',
    'yanking',
    'yapping',
    'yard',
    'yarn',
    'yeah',
    'yearbook',
    'yearling',
    'yearly',
    'yearning',
    'yeast',
    'yelling',
    'yelp',
    'yen',
    'yesterday',
    'yiddish',
    'yield',
    'yin',
    'yippee',
    'yo-yo',
    'yodel',
    'yoga',
    'yogurt',
    'yonder',
    'yoyo',
    'yummy',
    'zap',
    'zealous',
    'zebra',
    'zen',
    'zeppelin',
    'zero',
    'zestfully',
    'zesty',
    'zigzagged',
    'zipfile',
    'zipping',
    'zippy',
    'zips',
    'zit',
    'zodiac',
    'zombie',
    'zone',
    'zoning',
    'zookeeper',
    'zoologist',
    'zoology',
    'zoom',
];

// CONCATENATED MODULE: ./jslib/src/services/crypto.service.ts
var crypto_service_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var crypto_service_metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var crypto_service_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};










const crypto_service_Keys = {
    key: 'key',
    encOrgKeys: 'encOrgKeys',
    encPrivateKey: 'encPrivateKey',
    encKey: 'encKey',
    keyHash: 'keyHash',
};
const crypto_service_0 = () => 'getEncKey', ɵ1 = () => 'getOrgKeys';
class crypto_service_CryptoService {
    constructor(storageService, secureStorageService, cryptoFunctionService, platformUtilService) {
        this.storageService = storageService;
        this.secureStorageService = secureStorageService;
        this.cryptoFunctionService = cryptoFunctionService;
        this.platformUtilService = platformUtilService;
    }
    setKey(key) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            this.key = key;
            const option = yield this.storageService.get(constants_service["a" /* ConstantsService */].vaultTimeoutKey);
            const biometric = yield this.storageService.get(constants_service["a" /* ConstantsService */].biometricUnlockKey);
            if (option != null && !(biometric && this.platformUtilService.supportsSecureStorage())) {
                // if we have a lock option set, we do not store the key
                return;
            }
            return this.secureStorageService.save(crypto_service_Keys.key, key.keyB64);
        });
    }
    setKeyHash(keyHash) {
        this.keyHash = keyHash;
        return this.storageService.save(crypto_service_Keys.keyHash, keyHash);
    }
    setEncKey(encKey) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            if (encKey == null) {
                return;
            }
            yield this.storageService.save(crypto_service_Keys.encKey, encKey);
            this.encKey = null;
        });
    }
    setEncPrivateKey(encPrivateKey) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            if (encPrivateKey == null) {
                return;
            }
            yield this.storageService.save(crypto_service_Keys.encPrivateKey, encPrivateKey);
            this.privateKey = null;
        });
    }
    setOrgKeys(orgs) {
        const orgKeys = {};
        orgs.forEach((org) => {
            orgKeys[org.id] = org.key;
        });
        this.orgKeys = null;
        return this.storageService.save(crypto_service_Keys.encOrgKeys, orgKeys);
    }
    getKey() {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            if (this.key != null) {
                return this.key;
            }
            const key = yield this.secureStorageService.get(crypto_service_Keys.key);
            if (key != null) {
                this.key = new symmetricCryptoKey["a" /* SymmetricCryptoKey */](utils["a" /* Utils */].fromB64ToArray(key).buffer);
            }
            return key == null ? null : this.key;
        });
    }
    getKeyHash() {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            if (this.keyHash != null) {
                return this.keyHash;
            }
            const keyHash = yield this.storageService.get(crypto_service_Keys.keyHash);
            if (keyHash != null) {
                this.keyHash = keyHash;
            }
            return keyHash == null ? null : this.keyHash;
        });
    }
    getEncKey(key = null) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            if (this.encKey != null) {
                return this.encKey;
            }
            const encKey = yield this.storageService.get(crypto_service_Keys.encKey);
            if (encKey == null) {
                return null;
            }
            if (key == null) {
                key = yield this.getKey();
            }
            if (key == null) {
                return null;
            }
            let decEncKey;
            const encKeyCipher = new domain_cipherString["a" /* CipherString */](encKey);
            if (encKeyCipher.encryptionType === encryptionType["a" /* EncryptionType */].AesCbc256_B64) {
                decEncKey = yield this.decryptToBytes(encKeyCipher, key);
            }
            else if (encKeyCipher.encryptionType === encryptionType["a" /* EncryptionType */].AesCbc256_HmacSha256_B64) {
                const newKey = yield this.stretchKey(key);
                decEncKey = yield this.decryptToBytes(encKeyCipher, newKey);
            }
            else {
                throw new Error('Unsupported encKey type.');
            }
            if (decEncKey == null) {
                return null;
            }
            this.encKey = new symmetricCryptoKey["a" /* SymmetricCryptoKey */](decEncKey);
            return this.encKey;
        });
    }
    getPublicKey() {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            if (this.publicKey != null) {
                return this.publicKey;
            }
            const privateKey = yield this.getPrivateKey();
            if (privateKey == null) {
                return null;
            }
            this.publicKey = yield this.cryptoFunctionService.rsaExtractPublicKey(privateKey);
            return this.publicKey;
        });
    }
    getPrivateKey() {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            if (this.privateKey != null) {
                return this.privateKey;
            }
            const encPrivateKey = yield this.storageService.get(crypto_service_Keys.encPrivateKey);
            if (encPrivateKey == null) {
                return null;
            }
            this.privateKey = yield this.decryptToBytes(new domain_cipherString["a" /* CipherString */](encPrivateKey), null);
            return this.privateKey;
        });
    }
    getFingerprint(userId, publicKey) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            if (publicKey == null) {
                publicKey = yield this.getPublicKey();
            }
            if (publicKey === null) {
                throw new Error('No public key available.');
            }
            const keyFingerprint = yield this.cryptoFunctionService.hash(publicKey, 'sha256');
            const userFingerprint = yield this.cryptoFunctionService.hkdfExpand(keyFingerprint, userId, 32, 'sha256');
            return this.hashPhrase(userFingerprint);
        });
    }
    getOrgKeys() {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            if (this.orgKeys != null && this.orgKeys.size > 0) {
                return this.orgKeys;
            }
            const encOrgKeys = yield this.storageService.get(crypto_service_Keys.encOrgKeys);
            if (encOrgKeys == null) {
                return null;
            }
            const orgKeys = new Map();
            let setKey = false;
            for (const orgId in encOrgKeys) {
                if (!encOrgKeys.hasOwnProperty(orgId)) {
                    continue;
                }
                const decValue = yield this.rsaDecrypt(encOrgKeys[orgId]);
                orgKeys.set(orgId, new symmetricCryptoKey["a" /* SymmetricCryptoKey */](decValue));
                setKey = true;
            }
            if (setKey) {
                this.orgKeys = orgKeys;
            }
            return this.orgKeys;
        });
    }
    getOrgKey(orgId) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            if (orgId == null) {
                return null;
            }
            const orgKeys = yield this.getOrgKeys();
            if (orgKeys == null || !orgKeys.has(orgId)) {
                return null;
            }
            return orgKeys.get(orgId);
        });
    }
    hasKey() {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            return (yield this.getKey()) != null;
        });
    }
    hasEncKey() {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            const encKey = yield this.storageService.get(crypto_service_Keys.encKey);
            return encKey != null;
        });
    }
    clearKey() {
        this.key = this.legacyEtmKey = null;
        return this.secureStorageService.remove(crypto_service_Keys.key);
    }
    clearKeyHash() {
        this.keyHash = null;
        return this.storageService.remove(crypto_service_Keys.keyHash);
    }
    clearEncKey(memoryOnly) {
        this.encKey = null;
        if (memoryOnly) {
            return Promise.resolve();
        }
        return this.storageService.remove(crypto_service_Keys.encKey);
    }
    clearKeyPair(memoryOnly) {
        this.privateKey = null;
        this.publicKey = null;
        if (memoryOnly) {
            return Promise.resolve();
        }
        return this.storageService.remove(crypto_service_Keys.encPrivateKey);
    }
    clearOrgKeys(memoryOnly) {
        this.orgKeys = null;
        if (memoryOnly) {
            return Promise.resolve();
        }
        return this.storageService.remove(crypto_service_Keys.encOrgKeys);
    }
    clearPinProtectedKey() {
        return this.storageService.remove(constants_service["a" /* ConstantsService */].pinProtectedKey);
    }
    clearKeys() {
        return Promise.all([
            this.clearKey(),
            this.clearKeyHash(),
            this.clearOrgKeys(),
            this.clearEncKey(),
            this.clearKeyPair(),
            this.clearPinProtectedKey(),
        ]);
    }
    toggleKey() {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            const key = yield this.getKey();
            const option = yield this.storageService.get(constants_service["a" /* ConstantsService */].vaultTimeoutKey);
            const biometric = yield this.storageService.get(constants_service["a" /* ConstantsService */].biometricUnlockKey);
            if ((!biometric && this.platformUtilService.supportsSecureStorage()) && (option != null || option === 0)) {
                // if we have a lock option set, clear the key
                yield this.clearKey();
                this.key = key;
                return;
            }
            yield this.setKey(key);
        });
    }
    makeKey(password, salt, kdf, kdfIterations) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            let key = null;
            if (kdf == null || kdf === kdfType["a" /* KdfType */].PBKDF2_SHA256) {
                if (kdfIterations == null) {
                    kdfIterations = 5000;
                }
                else if (kdfIterations < 5000) {
                    throw new Error('PBKDF2 iteration minimum is 5000.');
                }
                key = yield this.cryptoFunctionService.pbkdf2(password, salt, 'sha256', kdfIterations);
            }
            else {
                throw new Error('Unknown Kdf.');
            }
            return new symmetricCryptoKey["a" /* SymmetricCryptoKey */](key);
        });
    }
    makeKeyFromPin(pin, salt, kdf, kdfIterations, protectedKeyCs = null) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            if (protectedKeyCs == null) {
                const pinProtectedKey = yield this.storageService.get(constants_service["a" /* ConstantsService */].pinProtectedKey);
                if (pinProtectedKey == null) {
                    throw new Error('No PIN protected key found.');
                }
                protectedKeyCs = new domain_cipherString["a" /* CipherString */](pinProtectedKey);
            }
            const pinKey = yield this.makePinKey(pin, salt, kdf, kdfIterations);
            const decKey = yield this.decryptToBytes(protectedKeyCs, pinKey);
            return new symmetricCryptoKey["a" /* SymmetricCryptoKey */](decKey);
        });
    }
    makeShareKey() {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            const shareKey = yield this.cryptoFunctionService.randomBytes(64);
            const publicKey = yield this.getPublicKey();
            const encShareKey = yield this.rsaEncrypt(shareKey, publicKey);
            return [encShareKey, new symmetricCryptoKey["a" /* SymmetricCryptoKey */](shareKey)];
        });
    }
    makeKeyPair(key) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            const keyPair = yield this.cryptoFunctionService.rsaGenerateKeyPair(2048);
            const publicB64 = utils["a" /* Utils */].fromBufferToB64(keyPair[0]);
            const privateEnc = yield this.encrypt(keyPair[1], key);
            return [publicB64, privateEnc];
        });
    }
    makePinKey(pin, salt, kdf, kdfIterations) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            const pinKey = yield this.makeKey(pin, salt, kdf, kdfIterations);
            return yield this.stretchKey(pinKey);
        });
    }
    makeSendKey(keyMaterial) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            const sendKey = yield this.cryptoFunctionService.hkdf(keyMaterial, 'bitwarden-send', 'send', 64, 'sha256');
            return new symmetricCryptoKey["a" /* SymmetricCryptoKey */](sendKey);
        });
    }
    hashPassword(password, key) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            if (key == null) {
                key = yield this.getKey();
            }
            if (password == null || key == null) {
                throw new Error('Invalid parameters.');
            }
            const hash = yield this.cryptoFunctionService.pbkdf2(key.key, password, 'sha256', 1);
            return utils["a" /* Utils */].fromBufferToB64(hash);
        });
    }
    makeEncKey(key) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            const theKey = yield this.getKeyForEncryption(key);
            const encKey = yield this.cryptoFunctionService.randomBytes(64);
            return this.buildEncKey(theKey, encKey);
        });
    }
    remakeEncKey(key) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            const encKey = yield this.getEncKey();
            return this.buildEncKey(key, encKey.key);
        });
    }
    encrypt(plainValue, key) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            if (plainValue == null) {
                return Promise.resolve(null);
            }
            let plainBuf;
            if (typeof (plainValue) === 'string') {
                plainBuf = utils["a" /* Utils */].fromUtf8ToArray(plainValue).buffer;
            }
            else {
                plainBuf = plainValue;
            }
            const encObj = yield this.aesEncrypt(plainBuf, key);
            const iv = utils["a" /* Utils */].fromBufferToB64(encObj.iv);
            const data = utils["a" /* Utils */].fromBufferToB64(encObj.data);
            const mac = encObj.mac != null ? utils["a" /* Utils */].fromBufferToB64(encObj.mac) : null;
            return new domain_cipherString["a" /* CipherString */](encObj.key.encType, data, iv, mac);
        });
    }
    encryptToBytes(plainValue, key) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            const encValue = yield this.aesEncrypt(plainValue, key);
            let macLen = 0;
            if (encValue.mac != null) {
                macLen = encValue.mac.byteLength;
            }
            const encBytes = new Uint8Array(1 + encValue.iv.byteLength + macLen + encValue.data.byteLength);
            encBytes.set([encValue.key.encType]);
            encBytes.set(new Uint8Array(encValue.iv), 1);
            if (encValue.mac != null) {
                encBytes.set(new Uint8Array(encValue.mac), 1 + encValue.iv.byteLength);
            }
            encBytes.set(new Uint8Array(encValue.data), 1 + encValue.iv.byteLength + macLen);
            return encBytes.buffer;
        });
    }
    rsaEncrypt(data, publicKey) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            if (publicKey == null) {
                publicKey = yield this.getPublicKey();
            }
            if (publicKey == null) {
                throw new Error('Public key unavailable.');
            }
            const encBytes = yield this.cryptoFunctionService.rsaEncrypt(data, publicKey, 'sha1');
            return new domain_cipherString["a" /* CipherString */](encryptionType["a" /* EncryptionType */].Rsa2048_OaepSha1_B64, utils["a" /* Utils */].fromBufferToB64(encBytes));
        });
    }
    decryptToBytes(cipherString, key) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            const iv = utils["a" /* Utils */].fromB64ToArray(cipherString.iv).buffer;
            const data = utils["a" /* Utils */].fromB64ToArray(cipherString.data).buffer;
            const mac = cipherString.mac ? utils["a" /* Utils */].fromB64ToArray(cipherString.mac).buffer : null;
            const decipher = yield this.aesDecryptToBytes(cipherString.encryptionType, data, iv, mac, key);
            if (decipher == null) {
                return null;
            }
            return decipher;
        });
    }
    decryptToUtf8(cipherString, key) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            return yield this.aesDecryptToUtf8(cipherString.encryptionType, cipherString.data, cipherString.iv, cipherString.mac, key);
        });
    }
    decryptFromBytes(encBuf, key) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            if (encBuf == null) {
                throw new Error('no encBuf.');
            }
            const encBytes = new Uint8Array(encBuf);
            const encType = encBytes[0];
            let ctBytes = null;
            let ivBytes = null;
            let macBytes = null;
            switch (encType) {
                case encryptionType["a" /* EncryptionType */].AesCbc128_HmacSha256_B64:
                case encryptionType["a" /* EncryptionType */].AesCbc256_HmacSha256_B64:
                    if (encBytes.length <= 49) { // 1 + 16 + 32 + ctLength
                        return null;
                    }
                    ivBytes = encBytes.slice(1, 17);
                    macBytes = encBytes.slice(17, 49);
                    ctBytes = encBytes.slice(49);
                    break;
                case encryptionType["a" /* EncryptionType */].AesCbc256_B64:
                    if (encBytes.length <= 17) { // 1 + 16 + ctLength
                        return null;
                    }
                    ivBytes = encBytes.slice(1, 17);
                    ctBytes = encBytes.slice(17);
                    break;
                default:
                    return null;
            }
            return yield this.aesDecryptToBytes(encType, ctBytes.buffer, ivBytes.buffer, macBytes != null ? macBytes.buffer : null, key);
        });
    }
    // EFForg/OpenWireless
    // ref https://github.com/EFForg/OpenWireless/blob/master/app/js/diceware.js
    randomNumber(min, max) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            let rval = 0;
            const range = max - min + 1;
            const bitsNeeded = Math.ceil(Math.log2(range));
            if (bitsNeeded > 53) {
                throw new Error('We cannot generate numbers larger than 53 bits.');
            }
            const bytesNeeded = Math.ceil(bitsNeeded / 8);
            const mask = Math.pow(2, bitsNeeded) - 1;
            // 7776 -> (2^13 = 8192) -1 == 8191 or 0x00001111 11111111
            // Fill a byte array with N random numbers
            const byteArray = new Uint8Array(yield this.cryptoFunctionService.randomBytes(bytesNeeded));
            let p = (bytesNeeded - 1) * 8;
            for (let i = 0; i < bytesNeeded; i++) {
                rval += byteArray[i] * Math.pow(2, p);
                p -= 8;
            }
            // Use & to apply the mask and reduce the number of recursive lookups
            // tslint:disable-next-line
            rval = rval & mask;
            if (rval >= range) {
                // Integer out of acceptable range
                return this.randomNumber(min, max);
            }
            // Return an integer that falls within the range
            return min + rval;
        });
    }
    // Helpers
    aesEncrypt(data, key) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            const obj = new EncryptedObject();
            obj.key = yield this.getKeyForEncryption(key);
            obj.iv = yield this.cryptoFunctionService.randomBytes(16);
            obj.data = yield this.cryptoFunctionService.aesEncrypt(data, obj.iv, obj.key.encKey);
            if (obj.key.macKey != null) {
                const macData = new Uint8Array(obj.iv.byteLength + obj.data.byteLength);
                macData.set(new Uint8Array(obj.iv), 0);
                macData.set(new Uint8Array(obj.data), obj.iv.byteLength);
                obj.mac = yield this.cryptoFunctionService.hmac(macData.buffer, obj.key.macKey, 'sha256');
            }
            return obj;
        });
    }
    aesDecryptToUtf8(encType, data, iv, mac, key) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            const keyForEnc = yield this.getKeyForEncryption(key);
            const theKey = this.resolveLegacyKey(encType, keyForEnc);
            if (theKey.macKey != null && mac == null) {
                // tslint:disable-next-line
                console.error('mac required.');
                return null;
            }
            if (theKey.encType !== encType) {
                // tslint:disable-next-line
                console.error('encType unavailable.');
                return null;
            }
            const fastParams = this.cryptoFunctionService.aesDecryptFastParameters(data, iv, mac, theKey);
            if (fastParams.macKey != null && fastParams.mac != null) {
                const computedMac = yield this.cryptoFunctionService.hmacFast(fastParams.macData, fastParams.macKey, 'sha256');
                const macsEqual = yield this.cryptoFunctionService.compareFast(fastParams.mac, computedMac);
                if (!macsEqual) {
                    // tslint:disable-next-line
                    console.error('mac failed.');
                    return null;
                }
            }
            return this.cryptoFunctionService.aesDecryptFast(fastParams);
        });
    }
    aesDecryptToBytes(encType, data, iv, mac, key) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            const keyForEnc = yield this.getKeyForEncryption(key);
            const theKey = this.resolveLegacyKey(encType, keyForEnc);
            if (theKey.macKey != null && mac == null) {
                return null;
            }
            if (theKey.encType !== encType) {
                return null;
            }
            if (theKey.macKey != null && mac != null) {
                const macData = new Uint8Array(iv.byteLength + data.byteLength);
                macData.set(new Uint8Array(iv), 0);
                macData.set(new Uint8Array(data), iv.byteLength);
                const computedMac = yield this.cryptoFunctionService.hmac(macData.buffer, theKey.macKey, 'sha256');
                if (computedMac === null) {
                    return null;
                }
                const macsMatch = yield this.cryptoFunctionService.compare(mac, computedMac);
                if (!macsMatch) {
                    // tslint:disable-next-line
                    console.error('mac failed.');
                    return null;
                }
            }
            return yield this.cryptoFunctionService.aesDecrypt(data, iv, theKey.encKey);
        });
    }
    rsaDecrypt(encValue) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            const headerPieces = encValue.split('.');
            let encType = null;
            let encPieces;
            if (headerPieces.length === 1) {
                encType = encryptionType["a" /* EncryptionType */].Rsa2048_OaepSha256_B64;
                encPieces = [headerPieces[0]];
            }
            else if (headerPieces.length === 2) {
                try {
                    encType = parseInt(headerPieces[0], null);
                    encPieces = headerPieces[1].split('|');
                }
                catch (e) { }
            }
            switch (encType) {
                case encryptionType["a" /* EncryptionType */].Rsa2048_OaepSha256_B64:
                case encryptionType["a" /* EncryptionType */].Rsa2048_OaepSha1_B64:
                // HmacSha256 types are deprecated
                case encryptionType["a" /* EncryptionType */].Rsa2048_OaepSha256_HmacSha256_B64:
                case encryptionType["a" /* EncryptionType */].Rsa2048_OaepSha1_HmacSha256_B64:
                    break;
                default:
                    throw new Error('encType unavailable.');
            }
            if (encPieces == null || encPieces.length <= 0) {
                throw new Error('encPieces unavailable.');
            }
            const data = utils["a" /* Utils */].fromB64ToArray(encPieces[0]).buffer;
            const privateKey = yield this.getPrivateKey();
            if (privateKey == null) {
                throw new Error('No private key.');
            }
            let alg = 'sha1';
            switch (encType) {
                case encryptionType["a" /* EncryptionType */].Rsa2048_OaepSha256_B64:
                case encryptionType["a" /* EncryptionType */].Rsa2048_OaepSha256_HmacSha256_B64:
                    alg = 'sha256';
                    break;
                case encryptionType["a" /* EncryptionType */].Rsa2048_OaepSha1_B64:
                case encryptionType["a" /* EncryptionType */].Rsa2048_OaepSha1_HmacSha256_B64:
                    break;
                default:
                    throw new Error('encType unavailable.');
            }
            return this.cryptoFunctionService.rsaDecrypt(data, privateKey, alg);
        });
    }
    getKeyForEncryption(key) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            if (key != null) {
                return key;
            }
            const encKey = yield this.getEncKey();
            if (encKey != null) {
                return encKey;
            }
            return yield this.getKey();
        });
    }
    resolveLegacyKey(encType, key) {
        if (encType === encryptionType["a" /* EncryptionType */].AesCbc128_HmacSha256_B64 &&
            key.encType === encryptionType["a" /* EncryptionType */].AesCbc256_B64) {
            // Old encrypt-then-mac scheme, make a new key
            if (this.legacyEtmKey == null) {
                this.legacyEtmKey = new symmetricCryptoKey["a" /* SymmetricCryptoKey */](key.key, encryptionType["a" /* EncryptionType */].AesCbc128_HmacSha256_B64);
            }
            return this.legacyEtmKey;
        }
        return key;
    }
    stretchKey(key) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            const newKey = new Uint8Array(64);
            const encKey = yield this.cryptoFunctionService.hkdfExpand(key.key, 'enc', 32, 'sha256');
            const macKey = yield this.cryptoFunctionService.hkdfExpand(key.key, 'mac', 32, 'sha256');
            newKey.set(new Uint8Array(encKey));
            newKey.set(new Uint8Array(macKey), 32);
            return new symmetricCryptoKey["a" /* SymmetricCryptoKey */](newKey.buffer);
        });
    }
    hashPhrase(hash, minimumEntropy = 64) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            const entropyPerWord = Math.log(EEFLongWordList.length) / Math.log(2);
            let numWords = Math.ceil(minimumEntropy / entropyPerWord);
            const hashArr = Array.from(new Uint8Array(hash));
            const entropyAvailable = hashArr.length * 4;
            if (numWords * entropyPerWord > entropyAvailable) {
                throw new Error('Output entropy of hash function is too small');
            }
            const phrase = [];
            let hashNumber = BigInteger["fromArray"](hashArr, 256);
            while (numWords--) {
                const remainder = hashNumber.mod(EEFLongWordList.length);
                hashNumber = hashNumber.divide(EEFLongWordList.length);
                phrase.push(EEFLongWordList[remainder]);
            }
            return phrase;
        });
    }
    buildEncKey(key, encKey) {
        return crypto_service_awaiter(this, void 0, void 0, function* () {
            let encKeyEnc = null;
            if (key.key.byteLength === 32) {
                const newKey = yield this.stretchKey(key);
                encKeyEnc = yield this.encrypt(encKey, newKey);
            }
            else if (key.key.byteLength === 64) {
                encKeyEnc = yield this.encrypt(encKey, key);
            }
            else {
                throw new Error('Invalid key size.');
            }
            return [new symmetricCryptoKey["a" /* SymmetricCryptoKey */](encKey), encKeyEnc];
        });
    }
}
crypto_service_decorate([
    Object(sequentialize["a" /* sequentialize */])(crypto_service_0),
    crypto_service_metadata("design:type", Function),
    crypto_service_metadata("design:paramtypes", [symmetricCryptoKey["a" /* SymmetricCryptoKey */]]),
    crypto_service_metadata("design:returntype", Promise)
], crypto_service_CryptoService.prototype, "getEncKey", null);
crypto_service_decorate([
    Object(sequentialize["a" /* sequentialize */])(ɵ1),
    crypto_service_metadata("design:type", Function),
    crypto_service_metadata("design:paramtypes", []),
    crypto_service_metadata("design:returntype", Promise)
], crypto_service_CryptoService.prototype, "getOrgKeys", null);


// CONCATENATED MODULE: ./jslib/src/models/domain/environmentUrls.ts
class EnvironmentUrls {
}

// CONCATENATED MODULE: ./jslib/src/services/environment.service.ts
var environment_service_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class environment_service_EnvironmentService {
    constructor(apiService, storageService, notificationsService) {
        this.apiService = apiService;
        this.storageService = storageService;
        this.notificationsService = notificationsService;
    }
    getWebVaultUrl() {
        if (this.webVaultUrl != null) {
            return this.webVaultUrl;
        }
        else if (this.baseUrl) {
            return this.baseUrl;
        }
        return null;
    }
    setUrlsFromStorage() {
        return environment_service_awaiter(this, void 0, void 0, function* () {
            const urlsObj = yield this.storageService.get(constants_service["a" /* ConstantsService */].environmentUrlsKey);
            const urls = urlsObj || {
                base: null,
                api: null,
                identity: null,
                icons: null,
                notifications: null,
                events: null,
                webVault: null,
                enterprise: null,
            };
            const envUrls = new EnvironmentUrls();
            if (urls.base) {
                this.baseUrl = envUrls.base = urls.base;
                this.apiService.setUrls(envUrls);
                return;
            }
            this.webVaultUrl = urls.webVault;
            this.apiUrl = envUrls.api = urls.api;
            this.identityUrl = envUrls.identity = urls.identity;
            this.iconsUrl = urls.icons;
            this.notificationsUrl = urls.notifications;
            this.eventsUrl = envUrls.events = urls.events;
            this.enterpriseUrl = urls.enterprise;
            this.apiService.setUrls(envUrls);
        });
    }
    setUrls(urls) {
        return environment_service_awaiter(this, void 0, void 0, function* () {
            urls.base = this.formatUrl(urls.base);
            urls.webVault = this.formatUrl(urls.webVault);
            urls.api = this.formatUrl(urls.api);
            urls.identity = this.formatUrl(urls.identity);
            urls.icons = this.formatUrl(urls.icons);
            urls.notifications = this.formatUrl(urls.notifications);
            urls.events = this.formatUrl(urls.events);
            urls.enterprise = this.formatUrl(urls.enterprise);
            yield this.storageService.save(constants_service["a" /* ConstantsService */].environmentUrlsKey, {
                base: urls.base,
                api: urls.api,
                identity: urls.identity,
                webVault: urls.webVault,
                icons: urls.icons,
                notifications: urls.notifications,
                events: urls.events,
                enterprise: urls.enterprise,
            });
            this.baseUrl = urls.base;
            this.webVaultUrl = urls.webVault;
            this.apiUrl = urls.api;
            this.identityUrl = urls.identity;
            this.iconsUrl = urls.icons;
            this.notificationsUrl = urls.notifications;
            this.eventsUrl = urls.events;
            this.enterpriseUrl = urls.enterprise;
            const envUrls = new EnvironmentUrls();
            if (this.baseUrl) {
                envUrls.base = this.baseUrl;
            }
            else {
                envUrls.api = this.apiUrl;
                envUrls.identity = this.identityUrl;
                envUrls.events = this.eventsUrl;
            }
            this.apiService.setUrls(envUrls);
            if (this.notificationsService != null) {
                this.notificationsService.init(this);
            }
            return urls;
        });
    }
    formatUrl(url) {
        if (url == null || url === '') {
            return null;
        }
        url = url.replace(/\/+$/g, '');
        if (!url.startsWith('http://') && !url.startsWith('https://')) {
            url = 'https://' + url;
        }
        return url.trim();
    }
}

// CONCATENATED MODULE: ./jslib/src/models/data/folderData.ts
class FolderData {
    constructor(response, userId) {
        this.userId = userId;
        this.name = response.name;
        this.id = response.id;
        this.revisionDate = response.revisionDate;
    }
}

// EXTERNAL MODULE: ./jslib/src/models/view/folderView.ts
var folderView = __webpack_require__(100);

// CONCATENATED MODULE: ./jslib/src/models/domain/folder.ts


class folder_Folder extends domainBase["a" /* default */] {
    constructor(obj, alreadyEncrypted = false) {
        super();
        if (obj == null) {
            return;
        }
        this.buildDomainModel(this, obj, {
            id: null,
            name: null,
        }, alreadyEncrypted, ['id']);
        this.revisionDate = obj.revisionDate != null ? new Date(obj.revisionDate) : null;
    }
    decrypt() {
        return this.decryptObj(new folderView["a" /* FolderView */](this), {
            name: null,
        }, null);
    }
}

// CONCATENATED MODULE: ./jslib/src/models/request/folderRequest.ts
class FolderRequest {
    constructor(folder) {
        this.name = folder.name ? folder.name.encryptedString : null;
    }
}

// CONCATENATED MODULE: ./jslib/src/services/folder.service.ts
var folder_service_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};






const folder_service_Keys = {
    foldersPrefix: 'folders_',
    ciphersPrefix: 'ciphers_',
};
const folder_service_NestingDelimiter = '/';
class folder_service_FolderService {
    constructor(cryptoService, userService, apiService, storageService, i18nService, cipherService) {
        this.cryptoService = cryptoService;
        this.userService = userService;
        this.apiService = apiService;
        this.storageService = storageService;
        this.i18nService = i18nService;
        this.cipherService = cipherService;
    }
    clearCache() {
        this.decryptedFolderCache = null;
    }
    encrypt(model, key) {
        return folder_service_awaiter(this, void 0, void 0, function* () {
            const folder = new folder_Folder();
            folder.id = model.id;
            folder.name = yield this.cryptoService.encrypt(model.name, key);
            return folder;
        });
    }
    get(id) {
        return folder_service_awaiter(this, void 0, void 0, function* () {
            const userId = yield this.userService.getUserId();
            const folders = yield this.storageService.get(folder_service_Keys.foldersPrefix + userId);
            if (folders == null || !folders.hasOwnProperty(id)) {
                return null;
            }
            return new folder_Folder(folders[id]);
        });
    }
    getAll() {
        return folder_service_awaiter(this, void 0, void 0, function* () {
            const userId = yield this.userService.getUserId();
            const folders = yield this.storageService.get(folder_service_Keys.foldersPrefix + userId);
            const response = [];
            for (const id in folders) {
                if (folders.hasOwnProperty(id)) {
                    response.push(new folder_Folder(folders[id]));
                }
            }
            return response;
        });
    }
    getAllDecrypted() {
        return folder_service_awaiter(this, void 0, void 0, function* () {
            if (this.decryptedFolderCache != null) {
                return this.decryptedFolderCache;
            }
            const hasKey = yield this.cryptoService.hasKey();
            if (!hasKey) {
                throw new Error('No key.');
            }
            const decFolders = [];
            const promises = [];
            const folders = yield this.getAll();
            folders.forEach((folder) => {
                promises.push(folder.decrypt().then((f) => decFolders.push(f)));
            });
            yield Promise.all(promises);
            decFolders.sort(utils["a" /* Utils */].getSortFunction(this.i18nService, 'name'));
            const noneFolder = new folderView["a" /* FolderView */]();
            noneFolder.name = this.i18nService.t('noneFolder');
            decFolders.push(noneFolder);
            this.decryptedFolderCache = decFolders;
            return this.decryptedFolderCache;
        });
    }
    getAllNested() {
        return folder_service_awaiter(this, void 0, void 0, function* () {
            const folders = yield this.getAllDecrypted();
            const nodes = [];
            folders.forEach((f) => {
                const folderCopy = new folderView["a" /* FolderView */]();
                folderCopy.id = f.id;
                folderCopy.revisionDate = f.revisionDate;
                const parts = f.name != null ? f.name.replace(/^\/+|\/+$/g, '').split(folder_service_NestingDelimiter) : [];
                serviceUtils_ServiceUtils.nestedTraverse(nodes, 0, parts, folderCopy, null, folder_service_NestingDelimiter);
            });
            return nodes;
        });
    }
    getNested(id) {
        return folder_service_awaiter(this, void 0, void 0, function* () {
            const folders = yield this.getAllNested();
            return serviceUtils_ServiceUtils.getTreeNodeObject(folders, id);
        });
    }
    saveWithServer(folder) {
        return folder_service_awaiter(this, void 0, void 0, function* () {
            const request = new FolderRequest(folder);
            let response;
            if (folder.id == null) {
                response = yield this.apiService.postFolder(request);
                folder.id = response.id;
            }
            else {
                response = yield this.apiService.putFolder(folder.id, request);
            }
            const userId = yield this.userService.getUserId();
            const data = new FolderData(response, userId);
            yield this.upsert(data);
        });
    }
    upsert(folder) {
        return folder_service_awaiter(this, void 0, void 0, function* () {
            const userId = yield this.userService.getUserId();
            let folders = yield this.storageService.get(folder_service_Keys.foldersPrefix + userId);
            if (folders == null) {
                folders = {};
            }
            if (folder instanceof FolderData) {
                const f = folder;
                folders[f.id] = f;
            }
            else {
                folder.forEach((f) => {
                    folders[f.id] = f;
                });
            }
            yield this.storageService.save(folder_service_Keys.foldersPrefix + userId, folders);
            this.decryptedFolderCache = null;
        });
    }
    replace(folders) {
        return folder_service_awaiter(this, void 0, void 0, function* () {
            const userId = yield this.userService.getUserId();
            yield this.storageService.save(folder_service_Keys.foldersPrefix + userId, folders);
            this.decryptedFolderCache = null;
        });
    }
    clear(userId) {
        return folder_service_awaiter(this, void 0, void 0, function* () {
            yield this.storageService.remove(folder_service_Keys.foldersPrefix + userId);
            this.decryptedFolderCache = null;
        });
    }
    delete(id) {
        return folder_service_awaiter(this, void 0, void 0, function* () {
            const userId = yield this.userService.getUserId();
            const folders = yield this.storageService.get(folder_service_Keys.foldersPrefix + userId);
            if (folders == null) {
                return;
            }
            if (typeof id === 'string') {
                if (folders[id] == null) {
                    return;
                }
                delete folders[id];
            }
            else {
                id.forEach((i) => {
                    delete folders[i];
                });
            }
            yield this.storageService.save(folder_service_Keys.foldersPrefix + userId, folders);
            this.decryptedFolderCache = null;
            // Items in a deleted folder are re-assigned to "No Folder"
            const ciphers = yield this.storageService.get(folder_service_Keys.ciphersPrefix + userId);
            if (ciphers != null) {
                const updates = [];
                for (const cId in ciphers) {
                    if (ciphers[cId].folderId === id) {
                        ciphers[cId].folderId = null;
                        updates.push(ciphers[cId]);
                    }
                }
                if (updates.length > 0) {
                    this.cipherService.upsert(updates);
                }
            }
        });
    }
    deleteWithServer(id) {
        return folder_service_awaiter(this, void 0, void 0, function* () {
            yield this.apiService.deleteFolder(id);
            yield this.delete(id);
        });
    }
}

// CONCATENATED MODULE: ./jslib/src/services/i18n.service.ts
var i18n_service_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class i18n_service_I18nService {
    constructor(systemLanguage, localesDirectory, getLocalesJson) {
        this.systemLanguage = systemLanguage;
        this.localesDirectory = localesDirectory;
        this.getLocalesJson = getLocalesJson;
        // First locale is the default (English)
        this.supportedTranslationLocales = ['en'];
        this.localeNames = new Map([
            ['af', 'Afrikaans'],
            ['be', 'Беларуская'],
            ['bg', 'български'],
            ['ca', 'català'],
            ['cs', 'čeština'],
            ['da', 'dansk'],
            ['de', 'Deutsch'],
            ['el', 'Ελληνικά'],
            ['en', 'English'],
            ['en-GB', 'English (British)'],
            ['eo', 'Esperanto'],
            ['es', 'español'],
            ['et', 'eesti'],
            ['fa', 'فارسی'],
            ['fi', 'suomi'],
            ['fr', 'français'],
            ['he', 'עברית'],
            ['hi', 'हिन्दी'],
            ['hr', 'hrvatski'],
            ['hu', 'magyar'],
            ['id', 'Bahasa Indonesia'],
            ['it', 'italiano'],
            ['ja', '日本語'],
            ['ko', '한국어'],
            ['lv', 'Latvietis'],
            ['ml', 'മലയാളം'],
            ['nb', 'norsk (bokmål)'],
            ['nl', 'Nederlands'],
            ['pl', 'polski'],
            ['pt-BR', 'português do Brasil'],
            ['pt-PT', 'português'],
            ['ro', 'română'],
            ['ru', 'русский'],
            ['sk', 'slovenčina'],
            ['sr', 'Српски'],
            ['sv', 'svenska'],
            ['th', 'ไทย'],
            ['tr', 'Türkçe'],
            ['uk', 'українська'],
            ['vi', 'Tiếng Việt'],
            ['zh-CN', '中文（中国大陆）'],
            ['zh-TW', '中文（台灣）'],
        ]);
        this.defaultMessages = {};
        this.localeMessages = {};
        this.systemLanguage = systemLanguage.replace('_', '-');
    }
    init(locale) {
        return i18n_service_awaiter(this, void 0, void 0, function* () {
            if (this.inited) {
                throw new Error('i18n already initialized.');
            }
            if (this.supportedTranslationLocales == null || this.supportedTranslationLocales.length === 0) {
                throw new Error('supportedTranslationLocales not set.');
            }
            this.inited = true;
            this.locale = this.translationLocale = locale != null ? locale : this.systemLanguage;
            try {
                this.collator = new Intl.Collator(this.locale, { numeric: true, sensitivity: 'base' });
            }
            catch (_a) {
                this.collator = null;
            }
            if (this.supportedTranslationLocales.indexOf(this.translationLocale) === -1) {
                this.translationLocale = this.translationLocale.slice(0, 2);
                if (this.supportedTranslationLocales.indexOf(this.translationLocale) === -1) {
                    this.translationLocale = this.supportedTranslationLocales[0];
                }
            }
            if (this.localesDirectory != null) {
                yield this.loadMessages(this.translationLocale, this.localeMessages);
                if (this.translationLocale !== this.supportedTranslationLocales[0]) {
                    yield this.loadMessages(this.supportedTranslationLocales[0], this.defaultMessages);
                }
            }
        });
    }
    t(id, p1, p2, p3) {
        return this.translate(id, p1, p2, p3);
    }
    translate(id, p1, p2, p3) {
        let result;
        if (this.localeMessages.hasOwnProperty(id) && this.localeMessages[id]) {
            result = this.localeMessages[id];
        }
        else if (this.defaultMessages.hasOwnProperty(id) && this.defaultMessages[id]) {
            result = this.defaultMessages[id];
        }
        else {
            result = '';
        }
        if (result !== '') {
            if (p1 != null) {
                result = result.split('__$1__').join(p1);
            }
            if (p2 != null) {
                result = result.split('__$2__').join(p2);
            }
            if (p3 != null) {
                result = result.split('__$3__').join(p3);
            }
        }
        return result;
    }
    loadMessages(locale, messagesObj) {
        return i18n_service_awaiter(this, void 0, void 0, function* () {
            const formattedLocale = locale.replace('-', '_');
            const locales = yield this.getLocalesJson(formattedLocale);
            for (const prop in locales) {
                if (!locales.hasOwnProperty(prop)) {
                    continue;
                }
                messagesObj[prop] = locales[prop].message;
                if (locales[prop].placeholders) {
                    for (const placeProp in locales[prop].placeholders) {
                        if (!locales[prop].placeholders.hasOwnProperty(placeProp) ||
                            !locales[prop].placeholders[placeProp].content) {
                            continue;
                        }
                        const replaceToken = '\\$' + placeProp.toUpperCase() + '\\$';
                        let replaceContent = locales[prop].placeholders[placeProp].content;
                        if (replaceContent === '$1' || replaceContent === '$2' || replaceContent === '$3') {
                            replaceContent = '__$' + replaceContent + '__';
                        }
                        messagesObj[prop] = messagesObj[prop].replace(new RegExp(replaceToken, 'g'), replaceContent);
                    }
                }
            }
        });
    }
}

// EXTERNAL MODULE: ./node_modules/zxcvbn/lib/main.js
var main = __webpack_require__(434);

// CONCATENATED MODULE: ./jslib/src/models/domain/generatedPasswordHistory.ts
class GeneratedPasswordHistory {
    constructor(password, date) {
        this.password = password;
        this.date = date;
    }
}

// CONCATENATED MODULE: ./jslib/src/models/domain/passwordGeneratorPolicyOptions.ts

class passwordGeneratorPolicyOptions_PasswordGeneratorPolicyOptions extends domainBase["a" /* default */] {
    constructor() {
        super(...arguments);
        this.defaultType = '';
        this.minLength = 0;
        this.useUppercase = false;
        this.useLowercase = false;
        this.useNumbers = false;
        this.numberCount = 0;
        this.useSpecial = false;
        this.specialCount = 0;
        this.minNumberWords = 0;
        this.capitalize = false;
        this.includeNumber = false;
    }
    inEffect() {
        return this.defaultType !== '' ||
            this.minLength > 0 ||
            this.numberCount > 0 ||
            this.specialCount > 0 ||
            this.useUppercase ||
            this.useLowercase ||
            this.useNumbers ||
            this.useSpecial ||
            this.minNumberWords > 0 ||
            this.capitalize ||
            this.includeNumber;
    }
}

// CONCATENATED MODULE: ./jslib/src/enums/policyType.ts
var PolicyType;
(function (PolicyType) {
    PolicyType[PolicyType["TwoFactorAuthentication"] = 0] = "TwoFactorAuthentication";
    PolicyType[PolicyType["MasterPassword"] = 1] = "MasterPassword";
    PolicyType[PolicyType["PasswordGenerator"] = 2] = "PasswordGenerator";
    PolicyType[PolicyType["SingleOrg"] = 3] = "SingleOrg";
    PolicyType[PolicyType["RequireSso"] = 4] = "RequireSso";
})(PolicyType || (PolicyType = {}));

// CONCATENATED MODULE: ./jslib/src/services/passwordGeneration.service.ts
var passwordGeneration_service_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};






const DefaultOptions = {
    length: 14,
    ambiguous: false,
    number: true,
    minNumber: 1,
    uppercase: true,
    minUppercase: 0,
    lowercase: true,
    minLowercase: 0,
    special: false,
    minSpecial: 1,
    type: 'password',
    numWords: 3,
    wordSeparator: '-',
    capitalize: false,
    includeNumber: false,
};
const passwordGeneration_service_Keys = {
    options: 'passwordGenerationOptions',
    history: 'generatedPasswordHistory',
};
const MaxPasswordsInHistory = 100;
class passwordGeneration_service_PasswordGenerationService {
    constructor(cryptoService, storageService, policyService) {
        this.cryptoService = cryptoService;
        this.storageService = storageService;
        this.policyService = policyService;
    }
    generatePassword(options) {
        return passwordGeneration_service_awaiter(this, void 0, void 0, function* () {
            // overload defaults with given options
            const o = Object.assign({}, DefaultOptions, options);
            if (o.type === 'passphrase') {
                return this.generatePassphrase(options);
            }
            // sanitize
            this.sanitizePasswordLength(o, true);
            const minLength = o.minUppercase + o.minLowercase + o.minNumber + o.minSpecial;
            if (o.length < minLength) {
                o.length = minLength;
            }
            const positions = [];
            if (o.lowercase && o.minLowercase > 0) {
                for (let i = 0; i < o.minLowercase; i++) {
                    positions.push('l');
                }
            }
            if (o.uppercase && o.minUppercase > 0) {
                for (let i = 0; i < o.minUppercase; i++) {
                    positions.push('u');
                }
            }
            if (o.number && o.minNumber > 0) {
                for (let i = 0; i < o.minNumber; i++) {
                    positions.push('n');
                }
            }
            if (o.special && o.minSpecial > 0) {
                for (let i = 0; i < o.minSpecial; i++) {
                    positions.push('s');
                }
            }
            while (positions.length < o.length) {
                positions.push('a');
            }
            // shuffle
            yield this.shuffleArray(positions);
            // build out the char sets
            let allCharSet = '';
            let lowercaseCharSet = 'abcdefghijkmnopqrstuvwxyz';
            if (o.ambiguous) {
                lowercaseCharSet += 'l';
            }
            if (o.lowercase) {
                allCharSet += lowercaseCharSet;
            }
            let uppercaseCharSet = 'ABCDEFGHJKLMNPQRSTUVWXYZ';
            if (o.ambiguous) {
                uppercaseCharSet += 'IO';
            }
            if (o.uppercase) {
                allCharSet += uppercaseCharSet;
            }
            let numberCharSet = '23456789';
            if (o.ambiguous) {
                numberCharSet += '01';
            }
            if (o.number) {
                allCharSet += numberCharSet;
            }
            const specialCharSet = '!@#$%^&*';
            if (o.special) {
                allCharSet += specialCharSet;
            }
            let password = '';
            for (let i = 0; i < o.length; i++) {
                let positionChars;
                switch (positions[i]) {
                    case 'l':
                        positionChars = lowercaseCharSet;
                        break;
                    case 'u':
                        positionChars = uppercaseCharSet;
                        break;
                    case 'n':
                        positionChars = numberCharSet;
                        break;
                    case 's':
                        positionChars = specialCharSet;
                        break;
                    case 'a':
                        positionChars = allCharSet;
                        break;
                    default:
                        break;
                }
                const randomCharIndex = yield this.cryptoService.randomNumber(0, positionChars.length - 1);
                password += positionChars.charAt(randomCharIndex);
            }
            return password;
        });
    }
    generatePassphrase(options) {
        return passwordGeneration_service_awaiter(this, void 0, void 0, function* () {
            const o = Object.assign({}, DefaultOptions, options);
            if (o.numWords == null || o.numWords <= 2) {
                o.numWords = DefaultOptions.numWords;
            }
            if (o.wordSeparator == null || o.wordSeparator.length === 0 || o.wordSeparator.length > 1) {
                o.wordSeparator = ' ';
            }
            if (o.capitalize == null) {
                o.capitalize = false;
            }
            if (o.includeNumber == null) {
                o.includeNumber = false;
            }
            const listLength = EEFLongWordList.length - 1;
            const wordList = new Array(o.numWords);
            for (let i = 0; i < o.numWords; i++) {
                const wordIndex = yield this.cryptoService.randomNumber(0, listLength);
                if (o.capitalize) {
                    wordList[i] = this.capitalize(EEFLongWordList[wordIndex]);
                }
                else {
                    wordList[i] = EEFLongWordList[wordIndex];
                }
            }
            if (o.includeNumber) {
                yield this.appendRandomNumberToRandomWord(wordList);
            }
            return wordList.join(o.wordSeparator);
        });
    }
    getOptions() {
        return passwordGeneration_service_awaiter(this, void 0, void 0, function* () {
            if (this.optionsCache == null) {
                const options = yield this.storageService.get(passwordGeneration_service_Keys.options);
                if (options == null) {
                    this.optionsCache = DefaultOptions;
                }
                else {
                    this.optionsCache = Object.assign({}, DefaultOptions, options);
                }
            }
            const enforcedOptions = yield this.enforcePasswordGeneratorPoliciesOnOptions(this.optionsCache);
            this.optionsCache = enforcedOptions[0];
            return [this.optionsCache, enforcedOptions[1]];
        });
    }
    enforcePasswordGeneratorPoliciesOnOptions(options) {
        return passwordGeneration_service_awaiter(this, void 0, void 0, function* () {
            let enforcedPolicyOptions = yield this.getPasswordGeneratorPolicyOptions();
            if (enforcedPolicyOptions != null) {
                if (options.length < enforcedPolicyOptions.minLength) {
                    options.length = enforcedPolicyOptions.minLength;
                }
                if (enforcedPolicyOptions.useUppercase) {
                    options.uppercase = true;
                }
                if (enforcedPolicyOptions.useLowercase) {
                    options.lowercase = true;
                }
                if (enforcedPolicyOptions.useNumbers) {
                    options.number = true;
                }
                if (options.minNumber < enforcedPolicyOptions.numberCount) {
                    options.minNumber = enforcedPolicyOptions.numberCount;
                }
                if (enforcedPolicyOptions.useSpecial) {
                    options.special = true;
                }
                if (options.minSpecial < enforcedPolicyOptions.specialCount) {
                    options.minSpecial = enforcedPolicyOptions.specialCount;
                }
                // Must normalize these fields because the receiving call expects all options to pass the current rules
                if (options.minSpecial + options.minNumber > options.length) {
                    options.minSpecial = options.length - options.minNumber;
                }
                if (options.numWords < enforcedPolicyOptions.minNumberWords) {
                    options.numWords = enforcedPolicyOptions.minNumberWords;
                }
                if (enforcedPolicyOptions.capitalize) {
                    options.capitalize = true;
                }
                if (enforcedPolicyOptions.includeNumber) {
                    options.includeNumber = true;
                }
                // Force default type if password/passphrase selected via policy
                if (enforcedPolicyOptions.defaultType === 'password' ||
                    enforcedPolicyOptions.defaultType === 'passphrase') {
                    options.type = enforcedPolicyOptions.defaultType;
                }
            }
            else { // UI layer expects an instantiated object to prevent more explicit null checks
                enforcedPolicyOptions = new passwordGeneratorPolicyOptions_PasswordGeneratorPolicyOptions();
            }
            return [options, enforcedPolicyOptions];
        });
    }
    getPasswordGeneratorPolicyOptions() {
        return passwordGeneration_service_awaiter(this, void 0, void 0, function* () {
            const policies = this.policyService == null ? null :
                yield this.policyService.getAll(PolicyType.PasswordGenerator);
            let enforcedOptions = null;
            if (policies == null || policies.length === 0) {
                return enforcedOptions;
            }
            policies.forEach((currentPolicy) => {
                if (!currentPolicy.enabled || currentPolicy.data == null) {
                    return;
                }
                if (enforcedOptions == null) {
                    enforcedOptions = new passwordGeneratorPolicyOptions_PasswordGeneratorPolicyOptions();
                }
                // Password wins in multi-org collisions
                if (currentPolicy.data.defaultType != null && enforcedOptions.defaultType !== 'password') {
                    enforcedOptions.defaultType = currentPolicy.data.defaultType;
                }
                if (currentPolicy.data.minLength != null
                    && currentPolicy.data.minLength > enforcedOptions.minLength) {
                    enforcedOptions.minLength = currentPolicy.data.minLength;
                }
                if (currentPolicy.data.useUpper) {
                    enforcedOptions.useUppercase = true;
                }
                if (currentPolicy.data.useLower) {
                    enforcedOptions.useLowercase = true;
                }
                if (currentPolicy.data.useNumbers) {
                    enforcedOptions.useNumbers = true;
                }
                if (currentPolicy.data.minNumbers != null
                    && currentPolicy.data.minNumbers > enforcedOptions.numberCount) {
                    enforcedOptions.numberCount = currentPolicy.data.minNumbers;
                }
                if (currentPolicy.data.useSpecial) {
                    enforcedOptions.useSpecial = true;
                }
                if (currentPolicy.data.minSpecial != null
                    && currentPolicy.data.minSpecial > enforcedOptions.specialCount) {
                    enforcedOptions.specialCount = currentPolicy.data.minSpecial;
                }
                if (currentPolicy.data.minNumberWords != null
                    && currentPolicy.data.minNumberWords > enforcedOptions.minNumberWords) {
                    enforcedOptions.minNumberWords = currentPolicy.data.minNumberWords;
                }
                if (currentPolicy.data.capitalize) {
                    enforcedOptions.capitalize = true;
                }
                if (currentPolicy.data.includeNumber) {
                    enforcedOptions.includeNumber = true;
                }
            });
            return enforcedOptions;
        });
    }
    saveOptions(options) {
        return passwordGeneration_service_awaiter(this, void 0, void 0, function* () {
            yield this.storageService.save(passwordGeneration_service_Keys.options, options);
            this.optionsCache = options;
        });
    }
    getHistory() {
        return passwordGeneration_service_awaiter(this, void 0, void 0, function* () {
            const hasKey = yield this.cryptoService.hasKey();
            if (!hasKey) {
                return new Array();
            }
            if (!this.history) {
                const encrypted = yield this.storageService.get(passwordGeneration_service_Keys.history);
                this.history = yield this.decryptHistory(encrypted);
            }
            return this.history || new Array();
        });
    }
    addHistory(password) {
        return passwordGeneration_service_awaiter(this, void 0, void 0, function* () {
            // Cannot add new history if no key is available
            const hasKey = yield this.cryptoService.hasKey();
            if (!hasKey) {
                return;
            }
            const currentHistory = yield this.getHistory();
            // Prevent duplicates
            if (this.matchesPrevious(password, currentHistory)) {
                return;
            }
            currentHistory.unshift(new GeneratedPasswordHistory(password, Date.now()));
            // Remove old items.
            if (currentHistory.length > MaxPasswordsInHistory) {
                currentHistory.pop();
            }
            const newHistory = yield this.encryptHistory(currentHistory);
            return yield this.storageService.save(passwordGeneration_service_Keys.history, newHistory);
        });
    }
    clear() {
        return passwordGeneration_service_awaiter(this, void 0, void 0, function* () {
            this.history = [];
            return yield this.storageService.remove(passwordGeneration_service_Keys.history);
        });
    }
    passwordStrength(password, userInputs = null) {
        if (password == null || password.length === 0) {
            return null;
        }
        let globalUserInputs = ['bitwarden', 'bit', 'warden'];
        if (userInputs != null && userInputs.length > 0) {
            globalUserInputs = globalUserInputs.concat(userInputs);
        }
        // Use a hash set to get rid of any duplicate user inputs
        const finalUserInputs = Array.from(new Set(globalUserInputs));
        const result = main(password, finalUserInputs);
        return result;
    }
    normalizeOptions(options, enforcedPolicyOptions) {
        options.minLowercase = 0;
        options.minUppercase = 0;
        if (!options.length || options.length < 5) {
            options.length = 5;
        }
        else if (options.length > 128) {
            options.length = 128;
        }
        if (options.length < enforcedPolicyOptions.minLength) {
            options.length = enforcedPolicyOptions.minLength;
        }
        if (!options.minNumber) {
            options.minNumber = 0;
        }
        else if (options.minNumber > options.length) {
            options.minNumber = options.length;
        }
        else if (options.minNumber > 9) {
            options.minNumber = 9;
        }
        if (options.minNumber < enforcedPolicyOptions.numberCount) {
            options.minNumber = enforcedPolicyOptions.numberCount;
        }
        if (!options.minSpecial) {
            options.minSpecial = 0;
        }
        else if (options.minSpecial > options.length) {
            options.minSpecial = options.length;
        }
        else if (options.minSpecial > 9) {
            options.minSpecial = 9;
        }
        if (options.minSpecial < enforcedPolicyOptions.specialCount) {
            options.minSpecial = enforcedPolicyOptions.specialCount;
        }
        if (options.minSpecial + options.minNumber > options.length) {
            options.minSpecial = options.length - options.minNumber;
        }
        if (options.numWords == null || options.length < 3) {
            options.numWords = 3;
        }
        else if (options.numWords > 20) {
            options.numWords = 20;
        }
        if (options.numWords < enforcedPolicyOptions.minNumberWords) {
            options.numWords = enforcedPolicyOptions.minNumberWords;
        }
        if (options.wordSeparator != null && options.wordSeparator.length > 1) {
            options.wordSeparator = options.wordSeparator[0];
        }
        this.sanitizePasswordLength(options, false);
    }
    capitalize(str) {
        return str.charAt(0).toUpperCase() + str.slice(1);
    }
    appendRandomNumberToRandomWord(wordList) {
        return passwordGeneration_service_awaiter(this, void 0, void 0, function* () {
            if (wordList == null || wordList.length <= 0) {
                return;
            }
            const index = yield this.cryptoService.randomNumber(0, wordList.length - 1);
            const num = yield this.cryptoService.randomNumber(0, 9);
            wordList[index] = wordList[index] + num;
        });
    }
    encryptHistory(history) {
        return passwordGeneration_service_awaiter(this, void 0, void 0, function* () {
            if (history == null || history.length === 0) {
                return Promise.resolve([]);
            }
            const promises = history.map((item) => passwordGeneration_service_awaiter(this, void 0, void 0, function* () {
                const encrypted = yield this.cryptoService.encrypt(item.password);
                return new GeneratedPasswordHistory(encrypted.encryptedString, item.date);
            }));
            return yield Promise.all(promises);
        });
    }
    decryptHistory(history) {
        return passwordGeneration_service_awaiter(this, void 0, void 0, function* () {
            if (history == null || history.length === 0) {
                return Promise.resolve([]);
            }
            const promises = history.map((item) => passwordGeneration_service_awaiter(this, void 0, void 0, function* () {
                const decrypted = yield this.cryptoService.decryptToUtf8(new domain_cipherString["a" /* CipherString */](item.password));
                return new GeneratedPasswordHistory(decrypted, item.date);
            }));
            return yield Promise.all(promises);
        });
    }
    matchesPrevious(password, history) {
        if (history == null || history.length === 0) {
            return false;
        }
        return history[history.length - 1].password === password;
    }
    // ref: https://stackoverflow.com/a/12646864/1090359
    shuffleArray(array) {
        return passwordGeneration_service_awaiter(this, void 0, void 0, function* () {
            for (let i = array.length - 1; i > 0; i--) {
                const j = yield this.cryptoService.randomNumber(0, i);
                [array[i], array[j]] = [array[j], array[i]];
            }
        });
    }
    sanitizePasswordLength(options, forGeneration) {
        let minUppercaseCalc = 0;
        let minLowercaseCalc = 0;
        let minNumberCalc = options.minNumber;
        let minSpecialCalc = options.minSpecial;
        if (options.uppercase && options.minUppercase <= 0) {
            minUppercaseCalc = 1;
        }
        else if (!options.uppercase) {
            minUppercaseCalc = 0;
        }
        if (options.lowercase && options.minLowercase <= 0) {
            minLowercaseCalc = 1;
        }
        else if (!options.lowercase) {
            minLowercaseCalc = 0;
        }
        if (options.number && options.minNumber <= 0) {
            minNumberCalc = 1;
        }
        else if (!options.number) {
            minNumberCalc = 0;
        }
        if (options.special && options.minSpecial <= 0) {
            minSpecialCalc = 1;
        }
        else if (!options.special) {
            minSpecialCalc = 0;
        }
        // This should never happen but is a final safety net
        if (!options.length || options.length < 1) {
            options.length = 10;
        }
        const minLength = minUppercaseCalc + minLowercaseCalc + minNumberCalc + minSpecialCalc;
        // Normalize and Generation both require this modification
        if (options.length < minLength) {
            options.length = minLength;
        }
        // Apply other changes if the options object passed in is for generation
        if (forGeneration) {
            options.minUppercase = minUppercaseCalc;
            options.minLowercase = minLowercaseCalc;
            options.minNumber = minNumberCalc;
            options.minSpecial = minSpecialCalc;
        }
    }
}

// CONCATENATED MODULE: ./jslib/src/services/settings.service.ts
var settings_service_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const settings_service_Keys = {
    settingsPrefix: 'settings_',
    equivalentDomains: 'equivalentDomains',
};
class SettingsService {
    constructor(userService, storageService) {
        this.userService = userService;
        this.storageService = storageService;
    }
    clearCache() {
        this.settingsCache = null;
    }
    getEquivalentDomains() {
        return this.getSettingsKey(settings_service_Keys.equivalentDomains);
    }
    setEquivalentDomains(equivalentDomains) {
        return settings_service_awaiter(this, void 0, void 0, function* () {
            yield this.setSettingsKey(settings_service_Keys.equivalentDomains, equivalentDomains);
        });
    }
    clear(userId) {
        return settings_service_awaiter(this, void 0, void 0, function* () {
            yield this.storageService.remove(settings_service_Keys.settingsPrefix + userId);
            this.clearCache();
        });
    }
    // Helpers
    getSettings() {
        return settings_service_awaiter(this, void 0, void 0, function* () {
            if (this.settingsCache == null) {
                const userId = yield this.userService.getUserId();
                this.settingsCache = this.storageService.get(settings_service_Keys.settingsPrefix + userId);
            }
            return this.settingsCache;
        });
    }
    getSettingsKey(key) {
        return settings_service_awaiter(this, void 0, void 0, function* () {
            const settings = yield this.getSettings();
            if (settings != null && settings[key]) {
                return settings[key];
            }
            return null;
        });
    }
    setSettingsKey(key, value) {
        return settings_service_awaiter(this, void 0, void 0, function* () {
            const userId = yield this.userService.getUserId();
            let settings = yield this.getSettings();
            if (!settings) {
                settings = {};
            }
            settings[key] = value;
            yield this.storageService.save(settings_service_Keys.settingsPrefix + userId, settings);
            this.settingsCache = settings;
        });
    }
}

// EXTERNAL MODULE: ./jslib/src/services/state.service.ts
var state_service = __webpack_require__(185);

// EXTERNAL MODULE: ./jslib/src/models/data/cipherData.ts
var cipherData = __webpack_require__(76);

// CONCATENATED MODULE: ./jslib/src/models/data/organizationData.ts
class OrganizationData {
    constructor(response) {
        this.id = response.id;
        this.name = response.name;
        this.status = response.status;
        this.type = response.type;
        this.enabled = response.enabled;
        this.usePolicies = response.usePolicies;
        this.useGroups = response.useGroups;
        this.useDirectory = response.useDirectory;
        this.useEvents = response.useEvents;
        this.useTotp = response.useTotp;
        this.use2fa = response.use2fa;
        this.useApi = response.useApi;
        this.useBusinessPortal = response.useBusinessPortal;
        this.useSso = response.useSso;
        this.selfHost = response.selfHost;
        this.usersGetPremium = response.usersGetPremium;
        this.seats = response.seats;
        this.maxCollections = response.maxCollections;
        this.maxStorageGb = response.maxStorageGb;
        this.ssoBound = response.ssoBound;
        this.identifier = response.identifier;
    }
}

// CONCATENATED MODULE: ./jslib/src/models/data/policyData.ts
class PolicyData {
    constructor(response) {
        this.id = response.id;
        this.organizationId = response.organizationId;
        this.type = response.type;
        this.data = response.data;
        this.enabled = response.enabled;
    }
}

// EXTERNAL MODULE: ./jslib/src/models/data/sendData.ts
var sendData = __webpack_require__(152);

// CONCATENATED MODULE: ./jslib/src/services/sync.service.ts
var sync_service_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};






const sync_service_Keys = {
    lastSyncPrefix: 'lastSync_',
};
class sync_service_SyncService {
    constructor(userService, apiService, settingsService, folderService, cipherService, cryptoService, collectionService, storageService, messagingService, policyService, sendService, logoutCallback) {
        this.userService = userService;
        this.apiService = apiService;
        this.settingsService = settingsService;
        this.folderService = folderService;
        this.cipherService = cipherService;
        this.cryptoService = cryptoService;
        this.collectionService = collectionService;
        this.storageService = storageService;
        this.messagingService = messagingService;
        this.policyService = policyService;
        this.sendService = sendService;
        this.logoutCallback = logoutCallback;
        this.syncInProgress = false;
    }
    getLastSync() {
        return sync_service_awaiter(this, void 0, void 0, function* () {
            const userId = yield this.userService.getUserId();
            if (userId == null) {
                return null;
            }
            const lastSync = yield this.storageService.get(sync_service_Keys.lastSyncPrefix + userId);
            if (lastSync) {
                return new Date(lastSync);
            }
            return null;
        });
    }
    setLastSync(date) {
        return sync_service_awaiter(this, void 0, void 0, function* () {
            const userId = yield this.userService.getUserId();
            if (userId == null) {
                return;
            }
            yield this.storageService.save(sync_service_Keys.lastSyncPrefix + userId, date.toJSON());
        });
    }
    fullSync(forceSync, allowThrowOnError = false) {
        return sync_service_awaiter(this, void 0, void 0, function* () {
            this.syncStarted();
            const isAuthenticated = yield this.userService.isAuthenticated();
            if (!isAuthenticated) {
                return this.syncCompleted(false);
            }
            const now = new Date();
            let needsSync = false;
            try {
                needsSync = yield this.needsSyncing(forceSync);
            }
            catch (e) {
                if (allowThrowOnError) {
                    throw e;
                }
            }
            if (!needsSync) {
                yield this.setLastSync(now);
                return this.syncCompleted(false);
            }
            const userId = yield this.userService.getUserId();
            try {
                const response = yield this.apiService.getSync();
                yield this.syncProfile(response.profile);
                yield this.syncFolders(userId, response.folders);
                yield this.syncCollections(response.collections);
                yield this.syncCiphers(userId, response.ciphers);
                yield this.syncSends(userId, response.sends);
                yield this.syncSettings(userId, response.domains);
                yield this.syncPolicies(response.policies);
                yield this.setLastSync(now);
                return this.syncCompleted(true);
            }
            catch (e) {
                if (allowThrowOnError) {
                    throw e;
                }
                else {
                    return this.syncCompleted(false);
                }
            }
        });
    }
    syncUpsertFolder(notification, isEdit) {
        return sync_service_awaiter(this, void 0, void 0, function* () {
            this.syncStarted();
            if (yield this.userService.isAuthenticated()) {
                try {
                    const localFolder = yield this.folderService.get(notification.id);
                    if ((!isEdit && localFolder == null) ||
                        (isEdit && localFolder != null && localFolder.revisionDate < notification.revisionDate)) {
                        const remoteFolder = yield this.apiService.getFolder(notification.id);
                        if (remoteFolder != null) {
                            const userId = yield this.userService.getUserId();
                            yield this.folderService.upsert(new FolderData(remoteFolder, userId));
                            this.messagingService.send('syncedUpsertedFolder', { folderId: notification.id });
                            return this.syncCompleted(true);
                        }
                    }
                }
                catch (_a) { }
            }
            return this.syncCompleted(false);
        });
    }
    syncDeleteFolder(notification) {
        return sync_service_awaiter(this, void 0, void 0, function* () {
            this.syncStarted();
            if (yield this.userService.isAuthenticated()) {
                yield this.folderService.delete(notification.id);
                this.messagingService.send('syncedDeletedFolder', { folderId: notification.id });
                this.syncCompleted(true);
                return true;
            }
            return this.syncCompleted(false);
        });
    }
    syncUpsertCipher(notification, isEdit) {
        return sync_service_awaiter(this, void 0, void 0, function* () {
            this.syncStarted();
            if (yield this.userService.isAuthenticated()) {
                try {
                    let shouldUpdate = true;
                    const localCipher = yield this.cipherService.get(notification.id);
                    if (localCipher != null && localCipher.revisionDate >= notification.revisionDate) {
                        shouldUpdate = false;
                    }
                    let checkCollections = false;
                    if (shouldUpdate) {
                        if (isEdit) {
                            shouldUpdate = localCipher != null;
                            checkCollections = true;
                        }
                        else {
                            if (notification.collectionIds == null || notification.organizationId == null) {
                                shouldUpdate = localCipher == null;
                            }
                            else {
                                shouldUpdate = false;
                                checkCollections = true;
                            }
                        }
                    }
                    if (!shouldUpdate && checkCollections && notification.organizationId != null &&
                        notification.collectionIds != null && notification.collectionIds.length > 0) {
                        const collections = yield this.collectionService.getAll();
                        if (collections != null) {
                            for (let i = 0; i < collections.length; i++) {
                                if (notification.collectionIds.indexOf(collections[i].id) > -1) {
                                    shouldUpdate = true;
                                    break;
                                }
                            }
                        }
                    }
                    if (shouldUpdate) {
                        const remoteCipher = yield this.apiService.getCipher(notification.id);
                        if (remoteCipher != null) {
                            const userId = yield this.userService.getUserId();
                            yield this.cipherService.upsert(new cipherData["a" /* CipherData */](remoteCipher, userId));
                            this.messagingService.send('syncedUpsertedCipher', { cipherId: notification.id });
                            return this.syncCompleted(true);
                        }
                    }
                }
                catch (e) {
                    if (e != null && e.statusCode === 404 && isEdit) {
                        yield this.cipherService.delete(notification.id);
                        this.messagingService.send('syncedDeletedCipher', { cipherId: notification.id });
                        return this.syncCompleted(true);
                    }
                }
            }
            return this.syncCompleted(false);
        });
    }
    syncDeleteCipher(notification) {
        return sync_service_awaiter(this, void 0, void 0, function* () {
            this.syncStarted();
            if (yield this.userService.isAuthenticated()) {
                yield this.cipherService.delete(notification.id);
                this.messagingService.send('syncedDeletedCipher', { cipherId: notification.id });
                return this.syncCompleted(true);
            }
            return this.syncCompleted(false);
        });
    }
    // Helpers
    syncStarted() {
        this.syncInProgress = true;
        this.messagingService.send('syncStarted');
    }
    syncCompleted(successfully) {
        this.syncInProgress = false;
        this.messagingService.send('syncCompleted', { successfully: successfully });
        return successfully;
    }
    needsSyncing(forceSync) {
        return sync_service_awaiter(this, void 0, void 0, function* () {
            if (forceSync) {
                return true;
            }
            const lastSync = yield this.getLastSync();
            if (lastSync == null || lastSync.getTime() === 0) {
                return true;
            }
            const response = yield this.apiService.getAccountRevisionDate();
            if (new Date(response) <= lastSync) {
                return false;
            }
            return true;
        });
    }
    syncProfile(response) {
        return sync_service_awaiter(this, void 0, void 0, function* () {
            const stamp = yield this.userService.getSecurityStamp();
            if (stamp != null && stamp !== response.securityStamp) {
                if (this.logoutCallback != null) {
                    yield this.logoutCallback(true);
                }
                throw new Error('Stamp has changed');
            }
            yield this.cryptoService.setEncKey(response.key);
            yield this.cryptoService.setEncPrivateKey(response.privateKey);
            yield this.cryptoService.setOrgKeys(response.organizations);
            yield this.userService.setSecurityStamp(response.securityStamp);
            const organizations = {};
            response.organizations.forEach((o) => {
                organizations[o.id] = new OrganizationData(o);
            });
            return yield this.userService.replaceOrganizations(organizations);
        });
    }
    syncFolders(userId, response) {
        return sync_service_awaiter(this, void 0, void 0, function* () {
            const folders = {};
            response.forEach((f) => {
                folders[f.id] = new FolderData(f, userId);
            });
            return yield this.folderService.replace(folders);
        });
    }
    syncCollections(response) {
        return sync_service_awaiter(this, void 0, void 0, function* () {
            const collections = {};
            response.forEach((c) => {
                collections[c.id] = new CollectionData(c);
            });
            return yield this.collectionService.replace(collections);
        });
    }
    syncCiphers(userId, response) {
        return sync_service_awaiter(this, void 0, void 0, function* () {
            const ciphers = {};
            response.forEach((c) => {
                ciphers[c.id] = new cipherData["a" /* CipherData */](c, userId);
            });
            return yield this.cipherService.replace(ciphers);
        });
    }
    syncSends(userId, response) {
        return sync_service_awaiter(this, void 0, void 0, function* () {
            const sends = {};
            response.forEach((s) => {
                sends[s.id] = new sendData["a" /* SendData */](s, userId);
            });
            return yield this.sendService.replace(sends);
        });
    }
    syncSettings(userId, response) {
        return sync_service_awaiter(this, void 0, void 0, function* () {
            let eqDomains = [];
            if (response != null && response.equivalentDomains != null) {
                eqDomains = eqDomains.concat(response.equivalentDomains);
            }
            if (response != null && response.globalEquivalentDomains != null) {
                response.globalEquivalentDomains.forEach((global) => {
                    if (global.domains.length > 0) {
                        eqDomains.push(global.domains);
                    }
                });
            }
            return this.settingsService.setEquivalentDomains(eqDomains);
        });
    }
    syncPolicies(response) {
        return sync_service_awaiter(this, void 0, void 0, function* () {
            const policies = {};
            if (response != null) {
                response.forEach((p) => {
                    policies[p.id] = new PolicyData(p);
                });
            }
            return yield this.policyService.replace(policies);
        });
    }
}

// CONCATENATED MODULE: ./jslib/src/services/token.service.ts
var token_service_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


const token_service_Keys = {
    accessToken: 'accessToken',
    refreshToken: 'refreshToken',
    twoFactorTokenPrefix: 'twoFactorToken_',
};
class token_service_TokenService {
    constructor(storageService) {
        this.storageService = storageService;
    }
    setTokens(accessToken, refreshToken) {
        return Promise.all([
            this.setToken(accessToken),
            this.setRefreshToken(refreshToken),
        ]);
    }
    setToken(token) {
        return token_service_awaiter(this, void 0, void 0, function* () {
            this.token = token;
            this.decodedToken = null;
            if (yield this.skipTokenStorage()) {
                // if we have a vault timeout and the action is log out, don't store token
                return;
            }
            return this.storageService.save(token_service_Keys.accessToken, token);
        });
    }
    getToken() {
        return token_service_awaiter(this, void 0, void 0, function* () {
            if (this.token != null) {
                return this.token;
            }
            this.token = yield this.storageService.get(token_service_Keys.accessToken);
            return this.token;
        });
    }
    setRefreshToken(refreshToken) {
        return token_service_awaiter(this, void 0, void 0, function* () {
            this.refreshToken = refreshToken;
            if (yield this.skipTokenStorage()) {
                // if we have a vault timeout and the action is log out, don't store token
                return;
            }
            return this.storageService.save(token_service_Keys.refreshToken, refreshToken);
        });
    }
    getRefreshToken() {
        return token_service_awaiter(this, void 0, void 0, function* () {
            if (this.refreshToken != null) {
                return this.refreshToken;
            }
            this.refreshToken = yield this.storageService.get(token_service_Keys.refreshToken);
            return this.refreshToken;
        });
    }
    toggleTokens() {
        return token_service_awaiter(this, void 0, void 0, function* () {
            const token = yield this.getToken();
            const refreshToken = yield this.getRefreshToken();
            const timeout = yield this.storageService.get(constants_service["a" /* ConstantsService */].vaultTimeoutKey);
            const action = yield this.storageService.get(constants_service["a" /* ConstantsService */].vaultTimeoutActionKey);
            if ((timeout != null || timeout === 0) && action === 'logOut') {
                // if we have a vault timeout and the action is log out, reset tokens
                yield this.clearToken();
                this.token = token;
                this.refreshToken = refreshToken;
                return;
            }
            yield this.setToken(token);
            yield this.setRefreshToken(refreshToken);
        });
    }
    setTwoFactorToken(token, email) {
        return this.storageService.save(token_service_Keys.twoFactorTokenPrefix + email, token);
    }
    getTwoFactorToken(email) {
        return this.storageService.get(token_service_Keys.twoFactorTokenPrefix + email);
    }
    clearTwoFactorToken(email) {
        return this.storageService.remove(token_service_Keys.twoFactorTokenPrefix + email);
    }
    clearToken() {
        this.token = null;
        this.decodedToken = null;
        this.refreshToken = null;
        return Promise.all([
            this.storageService.remove(token_service_Keys.accessToken),
            this.storageService.remove(token_service_Keys.refreshToken),
        ]);
    }
    // jwthelper methods
    // ref https://github.com/auth0/angular-jwt/blob/master/src/angularJwt/services/jwt.js
    decodeToken() {
        if (this.decodedToken) {
            return this.decodedToken;
        }
        if (this.token == null) {
            throw new Error('Token not found.');
        }
        const parts = this.token.split('.');
        if (parts.length !== 3) {
            throw new Error('JWT must have 3 parts');
        }
        const decoded = utils["a" /* Utils */].fromUrlB64ToUtf8(parts[1]);
        if (decoded == null) {
            throw new Error('Cannot decode the token');
        }
        this.decodedToken = JSON.parse(decoded);
        return this.decodedToken;
    }
    getTokenExpirationDate() {
        const decoded = this.decodeToken();
        if (typeof decoded.exp === 'undefined') {
            return null;
        }
        const d = new Date(0); // The 0 here is the key, which sets the date to the epoch
        d.setUTCSeconds(decoded.exp);
        return d;
    }
    tokenSecondsRemaining(offsetSeconds = 0) {
        const d = this.getTokenExpirationDate();
        if (d == null) {
            return 0;
        }
        const msRemaining = d.valueOf() - (new Date().valueOf() + (offsetSeconds * 1000));
        return Math.round(msRemaining / 1000);
    }
    tokenNeedsRefresh(minutes = 5) {
        const sRemaining = this.tokenSecondsRemaining();
        return sRemaining < (60 * minutes);
    }
    getUserId() {
        const decoded = this.decodeToken();
        if (typeof decoded.sub === 'undefined') {
            throw new Error('No user id found');
        }
        return decoded.sub;
    }
    getEmail() {
        const decoded = this.decodeToken();
        if (typeof decoded.email === 'undefined') {
            throw new Error('No email found');
        }
        return decoded.email;
    }
    getEmailVerified() {
        const decoded = this.decodeToken();
        if (typeof decoded.email_verified === 'undefined') {
            throw new Error('No email verification found');
        }
        return decoded.email_verified;
    }
    getName() {
        const decoded = this.decodeToken();
        if (typeof decoded.name === 'undefined') {
            return null;
        }
        return decoded.name;
    }
    getPremium() {
        const decoded = this.decodeToken();
        if (typeof decoded.premium === 'undefined') {
            return false;
        }
        return decoded.premium;
    }
    getIssuer() {
        const decoded = this.decodeToken();
        if (typeof decoded.iss === 'undefined') {
            throw new Error('No issuer found');
        }
        return decoded.iss;
    }
    skipTokenStorage() {
        return token_service_awaiter(this, void 0, void 0, function* () {
            const timeout = yield this.storageService.get(constants_service["a" /* ConstantsService */].vaultTimeoutKey);
            const action = yield this.storageService.get(constants_service["a" /* ConstantsService */].vaultTimeoutActionKey);
            return timeout != null && action === 'logOut';
        });
    }
}

// CONCATENATED MODULE: ./jslib/src/services/totp.service.ts
var totp_service_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


const B32Chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567';
const SteamChars = '23456789BCDFGHJKMNPQRTVWXY';
class totp_service_TotpService {
    constructor(storageService, cryptoFunctionService) {
        this.storageService = storageService;
        this.cryptoFunctionService = cryptoFunctionService;
    }
    getCode(key) {
        return totp_service_awaiter(this, void 0, void 0, function* () {
            if (key == null) {
                return null;
            }
            let period = 30;
            let alg = 'sha1';
            let digits = 6;
            let keyB32 = key;
            const isOtpAuth = key.toLowerCase().indexOf('otpauth://') === 0;
            const isSteamAuth = !isOtpAuth && key.toLowerCase().indexOf('steam://') === 0;
            if (isOtpAuth) {
                const params = utils["a" /* Utils */].getQueryParams(key);
                if (params.has('digits') && params.get('digits') != null) {
                    try {
                        const digitParams = parseInt(params.get('digits').trim(), null);
                        if (digitParams > 10) {
                            digits = 10;
                        }
                        else if (digitParams > 0) {
                            digits = digitParams;
                        }
                    }
                    catch (_a) { }
                }
                if (params.has('period') && params.get('period') != null) {
                    try {
                        const periodParam = parseInt(params.get('period').trim(), null);
                        if (periodParam > 0) {
                            period = periodParam;
                        }
                    }
                    catch (_b) { }
                }
                if (params.has('secret') && params.get('secret') != null) {
                    keyB32 = params.get('secret');
                }
                if (params.has('algorithm') && params.get('algorithm') != null) {
                    const algParam = params.get('algorithm').toLowerCase();
                    if (algParam === 'sha1' || algParam === 'sha256' || algParam === 'sha512') {
                        alg = algParam;
                    }
                }
            }
            else if (isSteamAuth) {
                keyB32 = key.substr('steam://'.length);
                digits = 5;
            }
            const epoch = Math.round(new Date().getTime() / 1000.0);
            const timeHex = this.leftPad(this.decToHex(Math.floor(epoch / period)), 16, '0');
            const timeBytes = utils["a" /* Utils */].fromHexToArray(timeHex);
            const keyBytes = this.b32ToBytes(keyB32);
            if (!keyBytes.length || !timeBytes.length) {
                return null;
            }
            const hash = yield this.sign(keyBytes, timeBytes, alg);
            if (hash.length === 0) {
                return null;
            }
            /* tslint:disable */
            const offset = (hash[hash.length - 1] & 0xf);
            const binary = ((hash[offset] & 0x7f) << 24) | ((hash[offset + 1] & 0xff) << 16) |
                ((hash[offset + 2] & 0xff) << 8) | (hash[offset + 3] & 0xff);
            /* tslint:enable */
            let otp = '';
            if (isSteamAuth) {
                // tslint:disable-next-line
                let fullCode = binary & 0x7fffffff;
                for (let i = 0; i < digits; i++) {
                    otp += SteamChars[fullCode % SteamChars.length];
                    fullCode = Math.trunc(fullCode / SteamChars.length);
                }
            }
            else {
                otp = (binary % Math.pow(10, digits)).toString();
                otp = this.leftPad(otp, digits, '0');
            }
            return otp;
        });
    }
    getTimeInterval(key) {
        let period = 30;
        if (key != null && key.toLowerCase().indexOf('otpauth://') === 0) {
            const params = utils["a" /* Utils */].getQueryParams(key);
            if (params.has('period') && params.get('period') != null) {
                try {
                    period = parseInt(params.get('period').trim(), null);
                }
                catch (_a) { }
            }
        }
        return period;
    }
    isAutoCopyEnabled() {
        return totp_service_awaiter(this, void 0, void 0, function* () {
            return !(yield this.storageService.get(constants_service["a" /* ConstantsService */].disableAutoTotpCopyKey));
        });
    }
    // Helpers
    leftPad(s, l, p) {
        if (l + 1 >= s.length) {
            s = Array(l + 1 - s.length).join(p) + s;
        }
        return s;
    }
    decToHex(d) {
        return (d < 15.5 ? '0' : '') + Math.round(d).toString(16);
    }
    b32ToHex(s) {
        s = s.toUpperCase();
        let cleanedInput = '';
        for (let i = 0; i < s.length; i++) {
            if (B32Chars.indexOf(s[i]) < 0) {
                continue;
            }
            cleanedInput += s[i];
        }
        s = cleanedInput;
        let bits = '';
        let hex = '';
        for (let i = 0; i < s.length; i++) {
            const byteIndex = B32Chars.indexOf(s.charAt(i));
            if (byteIndex < 0) {
                continue;
            }
            bits += this.leftPad(byteIndex.toString(2), 5, '0');
        }
        for (let i = 0; i + 4 <= bits.length; i += 4) {
            const chunk = bits.substr(i, 4);
            hex = hex + parseInt(chunk, 2).toString(16);
        }
        return hex;
    }
    b32ToBytes(s) {
        return utils["a" /* Utils */].fromHexToArray(this.b32ToHex(s));
    }
    sign(keyBytes, timeBytes, alg) {
        return totp_service_awaiter(this, void 0, void 0, function* () {
            const signature = yield this.cryptoFunctionService.hmac(timeBytes.buffer, keyBytes.buffer, alg);
            return new Uint8Array(signature);
        });
    }
}

// EXTERNAL MODULE: ./jslib/src/enums/organizationUserStatusType.ts
var organizationUserStatusType = __webpack_require__(149);

// CONCATENATED MODULE: ./jslib/src/enums/organizationUserType.ts
var OrganizationUserType;
(function (OrganizationUserType) {
    OrganizationUserType[OrganizationUserType["Owner"] = 0] = "Owner";
    OrganizationUserType[OrganizationUserType["Admin"] = 1] = "Admin";
    OrganizationUserType[OrganizationUserType["User"] = 2] = "User";
    OrganizationUserType[OrganizationUserType["Manager"] = 3] = "Manager";
})(OrganizationUserType || (OrganizationUserType = {}));

// CONCATENATED MODULE: ./jslib/src/models/domain/organization.ts


class organization_Organization {
    constructor(obj) {
        if (obj == null) {
            return;
        }
        this.id = obj.id;
        this.name = obj.name;
        this.status = obj.status;
        this.type = obj.type;
        this.enabled = obj.enabled;
        this.usePolicies = obj.usePolicies;
        this.useGroups = obj.useGroups;
        this.useDirectory = obj.useDirectory;
        this.useEvents = obj.useEvents;
        this.useTotp = obj.useTotp;
        this.use2fa = obj.use2fa;
        this.useApi = obj.useApi;
        this.useBusinessPortal = obj.useBusinessPortal;
        this.useSso = obj.useSso;
        this.selfHost = obj.selfHost;
        this.usersGetPremium = obj.usersGetPremium;
        this.seats = obj.seats;
        this.maxCollections = obj.maxCollections;
        this.maxStorageGb = obj.maxStorageGb;
        this.ssoBound = obj.ssoBound;
        this.identifier = obj.identifier;
    }
    get canAccess() {
        if (this.type === OrganizationUserType.Owner) {
            return true;
        }
        return this.enabled && this.status === organizationUserStatusType["a" /* OrganizationUserStatusType */].Confirmed;
    }
    get isManager() {
        return this.type === OrganizationUserType.Manager || this.type === OrganizationUserType.Owner ||
            this.type === OrganizationUserType.Admin;
    }
    get isAdmin() {
        return this.type === OrganizationUserType.Owner || this.type === OrganizationUserType.Admin;
    }
    get isOwner() {
        return this.type === OrganizationUserType.Owner;
    }
}

// CONCATENATED MODULE: ./jslib/src/services/user.service.ts
var user_service_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

const user_service_Keys = {
    userId: 'userId',
    userEmail: 'userEmail',
    stamp: 'securityStamp',
    kdf: 'kdf',
    kdfIterations: 'kdfIterations',
    organizationsPrefix: 'organizations_',
};
class user_service_UserService {
    constructor(tokenService, storageService) {
        this.tokenService = tokenService;
        this.storageService = storageService;
    }
    setInformation(userId, email, kdf, kdfIterations) {
        this.email = email;
        this.userId = userId;
        this.kdf = kdf;
        this.kdfIterations = kdfIterations;
        return Promise.all([
            this.storageService.save(user_service_Keys.userEmail, email),
            this.storageService.save(user_service_Keys.userId, userId),
            this.storageService.save(user_service_Keys.kdf, kdf),
            this.storageService.save(user_service_Keys.kdfIterations, kdfIterations),
        ]);
    }
    setSecurityStamp(stamp) {
        this.stamp = stamp;
        return this.storageService.save(user_service_Keys.stamp, stamp);
    }
    getUserId() {
        return user_service_awaiter(this, void 0, void 0, function* () {
            if (this.userId == null) {
                this.userId = yield this.storageService.get(user_service_Keys.userId);
            }
            return this.userId;
        });
    }
    getEmail() {
        return user_service_awaiter(this, void 0, void 0, function* () {
            if (this.email == null) {
                this.email = yield this.storageService.get(user_service_Keys.userEmail);
            }
            return this.email;
        });
    }
    getSecurityStamp() {
        return user_service_awaiter(this, void 0, void 0, function* () {
            if (this.stamp == null) {
                this.stamp = yield this.storageService.get(user_service_Keys.stamp);
            }
            return this.stamp;
        });
    }
    getKdf() {
        return user_service_awaiter(this, void 0, void 0, function* () {
            if (this.kdf == null) {
                this.kdf = yield this.storageService.get(user_service_Keys.kdf);
            }
            return this.kdf;
        });
    }
    getKdfIterations() {
        return user_service_awaiter(this, void 0, void 0, function* () {
            if (this.kdfIterations == null) {
                this.kdfIterations = yield this.storageService.get(user_service_Keys.kdfIterations);
            }
            return this.kdfIterations;
        });
    }
    clear() {
        return user_service_awaiter(this, void 0, void 0, function* () {
            const userId = yield this.getUserId();
            yield Promise.all([
                this.storageService.remove(user_service_Keys.userId),
                this.storageService.remove(user_service_Keys.userEmail),
                this.storageService.remove(user_service_Keys.stamp),
                this.storageService.remove(user_service_Keys.kdf),
                this.storageService.remove(user_service_Keys.kdfIterations),
                this.clearOrganizations(userId),
            ]);
            this.userId = this.email = this.stamp = null;
            this.kdf = null;
            this.kdfIterations = null;
        });
    }
    isAuthenticated() {
        return user_service_awaiter(this, void 0, void 0, function* () {
            const token = yield this.tokenService.getToken();
            if (token == null) {
                return false;
            }
            const userId = yield this.getUserId();
            return userId != null;
        });
    }
    canAccessPremium() {
        return user_service_awaiter(this, void 0, void 0, function* () {
            const authed = yield this.isAuthenticated();
            if (!authed) {
                return false;
            }
            const tokenPremium = this.tokenService.getPremium();
            if (tokenPremium) {
                return true;
            }
            const orgs = yield this.getAllOrganizations();
            for (let i = 0; i < orgs.length; i++) {
                if (orgs[i].usersGetPremium && orgs[i].enabled) {
                    return true;
                }
            }
            return false;
        });
    }
    getOrganization(id) {
        return user_service_awaiter(this, void 0, void 0, function* () {
            const userId = yield this.getUserId();
            const organizations = yield this.storageService.get(user_service_Keys.organizationsPrefix + userId);
            if (organizations == null || !organizations.hasOwnProperty(id)) {
                return null;
            }
            return new organization_Organization(organizations[id]);
        });
    }
    getAllOrganizations() {
        return user_service_awaiter(this, void 0, void 0, function* () {
            const userId = yield this.getUserId();
            const organizations = yield this.storageService.get(user_service_Keys.organizationsPrefix + userId);
            const response = [];
            for (const id in organizations) {
                if (organizations.hasOwnProperty(id)) {
                    response.push(new organization_Organization(organizations[id]));
                }
            }
            return response;
        });
    }
    replaceOrganizations(organizations) {
        return user_service_awaiter(this, void 0, void 0, function* () {
            const userId = yield this.getUserId();
            yield this.storageService.save(user_service_Keys.organizationsPrefix + userId, organizations);
        });
    }
    clearOrganizations(userId) {
        return user_service_awaiter(this, void 0, void 0, function* () {
            yield this.storageService.remove(user_service_Keys.organizationsPrefix + userId);
        });
    }
}

// CONCATENATED MODULE: ./jslib/src/services/vaultTimeout.service.ts
var vaultTimeout_service_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

class vaultTimeout_service_VaultTimeoutService {
    constructor(cipherService, folderService, collectionService, cryptoService, platformUtilsService, storageService, messagingService, searchService, userService, tokenService, lockedCallback = null, loggedOutCallback = null) {
        this.cipherService = cipherService;
        this.folderService = folderService;
        this.collectionService = collectionService;
        this.cryptoService = cryptoService;
        this.platformUtilsService = platformUtilsService;
        this.storageService = storageService;
        this.messagingService = messagingService;
        this.searchService = searchService;
        this.userService = userService;
        this.tokenService = tokenService;
        this.lockedCallback = lockedCallback;
        this.loggedOutCallback = loggedOutCallback;
        this.pinProtectedKey = null;
        this.biometricLocked = true;
        this.inited = false;
    }
    init(checkOnInterval) {
        if (this.inited) {
            return;
        }
        this.inited = true;
        if (checkOnInterval) {
            this.checkVaultTimeout();
            setInterval(() => this.checkVaultTimeout(), 10 * 1000); // check every 10 seconds
        }
    }
    // Keys aren't stored for a device that is locked or logged out.
    isLocked() {
        return vaultTimeout_service_awaiter(this, void 0, void 0, function* () {
            const hasKey = yield this.cryptoService.hasKey();
            if (hasKey) {
                if ((yield this.isBiometricLockSet()) && this.biometricLocked) {
                    return true;
                }
            }
            return !hasKey;
        });
    }
    checkVaultTimeout() {
        return vaultTimeout_service_awaiter(this, void 0, void 0, function* () {
            if (yield this.platformUtilsService.isViewOpen()) {
                // Do not lock
                return;
            }
            // "is logged out check" - similar to isLocked, below
            const authed = yield this.userService.isAuthenticated();
            if (!authed) {
                return;
            }
            if (yield this.isLocked()) {
                return;
            }
            // This has the potential to be removed. Evaluate after all platforms complete with auto-logout
            let vaultTimeout = this.platformUtilsService.lockTimeout();
            if (vaultTimeout == null) {
                vaultTimeout = yield this.storageService.get(constants_service["a" /* ConstantsService */].vaultTimeoutKey);
            }
            if (vaultTimeout == null || vaultTimeout < 0) {
                return;
            }
            const lastActive = yield this.storageService.get(constants_service["a" /* ConstantsService */].lastActiveKey);
            if (lastActive == null) {
                return;
            }
            const vaultTimeoutSeconds = vaultTimeout * 60;
            const diffSeconds = ((new Date()).getTime() - lastActive) / 1000;
            if (diffSeconds >= vaultTimeoutSeconds) {
                // Pivot based on the saved vault timeout action
                const timeoutAction = yield this.storageService.get(constants_service["a" /* ConstantsService */].vaultTimeoutActionKey);
                timeoutAction === 'logOut' ? yield this.logOut() : yield this.lock(true);
            }
        });
    }
    lock(allowSoftLock = false) {
        return vaultTimeout_service_awaiter(this, void 0, void 0, function* () {
            const authed = yield this.userService.isAuthenticated();
            if (!authed) {
                return;
            }
            this.biometricLocked = true;
            if (allowSoftLock) {
                const biometricLocked = yield this.isBiometricLockSet();
                if (biometricLocked && this.platformUtilsService.supportsSecureStorage()) {
                    this.messagingService.send('locked');
                    if (this.lockedCallback != null) {
                        yield this.lockedCallback();
                    }
                    return;
                }
            }
            yield Promise.all([
                this.cryptoService.clearKey(),
                this.cryptoService.clearOrgKeys(true),
                this.cryptoService.clearKeyPair(true),
                this.cryptoService.clearEncKey(true),
            ]);
            this.folderService.clearCache();
            this.cipherService.clearCache();
            this.collectionService.clearCache();
            this.searchService.clearIndex();
            this.messagingService.send('locked');
            if (this.lockedCallback != null) {
                yield this.lockedCallback();
            }
        });
    }
    logOut() {
        return vaultTimeout_service_awaiter(this, void 0, void 0, function* () {
            if (this.loggedOutCallback != null) {
                yield this.loggedOutCallback();
            }
        });
    }
    setVaultTimeoutOptions(timeout, action) {
        return vaultTimeout_service_awaiter(this, void 0, void 0, function* () {
            yield this.storageService.save(constants_service["a" /* ConstantsService */].vaultTimeoutKey, timeout);
            yield this.storageService.save(constants_service["a" /* ConstantsService */].vaultTimeoutActionKey, action);
            yield this.cryptoService.toggleKey();
            yield this.tokenService.toggleTokens();
        });
    }
    isPinLockSet() {
        return vaultTimeout_service_awaiter(this, void 0, void 0, function* () {
            const protectedPin = yield this.storageService.get(constants_service["a" /* ConstantsService */].protectedPin);
            const pinProtectedKey = yield this.storageService.get(constants_service["a" /* ConstantsService */].pinProtectedKey);
            return [protectedPin != null, pinProtectedKey != null];
        });
    }
    isBiometricLockSet() {
        return vaultTimeout_service_awaiter(this, void 0, void 0, function* () {
            return yield this.storageService.get(constants_service["a" /* ConstantsService */].biometricUnlockKey);
        });
    }
    clear() {
        this.pinProtectedKey = null;
        return this.storageService.remove(constants_service["a" /* ConstantsService */].protectedPin);
    }
}

// CONCATENATED MODULE: ./jslib/src/services/index.ts





















// CONCATENATED MODULE: ./jslib/src/models/data/eventData.ts
class EventData {
}

// CONCATENATED MODULE: ./jslib/src/models/request/eventRequest.ts
class EventRequest {
}

// CONCATENATED MODULE: ./jslib/src/services/event.service.ts
var event_service_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class event_service_EventService {
    constructor(storageService, apiService, userService, cipherService) {
        this.storageService = storageService;
        this.apiService = apiService;
        this.userService = userService;
        this.cipherService = cipherService;
        this.inited = false;
    }
    init(checkOnInterval) {
        if (this.inited) {
            return;
        }
        this.inited = true;
        if (checkOnInterval) {
            this.uploadEvents();
            setInterval(() => this.uploadEvents(), 60 * 1000); // check every 60 seconds
        }
    }
    collect(eventType, cipherId = null, uploadImmediately = false) {
        return event_service_awaiter(this, void 0, void 0, function* () {
            const authed = yield this.userService.isAuthenticated();
            if (!authed) {
                return;
            }
            const organizations = yield this.userService.getAllOrganizations();
            if (organizations == null) {
                return;
            }
            const orgIds = new Set(organizations.filter((o) => o.useEvents).map((o) => o.id));
            if (orgIds.size === 0) {
                return;
            }
            if (cipherId != null) {
                const cipher = yield this.cipherService.get(cipherId);
                if (cipher == null || cipher.organizationId == null || !orgIds.has(cipher.organizationId)) {
                    return;
                }
            }
            let eventCollection = yield this.storageService.get(constants_service["a" /* ConstantsService */].eventCollectionKey);
            if (eventCollection == null) {
                eventCollection = [];
            }
            const event = new EventData();
            event.type = eventType;
            event.cipherId = cipherId;
            event.date = new Date().toISOString();
            eventCollection.push(event);
            yield this.storageService.save(constants_service["a" /* ConstantsService */].eventCollectionKey, eventCollection);
            if (uploadImmediately) {
                yield this.uploadEvents();
            }
        });
    }
    uploadEvents() {
        return event_service_awaiter(this, void 0, void 0, function* () {
            const authed = yield this.userService.isAuthenticated();
            if (!authed) {
                return;
            }
            const eventCollection = yield this.storageService.get(constants_service["a" /* ConstantsService */].eventCollectionKey);
            if (eventCollection == null || eventCollection.length === 0) {
                return;
            }
            const request = eventCollection.map((e) => {
                const req = new EventRequest();
                req.type = e.type;
                req.cipherId = e.cipherId;
                req.date = e.date;
                return req;
            });
            try {
                yield this.apiService.postEventsCollect(request);
                this.clearEvents();
            }
            catch (_a) { }
        });
    }
    clearEvents() {
        return event_service_awaiter(this, void 0, void 0, function* () {
            yield this.storageService.remove(constants_service["a" /* ConstantsService */].eventCollectionKey);
        });
    }
}

// EXTERNAL MODULE: ./node_modules/papaparse/papaparse.js
var papaparse = __webpack_require__(316);

// EXTERNAL MODULE: ./jslib/src/models/domain/cipher.ts
var domain_cipher = __webpack_require__(129);

// EXTERNAL MODULE: ./jslib/src/models/view/cipherView.ts
var cipherView = __webpack_require__(72);

// EXTERNAL MODULE: ./jslib/src/models/view/cardView.ts
var cardView = __webpack_require__(73);

// CONCATENATED MODULE: ./jslib/src/models/export/card.ts

class card_Card {
    constructor(o) {
        if (o == null) {
            return;
        }
        this.cardholderName = o.cardholderName;
        this.brand = o.brand;
        this.number = o.number;
        this.expMonth = o.expMonth;
        this.expYear = o.expYear;
        this.code = o.code;
    }
    static template() {
        const req = new card_Card();
        req.cardholderName = 'John Doe';
        req.brand = 'visa';
        req.number = '4242424242424242';
        req.expMonth = '04';
        req.expYear = '2023';
        req.code = '123';
        return req;
    }
    static toView(req, view = new cardView["a" /* CardView */]()) {
        view.cardholderName = req.cardholderName;
        view.brand = req.brand;
        view.number = req.number;
        view.expMonth = req.expMonth;
        view.expYear = req.expYear;
        view.code = req.code;
        return view;
    }
}

// EXTERNAL MODULE: ./jslib/src/models/view/fieldView.ts
var fieldView = __webpack_require__(108);

// CONCATENATED MODULE: ./jslib/src/models/export/field.ts


class field_Field {
    constructor(o) {
        if (o == null) {
            return;
        }
        this.name = o.name;
        this.value = o.value;
        this.type = o.type;
    }
    static template() {
        const req = new field_Field();
        req.name = 'Field name';
        req.value = 'Some value';
        req.type = fieldType["a" /* FieldType */].Text;
        return req;
    }
    static toView(req, view = new fieldView["a" /* FieldView */]()) {
        view.type = req.type;
        view.value = req.value;
        view.name = req.name;
        return view;
    }
}

// EXTERNAL MODULE: ./jslib/src/models/view/identityView.ts
var identityView = __webpack_require__(74);

// CONCATENATED MODULE: ./jslib/src/models/export/identity.ts

class identity_Identity {
    constructor(o) {
        if (o == null) {
            return;
        }
        this.title = o.title;
        this.firstName = o.firstName;
        this.middleName = o.middleName;
        this.lastName = o.lastName;
        this.address1 = o.address1;
        this.address2 = o.address2;
        this.address3 = o.address3;
        this.city = o.city;
        this.state = o.state;
        this.postalCode = o.postalCode;
        this.country = o.country;
        this.company = o.company;
        this.email = o.email;
        this.phone = o.phone;
        this.ssn = o.ssn;
        this.username = o.username;
        this.passportNumber = o.passportNumber;
        this.licenseNumber = o.licenseNumber;
    }
    static template() {
        const req = new identity_Identity();
        req.title = 'Mr';
        req.firstName = 'John';
        req.middleName = 'William';
        req.lastName = 'Doe';
        req.address1 = '123 Any St';
        req.address2 = 'Apt #123';
        req.address3 = null;
        req.city = 'New York';
        req.state = 'NY';
        req.postalCode = '10001';
        req.country = 'US';
        req.company = 'Acme Inc.';
        req.email = 'john@company.com';
        req.phone = '5555551234';
        req.ssn = '000-123-4567';
        req.username = 'jdoe';
        req.passportNumber = 'US-123456789';
        req.licenseNumber = 'D123-12-123-12333';
        return req;
    }
    static toView(req, view = new identityView["a" /* IdentityView */]()) {
        view.title = req.title;
        view.firstName = req.firstName;
        view.middleName = req.middleName;
        view.lastName = req.lastName;
        view.address1 = req.address1;
        view.address2 = req.address2;
        view.address3 = req.address3;
        view.city = req.city;
        view.state = req.state;
        view.postalCode = req.postalCode;
        view.country = req.country;
        view.company = req.company;
        view.email = req.email;
        view.phone = req.phone;
        view.ssn = req.ssn;
        view.username = req.username;
        view.passportNumber = req.passportNumber;
        view.licenseNumber = req.licenseNumber;
        return view;
    }
}

// EXTERNAL MODULE: ./jslib/src/models/view/loginUriView.ts
var loginUriView = __webpack_require__(78);

// CONCATENATED MODULE: ./jslib/src/models/export/loginUri.ts

class loginUri_LoginUri {
    constructor(o) {
        this.match = null;
        if (o == null) {
            return;
        }
        this.uri = o.uri;
        this.match = o.match;
    }
    static template() {
        const req = new loginUri_LoginUri();
        req.uri = 'https://google.com';
        req.match = null;
        return req;
    }
    static toView(req, view = new loginUriView["a" /* LoginUriView */]()) {
        view.uri = req.uri;
        view.match = req.match;
        return view;
    }
}

// EXTERNAL MODULE: ./jslib/src/models/view/loginView.ts
var loginView = __webpack_require__(60);

// CONCATENATED MODULE: ./jslib/src/models/export/login.ts


class login_Login {
    constructor(o) {
        if (o == null) {
            return;
        }
        if (o.uris != null) {
            this.uris = o.uris.map((u) => new loginUri_LoginUri(u));
        }
        this.username = o.username;
        this.password = o.password;
        this.totp = o.totp;
    }
    static template() {
        const req = new login_Login();
        req.uris = [];
        req.username = 'jdoe';
        req.password = 'myp@ssword123';
        req.totp = 'JBSWY3DPEHPK3PXP';
        return req;
    }
    static toView(req, view = new loginView["a" /* LoginView */]()) {
        if (req.uris != null) {
            view.uris = req.uris.map((u) => loginUri_LoginUri.toView(u));
        }
        view.username = req.username;
        view.password = req.password;
        view.totp = req.totp;
        return view;
    }
}

// EXTERNAL MODULE: ./jslib/src/models/view/secureNoteView.ts
var secureNoteView = __webpack_require__(75);

// CONCATENATED MODULE: ./jslib/src/models/export/secureNote.ts


class secureNote_SecureNote {
    constructor(o) {
        if (o == null) {
            return;
        }
        this.type = o.type;
    }
    static template() {
        const req = new secureNote_SecureNote();
        req.type = secureNoteType["a" /* SecureNoteType */].Generic;
        return req;
    }
    static toView(req, view = new secureNoteView["a" /* SecureNoteView */]()) {
        view.type = req.type;
        return view;
    }
}

// CONCATENATED MODULE: ./jslib/src/models/export/cipher.ts







class cipher_Cipher {
    static template() {
        const req = new cipher_Cipher();
        req.organizationId = null;
        req.folderId = null;
        req.type = cipherType["a" /* CipherType */].Login;
        req.name = 'Item name';
        req.notes = 'Some notes about this item.';
        req.favorite = false;
        req.fields = [];
        req.login = null;
        req.secureNote = null;
        req.card = null;
        req.identity = null;
        return req;
    }
    static toView(req, view = new cipherView["a" /* CipherView */]()) {
        view.type = req.type;
        view.folderId = req.folderId;
        if (view.organizationId == null) {
            view.organizationId = req.organizationId;
        }
        view.name = req.name;
        view.notes = req.notes;
        view.favorite = req.favorite;
        if (req.fields != null) {
            view.fields = req.fields.map((f) => field_Field.toView(f));
        }
        switch (req.type) {
            case cipherType["a" /* CipherType */].Login:
                view.login = login_Login.toView(req.login);
                break;
            case cipherType["a" /* CipherType */].SecureNote:
                view.secureNote = secureNote_SecureNote.toView(req.secureNote);
                break;
            case cipherType["a" /* CipherType */].Card:
                view.card = card_Card.toView(req.card);
                break;
            case cipherType["a" /* CipherType */].Identity:
                view.identity = identity_Identity.toView(req.identity);
                break;
        }
        return view;
    }
    // Use build method instead of ctor so that we can control order of JSON stringify for pretty print
    build(o) {
        this.organizationId = o.organizationId;
        this.folderId = o.folderId;
        this.type = o.type;
        this.name = o.name;
        this.notes = o.notes;
        this.favorite = o.favorite;
        if (o.fields != null) {
            this.fields = o.fields.map((f) => new field_Field(f));
        }
        switch (o.type) {
            case cipherType["a" /* CipherType */].Login:
                this.login = new login_Login(o.login);
                break;
            case cipherType["a" /* CipherType */].SecureNote:
                this.secureNote = new secureNote_SecureNote(o.secureNote);
                break;
            case cipherType["a" /* CipherType */].Card:
                this.card = new card_Card(o.card);
                break;
            case cipherType["a" /* CipherType */].Identity:
                this.identity = new identity_Identity(o.identity);
                break;
        }
    }
}

// CONCATENATED MODULE: ./jslib/src/models/export/cipherWithIds.ts

class cipherWithIds_CipherWithIds extends cipher_Cipher {
    // Use build method instead of ctor so that we can control order of JSON stringify for pretty print
    build(o) {
        this.id = o.id;
        super.build(o);
        this.collectionIds = o.collectionIds;
    }
}

// CONCATENATED MODULE: ./jslib/src/models/export/collection.ts

class export_collection_Collection {
    static template() {
        const req = new export_collection_Collection();
        req.organizationId = '00000000-0000-0000-0000-000000000000';
        req.name = 'Collection name';
        req.externalId = null;
        return req;
    }
    static toView(req, view = new collectionView_CollectionView()) {
        view.name = req.name;
        view.externalId = req.externalId;
        if (view.organizationId == null) {
            view.organizationId = req.organizationId;
        }
        return view;
    }
    // Use build method instead of ctor so that we can control order of JSON stringify for pretty print
    build(o) {
        this.organizationId = o.organizationId;
        this.name = o.name;
        this.externalId = o.externalId;
    }
}

// CONCATENATED MODULE: ./jslib/src/models/export/collectionWithId.ts

class collectionWithId_CollectionWithId extends export_collection_Collection {
    // Use build method instead of ctor so that we can control order of JSON stringify for pretty print
    build(o) {
        this.id = o.id;
        super.build(o);
    }
}

// CONCATENATED MODULE: ./jslib/src/models/export/folder.ts

class export_folder_Folder {
    static template() {
        const req = new export_folder_Folder();
        req.name = 'Folder name';
        return req;
    }
    static toView(req, view = new folderView["a" /* FolderView */]()) {
        view.name = req.name;
        return view;
    }
    // Use build method instead of ctor so that we can control order of JSON stringify for pretty print
    build(o) {
        this.name = o.name;
    }
}

// CONCATENATED MODULE: ./jslib/src/models/export/folderWithId.ts

class folderWithId_FolderWithId extends export_folder_Folder {
    // Use build method instead of ctor so that we can control order of JSON stringify for pretty print
    build(o) {
        this.id = o.id;
        super.build(o);
    }
}

// CONCATENATED MODULE: ./jslib/src/services/export.service.ts
var export_service_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};









class export_service_ExportService {
    constructor(folderService, cipherService, apiService) {
        this.folderService = folderService;
        this.cipherService = cipherService;
        this.apiService = apiService;
    }
    getExport(format = 'csv') {
        return export_service_awaiter(this, void 0, void 0, function* () {
            let decFolders = [];
            let decCiphers = [];
            const promises = [];
            promises.push(this.folderService.getAllDecrypted().then((folders) => {
                decFolders = folders;
            }));
            promises.push(this.cipherService.getAllDecrypted().then((ciphers) => {
                decCiphers = ciphers;
            }));
            yield Promise.all(promises);
            if (format === 'csv') {
                const foldersMap = new Map();
                decFolders.forEach((f) => {
                    if (f.id != null) {
                        foldersMap.set(f.id, f);
                    }
                });
                const exportCiphers = [];
                decCiphers.forEach((c) => {
                    // only export logins and secure notes
                    if (c.type !== cipherType["a" /* CipherType */].Login && c.type !== cipherType["a" /* CipherType */].SecureNote) {
                        return;
                    }
                    if (c.organizationId != null) {
                        return;
                    }
                    const cipher = {};
                    cipher.folder = c.folderId != null && foldersMap.has(c.folderId) ?
                        foldersMap.get(c.folderId).name : null;
                    cipher.favorite = c.favorite ? 1 : null;
                    this.buildCommonCipher(cipher, c);
                    exportCiphers.push(cipher);
                });
                return papaparse["unparse"](exportCiphers);
            }
            else {
                const jsonDoc = {
                    folders: [],
                    items: [],
                };
                decFolders.forEach((f) => {
                    if (f.id == null) {
                        return;
                    }
                    const folder = new folderWithId_FolderWithId();
                    folder.build(f);
                    jsonDoc.folders.push(folder);
                });
                decCiphers.forEach((c) => {
                    if (c.organizationId != null) {
                        return;
                    }
                    const cipher = new cipherWithIds_CipherWithIds();
                    cipher.build(c);
                    cipher.collectionIds = null;
                    jsonDoc.items.push(cipher);
                });
                return JSON.stringify(jsonDoc, null, '  ');
            }
        });
    }
    getOrganizationExport(organizationId, format = 'csv') {
        return export_service_awaiter(this, void 0, void 0, function* () {
            const decCollections = [];
            const decCiphers = [];
            const promises = [];
            promises.push(this.apiService.getCollections(organizationId).then((collections) => {
                const collectionPromises = [];
                if (collections != null && collections.data != null && collections.data.length > 0) {
                    collections.data.forEach((c) => {
                        const collection = new collection_Collection(new CollectionData(c));
                        collectionPromises.push(collection.decrypt().then((decCol) => {
                            decCollections.push(decCol);
                        }));
                    });
                }
                return Promise.all(collectionPromises);
            }));
            promises.push(this.apiService.getCiphersOrganization(organizationId).then((ciphers) => {
                const cipherPromises = [];
                if (ciphers != null && ciphers.data != null && ciphers.data.length > 0) {
                    ciphers.data.forEach((c) => {
                        const cipher = new domain_cipher["a" /* Cipher */](new cipherData["a" /* CipherData */](c));
                        cipherPromises.push(cipher.decrypt().then((decCipher) => {
                            decCiphers.push(decCipher);
                        }));
                    });
                }
                return Promise.all(cipherPromises);
            }));
            yield Promise.all(promises);
            if (format === 'csv') {
                const collectionsMap = new Map();
                decCollections.forEach((c) => {
                    collectionsMap.set(c.id, c);
                });
                const exportCiphers = [];
                decCiphers.forEach((c) => {
                    // only export logins and secure notes
                    if (c.type !== cipherType["a" /* CipherType */].Login && c.type !== cipherType["a" /* CipherType */].SecureNote) {
                        return;
                    }
                    const cipher = {};
                    cipher.collections = [];
                    if (c.collectionIds != null) {
                        cipher.collections = c.collectionIds.filter((id) => collectionsMap.has(id))
                            .map((id) => collectionsMap.get(id).name);
                    }
                    this.buildCommonCipher(cipher, c);
                    exportCiphers.push(cipher);
                });
                return papaparse["unparse"](exportCiphers);
            }
            else {
                const jsonDoc = {
                    collections: [],
                    items: [],
                };
                decCollections.forEach((c) => {
                    const collection = new collectionWithId_CollectionWithId();
                    collection.build(c);
                    jsonDoc.collections.push(collection);
                });
                decCiphers.forEach((c) => {
                    const cipher = new cipherWithIds_CipherWithIds();
                    cipher.build(c);
                    jsonDoc.items.push(cipher);
                });
                return JSON.stringify(jsonDoc, null, '  ');
            }
        });
    }
    getFileName(prefix = null, extension = 'csv') {
        const now = new Date();
        const dateString = now.getFullYear() + '' + this.padNumber(now.getMonth() + 1, 2) + '' + this.padNumber(now.getDate(), 2) +
            this.padNumber(now.getHours(), 2) + '' + this.padNumber(now.getMinutes(), 2) +
            this.padNumber(now.getSeconds(), 2);
        return 'bitwarden' + (prefix ? ('_' + prefix) : '') + '_export_' + dateString + '.' + extension;
    }
    padNumber(num, width, padCharacter = '0') {
        const numString = num.toString();
        return numString.length >= width ? numString :
            new Array(width - numString.length + 1).join(padCharacter) + numString;
    }
    buildCommonCipher(cipher, c) {
        cipher.type = null;
        cipher.name = c.name;
        cipher.notes = c.notes;
        cipher.fields = null;
        // Login props
        cipher.login_uri = null;
        cipher.login_username = null;
        cipher.login_password = null;
        cipher.login_totp = null;
        if (c.fields) {
            c.fields.forEach((f) => {
                if (!cipher.fields) {
                    cipher.fields = '';
                }
                else {
                    cipher.fields += '\n';
                }
                cipher.fields += ((f.name || '') + ': ' + f.value);
            });
        }
        switch (c.type) {
            case cipherType["a" /* CipherType */].Login:
                cipher.type = 'login';
                cipher.login_username = c.login.username;
                cipher.login_password = c.login.password;
                cipher.login_totp = c.login.totp;
                if (c.login.uris) {
                    cipher.login_uri = [];
                    c.login.uris.forEach((u) => {
                        cipher.login_uri.push(u.uri);
                    });
                }
                break;
            case cipherType["a" /* CipherType */].SecureNote:
                cipher.type = 'note';
                break;
            default:
                return;
        }
        return cipher;
    }
}

// EXTERNAL MODULE: ./node_modules/@microsoft/signalr/dist/esm/index.js + 14 modules
var esm = __webpack_require__(34);

// EXTERNAL MODULE: ./node_modules/@microsoft/signalr-protocol-msgpack/dist/esm/index.js + 3 modules
var dist_esm = __webpack_require__(440);

// CONCATENATED MODULE: ./jslib/src/enums/notificationType.ts
var NotificationType;
(function (NotificationType) {
    NotificationType[NotificationType["SyncCipherUpdate"] = 0] = "SyncCipherUpdate";
    NotificationType[NotificationType["SyncCipherCreate"] = 1] = "SyncCipherCreate";
    NotificationType[NotificationType["SyncLoginDelete"] = 2] = "SyncLoginDelete";
    NotificationType[NotificationType["SyncFolderDelete"] = 3] = "SyncFolderDelete";
    NotificationType[NotificationType["SyncCiphers"] = 4] = "SyncCiphers";
    NotificationType[NotificationType["SyncVault"] = 5] = "SyncVault";
    NotificationType[NotificationType["SyncOrgKeys"] = 6] = "SyncOrgKeys";
    NotificationType[NotificationType["SyncFolderCreate"] = 7] = "SyncFolderCreate";
    NotificationType[NotificationType["SyncFolderUpdate"] = 8] = "SyncFolderUpdate";
    NotificationType[NotificationType["SyncCipherDelete"] = 9] = "SyncCipherDelete";
    NotificationType[NotificationType["SyncSettings"] = 10] = "SyncSettings";
    NotificationType[NotificationType["LogOut"] = 11] = "LogOut";
})(NotificationType || (NotificationType = {}));

// CONCATENATED MODULE: ./jslib/src/models/response/notificationResponse.ts


class notificationResponse_NotificationResponse extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.contextId = this.getResponseProperty('ContextId');
        this.type = this.getResponseProperty('Type');
        const payload = this.getResponseProperty('Payload');
        switch (this.type) {
            case NotificationType.SyncCipherCreate:
            case NotificationType.SyncCipherDelete:
            case NotificationType.SyncCipherUpdate:
            case NotificationType.SyncLoginDelete:
                this.payload = new notificationResponse_SyncCipherNotification(payload);
                break;
            case NotificationType.SyncFolderCreate:
            case NotificationType.SyncFolderDelete:
            case NotificationType.SyncFolderUpdate:
                this.payload = new notificationResponse_SyncFolderNotification(payload);
                break;
            case NotificationType.SyncVault:
            case NotificationType.SyncCiphers:
            case NotificationType.SyncOrgKeys:
            case NotificationType.SyncSettings:
            case NotificationType.LogOut:
                this.payload = new notificationResponse_UserNotification(payload);
                break;
            default:
                break;
        }
    }
}
class notificationResponse_SyncCipherNotification extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.id = this.getResponseProperty('Id');
        this.userId = this.getResponseProperty('UserId');
        this.organizationId = this.getResponseProperty('OrganizationId');
        this.collectionIds = this.getResponseProperty('CollectionIds');
        this.revisionDate = new Date(this.getResponseProperty('RevisionDate'));
    }
}
class notificationResponse_SyncFolderNotification extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.id = this.getResponseProperty('Id');
        this.userId = this.getResponseProperty('UserId');
        this.revisionDate = new Date(this.getResponseProperty('RevisionDate'));
    }
}
class notificationResponse_UserNotification extends baseResponse["a" /* BaseResponse */] {
    constructor(response) {
        super(response);
        this.userId = this.getResponseProperty('UserId');
        this.date = new Date(this.getResponseProperty('Date'));
    }
}

// CONCATENATED MODULE: ./jslib/src/services/notifications.service.ts
var notifications_service_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




class notifications_service_NotificationsService {
    constructor(userService, syncService, appIdService, apiService, vaultTimeoutService, logoutCallback) {
        this.userService = userService;
        this.syncService = syncService;
        this.appIdService = appIdService;
        this.apiService = apiService;
        this.vaultTimeoutService = vaultTimeoutService;
        this.logoutCallback = logoutCallback;
        this.connected = false;
        this.inited = false;
        this.inactive = false;
        this.reconnectTimer = null;
    }
    init(environmentService) {
        return notifications_service_awaiter(this, void 0, void 0, function* () {
            this.inited = false;
            this.url = 'https://notifications.bitwarden.com';
            if (environmentService.notificationsUrl != null) {
                this.url = environmentService.notificationsUrl;
            }
            else if (environmentService.baseUrl != null) {
                this.url = environmentService.baseUrl + '/notifications';
            }
            // Set notifications server URL to `https://-` to effectively disable communication
            // with the notifications server from the client app
            if (this.url === 'https://-') {
                return;
            }
            if (this.signalrConnection != null) {
                this.signalrConnection.off('ReceiveMessage');
                this.signalrConnection.off('Heartbeat');
                yield this.signalrConnection.stop();
                this.connected = false;
                this.signalrConnection = null;
            }
            this.signalrConnection = new esm["b" /* HubConnectionBuilder */]()
                .withUrl(this.url + '/hub', {
                accessTokenFactory: () => this.apiService.getActiveBearerToken(),
                skipNegotiation: true,
                transport: esm["a" /* HttpTransportType */].WebSockets,
            })
                .withHubProtocol(new dist_esm["a" /* MessagePackHubProtocol */]())
                // .configureLogging(signalR.LogLevel.Trace)
                .build();
            this.signalrConnection.on('ReceiveMessage', (data) => this.processNotification(new notificationResponse_NotificationResponse(data)));
            this.signalrConnection.on('Heartbeat', (data) => { });
            this.signalrConnection.onclose(() => {
                this.connected = false;
                this.reconnect(true);
            });
            this.inited = true;
            if (yield this.isAuthedAndUnlocked()) {
                yield this.reconnect(false);
            }
        });
    }
    updateConnection(sync = false) {
        return notifications_service_awaiter(this, void 0, void 0, function* () {
            if (!this.inited) {
                return;
            }
            try {
                if (yield this.isAuthedAndUnlocked()) {
                    yield this.reconnect(sync);
                }
                else {
                    yield this.signalrConnection.stop();
                }
            }
            catch (e) {
                // tslint:disable-next-line
                console.error(e.toString());
            }
        });
    }
    reconnectFromActivity() {
        return notifications_service_awaiter(this, void 0, void 0, function* () {
            this.inactive = false;
            if (this.inited && !this.connected) {
                yield this.reconnect(true);
            }
        });
    }
    disconnectFromInactivity() {
        return notifications_service_awaiter(this, void 0, void 0, function* () {
            this.inactive = true;
            if (this.inited && this.connected) {
                yield this.signalrConnection.stop();
            }
        });
    }
    processNotification(notification) {
        return notifications_service_awaiter(this, void 0, void 0, function* () {
            const appId = yield this.appIdService.getAppId();
            if (notification == null || notification.contextId === appId) {
                return;
            }
            const isAuthenticated = yield this.userService.isAuthenticated();
            const payloadUserId = notification.payload.userId || notification.payload.UserId;
            const myUserId = yield this.userService.getUserId();
            if (isAuthenticated && payloadUserId != null && payloadUserId !== myUserId) {
                return;
            }
            switch (notification.type) {
                case NotificationType.SyncCipherCreate:
                case NotificationType.SyncCipherUpdate:
                    yield this.syncService.syncUpsertCipher(notification.payload, notification.type === NotificationType.SyncCipherUpdate);
                    break;
                case NotificationType.SyncCipherDelete:
                case NotificationType.SyncLoginDelete:
                    yield this.syncService.syncDeleteCipher(notification.payload);
                    break;
                case NotificationType.SyncFolderCreate:
                case NotificationType.SyncFolderUpdate:
                    yield this.syncService.syncUpsertFolder(notification.payload, notification.type === NotificationType.SyncFolderUpdate);
                    break;
                case NotificationType.SyncFolderDelete:
                    yield this.syncService.syncDeleteFolder(notification.payload);
                    break;
                case NotificationType.SyncVault:
                case NotificationType.SyncCiphers:
                case NotificationType.SyncSettings:
                    if (isAuthenticated) {
                        yield this.syncService.fullSync(false);
                    }
                    break;
                case NotificationType.SyncOrgKeys:
                    if (isAuthenticated) {
                        yield this.apiService.refreshIdentityToken();
                        yield this.syncService.fullSync(true);
                        // Stop so a reconnect can be made
                        yield this.signalrConnection.stop();
                    }
                    break;
                case NotificationType.LogOut:
                    if (isAuthenticated) {
                        this.logoutCallback();
                    }
                    break;
                default:
                    break;
            }
        });
    }
    reconnect(sync) {
        return notifications_service_awaiter(this, void 0, void 0, function* () {
            if (this.reconnectTimer != null) {
                clearTimeout(this.reconnectTimer);
                this.reconnectTimer = null;
            }
            if (this.connected || !this.inited || this.inactive) {
                return;
            }
            const authedAndUnlocked = yield this.isAuthedAndUnlocked();
            if (!authedAndUnlocked) {
                return;
            }
            try {
                yield this.signalrConnection.start();
                this.connected = true;
                if (sync) {
                    yield this.syncService.fullSync(false);
                }
            }
            catch (_a) { }
            if (!this.connected) {
                this.reconnectTimer = setTimeout(() => this.reconnect(sync), this.random(120000, 300000));
            }
        });
    }
    isAuthedAndUnlocked() {
        return notifications_service_awaiter(this, void 0, void 0, function* () {
            if (yield this.userService.isAuthenticated()) {
                const locked = yield this.vaultTimeoutService.isLocked();
                return !locked;
            }
            return false;
        });
    }
    random(min, max) {
        min = Math.ceil(min);
        max = Math.floor(max);
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }
}

// CONCATENATED MODULE: ./jslib/src/models/domain/masterPasswordPolicyOptions.ts

class masterPasswordPolicyOptions_MasterPasswordPolicyOptions extends domainBase["a" /* default */] {
    constructor() {
        super(...arguments);
        this.minComplexity = 0;
        this.minLength = 0;
        this.requireUpper = false;
        this.requireLower = false;
        this.requireNumbers = false;
        this.requireSpecial = false;
    }
}

// CONCATENATED MODULE: ./jslib/src/models/domain/policy.ts

class policy_Policy extends domainBase["a" /* default */] {
    constructor(obj) {
        super();
        if (obj == null) {
            return;
        }
        this.id = obj.id;
        this.organizationId = obj.organizationId;
        this.type = obj.type;
        this.data = obj.data;
        this.enabled = obj.enabled;
    }
}

// CONCATENATED MODULE: ./jslib/src/services/policy.service.ts
var policy_service_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



const policy_service_Keys = {
    policiesPrefix: 'policies_',
};
class policy_service_PolicyService {
    constructor(userService, storageService) {
        this.userService = userService;
        this.storageService = storageService;
    }
    clearCache() {
        this.policyCache = null;
    }
    getAll(type) {
        return policy_service_awaiter(this, void 0, void 0, function* () {
            if (this.policyCache == null) {
                const userId = yield this.userService.getUserId();
                const policies = yield this.storageService.get(policy_service_Keys.policiesPrefix + userId);
                const response = [];
                for (const id in policies) {
                    if (policies.hasOwnProperty(id)) {
                        response.push(new policy_Policy(policies[id]));
                    }
                }
                this.policyCache = response;
            }
            if (type != null) {
                return this.policyCache.filter((p) => p.type === type);
            }
            else {
                return this.policyCache;
            }
        });
    }
    replace(policies) {
        return policy_service_awaiter(this, void 0, void 0, function* () {
            const userId = yield this.userService.getUserId();
            yield this.storageService.save(policy_service_Keys.policiesPrefix + userId, policies);
            this.policyCache = null;
        });
    }
    clear(userId) {
        return policy_service_awaiter(this, void 0, void 0, function* () {
            yield this.storageService.remove(policy_service_Keys.policiesPrefix + userId);
            this.policyCache = null;
        });
    }
    getMasterPasswordPolicyOptions(policies) {
        return policy_service_awaiter(this, void 0, void 0, function* () {
            let enforcedOptions = null;
            if (policies == null) {
                policies = yield this.getAll(PolicyType.MasterPassword);
            }
            else {
                policies = policies.filter((p) => p.type === PolicyType.MasterPassword);
            }
            if (policies == null || policies.length === 0) {
                return enforcedOptions;
            }
            policies.forEach((currentPolicy) => {
                if (!currentPolicy.enabled || currentPolicy.data == null) {
                    return;
                }
                if (enforcedOptions == null) {
                    enforcedOptions = new masterPasswordPolicyOptions_MasterPasswordPolicyOptions();
                }
                if (currentPolicy.data.minComplexity != null
                    && currentPolicy.data.minComplexity > enforcedOptions.minComplexity) {
                    enforcedOptions.minComplexity = currentPolicy.data.minComplexity;
                }
                if (currentPolicy.data.minLength != null
                    && currentPolicy.data.minLength > enforcedOptions.minLength) {
                    enforcedOptions.minLength = currentPolicy.data.minLength;
                }
                if (currentPolicy.data.requireUpper) {
                    enforcedOptions.requireUpper = true;
                }
                if (currentPolicy.data.requireLower) {
                    enforcedOptions.requireLower = true;
                }
                if (currentPolicy.data.requireNumbers) {
                    enforcedOptions.requireNumbers = true;
                }
                if (currentPolicy.data.requireSpecial) {
                    enforcedOptions.requireSpecial = true;
                }
            });
            return enforcedOptions;
        });
    }
    evaluateMasterPassword(passwordStrength, newPassword, enforcedPolicyOptions) {
        if (enforcedPolicyOptions == null) {
            return true;
        }
        if (enforcedPolicyOptions.minComplexity > 0 && enforcedPolicyOptions.minComplexity > passwordStrength) {
            return false;
        }
        if (enforcedPolicyOptions.minLength > 0 && enforcedPolicyOptions.minLength > newPassword.length) {
            return false;
        }
        if (enforcedPolicyOptions.requireUpper && newPassword.toLocaleLowerCase() === newPassword) {
            return false;
        }
        if (enforcedPolicyOptions.requireLower && newPassword.toLocaleUpperCase() === newPassword) {
            return false;
        }
        if (enforcedPolicyOptions.requireNumbers && !(/[0-9]/.test(newPassword))) {
            return false;
        }
        if (enforcedPolicyOptions.requireSpecial && !(/[!@#$%\^&*]/g.test(newPassword))) {
            return false;
        }
        return true;
    }
}

// EXTERNAL MODULE: ./jslib/src/services/search.service.ts
var search_service = __webpack_require__(189);

// EXTERNAL MODULE: ./jslib/src/services/send.service.ts
var send_service = __webpack_require__(437);

// CONCATENATED MODULE: ./jslib/src/services/system.service.ts
var system_service_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class system_service_SystemService {
    constructor(storageService, vaultTimeoutService, messagingService, platformUtilsService, reloadCallback = null) {
        this.storageService = storageService;
        this.vaultTimeoutService = vaultTimeoutService;
        this.messagingService = messagingService;
        this.platformUtilsService = platformUtilsService;
        this.reloadCallback = reloadCallback;
        this.reloadInterval = null;
        this.clearClipboardTimeout = null;
        this.clearClipboardTimeoutFunction = null;
    }
    startProcessReload() {
        if (this.vaultTimeoutService.pinProtectedKey != null || this.reloadInterval != null) {
            return;
        }
        this.cancelProcessReload();
        this.reloadInterval = setInterval(() => system_service_awaiter(this, void 0, void 0, function* () {
            let doRefresh = false;
            const lastActive = yield this.storageService.get(constants_service["a" /* ConstantsService */].lastActiveKey);
            if (lastActive != null) {
                const diffSeconds = (new Date()).getTime() - lastActive;
                // Don't refresh if they are still active in the window
                doRefresh = diffSeconds >= 5000;
            }
            if (doRefresh) {
                clearInterval(this.reloadInterval);
                this.reloadInterval = null;
                this.messagingService.send('reloadProcess');
                if (this.reloadCallback != null) {
                    yield this.reloadCallback();
                }
            }
        }), 10000);
    }
    cancelProcessReload() {
        if (this.reloadInterval != null) {
            clearInterval(this.reloadInterval);
            this.reloadInterval = null;
        }
    }
    clearClipboard(clipboardValue, timeoutMs = null) {
        if (this.clearClipboardTimeout != null) {
            clearTimeout(this.clearClipboardTimeout);
            this.clearClipboardTimeout = null;
        }
        if (utils["a" /* Utils */].isNullOrWhitespace(clipboardValue)) {
            return;
        }
        this.storageService.get(constants_service["a" /* ConstantsService */].clearClipboardKey).then((clearSeconds) => {
            if (clearSeconds == null) {
                return;
            }
            if (timeoutMs == null) {
                timeoutMs = clearSeconds * 1000;
            }
            this.clearClipboardTimeoutFunction = () => system_service_awaiter(this, void 0, void 0, function* () {
                const clipboardValueNow = yield this.platformUtilsService.readFromClipboard();
                if (clipboardValue === clipboardValueNow) {
                    this.platformUtilsService.copyToClipboard('', { clearing: true });
                }
            });
            this.clearClipboardTimeout = setTimeout(() => system_service_awaiter(this, void 0, void 0, function* () {
                yield this.clearPendingClipboard();
            }), timeoutMs);
        });
    }
    clearPendingClipboard() {
        return system_service_awaiter(this, void 0, void 0, function* () {
            if (this.clearClipboardTimeoutFunction != null) {
                yield this.clearClipboardTimeoutFunction();
                this.clearClipboardTimeoutFunction = null;
            }
        });
    }
}

// EXTERNAL MODULE: ./node_modules/node-forge/lib/index.js
var lib = __webpack_require__(57);

// CONCATENATED MODULE: ./jslib/src/models/domain/decryptParameters.ts
class DecryptParameters {
}

// CONCATENATED MODULE: ./jslib/src/services/webCryptoFunction.service.ts
var webCryptoFunction_service_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class webCryptoFunction_service_WebCryptoFunctionService {
    constructor(win, platformUtilsService) {
        this.win = win;
        this.platformUtilsService = platformUtilsService;
        this.crypto = typeof win.crypto !== 'undefined' ? win.crypto : null;
        this.subtle = (!!this.crypto && typeof win.crypto.subtle !== 'undefined') ? win.crypto.subtle : null;
        this.isIE = platformUtilsService.isIE();
        const ua = win.navigator.userAgent;
        this.isOldSafari = platformUtilsService.isSafari() &&
            (ua.indexOf(' Version/10.') > -1 || ua.indexOf(' Version/9.') > -1);
    }
    pbkdf2(password, salt, algorithm, iterations) {
        return webCryptoFunction_service_awaiter(this, void 0, void 0, function* () {
            if (this.isIE || this.isOldSafari) {
                const forgeLen = algorithm === 'sha256' ? 32 : 64;
                const passwordBytes = this.toByteString(password);
                const saltBytes = this.toByteString(salt);
                const derivedKeyBytes = lib["pbkdf2"](passwordBytes, saltBytes, iterations, forgeLen, algorithm);
                return utils["a" /* Utils */].fromByteStringToArray(derivedKeyBytes).buffer;
            }
            const wcLen = algorithm === 'sha256' ? 256 : 512;
            const passwordBuf = this.toBuf(password);
            const saltBuf = this.toBuf(salt);
            const pbkdf2Params = {
                name: 'PBKDF2',
                salt: saltBuf,
                iterations: iterations,
                hash: { name: this.toWebCryptoAlgorithm(algorithm) },
            };
            const impKey = yield this.subtle.importKey('raw', passwordBuf, { name: 'PBKDF2' }, false, ['deriveBits']);
            return yield this.subtle.deriveBits(pbkdf2Params, impKey, wcLen);
        });
    }
    hkdf(ikm, salt, info, outputByteSize, algorithm) {
        return webCryptoFunction_service_awaiter(this, void 0, void 0, function* () {
            const saltBuf = this.toBuf(salt);
            const infoBuf = this.toBuf(info);
            const hkdfParams = {
                name: 'HKDF',
                salt: saltBuf,
                info: infoBuf,
                hash: { name: this.toWebCryptoAlgorithm(algorithm) },
            };
            const impKey = yield this.subtle.importKey('raw', ikm, { name: 'HKDF' }, false, ['deriveBits']);
            return yield this.subtle.deriveBits(hkdfParams, impKey, outputByteSize * 8);
        });
    }
    // ref: https://tools.ietf.org/html/rfc5869
    hkdfExpand(prk, info, outputByteSize, algorithm) {
        return webCryptoFunction_service_awaiter(this, void 0, void 0, function* () {
            const hashLen = algorithm === 'sha256' ? 32 : 64;
            if (outputByteSize > 255 * hashLen) {
                throw new Error('outputByteSize is too large.');
            }
            const prkArr = new Uint8Array(prk);
            if (prkArr.length < hashLen) {
                throw new Error('prk is too small.');
            }
            const infoBuf = this.toBuf(info);
            const infoArr = new Uint8Array(infoBuf);
            let runningOkmLength = 0;
            let previousT = new Uint8Array(0);
            const n = Math.ceil(outputByteSize / hashLen);
            const okm = new Uint8Array(n * hashLen);
            for (let i = 0; i < n; i++) {
                const t = new Uint8Array(previousT.length + infoArr.length + 1);
                t.set(previousT);
                t.set(infoArr, previousT.length);
                t.set([i + 1], t.length - 1);
                previousT = new Uint8Array(yield this.hmac(t.buffer, prk, algorithm));
                okm.set(previousT, runningOkmLength);
                runningOkmLength += previousT.length;
                if (runningOkmLength >= outputByteSize) {
                    break;
                }
            }
            return okm.slice(0, outputByteSize).buffer;
        });
    }
    hash(value, algorithm) {
        return webCryptoFunction_service_awaiter(this, void 0, void 0, function* () {
            if ((this.isIE && algorithm === 'sha1') || algorithm === 'md5') {
                const md = algorithm === 'md5' ? lib["md"].md5.create() : lib["md"].sha1.create();
                const valueBytes = this.toByteString(value);
                md.update(valueBytes, 'raw');
                return utils["a" /* Utils */].fromByteStringToArray(md.digest().data).buffer;
            }
            const valueBuf = this.toBuf(value);
            return yield this.subtle.digest({ name: this.toWebCryptoAlgorithm(algorithm) }, valueBuf);
        });
    }
    hmac(value, key, algorithm) {
        return webCryptoFunction_service_awaiter(this, void 0, void 0, function* () {
            if (this.isIE && algorithm === 'sha512') {
                const hmac = lib["hmac"].create();
                const keyBytes = this.toByteString(key);
                const valueBytes = this.toByteString(value);
                hmac.start(algorithm, keyBytes);
                hmac.update(valueBytes, 'raw');
                return utils["a" /* Utils */].fromByteStringToArray(hmac.digest().data).buffer;
            }
            const signingAlgorithm = {
                name: 'HMAC',
                hash: { name: this.toWebCryptoAlgorithm(algorithm) },
            };
            const impKey = yield this.subtle.importKey('raw', key, signingAlgorithm, false, ['sign']);
            return yield this.subtle.sign(signingAlgorithm, impKey, value);
        });
    }
    // Safely compare two values in a way that protects against timing attacks (Double HMAC Verification).
    // ref: https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2011/february/double-hmac-verification/
    // ref: https://paragonie.com/blog/2015/11/preventing-timing-attacks-on-string-comparison-with-double-hmac-strategy
    compare(a, b) {
        return webCryptoFunction_service_awaiter(this, void 0, void 0, function* () {
            const macKey = yield this.randomBytes(32);
            const signingAlgorithm = {
                name: 'HMAC',
                hash: { name: 'SHA-256' },
            };
            const impKey = yield this.subtle.importKey('raw', macKey, signingAlgorithm, false, ['sign']);
            const mac1 = yield this.subtle.sign(signingAlgorithm, impKey, a);
            const mac2 = yield this.subtle.sign(signingAlgorithm, impKey, b);
            if (mac1.byteLength !== mac2.byteLength) {
                return false;
            }
            const arr1 = new Uint8Array(mac1);
            const arr2 = new Uint8Array(mac2);
            for (let i = 0; i < arr2.length; i++) {
                if (arr1[i] !== arr2[i]) {
                    return false;
                }
            }
            return true;
        });
    }
    hmacFast(value, key, algorithm) {
        const hmac = lib["hmac"].create();
        hmac.start(algorithm, key);
        hmac.update(value);
        const bytes = hmac.digest().getBytes();
        return Promise.resolve(bytes);
    }
    compareFast(a, b) {
        return webCryptoFunction_service_awaiter(this, void 0, void 0, function* () {
            const rand = yield this.randomBytes(32);
            const bytes = new Uint32Array(rand);
            const buffer = lib["util"].createBuffer();
            for (let i = 0; i < bytes.length; i++) {
                buffer.putInt32(bytes[i]);
            }
            const macKey = buffer.getBytes();
            const hmac = lib["hmac"].create();
            hmac.start('sha256', macKey);
            hmac.update(a);
            const mac1 = hmac.digest().getBytes();
            hmac.start(null, null);
            hmac.update(b);
            const mac2 = hmac.digest().getBytes();
            const equals = mac1 === mac2;
            return equals;
        });
    }
    aesEncrypt(data, iv, key) {
        return webCryptoFunction_service_awaiter(this, void 0, void 0, function* () {
            const impKey = yield this.subtle.importKey('raw', key, { name: 'AES-CBC' }, false, ['encrypt']);
            return yield this.subtle.encrypt({ name: 'AES-CBC', iv: iv }, impKey, data);
        });
    }
    aesDecryptFastParameters(data, iv, mac, key) {
        const p = new DecryptParameters();
        if (key.meta != null) {
            p.encKey = key.meta.encKeyByteString;
            p.macKey = key.meta.macKeyByteString;
        }
        if (p.encKey == null) {
            p.encKey = lib["util"].decode64(key.encKeyB64);
        }
        p.data = lib["util"].decode64(data);
        p.iv = lib["util"].decode64(iv);
        p.macData = p.iv + p.data;
        if (p.macKey == null && key.macKeyB64 != null) {
            p.macKey = lib["util"].decode64(key.macKeyB64);
        }
        if (mac != null) {
            p.mac = lib["util"].decode64(mac);
        }
        // cache byte string keys for later
        if (key.meta == null) {
            key.meta = {};
        }
        if (key.meta.encKeyByteString == null) {
            key.meta.encKeyByteString = p.encKey;
        }
        if (p.macKey != null && key.meta.macKeyByteString == null) {
            key.meta.macKeyByteString = p.macKey;
        }
        return p;
    }
    aesDecryptFast(parameters) {
        const dataBuffer = lib["util"].createBuffer(parameters.data);
        const decipher = lib["cipher"].createDecipher('AES-CBC', parameters.encKey);
        decipher.start({ iv: parameters.iv });
        decipher.update(dataBuffer);
        decipher.finish();
        const val = decipher.output.toString('utf8');
        return Promise.resolve(val);
    }
    aesDecrypt(data, iv, key) {
        return webCryptoFunction_service_awaiter(this, void 0, void 0, function* () {
            const impKey = yield this.subtle.importKey('raw', key, { name: 'AES-CBC' }, false, ['decrypt']);
            return yield this.subtle.decrypt({ name: 'AES-CBC', iv: iv }, impKey, data);
        });
    }
    rsaEncrypt(data, publicKey, algorithm) {
        return webCryptoFunction_service_awaiter(this, void 0, void 0, function* () {
            // Note: Edge browser requires that we specify name and hash for both key import and decrypt.
            // We cannot use the proper types here.
            const rsaParams = {
                name: 'RSA-OAEP',
                hash: { name: this.toWebCryptoAlgorithm(algorithm) },
            };
            const impKey = yield this.subtle.importKey('spki', publicKey, rsaParams, false, ['encrypt']);
            return yield this.subtle.encrypt(rsaParams, impKey, data);
        });
    }
    rsaDecrypt(data, privateKey, algorithm) {
        return webCryptoFunction_service_awaiter(this, void 0, void 0, function* () {
            // Note: Edge browser requires that we specify name and hash for both key import and decrypt.
            // We cannot use the proper types here.
            const rsaParams = {
                name: 'RSA-OAEP',
                hash: { name: this.toWebCryptoAlgorithm(algorithm) },
            };
            const impKey = yield this.subtle.importKey('pkcs8', privateKey, rsaParams, false, ['decrypt']);
            return yield this.subtle.decrypt(rsaParams, impKey, data);
        });
    }
    rsaExtractPublicKey(privateKey) {
        return webCryptoFunction_service_awaiter(this, void 0, void 0, function* () {
            const rsaParams = {
                name: 'RSA-OAEP',
                // Have to specify some algorithm
                hash: { name: this.toWebCryptoAlgorithm('sha1') },
            };
            const impPrivateKey = yield this.subtle.importKey('pkcs8', privateKey, rsaParams, true, ['decrypt']);
            const jwkPrivateKey = yield this.subtle.exportKey('jwk', impPrivateKey);
            const jwkPublicKeyParams = {
                kty: 'RSA',
                e: jwkPrivateKey.e,
                n: jwkPrivateKey.n,
                alg: 'RSA-OAEP',
                ext: true,
            };
            const impPublicKey = yield this.subtle.importKey('jwk', jwkPublicKeyParams, rsaParams, true, ['encrypt']);
            return yield this.subtle.exportKey('spki', impPublicKey);
        });
    }
    rsaGenerateKeyPair(length) {
        return webCryptoFunction_service_awaiter(this, void 0, void 0, function* () {
            const rsaParams = {
                name: 'RSA-OAEP',
                modulusLength: length,
                publicExponent: new Uint8Array([0x01, 0x00, 0x01]),
                // Have to specify some algorithm
                hash: { name: this.toWebCryptoAlgorithm('sha1') },
            };
            const keyPair = yield this.subtle.generateKey(rsaParams, true, ['encrypt', 'decrypt']);
            const publicKey = yield this.subtle.exportKey('spki', keyPair.publicKey);
            const privateKey = yield this.subtle.exportKey('pkcs8', keyPair.privateKey);
            return [publicKey, privateKey];
        });
    }
    randomBytes(length) {
        const arr = new Uint8Array(length);
        this.crypto.getRandomValues(arr);
        return Promise.resolve(arr.buffer);
    }
    toBuf(value) {
        let buf;
        if (typeof (value) === 'string') {
            buf = utils["a" /* Utils */].fromUtf8ToArray(value).buffer;
        }
        else {
            buf = value;
        }
        return buf;
    }
    toByteString(value) {
        let bytes;
        if (typeof (value) === 'string') {
            bytes = lib["util"].encodeUtf8(value);
        }
        else {
            bytes = utils["a" /* Utils */].fromBufferToByteString(value);
        }
        return bytes;
    }
    toWebCryptoAlgorithm(algorithm) {
        if (algorithm === 'md5') {
            throw new Error('MD5 is not supported in WebCrypto.');
        }
        return algorithm === 'sha1' ? 'SHA-1' : algorithm === 'sha256' ? 'SHA-256' : 'SHA-512';
    }
}

// EXTERNAL MODULE: ./jslib/src/misc/analytics.ts
var analytics = __webpack_require__(145);

// CONCATENATED MODULE: ./jslib/src/misc/index.ts


// EXTERNAL MODULE: ./src/browser/browserApi.ts
var browserApi = __webpack_require__(13);

// EXTERNAL MODULE: ./src/browser/safariApp.ts
var safariApp = __webpack_require__(28);

// CONCATENATED MODULE: ./src/background/commands.background.ts
var commands_background_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

class commands_background_CommandsBackground {
    constructor(main, passwordGenerationService, platformUtilsService, analytics, vaultTimeoutService) {
        this.main = main;
        this.passwordGenerationService = passwordGenerationService;
        this.platformUtilsService = platformUtilsService;
        this.analytics = analytics;
        this.vaultTimeoutService = vaultTimeoutService;
        this.isSafari = this.platformUtilsService.isSafari();
        this.isVivaldi = this.platformUtilsService.isVivaldi();
    }
    init() {
        return commands_background_awaiter(this, void 0, void 0, function* () {
            if (this.isSafari || this.isVivaldi) {
                browserApi["a" /* BrowserApi */].messageListener('commands.background', (msg, sender, sendResponse) => commands_background_awaiter(this, void 0, void 0, function* () {
                    if (msg.command === 'keyboardShortcutTriggered' && msg.shortcut) {
                        yield this.processCommand(msg.shortcut, sender);
                    }
                }));
            }
            else if (chrome && chrome.commands) {
                chrome.commands.onCommand.addListener((command) => commands_background_awaiter(this, void 0, void 0, function* () {
                    yield this.processCommand(command);
                }));
            }
        });
    }
    processCommand(command, sender) {
        return commands_background_awaiter(this, void 0, void 0, function* () {
            switch (command) {
                case 'generate_password':
                    yield this.generatePasswordToClipboard();
                    break;
                case 'autofill_login':
                    yield this.autoFillLogin(sender ? sender.tab : null);
                    break;
                case 'open_popup':
                    yield this.openPopup();
                    break;
                case 'lock_vault':
                    yield this.vaultTimeoutService.lock(true);
                    break;
                default:
                    break;
            }
        });
    }
    generatePasswordToClipboard() {
        return commands_background_awaiter(this, void 0, void 0, function* () {
            const options = (yield this.passwordGenerationService.getOptions())[0];
            const password = yield this.passwordGenerationService.generatePassword(options);
            this.platformUtilsService.copyToClipboard(password, { window: window });
            this.passwordGenerationService.addHistory(password);
            this.analytics.ga('send', {
                hitType: 'event',
                eventAction: 'Generated Password From Command',
            });
        });
    }
    autoFillLogin(tab) {
        return commands_background_awaiter(this, void 0, void 0, function* () {
            if (yield this.vaultTimeoutService.isLocked()) {
                return;
            }
            if (!tab) {
                tab = yield browserApi["a" /* BrowserApi */].getTabFromCurrentWindowId();
            }
            if (tab == null) {
                return;
            }
            yield this.main.collectPageDetailsForContentScript(tab, 'autofill_cmd');
            this.analytics.ga('send', {
                hitType: 'event',
                eventAction: 'Autofilled From Command',
            });
        });
    }
    openPopup() {
        return commands_background_awaiter(this, void 0, void 0, function* () {
            // Chrome APIs cannot open popup
            if (!this.isSafari) {
                return;
            }
            this.main.openPopup();
            this.analytics.ga('send', {
                hitType: 'event',
                eventAction: 'Opened Popup From Command',
            });
        });
    }
}

// EXTERNAL MODULE: ./jslib/src/enums/eventType.ts
var enums_eventType = __webpack_require__(43);

// CONCATENATED MODULE: ./src/background/contextMenus.background.ts
var contextMenus_background_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};


class contextMenus_background_ContextMenusBackground {
    constructor(main, cipherService, passwordGenerationService, analytics, platformUtilsService, vaultTimeoutService, eventService, totpService) {
        this.main = main;
        this.cipherService = cipherService;
        this.passwordGenerationService = passwordGenerationService;
        this.analytics = analytics;
        this.platformUtilsService = platformUtilsService;
        this.vaultTimeoutService = vaultTimeoutService;
        this.eventService = eventService;
        this.totpService = totpService;
        this.contextMenus = chrome.contextMenus;
    }
    init() {
        return contextMenus_background_awaiter(this, void 0, void 0, function* () {
            if (!this.contextMenus) {
                return;
            }
            this.contextMenus.onClicked.addListener((info, tab) => contextMenus_background_awaiter(this, void 0, void 0, function* () {
                if (info.menuItemId === 'generate-password') {
                    yield this.generatePasswordToClipboard();
                }
                else if (info.parentMenuItemId === 'autofill' ||
                    info.parentMenuItemId === 'copy-username' ||
                    info.parentMenuItemId === 'copy-password' ||
                    info.parentMenuItemId === 'copy-totp') {
                    yield this.cipherAction(info);
                }
            }));
        });
    }
    generatePasswordToClipboard() {
        return contextMenus_background_awaiter(this, void 0, void 0, function* () {
            const options = (yield this.passwordGenerationService.getOptions())[0];
            const password = yield this.passwordGenerationService.generatePassword(options);
            this.platformUtilsService.copyToClipboard(password, { window: window });
            this.passwordGenerationService.addHistory(password);
            this.analytics.ga('send', {
                hitType: 'event',
                eventAction: 'Generated Password From Context Menu',
            });
        });
    }
    cipherAction(info) {
        return contextMenus_background_awaiter(this, void 0, void 0, function* () {
            const id = info.menuItemId.split('_')[1];
            if (id === 'noop') {
                if (chrome.browserAction && chrome.browserAction.openPopup) {
                    chrome.browserAction.openPopup();
                }
                return;
            }
            if (yield this.vaultTimeoutService.isLocked()) {
                return;
            }
            const ciphers = yield this.cipherService.getAllDecrypted();
            const cipher = ciphers.find((c) => c.id === id);
            if (cipher == null) {
                return;
            }
            if (info.parentMenuItemId === 'autofill') {
                this.analytics.ga('send', {
                    hitType: 'event',
                    eventAction: 'Autofilled From Context Menu',
                });
                yield this.startAutofillPage(cipher);
            }
            else if (info.parentMenuItemId === 'copy-username') {
                this.analytics.ga('send', {
                    hitType: 'event',
                    eventAction: 'Copied Username From Context Menu',
                });
                this.platformUtilsService.copyToClipboard(cipher.login.username, { window: window });
            }
            else if (info.parentMenuItemId === 'copy-password') {
                this.analytics.ga('send', {
                    hitType: 'event',
                    eventAction: 'Copied Password From Context Menu',
                });
                this.platformUtilsService.copyToClipboard(cipher.login.password, { window: window });
                this.eventService.collect(enums_eventType["a" /* EventType */].Cipher_ClientCopiedPassword, cipher.id);
            }
            else if (info.parentMenuItemId === 'copy-totp') {
                this.analytics.ga('send', {
                    hitType: 'event',
                    eventAction: 'Copied Totp From Context Menu',
                });
                const totpValue = yield this.totpService.getCode(cipher.login.totp);
                this.platformUtilsService.copyToClipboard(totpValue, { window: window });
            }
        });
    }
    startAutofillPage(cipher) {
        return contextMenus_background_awaiter(this, void 0, void 0, function* () {
            this.main.loginToAutoFill = cipher;
            const tab = yield browserApi["a" /* BrowserApi */].getTabFromCurrentWindow();
            if (tab == null) {
                return;
            }
            browserApi["a" /* BrowserApi */].tabSendMessage(tab, {
                command: 'collectPageDetails',
                tab: tab,
                sender: 'contextMenu',
            });
        });
    }
}

// CONCATENATED MODULE: ./src/background/idle.background.ts
var idle_background_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

const IdleInterval = 60 * 5; // 5 minutes
class idle_background_IdleBackground {
    constructor(vaultTimeoutService, storageService, notificationsService) {
        this.vaultTimeoutService = vaultTimeoutService;
        this.storageService = storageService;
        this.notificationsService = notificationsService;
        this.idleTimer = null;
        this.idleState = 'active';
        this.idle = chrome.idle || (browser != null ? browser.idle : null);
    }
    init() {
        return idle_background_awaiter(this, void 0, void 0, function* () {
            if (!this.idle) {
                return;
            }
            const idleHandler = (newState) => {
                if (newState === 'active') {
                    this.notificationsService.reconnectFromActivity();
                }
                else {
                    this.notificationsService.disconnectFromInactivity();
                }
            };
            if (this.idle.onStateChanged && this.idle.setDetectionInterval) {
                this.idle.setDetectionInterval(IdleInterval);
                this.idle.onStateChanged.addListener(idleHandler);
            }
            else {
                this.pollIdle(idleHandler);
            }
            if (this.idle.onStateChanged) {
                this.idle.onStateChanged.addListener((newState) => idle_background_awaiter(this, void 0, void 0, function* () {
                    if (newState === 'locked') { // If the screen is locked or the screensaver activates
                        const timeout = yield this.storageService.get(constants_service["a" /* ConstantsService */].vaultTimeoutKey);
                        if (timeout === -2) { // On System Lock vault timeout option
                            const action = yield this.storageService.get(constants_service["a" /* ConstantsService */].vaultTimeoutActionKey);
                            if (action === 'logOut') {
                                yield this.vaultTimeoutService.logOut();
                            }
                            else {
                                yield this.vaultTimeoutService.lock(true);
                            }
                        }
                    }
                }));
            }
        });
    }
    pollIdle(handler) {
        if (this.idleTimer != null) {
            window.clearTimeout(this.idleTimer);
            this.idleTimer = null;
        }
        this.idle.queryState(IdleInterval, (state) => {
            if (state !== this.idleState) {
                this.idleState = state;
                handler(state);
            }
            this.idleTimer = window.setTimeout(() => this.pollIdle(handler), 5000);
        });
    }
}

// CONCATENATED MODULE: ./src/background/runtime.background.ts
var runtime_background_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};







class runtime_background_RuntimeBackground {
    constructor(main, autofillService, cipherService, platformUtilsService, storageService, i18nService, analytics, notificationsService, systemService, vaultTimeoutService, environmentService) {
        this.main = main;
        this.autofillService = autofillService;
        this.cipherService = cipherService;
        this.platformUtilsService = platformUtilsService;
        this.storageService = storageService;
        this.i18nService = i18nService;
        this.analytics = analytics;
        this.notificationsService = notificationsService;
        this.systemService = systemService;
        this.vaultTimeoutService = vaultTimeoutService;
        this.environmentService = environmentService;
        this.pageDetailsToAutoFill = [];
        this.onInstalledReason = null;
        this.isSafari = this.platformUtilsService.isSafari();
        this.runtime = this.isSafari ? {} : chrome.runtime;
        // onInstalled listener must be wired up before anything else, so we do it in the ctor
        if (!this.isSafari) {
            this.runtime.onInstalled.addListener((details) => {
                this.onInstalledReason = details.reason;
            });
        }
    }
    init() {
        return runtime_background_awaiter(this, void 0, void 0, function* () {
            if (!this.runtime) {
                return;
            }
            yield this.checkOnInstalled();
            browserApi["a" /* BrowserApi */].messageListener('runtime.background', (msg, sender, sendResponse) => runtime_background_awaiter(this, void 0, void 0, function* () {
                yield this.processMessage(msg, sender, sendResponse);
            }));
        });
    }
    processMessage(msg, sender, sendResponse) {
        return runtime_background_awaiter(this, void 0, void 0, function* () {
            switch (msg.command) {
                case 'loggedIn':
                case 'unlocked':
                    yield this.main.setIcon();
                    yield this.main.refreshBadgeAndMenu(false);
                    this.notificationsService.updateConnection(msg.command === 'unlocked');
                    this.systemService.cancelProcessReload();
                    break;
                case 'logout':
                    yield this.main.logout(msg.expired);
                    break;
                case 'syncCompleted':
                    if (msg.successfully) {
                        setTimeout(() => runtime_background_awaiter(this, void 0, void 0, function* () { return yield this.main.refreshBadgeAndMenu(); }), 2000);
                    }
                    break;
                case 'openPopup':
                    yield this.main.openPopup();
                    break;
                case 'showDialogResolve':
                    this.platformUtilsService.resolveDialogPromise(msg.dialogId, msg.confirmed);
                    break;
                case 'bgGetDataForTab':
                    yield this.getDataForTab(sender.tab, msg.responseCommand);
                    break;
                case 'bgOpenNotificationBar':
                    yield browserApi["a" /* BrowserApi */].tabSendMessageData(sender.tab, 'openNotificationBar', msg.data);
                    break;
                case 'bgCloseNotificationBar':
                    yield browserApi["a" /* BrowserApi */].tabSendMessageData(sender.tab, 'closeNotificationBar');
                    break;
                case 'bgAdjustNotificationBar':
                    yield browserApi["a" /* BrowserApi */].tabSendMessageData(sender.tab, 'adjustNotificationBar', msg.data);
                    break;
                case 'bgCollectPageDetails':
                    yield this.main.collectPageDetailsForContentScript(sender.tab, msg.sender, sender.frameId);
                    break;
                case 'bgAddLogin':
                    yield this.addLogin(msg.login, sender.tab);
                    break;
                case 'bgChangedPassword':
                    yield this.changedPassword(msg.data, sender.tab);
                    break;
                case 'bgAddClose':
                case 'bgChangeClose':
                    this.removeTabFromNotificationQueue(sender.tab);
                    break;
                case 'bgAddSave':
                    yield this.saveAddLogin(sender.tab);
                    break;
                case 'bgChangeSave':
                    yield this.saveChangePassword(sender.tab);
                    break;
                case 'bgNeverSave':
                    yield this.saveNever(sender.tab);
                    break;
                case 'bgUpdateContextMenu':
                case 'editedCipher':
                case 'addedCipher':
                case 'deletedCipher':
                    yield this.main.refreshBadgeAndMenu();
                    break;
                case 'bgReseedStorage':
                    yield this.main.reseedStorage();
                    break;
                case 'collectPageDetailsResponse':
                    if (yield this.vaultTimeoutService.isLocked()) {
                        return;
                    }
                    switch (msg.sender) {
                        case 'notificationBar':
                            const forms = this.autofillService.getFormsWithPasswordFields(msg.details);
                            yield browserApi["a" /* BrowserApi */].tabSendMessageData(msg.tab, 'notificationBarPageDetails', {
                                details: msg.details,
                                forms: forms,
                            });
                            break;
                        case 'autofiller':
                        case 'autofill_cmd':
                            const totpCode = yield this.autofillService.doAutoFillActiveTab([{
                                    frameId: sender.frameId,
                                    tab: msg.tab,
                                    details: msg.details,
                                }], msg.sender === 'autofill_cmd');
                            if (totpCode != null) {
                                this.platformUtilsService.copyToClipboard(totpCode, { window: window });
                            }
                            break;
                        case 'contextMenu':
                            clearTimeout(this.autofillTimeout);
                            this.pageDetailsToAutoFill.push({
                                frameId: sender.frameId,
                                tab: msg.tab,
                                details: msg.details,
                            });
                            this.autofillTimeout = setTimeout(() => runtime_background_awaiter(this, void 0, void 0, function* () { return yield this.autofillPage(); }), 300);
                            break;
                        default:
                            break;
                    }
                    break;
                case 'authResult':
                    let vaultUrl = this.environmentService.getWebVaultUrl();
                    if (vaultUrl == null) {
                        vaultUrl = 'https://vault.bitwarden.com';
                    }
                    if (msg.referrer == null || utils["a" /* Utils */].getHostname(vaultUrl) !== msg.referrer) {
                        return;
                    }
                    try {
                        browserApi["a" /* BrowserApi */].createNewTab('popup/index.html?uilocation=popout#/sso?code=' +
                            msg.code + '&state=' + msg.state);
                    }
                    catch (_a) { }
                    break;
                default:
                    break;
            }
        });
    }
    autofillPage() {
        return runtime_background_awaiter(this, void 0, void 0, function* () {
            const totpCode = yield this.autofillService.doAutoFill({
                cipher: this.main.loginToAutoFill,
                pageDetails: this.pageDetailsToAutoFill,
                fillNewPassword: true
            });
            if (totpCode != null) {
                this.platformUtilsService.copyToClipboard(totpCode, { window: window });
            }
            // reset
            this.main.loginToAutoFill = null;
            this.pageDetailsToAutoFill = [];
        });
    }
    saveAddLogin(tab) {
        return runtime_background_awaiter(this, void 0, void 0, function* () {
            if (yield this.vaultTimeoutService.isLocked()) {
                return;
            }
            for (let i = this.main.notificationQueue.length - 1; i >= 0; i--) {
                const queueMessage = this.main.notificationQueue[i];
                if (queueMessage.tabId !== tab.id || queueMessage.type !== 'addLogin') {
                    continue;
                }
                const tabDomain = utils["a" /* Utils */].getDomain(tab.url);
                if (tabDomain != null && tabDomain !== queueMessage.domain) {
                    continue;
                }
                this.main.notificationQueue.splice(i, 1);
                browserApi["a" /* BrowserApi */].tabSendMessageData(tab, 'closeNotificationBar');
                const loginModel = new loginView["a" /* LoginView */]();
                const loginUri = new loginUriView["a" /* LoginUriView */]();
                loginUri.uri = queueMessage.uri;
                loginModel.uris = [loginUri];
                loginModel.username = queueMessage.username;
                loginModel.password = queueMessage.password;
                const model = new cipherView["a" /* CipherView */]();
                model.name = utils["a" /* Utils */].getHostname(queueMessage.uri) || queueMessage.domain;
                model.name = model.name.replace(/^www\./, '');
                model.type = cipherType["a" /* CipherType */].Login;
                model.login = loginModel;
                const cipher = yield this.cipherService.encrypt(model);
                yield this.cipherService.saveWithServer(cipher);
                this.analytics.ga('send', {
                    hitType: 'event',
                    eventAction: 'Added Login from Notification Bar',
                });
            }
        });
    }
    saveChangePassword(tab) {
        return runtime_background_awaiter(this, void 0, void 0, function* () {
            if (yield this.vaultTimeoutService.isLocked()) {
                return;
            }
            for (let i = this.main.notificationQueue.length - 1; i >= 0; i--) {
                const queueMessage = this.main.notificationQueue[i];
                if (queueMessage.tabId !== tab.id || queueMessage.type !== 'changePassword') {
                    continue;
                }
                const tabDomain = utils["a" /* Utils */].getDomain(tab.url);
                if (tabDomain != null && tabDomain !== queueMessage.domain) {
                    continue;
                }
                this.main.notificationQueue.splice(i, 1);
                browserApi["a" /* BrowserApi */].tabSendMessageData(tab, 'closeNotificationBar');
                const cipher = yield this.cipherService.get(queueMessage.cipherId);
                if (cipher != null && cipher.type === cipherType["a" /* CipherType */].Login) {
                    const model = yield cipher.decrypt();
                    model.login.password = queueMessage.newPassword;
                    const newCipher = yield this.cipherService.encrypt(model);
                    yield this.cipherService.saveWithServer(newCipher);
                    this.analytics.ga('send', {
                        hitType: 'event',
                        eventAction: 'Changed Password from Notification Bar',
                    });
                }
            }
        });
    }
    saveNever(tab) {
        return runtime_background_awaiter(this, void 0, void 0, function* () {
            for (let i = this.main.notificationQueue.length - 1; i >= 0; i--) {
                const queueMessage = this.main.notificationQueue[i];
                if (queueMessage.tabId !== tab.id || queueMessage.type !== 'addLogin') {
                    continue;
                }
                const tabDomain = utils["a" /* Utils */].getDomain(tab.url);
                if (tabDomain != null && tabDomain !== queueMessage.domain) {
                    continue;
                }
                this.main.notificationQueue.splice(i, 1);
                browserApi["a" /* BrowserApi */].tabSendMessageData(tab, 'closeNotificationBar');
                const hostname = utils["a" /* Utils */].getHostname(tab.url);
                yield this.cipherService.saveNeverDomain(hostname);
            }
        });
    }
    addLogin(loginInfo, tab) {
        return runtime_background_awaiter(this, void 0, void 0, function* () {
            if (yield this.vaultTimeoutService.isLocked()) {
                return;
            }
            const loginDomain = utils["a" /* Utils */].getDomain(loginInfo.url);
            if (loginDomain == null) {
                return;
            }
            let normalizedUsername = loginInfo.username;
            if (normalizedUsername != null) {
                normalizedUsername = normalizedUsername.toLowerCase();
            }
            const ciphers = yield this.cipherService.getAllDecryptedForUrl(loginInfo.url);
            const usernameMatches = ciphers.filter((c) => c.login.username != null && c.login.username.toLowerCase() === normalizedUsername);
            if (usernameMatches.length === 0) {
                const disabledAddLogin = yield this.storageService.get(constants_service["a" /* ConstantsService */].disableAddLoginNotificationKey);
                if (disabledAddLogin) {
                    return;
                }
                // remove any old messages for this tab
                this.removeTabFromNotificationQueue(tab);
                this.main.notificationQueue.push({
                    type: 'addLogin',
                    username: loginInfo.username,
                    password: loginInfo.password,
                    domain: loginDomain,
                    uri: loginInfo.url,
                    tabId: tab.id,
                    expires: new Date((new Date()).getTime() + 30 * 60000),
                });
                yield this.main.checkNotificationQueue(tab);
            }
            else if (usernameMatches.length === 1 && usernameMatches[0].login.password !== loginInfo.password) {
                const disabledChangePassword = yield this.storageService.get(constants_service["a" /* ConstantsService */].disableChangedPasswordNotificationKey);
                if (disabledChangePassword) {
                    return;
                }
                this.addChangedPasswordToQueue(usernameMatches[0].id, loginDomain, loginInfo.password, tab);
            }
        });
    }
    changedPassword(changeData, tab) {
        return runtime_background_awaiter(this, void 0, void 0, function* () {
            if (yield this.vaultTimeoutService.isLocked()) {
                return;
            }
            const loginDomain = utils["a" /* Utils */].getDomain(changeData.url);
            if (loginDomain == null) {
                return;
            }
            let id = null;
            const ciphers = yield this.cipherService.getAllDecryptedForUrl(changeData.url);
            if (changeData.currentPassword != null) {
                const passwordMatches = ciphers.filter((c) => c.login.password === changeData.currentPassword);
                if (passwordMatches.length === 1) {
                    id = passwordMatches[0].id;
                }
            }
            else if (ciphers.length === 1) {
                id = ciphers[0].id;
            }
            if (id != null) {
                this.addChangedPasswordToQueue(id, loginDomain, changeData.newPassword, tab);
            }
        });
    }
    addChangedPasswordToQueue(cipherId, loginDomain, newPassword, tab) {
        return runtime_background_awaiter(this, void 0, void 0, function* () {
            // remove any old messages for this tab
            this.removeTabFromNotificationQueue(tab);
            this.main.notificationQueue.push({
                type: 'changePassword',
                cipherId: cipherId,
                newPassword: newPassword,
                domain: loginDomain,
                tabId: tab.id,
                expires: new Date((new Date()).getTime() + 30 * 60000),
            });
            yield this.main.checkNotificationQueue(tab);
        });
    }
    removeTabFromNotificationQueue(tab) {
        for (let i = this.main.notificationQueue.length - 1; i >= 0; i--) {
            if (this.main.notificationQueue[i].tabId === tab.id) {
                this.main.notificationQueue.splice(i, 1);
            }
        }
    }
    checkOnInstalled() {
        return runtime_background_awaiter(this, void 0, void 0, function* () {
            if (this.isSafari) {
                const installedVersion = yield this.storageService.get(constants_service["a" /* ConstantsService */].installedVersionKey);
                if (installedVersion == null) {
                    this.onInstalledReason = 'install';
                }
                else if (browserApi["a" /* BrowserApi */].getApplicationVersion() !== installedVersion) {
                    this.onInstalledReason = 'update';
                }
                if (this.onInstalledReason != null) {
                    yield this.storageService.save(constants_service["a" /* ConstantsService */].installedVersionKey, browserApi["a" /* BrowserApi */].getApplicationVersion());
                }
            }
            setTimeout(() => runtime_background_awaiter(this, void 0, void 0, function* () {
                if (this.onInstalledReason != null) {
                    if (this.onInstalledReason === 'install') {
                        browserApi["a" /* BrowserApi */].createNewTab('https://bitwarden.com/browser-start/');
                        yield this.setDefaultSettings();
                    }
                    this.analytics.ga('send', {
                        hitType: 'event',
                        eventAction: 'onInstalled ' + this.onInstalledReason,
                    });
                    this.onInstalledReason = null;
                }
            }), 100);
        });
    }
    setDefaultSettings() {
        return runtime_background_awaiter(this, void 0, void 0, function* () {
            // Default timeout option to "on restart".
            const currentVaultTimeout = yield this.storageService.get(constants_service["a" /* ConstantsService */].vaultTimeoutKey);
            if (currentVaultTimeout == null) {
                yield this.storageService.save(constants_service["a" /* ConstantsService */].vaultTimeoutKey, -1);
            }
            // Default action to "lock".
            const currentVaultTimeoutAction = yield this.storageService.get(constants_service["a" /* ConstantsService */].vaultTimeoutActionKey);
            if (currentVaultTimeoutAction == null) {
                yield this.storageService.save(constants_service["a" /* ConstantsService */].vaultTimeoutActionKey, 'lock');
            }
        });
    }
    getDataForTab(tab, responseCommand) {
        return runtime_background_awaiter(this, void 0, void 0, function* () {
            const responseData = {};
            if (responseCommand === 'notificationBarDataResponse') {
                responseData.neverDomains = yield this.storageService.get(constants_service["a" /* ConstantsService */].neverDomainsKey);
                responseData.disabledAddLoginNotification = yield this.storageService.get(constants_service["a" /* ConstantsService */].disableAddLoginNotificationKey);
                responseData.disabledChangedPasswordNotification = yield this.storageService.get(constants_service["a" /* ConstantsService */].disableChangedPasswordNotificationKey);
            }
            else if (responseCommand === 'autofillerAutofillOnPageLoadEnabledResponse') {
                responseData.autofillEnabled = yield this.storageService.get(constants_service["a" /* ConstantsService */].enableAutoFillOnPageLoadKey);
            }
            else if (responseCommand === 'notificationBarFrameDataResponse') {
                responseData.i18n = {
                    appName: this.i18nService.t('appName'),
                    close: this.i18nService.t('close'),
                    yes: this.i18nService.t('yes'),
                    never: this.i18nService.t('never'),
                    notificationAddSave: this.i18nService.t('notificationAddSave'),
                    notificationNeverSave: this.i18nService.t('notificationNeverSave'),
                    notificationAddDesc: this.i18nService.t('notificationAddDesc'),
                    notificationChangeSave: this.i18nService.t('notificationChangeSave'),
                    notificationChangeDesc: this.i18nService.t('notificationChangeDesc'),
                };
            }
            yield browserApi["a" /* BrowserApi */].tabSendMessageData(tab, responseCommand, responseData);
        });
    }
}

// CONCATENATED MODULE: ./src/background/tabs.background.ts
var tabs_background_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class TabsBackground {
    constructor(main) {
        this.main = main;
        this.tabs = chrome.tabs;
    }
    init() {
        return tabs_background_awaiter(this, void 0, void 0, function* () {
            if (!this.tabs) {
                return;
            }
            this.tabs.onActivated.addListener((activeInfo) => tabs_background_awaiter(this, void 0, void 0, function* () {
                yield this.main.refreshBadgeAndMenu();
                this.main.messagingService.send('tabActivated');
                this.main.messagingService.send('tabChanged');
            }));
            this.tabs.onReplaced.addListener((addedTabId, removedTabId) => tabs_background_awaiter(this, void 0, void 0, function* () {
                if (this.main.onReplacedRan) {
                    return;
                }
                this.main.onReplacedRan = true;
                yield this.main.checkNotificationQueue();
                yield this.main.refreshBadgeAndMenu();
                this.main.messagingService.send('tabReplaced');
                this.main.messagingService.send('tabChanged');
            }));
            this.tabs.onUpdated.addListener((tabId, changeInfo, tab) => tabs_background_awaiter(this, void 0, void 0, function* () {
                if (this.main.onUpdatedRan) {
                    return;
                }
                this.main.onUpdatedRan = true;
                yield this.main.checkNotificationQueue();
                yield this.main.refreshBadgeAndMenu();
                this.main.messagingService.send('tabUpdated');
                this.main.messagingService.send('tabChanged');
            }));
        });
    }
}

// CONCATENATED MODULE: ./src/background/webRequest.background.ts
var webRequest_background_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

class webRequest_background_WebRequestBackground {
    constructor(platformUtilsService, cipherService, vaultTimeoutService) {
        this.cipherService = cipherService;
        this.vaultTimeoutService = vaultTimeoutService;
        this.pendingAuthRequests = [];
        this.webRequest = window.chrome.webRequest;
        this.isFirefox = platformUtilsService.isFirefox();
    }
    init() {
        return webRequest_background_awaiter(this, void 0, void 0, function* () {
            if (!this.webRequest || !this.webRequest.onAuthRequired) {
                return;
            }
            this.webRequest.onAuthRequired.addListener((details, callback) => webRequest_background_awaiter(this, void 0, void 0, function* () {
                if (!details.url || this.pendingAuthRequests.indexOf(details.requestId) !== -1) {
                    if (callback) {
                        callback();
                    }
                    return;
                }
                this.pendingAuthRequests.push(details.requestId);
                if (this.isFirefox) {
                    return new Promise((resolve, reject) => webRequest_background_awaiter(this, void 0, void 0, function* () {
                        yield this.resolveAuthCredentials(details.url, resolve, reject);
                    }));
                }
                else {
                    yield this.resolveAuthCredentials(details.url, callback, callback);
                }
            }), { urls: ['http://*/*', 'https://*/*'] }, [this.isFirefox ? 'blocking' : 'asyncBlocking']);
            this.webRequest.onCompleted.addListener((details) => this.completeAuthRequest(details), { urls: ['http://*/*'] });
            this.webRequest.onErrorOccurred.addListener((details) => this.completeAuthRequest(details), { urls: ['http://*/*'] });
        });
    }
    resolveAuthCredentials(domain, success, error) {
        return webRequest_background_awaiter(this, void 0, void 0, function* () {
            if (yield this.vaultTimeoutService.isLocked()) {
                error();
                return;
            }
            try {
                const ciphers = yield this.cipherService.getAllDecryptedForUrl(domain, null, uriMatchType["a" /* UriMatchType */].Host);
                if (ciphers == null || ciphers.length !== 1) {
                    error();
                    return;
                }
                success({
                    authCredentials: {
                        username: ciphers[0].login.username,
                        password: ciphers[0].login.password,
                    },
                });
            }
            catch (_a) {
                error();
            }
        });
    }
    completeAuthRequest(details) {
        const i = this.pendingAuthRequests.indexOf(details.requestId);
        if (i > -1) {
            this.pendingAuthRequests.splice(i, 1);
        }
    }
}

// CONCATENATED MODULE: ./src/background/windows.background.ts
var windows_background_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
class WindowsBackground {
    constructor(main) {
        this.main = main;
        this.windows = chrome.windows;
    }
    init() {
        return windows_background_awaiter(this, void 0, void 0, function* () {
            if (!this.windows) {
                return;
            }
            this.windows.onFocusChanged.addListener((windowId) => windows_background_awaiter(this, void 0, void 0, function* () {
                if (windowId === null || windowId < 0) {
                    return;
                }
                yield this.main.refreshBadgeAndMenu();
                this.main.messagingService.send('windowFocused');
                this.main.messagingService.send('windowChanged');
            }));
        });
    }
}

// CONCATENATED MODULE: ./src/models/autofillScript.ts
class AutofillScript {
    constructor(documentUUID) {
        this.script = [];
        this.documentUUID = {};
        this.properties = {};
        this.options = {};
        this.metadata = {};
        this.autosubmit = null;
        this.documentUUID = documentUUID;
    }
}

// CONCATENATED MODULE: ./src/services/autofill.service.ts
var autofill_service_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




const CardAttributes = ['autoCompleteType', 'data-stripe', 'htmlName', 'htmlID', 'label-tag',
    'placeholder', 'label-left', 'label-top', 'data-recurly'];
const CardAttributesExtended = [...CardAttributes, 'label-right'];
const IdentityAttributes = ['autoCompleteType', 'data-stripe', 'htmlName', 'htmlID', 'label-tag',
    'placeholder', 'label-left', 'label-top', 'data-recurly'];
const UsernameFieldNames = [
    // English
    'username', 'user name', 'email', 'email address', 'e-mail', 'e-mail address', 'userid', 'user id',
    'customer id', 'login id',
    // German
    'benutzername', 'benutzer name', 'email adresse', 'e-mail adresse', 'benutzerid', 'benutzer id'
];
const FirstnameFieldNames = [
    // English
    'f-name', 'first-name', 'given-name', 'first-n',
    // German
    'vorname'
];
const LastnameFieldNames = [
    // English
    'l-name', 'last-name', 's-name', 'surname', 'family-name', 'family-n', 'last-n',
    // German
    'nachname', 'familienname'
];
const ExcludedAutofillTypes = ['radio', 'checkbox', 'hidden', 'file', 'button', 'image', 'reset', 'search'];
// Each index represents a language. These three arrays should all be the same length.
// 0: English, 1: Danish, 2: German/Dutch, 3: French/Spanish/Italian, 4: Russian, 5: Portuguese
const MonthAbbr = ['mm', 'mm', 'mm', 'mm', 'mm', 'mm'];
const YearAbbrShort = ['yy', 'åå', 'jj', 'aa', 'гг', 'rr'];
const YearAbbrLong = ['yyyy', 'åååå', 'jjjj', 'aa', 'гггг', 'rrrr'];
const OperationDelays = new Map([
    ['buzzsprout.com', 100],
]);
/* tslint:disable */
const IsoCountries = {
    afghanistan: "AF", "aland islands": "AX", albania: "AL", algeria: "DZ", "american samoa": "AS", andorra: "AD",
    angola: "AO", anguilla: "AI", antarctica: "AQ", "antigua and barbuda": "AG", argentina: "AR", armenia: "AM",
    aruba: "AW", australia: "AU", austria: "AT", azerbaijan: "AZ", bahamas: "BS", bahrain: "BH", bangladesh: "BD",
    barbados: "BB", belarus: "BY", belgium: "BE", belize: "BZ", benin: "BJ", bermuda: "BM", bhutan: "BT",
    bolivia: "BO", "bosnia and herzegovina": "BA", botswana: "BW", "bouvet island": "BV", brazil: "BR",
    "british indian ocean territory": "IO", "brunei darussalam": "BN", bulgaria: "BG", "burkina faso": "BF",
    burundi: "BI", cambodia: "KH", cameroon: "CM", canada: "CA", "cape verde": "CV", "cayman islands": "KY",
    "central african republic": "CF", chad: "TD", chile: "CL", china: "CN", "christmas island": "CX",
    "cocos (keeling) islands": "CC", colombia: "CO", comoros: "KM", congo: "CG", "congo, democratic republic": "CD",
    "cook islands": "CK", "costa rica": "CR", "cote d'ivoire": "CI", croatia: "HR", cuba: "CU", cyprus: "CY",
    "czech republic": "CZ", denmark: "DK", djibouti: "DJ", dominica: "DM", "dominican republic": "DO", ecuador: "EC",
    egypt: "EG", "el salvador": "SV", "equatorial guinea": "GQ", eritrea: "ER", estonia: "EE", ethiopia: "ET",
    "falkland islands": "FK", "faroe islands": "FO", fiji: "FJ", finland: "FI", france: "FR", "french guiana": "GF",
    "french polynesia": "PF", "french southern territories": "TF", gabon: "GA", gambia: "GM", georgia: "GE",
    germany: "DE", ghana: "GH", gibraltar: "GI", greece: "GR", greenland: "GL", grenada: "GD", guadeloupe: "GP",
    guam: "GU", guatemala: "GT", guernsey: "GG", guinea: "GN", "guinea-bissau": "GW", guyana: "GY", haiti: "HT",
    "heard island & mcdonald islands": "HM", "holy see (vatican city state)": "VA", honduras: "HN", "hong kong": "HK",
    hungary: "HU", iceland: "IS", india: "IN", indonesia: "ID", "iran, islamic republic of": "IR", iraq: "IQ",
    ireland: "IE", "isle of man": "IM", israel: "IL", italy: "IT", jamaica: "JM", japan: "JP", jersey: "JE",
    jordan: "JO", kazakhstan: "KZ", kenya: "KE", kiribati: "KI", "republic of korea": "KR", "south korea": "KR",
    "democratic people's republic of korea": "KP", "north korea": "KP", kuwait: "KW", kyrgyzstan: "KG",
    "lao people's democratic republic": "LA", latvia: "LV", lebanon: "LB", lesotho: "LS", liberia: "LR",
    "libyan arab jamahiriya": "LY", liechtenstein: "LI", lithuania: "LT", luxembourg: "LU", macao: "MO",
    macedonia: "MK", madagascar: "MG", malawi: "MW", malaysia: "MY", maldives: "MV", mali: "ML", malta: "MT",
    "marshall islands": "MH", martinique: "MQ", mauritania: "MR", mauritius: "MU", mayotte: "YT", mexico: "MX",
    "micronesia, federated states of": "FM", moldova: "MD", monaco: "MC", mongolia: "MN", montenegro: "ME",
    montserrat: "MS", morocco: "MA", mozambique: "MZ", myanmar: "MM", namibia: "NA", nauru: "NR", nepal: "NP",
    netherlands: "NL", "netherlands antilles": "AN", "new caledonia": "NC", "new zealand": "NZ", nicaragua: "NI",
    niger: "NE", nigeria: "NG", niue: "NU", "norfolk island": "NF", "northern mariana islands": "MP", norway: "NO",
    oman: "OM", pakistan: "PK", palau: "PW", "palestinian territory, occupied": "PS", panama: "PA",
    "papua new guinea": "PG", paraguay: "PY", peru: "PE", philippines: "PH", pitcairn: "PN", poland: "PL",
    portugal: "PT", "puerto rico": "PR", qatar: "QA", reunion: "RE", romania: "RO", "russian federation": "RU",
    rwanda: "RW", "saint barthelemy": "BL", "saint helena": "SH", "saint kitts and nevis": "KN", "saint lucia": "LC",
    "saint martin": "MF", "saint pierre and miquelon": "PM", "saint vincent and grenadines": "VC", samoa: "WS",
    "san marino": "SM", "sao tome and principe": "ST", "saudi arabia": "SA", senegal: "SN", serbia: "RS",
    seychelles: "SC", "sierra leone": "SL", singapore: "SG", slovakia: "SK", slovenia: "SI", "solomon islands": "SB",
    somalia: "SO", "south africa": "ZA", "south georgia and sandwich isl.": "GS", spain: "ES", "sri lanka": "LK",
    sudan: "SD", suriname: "SR", "svalbard and jan mayen": "SJ", swaziland: "SZ", sweden: "SE", switzerland: "CH",
    "syrian arab republic": "SY", taiwan: "TW", tajikistan: "TJ", tanzania: "TZ", thailand: "TH", "timor-leste": "TL",
    togo: "TG", tokelau: "TK", tonga: "TO", "trinidad and tobago": "TT", tunisia: "TN", turkey: "TR",
    turkmenistan: "TM", "turks and caicos islands": "TC", tuvalu: "TV", uganda: "UG", ukraine: "UA",
    "united arab emirates": "AE", "united kingdom": "GB", "united states": "US",
    "united states outlying islands": "UM", uruguay: "UY", uzbekistan: "UZ", vanuatu: "VU", venezuela: "VE",
    vietnam: "VN", "virgin islands, british": "VG", "virgin islands, u.s.": "VI", "wallis and futuna": "WF",
    "western sahara": "EH", yemen: "YE", zambia: "ZM", zimbabwe: "ZW",
};
const IsoStates = {
    alabama: 'AL', alaska: 'AK', 'american samoa': 'AS', arizona: 'AZ', arkansas: 'AR', california: 'CA',
    colorado: 'CO', connecticut: 'CT', delaware: 'DE', 'district of columbia': 'DC',
    'federated states of micronesia': 'FM', florida: 'FL', georgia: 'GA', guam: 'GU', hawaii: 'HI', idaho: 'ID',
    illinois: 'IL', indiana: 'IN', iowa: 'IA', kansas: 'KS', kentucky: 'KY', louisiana: 'LA', maine: 'ME',
    'marshall islands': 'MH', maryland: 'MD', massachusetts: 'MA', michigan: 'MI', minnesota: 'MN', mississippi: 'MS',
    missouri: 'MO', montana: 'MT', nebraska: 'NE', nevada: 'NV', 'new hampshire': 'NH', 'new jersey': 'NJ',
    'new mexico': 'NM', 'new york': 'NY', 'north carolina': 'NC', 'north dakota': 'ND',
    'northern mariana islands': 'MP', ohio: 'OH', oklahoma: 'OK', oregon: 'OR', palau: 'PW', pennsylvania: 'PA',
    'puerto rico': 'PR', 'rhode island': 'RI', 'south carolina': 'SC', 'south dakota': 'SD', tennessee: 'TN',
    texas: 'TX', utah: 'UT', vermont: 'VT', 'virgin islands': 'VI', virginia: 'VA', washington: 'WA',
    'west virginia': 'WV', wisconsin: 'WI', wyoming: 'WY',
};
var IsoProvinces = {
    alberta: 'AB', 'british columbia': 'BC', manitoba: 'MB', 'new brunswick': 'NB', 'newfoundland and labrador': 'NL',
    'nova scotia': 'NS', ontario: 'ON', 'prince edward island': 'PE', quebec: 'QC', saskatchewan: 'SK',
};
/* tslint:enable */
class autofill_service_AutofillService {
    constructor(cipherService, userService, totpService, eventService) {
        this.cipherService = cipherService;
        this.userService = userService;
        this.totpService = totpService;
        this.eventService = eventService;
    }
    getFormsWithPasswordFields(pageDetails) {
        const formData = [];
        const passwordFields = this.loadPasswordFields(pageDetails, true, true, false, false);
        if (passwordFields.length === 0) {
            return formData;
        }
        for (const formKey in pageDetails.forms) {
            if (!pageDetails.forms.hasOwnProperty(formKey)) {
                continue;
            }
            const formPasswordFields = passwordFields.filter((pf) => formKey === pf.form);
            if (formPasswordFields.length > 0) {
                let uf = this.findUsernameField(pageDetails, formPasswordFields[0], false, false, false);
                if (uf == null) {
                    // not able to find any viewable username fields. maybe there are some "hidden" ones?
                    uf = this.findUsernameField(pageDetails, formPasswordFields[0], true, true, false);
                }
                formData.push({
                    form: pageDetails.forms[formKey],
                    password: formPasswordFields[0],
                    username: uf,
                    passwords: formPasswordFields,
                });
            }
        }
        return formData;
    }
    doAutoFill(options) {
        return autofill_service_awaiter(this, void 0, void 0, function* () {
            let totpPromise = null;
            const tab = yield this.getActiveTab();
            if (!tab || !options.cipher || !options.pageDetails || !options.pageDetails.length) {
                throw new Error('Nothing to auto-fill.');
            }
            const canAccessPremium = yield this.userService.canAccessPremium();
            let didAutofill = false;
            options.pageDetails.forEach((pd) => {
                // make sure we're still on correct tab
                if (pd.tab.id !== tab.id || pd.tab.url !== tab.url) {
                    return;
                }
                const fillScript = this.generateFillScript(pd.details, {
                    skipUsernameOnlyFill: options.skipUsernameOnlyFill || false,
                    onlyEmptyFields: options.onlyEmptyFields || false,
                    onlyVisibleFields: options.onlyVisibleFields || false,
                    fillNewPassword: options.fillNewPassword || false,
                    cipher: options.cipher,
                });
                if (!fillScript || !fillScript.script || !fillScript.script.length) {
                    return;
                }
                // Add a small delay between operations
                fillScript.properties.delay_between_operations = 20;
                didAutofill = true;
                if (!options.skipLastUsed) {
                    this.cipherService.updateLastUsedDate(options.cipher.id);
                }
                browserApi["a" /* BrowserApi */].tabSendMessage(tab, {
                    command: 'fillForm',
                    fillScript: fillScript,
                    url: tab.url,
                }, { frameId: pd.frameId });
                if (options.cipher.type !== cipherType["a" /* CipherType */].Login || totpPromise || options.skipTotp ||
                    !options.cipher.login.totp || (!canAccessPremium && !options.cipher.organizationUseTotp)) {
                    return;
                }
                totpPromise = this.totpService.isAutoCopyEnabled().then((enabled) => {
                    if (enabled) {
                        return this.totpService.getCode(options.cipher.login.totp);
                    }
                    return null;
                });
            });
            if (didAutofill) {
                this.eventService.collect(enums_eventType["a" /* EventType */].Cipher_ClientAutofilled, options.cipher.id);
                if (totpPromise != null) {
                    return yield totpPromise;
                }
                else {
                    return null;
                }
            }
            else {
                throw new Error('Did not auto-fill.');
            }
        });
    }
    doAutoFillActiveTab(pageDetails, fromCommand) {
        var _a, _b;
        return autofill_service_awaiter(this, void 0, void 0, function* () {
            const tab = yield this.getActiveTab();
            if (!tab || !tab.url) {
                return;
            }
            let cipher;
            if (fromCommand) {
                cipher = yield this.cipherService.getNextCipherForUrl(tab.url);
            }
            else {
                const lastLaunchedCipher = yield this.cipherService.getLastLaunchedForUrl(tab.url);
                if (lastLaunchedCipher && Date.now().valueOf() - ((_b = (_a = lastLaunchedCipher.localData) === null || _a === void 0 ? void 0 : _a.lastLaunched) === null || _b === void 0 ? void 0 : _b.valueOf()) < 30000) {
                    cipher = lastLaunchedCipher;
                }
                else {
                    cipher = yield this.cipherService.getLastUsedForUrl(tab.url);
                }
            }
            const autoFillResponse = yield this.doAutoFill({
                cipher: cipher,
                pageDetails: pageDetails,
                skipTotp: !fromCommand,
                skipLastUsed: !fromCommand,
                skipUsernameOnlyFill: !fromCommand,
                onlyEmptyFields: !fromCommand,
                onlyVisibleFields: !fromCommand,
                fillNewPassword: fromCommand,
            });
            // Only update last used index if doAutoFill didn't throw an exception
            if (fromCommand) {
                this.cipherService.updateLastUsedIndexForUrl(tab.url);
            }
            return autoFillResponse;
        });
    }
    // Helpers
    getActiveTab() {
        return autofill_service_awaiter(this, void 0, void 0, function* () {
            const tab = yield browserApi["a" /* BrowserApi */].getTabFromCurrentWindow();
            if (!tab) {
                throw new Error('No tab found.');
            }
            return tab;
        });
    }
    generateFillScript(pageDetails, options) {
        if (!pageDetails || !options.cipher) {
            return null;
        }
        let fillScript = new AutofillScript(pageDetails.documentUUID);
        const filledFields = {};
        const fields = options.cipher.fields;
        if (fields && fields.length) {
            const fieldNames = [];
            fields.forEach((f) => {
                if (this.hasValue(f.name)) {
                    fieldNames.push(f.name.toLowerCase());
                }
            });
            pageDetails.fields.forEach((field) => {
                if (filledFields.hasOwnProperty(field.opid) || !field.viewable) {
                    return;
                }
                const matchingIndex = this.findMatchingFieldIndex(field, fieldNames);
                if (matchingIndex > -1) {
                    let val = fields[matchingIndex].value;
                    if (val == null && fields[matchingIndex].type === fieldType["a" /* FieldType */].Boolean) {
                        val = 'false';
                    }
                    filledFields[field.opid] = field;
                    this.fillByOpid(fillScript, field, val);
                }
            });
        }
        switch (options.cipher.type) {
            case cipherType["a" /* CipherType */].Login:
                fillScript = this.generateLoginFillScript(fillScript, pageDetails, filledFields, options);
                break;
            case cipherType["a" /* CipherType */].Card:
                fillScript = this.generateCardFillScript(fillScript, pageDetails, filledFields, options);
                break;
            case cipherType["a" /* CipherType */].Identity:
                fillScript = this.generateIdentityFillScript(fillScript, pageDetails, filledFields, options);
                break;
            default:
                return null;
        }
        return fillScript;
    }
    generateLoginFillScript(fillScript, pageDetails, filledFields, options) {
        if (!options.cipher.login) {
            return null;
        }
        const passwords = [];
        const usernames = [];
        let pf = null;
        let username = null;
        const login = options.cipher.login;
        if (!login.password || login.password === '') {
            // No password for this login. Maybe they just wanted to auto-fill some custom fields?
            fillScript = this.setFillScriptForFocus(filledFields, fillScript);
            return fillScript;
        }
        let passwordFields = this.loadPasswordFields(pageDetails, false, false, options.onlyEmptyFields, options.fillNewPassword);
        if (!passwordFields.length && !options.onlyVisibleFields) {
            // not able to find any viewable password fields. maybe there are some "hidden" ones?
            passwordFields = this.loadPasswordFields(pageDetails, true, true, options.onlyEmptyFields, options.fillNewPassword);
        }
        for (const formKey in pageDetails.forms) {
            if (!pageDetails.forms.hasOwnProperty(formKey)) {
                continue;
            }
            const passwordFieldsForForm = [];
            passwordFields.forEach((passField) => {
                if (formKey === passField.form) {
                    passwordFieldsForForm.push(passField);
                }
            });
            passwordFields.forEach((passField) => {
                pf = passField;
                passwords.push(pf);
                if (login.username) {
                    username = this.findUsernameField(pageDetails, pf, false, false, false);
                    if (!username && !options.onlyVisibleFields) {
                        // not able to find any viewable username fields. maybe there are some "hidden" ones?
                        username = this.findUsernameField(pageDetails, pf, true, true, false);
                    }
                    if (username) {
                        usernames.push(username);
                    }
                }
            });
        }
        if (passwordFields.length && !passwords.length) {
            // The page does not have any forms with password fields. Use the first password field on the page and the
            // input field just before it as the username.
            pf = passwordFields[0];
            passwords.push(pf);
            if (login.username && pf.elementNumber > 0) {
                username = this.findUsernameField(pageDetails, pf, false, false, true);
                if (!username && !options.onlyVisibleFields) {
                    // not able to find any viewable username fields. maybe there are some "hidden" ones?
                    username = this.findUsernameField(pageDetails, pf, true, true, true);
                }
                if (username) {
                    usernames.push(username);
                }
            }
        }
        if (!passwordFields.length && !options.skipUsernameOnlyFill) {
            // No password fields on this page. Let's try to just fuzzy fill the username.
            pageDetails.fields.forEach((f) => {
                if (f.viewable && (f.type === 'text' || f.type === 'email' || f.type === 'tel') &&
                    this.fieldIsFuzzyMatch(f, UsernameFieldNames)) {
                    usernames.push(f);
                }
            });
        }
        usernames.forEach((u) => {
            if (filledFields.hasOwnProperty(u.opid)) {
                return;
            }
            filledFields[u.opid] = u;
            this.fillByOpid(fillScript, u, login.username);
        });
        passwords.forEach((p) => {
            if (filledFields.hasOwnProperty(p.opid)) {
                return;
            }
            filledFields[p.opid] = p;
            this.fillByOpid(fillScript, p, login.password);
        });
        fillScript = this.setFillScriptForFocus(filledFields, fillScript);
        return fillScript;
    }
    generateCardFillScript(fillScript, pageDetails, filledFields, options) {
        if (!options.cipher.card) {
            return null;
        }
        const fillFields = {};
        pageDetails.fields.forEach((f) => {
            if (this.isExcludedType(f.type, ExcludedAutofillTypes)) {
                return;
            }
            for (let i = 0; i < CardAttributes.length; i++) {
                const attr = CardAttributes[i];
                if (!f.hasOwnProperty(attr) || !f[attr] || !f.viewable) {
                    continue;
                }
                // ref https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill
                // ref https://developers.google.com/web/fundamentals/design-and-ux/input/forms/
                if (!fillFields.cardholderName && this.isFieldMatch(f[attr], ['cc-name', 'card-name', 'cardholder-name', 'cardholder', 'name', 'nom'], ['cc-name', 'card-name', 'cardholder-name', 'cardholder', 'tbName'])) {
                    fillFields.cardholderName = f;
                    break;
                }
                else if (!fillFields.number && this.isFieldMatch(f[attr], ['cc-number', 'cc-num', 'card-number', 'card-num', 'number', 'cc', 'cc-no', 'card-no',
                    'credit-card', 'numero-carte', 'carte', 'carte-credit', 'num-carte', 'cb-num'], ['cc-number', 'cc-num', 'card-number', 'card-num', 'cc-no', 'card-no', 'numero-carte',
                    'num-carte', 'cb-num'])) {
                    fillFields.number = f;
                    break;
                }
                else if (!fillFields.exp && this.isFieldMatch(f[attr], ['cc-exp', 'card-exp', 'cc-expiration', 'card-expiration', 'cc-ex', 'card-ex',
                    'card-expire', 'card-expiry', 'validite', 'expiration', 'expiry', 'mm-yy',
                    'mm-yyyy', 'yy-mm', 'yyyy-mm', 'expiration-date', 'payment-card-expiration',
                    'payment-cc-date'], ['mm-yy', 'mm-yyyy', 'yy-mm', 'yyyy-mm', 'expiration-date',
                    'payment-card-expiration'])) {
                    fillFields.exp = f;
                    break;
                }
                else if (!fillFields.expMonth && this.isFieldMatch(f[attr], ['exp-month', 'cc-exp-month', 'cc-month', 'card-month', 'cc-mo', 'card-mo', 'exp-mo',
                    'card-exp-mo', 'cc-exp-mo', 'card-expiration-month', 'expiration-month',
                    'cc-mm', 'cc-m', 'card-mm', 'card-m', 'card-exp-mm', 'cc-exp-mm', 'exp-mm', 'exp-m',
                    'expire-month', 'expire-mo', 'expiry-month', 'expiry-mo', 'card-expire-month',
                    'card-expire-mo', 'card-expiry-month', 'card-expiry-mo', 'mois-validite',
                    'mois-expiration', 'm-validite', 'm-expiration', 'expiry-date-field-month',
                    'expiration-date-month', 'expiration-date-mm', 'exp-mon', 'validity-mo',
                    'exp-date-mo', 'cb-date-mois', 'date-m'])) {
                    fillFields.expMonth = f;
                    break;
                }
                else if (!fillFields.expYear && this.isFieldMatch(f[attr], ['exp-year', 'cc-exp-year', 'cc-year', 'card-year', 'cc-yr', 'card-yr', 'exp-yr',
                    'card-exp-yr', 'cc-exp-yr', 'card-expiration-year', 'expiration-year',
                    'cc-yy', 'cc-y', 'card-yy', 'card-y', 'card-exp-yy', 'cc-exp-yy', 'exp-yy', 'exp-y',
                    'cc-yyyy', 'card-yyyy', 'card-exp-yyyy', 'cc-exp-yyyy', 'expire-year', 'expire-yr',
                    'expiry-year', 'expiry-yr', 'card-expire-year', 'card-expire-yr', 'card-expiry-year',
                    'card-expiry-yr', 'an-validite', 'an-expiration', 'annee-validite',
                    'annee-expiration', 'expiry-date-field-year', 'expiration-date-year', 'cb-date-ann',
                    'expiration-date-yy', 'expiration-date-yyyy', 'validity-year', 'exp-date-year', 'date-y'])) {
                    fillFields.expYear = f;
                    break;
                }
                else if (!fillFields.code && this.isFieldMatch(f[attr], ['cvv', 'cvc', 'cvv2', 'cc-csc', 'cc-cvv', 'card-csc', 'card-cvv', 'cvd', 'cid', 'cvc2',
                    'cnv', 'cvn2', 'cc-code', 'card-code', 'code-securite', 'security-code', 'crypto',
                    'card-verif', 'verification-code', 'csc', 'ccv'])) {
                    fillFields.code = f;
                    break;
                }
                else if (!fillFields.brand && this.isFieldMatch(f[attr], ['cc-type', 'card-type', 'card-brand', 'cc-brand', 'cb-type'])) {
                    fillFields.brand = f;
                    break;
                }
            }
        });
        const card = options.cipher.card;
        this.makeScriptAction(fillScript, card, fillFields, filledFields, 'cardholderName');
        this.makeScriptAction(fillScript, card, fillFields, filledFields, 'number');
        this.makeScriptAction(fillScript, card, fillFields, filledFields, 'code');
        this.makeScriptAction(fillScript, card, fillFields, filledFields, 'brand');
        if (fillFields.expMonth && this.hasValue(card.expMonth)) {
            let expMonth = card.expMonth;
            if (fillFields.expMonth.selectInfo && fillFields.expMonth.selectInfo.options) {
                let index = null;
                const siOptions = fillFields.expMonth.selectInfo.options;
                if (siOptions.length === 12) {
                    index = parseInt(card.expMonth, null) - 1;
                }
                else if (siOptions.length === 13) {
                    if (siOptions[0][0] != null && siOptions[0][0] !== '' &&
                        (siOptions[12][0] == null || siOptions[12][0] === '')) {
                        index = parseInt(card.expMonth, null) - 1;
                    }
                    else {
                        index = parseInt(card.expMonth, null);
                    }
                }
                if (index != null) {
                    const option = siOptions[index];
                    if (option.length > 1) {
                        expMonth = option[1];
                    }
                }
            }
            else if ((this.fieldAttrsContain(fillFields.expMonth, 'mm') || fillFields.expMonth.maxLength === 2)
                && expMonth.length === 1) {
                expMonth = '0' + expMonth;
            }
            filledFields[fillFields.expMonth.opid] = fillFields.expMonth;
            this.fillByOpid(fillScript, fillFields.expMonth, expMonth);
        }
        if (fillFields.expYear && this.hasValue(card.expYear)) {
            let expYear = card.expYear;
            if (fillFields.expYear.selectInfo && fillFields.expYear.selectInfo.options) {
                for (let i = 0; i < fillFields.expYear.selectInfo.options.length; i++) {
                    const o = fillFields.expYear.selectInfo.options[i];
                    if (o[0] === card.expYear || o[1] === card.expYear) {
                        expYear = o[1];
                        break;
                    }
                    if (o[1].length === 2 && card.expYear.length === 4 && o[1] === card.expYear.substring(2)) {
                        expYear = o[1];
                        break;
                    }
                    const colonIndex = o[1].indexOf(':');
                    if (colonIndex > -1 && o[1].length > colonIndex + 1) {
                        const val = o[1].substring(colonIndex + 2);
                        if (val != null && val.trim() !== '' && val === card.expYear) {
                            expYear = o[1];
                            break;
                        }
                    }
                }
            }
            else if (this.fieldAttrsContain(fillFields.expYear, 'yyyy') || fillFields.expYear.maxLength === 4) {
                if (expYear.length === 2) {
                    expYear = '20' + expYear;
                }
            }
            else if (this.fieldAttrsContain(fillFields.expYear, 'yy') || fillFields.expYear.maxLength === 2) {
                if (expYear.length === 4) {
                    expYear = expYear.substr(2);
                }
            }
            filledFields[fillFields.expYear.opid] = fillFields.expYear;
            this.fillByOpid(fillScript, fillFields.expYear, expYear);
        }
        if (fillFields.exp && this.hasValue(card.expMonth) && this.hasValue(card.expYear)) {
            const fullMonth = ('0' + card.expMonth).slice(-2);
            let fullYear = card.expYear;
            let partYear = null;
            if (fullYear.length === 2) {
                partYear = fullYear;
                fullYear = '20' + fullYear;
            }
            else if (fullYear.length === 4) {
                partYear = fullYear.substr(2, 2);
            }
            let exp = null;
            for (let i = 0; i < MonthAbbr.length; i++) {
                if (this.fieldAttrsContain(fillFields.exp, MonthAbbr[i] + '/' + YearAbbrShort[i]) &&
                    partYear != null) {
                    exp = fullMonth + '/' + partYear;
                }
                else if (this.fieldAttrsContain(fillFields.exp, MonthAbbr[i] + '/' + YearAbbrLong[i])) {
                    exp = fullMonth + '/' + fullYear;
                }
                else if (this.fieldAttrsContain(fillFields.exp, YearAbbrShort[i] + '/' + MonthAbbr[i]) &&
                    partYear != null) {
                    exp = partYear + '/' + fullMonth;
                }
                else if (this.fieldAttrsContain(fillFields.exp, YearAbbrLong[i] + '/' + MonthAbbr[i])) {
                    exp = fullYear + '/' + fullMonth;
                }
                else if (this.fieldAttrsContain(fillFields.exp, MonthAbbr[i] + '-' + YearAbbrShort[i]) &&
                    partYear != null) {
                    exp = fullMonth + '-' + partYear;
                }
                else if (this.fieldAttrsContain(fillFields.exp, MonthAbbr[i] + '-' + YearAbbrLong[i])) {
                    exp = fullMonth + '-' + fullYear;
                }
                else if (this.fieldAttrsContain(fillFields.exp, YearAbbrShort[i] + '-' + MonthAbbr[i]) &&
                    partYear != null) {
                    exp = partYear + '-' + fullMonth;
                }
                else if (this.fieldAttrsContain(fillFields.exp, YearAbbrLong[i] + '-' + MonthAbbr[i])) {
                    exp = fullYear + '-' + fullMonth;
                }
                else if (this.fieldAttrsContain(fillFields.exp, YearAbbrShort[i] + MonthAbbr[i]) &&
                    partYear != null) {
                    exp = partYear + fullMonth;
                }
                else if (this.fieldAttrsContain(fillFields.exp, YearAbbrLong[i] + MonthAbbr[i])) {
                    exp = fullYear + fullMonth;
                }
                else if (this.fieldAttrsContain(fillFields.exp, MonthAbbr[i] + YearAbbrShort[i]) &&
                    partYear != null) {
                    exp = fullMonth + partYear;
                }
                else if (this.fieldAttrsContain(fillFields.exp, MonthAbbr[i] + YearAbbrLong[i])) {
                    exp = fullMonth + fullYear;
                }
                if (exp != null) {
                    break;
                }
            }
            if (exp == null) {
                exp = fullYear + '-' + fullMonth;
            }
            this.makeScriptActionWithValue(fillScript, exp, fillFields.exp, filledFields);
        }
        return fillScript;
    }
    fieldAttrsContain(field, containsVal) {
        if (!field) {
            return false;
        }
        let doesContain = false;
        CardAttributesExtended.forEach((attr) => {
            if (doesContain || !field.hasOwnProperty(attr) || !field[attr]) {
                return;
            }
            let val = field[attr];
            val = val.replace(/ /g, '').toLowerCase();
            doesContain = val.indexOf(containsVal) > -1;
        });
        return doesContain;
    }
    generateIdentityFillScript(fillScript, pageDetails, filledFields, options) {
        if (!options.cipher.identity) {
            return null;
        }
        const fillFields = {};
        pageDetails.fields.forEach((f) => {
            if (this.isExcludedType(f.type, ExcludedAutofillTypes)) {
                return;
            }
            for (let i = 0; i < IdentityAttributes.length; i++) {
                const attr = IdentityAttributes[i];
                if (!f.hasOwnProperty(attr) || !f[attr] || !f.viewable) {
                    continue;
                }
                // ref https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill
                // ref https://developers.google.com/web/fundamentals/design-and-ux/input/forms/
                if (!fillFields.name && this.isFieldMatch(f[attr], ['name', 'full-name', 'your-name'], ['full-name', 'your-name'])) {
                    fillFields.name = f;
                    break;
                }
                else if (!fillFields.firstName && this.isFieldMatch(f[attr], FirstnameFieldNames)) {
                    fillFields.firstName = f;
                    break;
                }
                else if (!fillFields.middleName && this.isFieldMatch(f[attr], ['m-name', 'middle-name', 'additional-name', 'middle-initial', 'middle-n', 'middle-i'])) {
                    fillFields.middleName = f;
                    break;
                }
                else if (!fillFields.lastName && this.isFieldMatch(f[attr], LastnameFieldNames)) {
                    fillFields.lastName = f;
                    break;
                }
                else if (!fillFields.title && this.isFieldMatch(f[attr], ['honorific-prefix', 'prefix', 'title'])) {
                    fillFields.title = f;
                    break;
                }
                else if (!fillFields.email && this.isFieldMatch(f[attr], ['e-mail', 'email-address'])) {
                    fillFields.email = f;
                    break;
                }
                else if (!fillFields.address && this.isFieldMatch(f[attr], ['address', 'street-address', 'addr', 'street', 'mailing-addr', 'billing-addr',
                    'mail-addr', 'bill-addr'], ['mailing-addr', 'billing-addr', 'mail-addr', 'bill-addr'])) {
                    fillFields.address = f;
                    break;
                }
                else if (!fillFields.address1 && this.isFieldMatch(f[attr], ['address-1', 'address-line-1', 'addr-1', 'street-1'])) {
                    fillFields.address1 = f;
                    break;
                }
                else if (!fillFields.address2 && this.isFieldMatch(f[attr], ['address-2', 'address-line-2', 'addr-2', 'street-2'])) {
                    fillFields.address2 = f;
                    break;
                }
                else if (!fillFields.address3 && this.isFieldMatch(f[attr], ['address-3', 'address-line-3', 'addr-3', 'street-3'])) {
                    fillFields.address3 = f;
                    break;
                }
                else if (!fillFields.postalCode && this.isFieldMatch(f[attr], ['postal', 'zip', 'zip2', 'zip-code', 'postal-code', 'post-code', 'address-zip',
                    'address-postal', 'address-code', 'address-postal-code', 'address-zip-code'])) {
                    fillFields.postalCode = f;
                    break;
                }
                else if (!fillFields.city && this.isFieldMatch(f[attr], ['city', 'town', 'address-level-2', 'address-city', 'address-town'])) {
                    fillFields.city = f;
                    break;
                }
                else if (!fillFields.state && this.isFieldMatch(f[attr], ['state', 'province', 'provence', 'address-level-1', 'address-state',
                    'address-province'])) {
                    fillFields.state = f;
                    break;
                }
                else if (!fillFields.country && this.isFieldMatch(f[attr], ['country', 'country-code', 'country-name', 'address-country', 'address-country-name',
                    'address-country-code'])) {
                    fillFields.country = f;
                    break;
                }
                else if (!fillFields.phone && this.isFieldMatch(f[attr], ['phone', 'mobile', 'mobile-phone', 'tel', 'telephone', 'phone-number'])) {
                    fillFields.phone = f;
                    break;
                }
                else if (!fillFields.username && this.isFieldMatch(f[attr], ['user-name', 'user-id', 'screen-name'])) {
                    fillFields.username = f;
                    break;
                }
                else if (!fillFields.company && this.isFieldMatch(f[attr], ['company', 'company-name', 'organization', 'organization-name'])) {
                    fillFields.company = f;
                    break;
                }
            }
        });
        const identity = options.cipher.identity;
        this.makeScriptAction(fillScript, identity, fillFields, filledFields, 'title');
        this.makeScriptAction(fillScript, identity, fillFields, filledFields, 'firstName');
        this.makeScriptAction(fillScript, identity, fillFields, filledFields, 'middleName');
        this.makeScriptAction(fillScript, identity, fillFields, filledFields, 'lastName');
        this.makeScriptAction(fillScript, identity, fillFields, filledFields, 'address1');
        this.makeScriptAction(fillScript, identity, fillFields, filledFields, 'address2');
        this.makeScriptAction(fillScript, identity, fillFields, filledFields, 'address3');
        this.makeScriptAction(fillScript, identity, fillFields, filledFields, 'city');
        this.makeScriptAction(fillScript, identity, fillFields, filledFields, 'postalCode');
        this.makeScriptAction(fillScript, identity, fillFields, filledFields, 'company');
        this.makeScriptAction(fillScript, identity, fillFields, filledFields, 'email');
        this.makeScriptAction(fillScript, identity, fillFields, filledFields, 'phone');
        this.makeScriptAction(fillScript, identity, fillFields, filledFields, 'username');
        let filledState = false;
        if (fillFields.state && identity.state && identity.state.length > 2) {
            const stateLower = identity.state.toLowerCase();
            const isoState = IsoStates[stateLower] || IsoProvinces[stateLower];
            if (isoState) {
                filledState = true;
                this.makeScriptActionWithValue(fillScript, isoState, fillFields.state, filledFields);
            }
        }
        if (!filledState) {
            this.makeScriptAction(fillScript, identity, fillFields, filledFields, 'state');
        }
        let filledCountry = false;
        if (fillFields.country && identity.country && identity.country.length > 2) {
            const countryLower = identity.country.toLowerCase();
            const isoCountry = IsoCountries[countryLower];
            if (isoCountry) {
                filledCountry = true;
                this.makeScriptActionWithValue(fillScript, isoCountry, fillFields.country, filledFields);
            }
        }
        if (!filledCountry) {
            this.makeScriptAction(fillScript, identity, fillFields, filledFields, 'country');
        }
        if (fillFields.name && (identity.firstName || identity.lastName)) {
            let fullName = '';
            if (this.hasValue(identity.firstName)) {
                fullName = identity.firstName;
            }
            if (this.hasValue(identity.middleName)) {
                if (fullName !== '') {
                    fullName += ' ';
                }
                fullName += identity.middleName;
            }
            if (this.hasValue(identity.lastName)) {
                if (fullName !== '') {
                    fullName += ' ';
                }
                fullName += identity.lastName;
            }
            this.makeScriptActionWithValue(fillScript, fullName, fillFields.name, filledFields);
        }
        if (fillFields.address && this.hasValue(identity.address1)) {
            let address = '';
            if (this.hasValue(identity.address1)) {
                address = identity.address1;
            }
            if (this.hasValue(identity.address2)) {
                if (address !== '') {
                    address += ', ';
                }
                address += identity.address2;
            }
            if (this.hasValue(identity.address3)) {
                if (address !== '') {
                    address += ', ';
                }
                address += identity.address3;
            }
            this.makeScriptActionWithValue(fillScript, address, fillFields.address, filledFields);
        }
        return fillScript;
    }
    isExcludedType(type, excludedTypes) {
        return excludedTypes.indexOf(type) > -1;
    }
    isFieldMatch(value, options, containsOptions) {
        value = value.trim().toLowerCase().replace(/[^a-zA-Z0-9]+/g, '');
        for (let i = 0; i < options.length; i++) {
            let option = options[i];
            const checkValueContains = containsOptions == null || containsOptions.indexOf(option) > -1;
            option = option.toLowerCase().replace(/-/g, '');
            if (value === option || (checkValueContains && value.indexOf(option) > -1)) {
                return true;
            }
        }
        return false;
    }
    makeScriptAction(fillScript, cipherData, fillFields, filledFields, dataProp, fieldProp) {
        fieldProp = fieldProp || dataProp;
        this.makeScriptActionWithValue(fillScript, cipherData[dataProp], fillFields[fieldProp], filledFields);
    }
    makeScriptActionWithValue(fillScript, dataValue, field, filledFields) {
        let doFill = false;
        if (this.hasValue(dataValue) && field) {
            if (field.type === 'select-one' && field.selectInfo && field.selectInfo.options) {
                for (let i = 0; i < field.selectInfo.options.length; i++) {
                    const option = field.selectInfo.options[i];
                    for (let j = 0; j < option.length; j++) {
                        if (this.hasValue(option[j]) && option[j].toLowerCase() === dataValue.toLowerCase()) {
                            doFill = true;
                            if (option.length > 1) {
                                dataValue = option[1];
                            }
                            break;
                        }
                    }
                    if (doFill) {
                        break;
                    }
                }
            }
            else {
                doFill = true;
            }
        }
        if (doFill) {
            filledFields[field.opid] = field;
            this.fillByOpid(fillScript, field, dataValue);
        }
    }
    loadPasswordFields(pageDetails, canBeHidden, canBeReadOnly, mustBeEmpty, fillNewPassword) {
        const arr = [];
        pageDetails.fields.forEach((f) => {
            const isPassword = f.type === 'password';
            const valueIsLikePassword = (value) => {
                if (value == null) {
                    return false;
                }
                // Removes all whitespace, _ and - characters
                const cleanedValue = value.toLowerCase().replace(/[\s_\-]/g, '');
                if (cleanedValue.indexOf('password') < 0) {
                    return false;
                }
                const ignoreList = ['onetimepassword', 'captcha', 'findanything'];
                if (ignoreList.some((i) => cleanedValue.indexOf(i) > -1)) {
                    return false;
                }
                return true;
            };
            const isLikePassword = () => {
                if (f.type !== 'text') {
                    return false;
                }
                if (valueIsLikePassword(f.htmlID)) {
                    return true;
                }
                if (valueIsLikePassword(f.htmlName)) {
                    return true;
                }
                if (valueIsLikePassword(f.placeholder)) {
                    return true;
                }
                return false;
            };
            if (!f.disabled && (canBeReadOnly || !f.readonly) && (isPassword || isLikePassword())
                && (canBeHidden || f.viewable) && (!mustBeEmpty || f.value == null || f.value.trim() === '')
                && (fillNewPassword || f.autoCompleteType !== 'new-password')) {
                arr.push(f);
            }
        });
        return arr;
    }
    findUsernameField(pageDetails, passwordField, canBeHidden, canBeReadOnly, withoutForm) {
        let usernameField = null;
        for (let i = 0; i < pageDetails.fields.length; i++) {
            const f = pageDetails.fields[i];
            if (f.elementNumber >= passwordField.elementNumber) {
                break;
            }
            if (!f.disabled && (canBeReadOnly || !f.readonly) &&
                (withoutForm || f.form === passwordField.form) && (canBeHidden || f.viewable) &&
                (f.type === 'text' || f.type === 'email' || f.type === 'tel')) {
                usernameField = f;
                if (this.findMatchingFieldIndex(f, UsernameFieldNames) > -1) {
                    // We found an exact match. No need to keep looking.
                    break;
                }
            }
        }
        return usernameField;
    }
    findMatchingFieldIndex(field, names) {
        for (let i = 0; i < names.length; i++) {
            if (names[i].indexOf('=') > -1) {
                if (this.fieldPropertyIsPrefixMatch(field, 'htmlID', names[i], 'id')) {
                    return i;
                }
                if (this.fieldPropertyIsPrefixMatch(field, 'htmlName', names[i], 'name')) {
                    return i;
                }
                if (this.fieldPropertyIsPrefixMatch(field, 'label-tag', names[i], 'label')) {
                    return i;
                }
                if (this.fieldPropertyIsPrefixMatch(field, 'label-aria', names[i], 'label')) {
                    return i;
                }
                if (this.fieldPropertyIsPrefixMatch(field, 'placeholder', names[i], 'placeholder')) {
                    return i;
                }
            }
            if (this.fieldPropertyIsMatch(field, 'htmlID', names[i])) {
                return i;
            }
            if (this.fieldPropertyIsMatch(field, 'htmlName', names[i])) {
                return i;
            }
            if (this.fieldPropertyIsMatch(field, 'label-tag', names[i])) {
                return i;
            }
            if (this.fieldPropertyIsMatch(field, 'label-aria', names[i])) {
                return i;
            }
            if (this.fieldPropertyIsMatch(field, 'placeholder', names[i])) {
                return i;
            }
        }
        return -1;
    }
    fieldPropertyIsPrefixMatch(field, property, name, prefix, separator = '=') {
        if (name.indexOf(prefix + separator) === 0) {
            const sepIndex = name.indexOf(separator);
            const val = name.substring(sepIndex + 1);
            return val != null && this.fieldPropertyIsMatch(field, property, val);
        }
        return false;
    }
    fieldPropertyIsMatch(field, property, name) {
        let fieldVal = field[property];
        if (!this.hasValue(fieldVal)) {
            return false;
        }
        fieldVal = fieldVal.trim().replace(/(?:\r\n|\r|\n)/g, '');
        if (name.startsWith('regex=')) {
            try {
                const regexParts = name.split('=', 2);
                if (regexParts.length === 2) {
                    const regex = new RegExp(regexParts[1], 'i');
                    return regex.test(fieldVal);
                }
            }
            catch (e) { }
        }
        else if (name.startsWith('csv=')) {
            const csvParts = name.split('=', 2);
            if (csvParts.length === 2) {
                const csvVals = csvParts[1].split(',');
                for (let i = 0; i < csvVals.length; i++) {
                    const val = csvVals[i];
                    if (val != null && val.trim().toLowerCase() === fieldVal.toLowerCase()) {
                        return true;
                    }
                }
                return false;
            }
        }
        return fieldVal.toLowerCase() === name;
    }
    fieldIsFuzzyMatch(field, names) {
        if (this.hasValue(field.htmlID) && this.fuzzyMatch(names, field.htmlID)) {
            return true;
        }
        if (this.hasValue(field.htmlName) && this.fuzzyMatch(names, field.htmlName)) {
            return true;
        }
        if (this.hasValue(field['label-tag']) && this.fuzzyMatch(names, field['label-tag'])) {
            return true;
        }
        if (this.hasValue(field.placeholder) && this.fuzzyMatch(names, field.placeholder)) {
            return true;
        }
        if (this.hasValue(field['label-left']) && this.fuzzyMatch(names, field['label-left'])) {
            return true;
        }
        if (this.hasValue(field['label-top']) && this.fuzzyMatch(names, field['label-top'])) {
            return true;
        }
        if (this.hasValue(field['label-aria']) && this.fuzzyMatch(names, field['label-aria'])) {
            return true;
        }
        return false;
    }
    fuzzyMatch(options, value) {
        if (options == null || options.length === 0 || value == null || value === '') {
            return false;
        }
        value = value.replace(/(?:\r\n|\r|\n)/g, '').trim().toLowerCase();
        for (let i = 0; i < options.length; i++) {
            if (value.indexOf(options[i]) > -1) {
                return true;
            }
        }
        return false;
    }
    hasValue(str) {
        return str && str !== '';
    }
    setFillScriptForFocus(filledFields, fillScript) {
        let lastField = null;
        let lastPasswordField = null;
        for (const opid in filledFields) {
            if (filledFields.hasOwnProperty(opid) && filledFields[opid].viewable) {
                lastField = filledFields[opid];
                if (filledFields[opid].type === 'password') {
                    lastPasswordField = filledFields[opid];
                }
            }
        }
        // Prioritize password field over others.
        if (lastPasswordField) {
            fillScript.script.push(['focus_by_opid', lastPasswordField.opid]);
        }
        else if (lastField) {
            fillScript.script.push(['focus_by_opid', lastField.opid]);
        }
        return fillScript;
    }
    fillByOpid(fillScript, field, value) {
        if (field.maxLength && value && value.length > field.maxLength) {
            value = value.substr(0, value.length);
        }
        fillScript.script.push(['click_on_opid', field.opid]);
        fillScript.script.push(['focus_by_opid', field.opid]);
        fillScript.script.push(['fill_by_opid', field.opid, value]);
    }
}

// EXTERNAL MODULE: ./src/services/browserMessaging.service.ts
var browserMessaging_service = __webpack_require__(188);

// CONCATENATED MODULE: ./src/services/browserPlatformUtils.service.ts
var browserPlatformUtils_service_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




const DialogPromiseExpiration = 600000; // 10 minutes
class browserPlatformUtils_service_BrowserPlatformUtilsService {
    constructor(messagingService, clipboardWriteCallback) {
        this.messagingService = messagingService;
        this.clipboardWriteCallback = clipboardWriteCallback;
        this.identityClientId = 'browser';
        this.showDialogResolves = new Map();
        this.deviceCache = null;
        this.analyticsIdCache = null;
    }
    getDevice() {
        if (this.deviceCache) {
            return this.deviceCache;
        }
        if (this.isSafariExtension()) {
            this.deviceCache = deviceType["a" /* DeviceType */].SafariExtension;
        }
        else if (navigator.userAgent.indexOf(' Firefox/') !== -1 || navigator.userAgent.indexOf(' Gecko/') !== -1) {
            this.deviceCache = deviceType["a" /* DeviceType */].FirefoxExtension;
        }
        else if ((!!window.opr && !!opr.addons) || !!window.opera ||
            navigator.userAgent.indexOf(' OPR/') >= 0) {
            this.deviceCache = deviceType["a" /* DeviceType */].OperaExtension;
        }
        else if (navigator.userAgent.indexOf(' Edg/') !== -1) {
            this.deviceCache = deviceType["a" /* DeviceType */].EdgeExtension;
        }
        else if (navigator.userAgent.indexOf(' Vivaldi/') !== -1) {
            this.deviceCache = deviceType["a" /* DeviceType */].VivaldiExtension;
        }
        else if (window.chrome && navigator.userAgent.indexOf(' Chrome/') !== -1) {
            this.deviceCache = deviceType["a" /* DeviceType */].ChromeExtension;
        }
        return this.deviceCache;
    }
    getDeviceString() {
        const device = deviceType["a" /* DeviceType */][this.getDevice()].toLowerCase();
        return device.replace('extension', '');
    }
    isFirefox() {
        return this.getDevice() === deviceType["a" /* DeviceType */].FirefoxExtension;
    }
    isChrome() {
        return this.getDevice() === deviceType["a" /* DeviceType */].ChromeExtension;
    }
    isEdge() {
        return this.getDevice() === deviceType["a" /* DeviceType */].EdgeExtension;
    }
    isOpera() {
        return this.getDevice() === deviceType["a" /* DeviceType */].OperaExtension;
    }
    isVivaldi() {
        return this.getDevice() === deviceType["a" /* DeviceType */].VivaldiExtension;
    }
    isSafari() {
        return this.getDevice() === deviceType["a" /* DeviceType */].SafariExtension;
    }
    isIE() {
        return false;
    }
    isMacAppStore() {
        return false;
    }
    analyticsId() {
        if (this.analyticsIdCache) {
            return this.analyticsIdCache;
        }
        this.analyticsIdCache = analytics["b" /* AnalyticsIds */][this.getDevice()];
        return this.analyticsIdCache;
    }
    isViewOpen() {
        return browserPlatformUtils_service_awaiter(this, void 0, void 0, function* () {
            if (yield browserApi["a" /* BrowserApi */].isPopupOpen()) {
                return true;
            }
            if (this.isSafari()) {
                return false;
            }
            const sidebarView = this.sidebarViewName();
            const sidebarOpen = sidebarView != null && chrome.extension.getViews({ type: sidebarView }).length > 0;
            if (sidebarOpen) {
                return true;
            }
            const tabOpen = chrome.extension.getViews({ type: 'tab' }).length > 0;
            return tabOpen;
        });
    }
    lockTimeout() {
        return null;
    }
    launchUri(uri, options) {
        browserApi["a" /* BrowserApi */].createNewTab(uri, options && options.extensionPage === true);
    }
    saveFile(win, blobData, blobOptions, fileName) {
        browserApi["a" /* BrowserApi */].downloadFile(win, blobData, blobOptions, fileName);
    }
    getApplicationVersion() {
        return browserApi["a" /* BrowserApi */].getApplicationVersion();
    }
    supportsU2f(win) {
        if (win != null && win.u2f != null) {
            return true;
        }
        return this.isChrome() || this.isOpera() || this.isVivaldi();
    }
    supportsDuo() {
        return true;
    }
    showToast(type, title, text, options) {
        this.messagingService.send('showToast', {
            text: text,
            title: title,
            type: type,
            options: options,
        });
    }
    showDialog(text, title, confirmText, cancelText, type) {
        const dialogId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);
        this.messagingService.send('showDialog', {
            text: text,
            title: title,
            confirmText: confirmText,
            cancelText: cancelText,
            type: type,
            dialogId: dialogId,
        });
        return new Promise((resolve) => {
            this.showDialogResolves.set(dialogId, { resolve: resolve, date: new Date() });
        });
    }
    eventTrack(action, label, options) {
        this.messagingService.send('analyticsEventTrack', {
            action: action,
            label: label,
            options: options,
        });
    }
    isDev() {
        return "production" === 'development';
    }
    isSelfHost() {
        return false;
    }
    copyToClipboard(text, options) {
        let win = window;
        let doc = window.document;
        if (options && (options.window || options.win)) {
            win = options.window || options.win;
            doc = win.document;
        }
        else if (options && options.doc) {
            doc = options.doc;
        }
        const clearing = options ? !!options.clearing : false;
        const clearMs = options && options.clearMs ? options.clearMs : null;
        if (this.isSafariExtension()) {
            safariApp["a" /* SafariApp */].sendMessageToApp('copyToClipboard', text).then(() => {
                if (!clearing && this.clipboardWriteCallback != null) {
                    this.clipboardWriteCallback(text, clearMs);
                }
            });
        }
        else if (this.isFirefox() && win.navigator.clipboard && win.navigator.clipboard.writeText) {
            win.navigator.clipboard.writeText(text).then(() => {
                if (!clearing && this.clipboardWriteCallback != null) {
                    this.clipboardWriteCallback(text, clearMs);
                }
            });
        }
        else if (win.clipboardData && win.clipboardData.setData) {
            // IE specific code path to prevent textarea being shown while dialog is visible.
            win.clipboardData.setData('Text', text);
            if (!clearing && this.clipboardWriteCallback != null) {
                this.clipboardWriteCallback(text, clearMs);
            }
        }
        else if (doc.queryCommandSupported && doc.queryCommandSupported('copy')) {
            if (this.isChrome() && text === '') {
                text = '\u0000';
            }
            const textarea = doc.createElement('textarea');
            textarea.textContent = text == null || text === '' ? ' ' : text;
            // Prevent scrolling to bottom of page in MS Edge.
            textarea.style.position = 'fixed';
            doc.body.appendChild(textarea);
            textarea.select();
            try {
                // Security exception may be thrown by some browsers.
                if (doc.execCommand('copy') && !clearing && this.clipboardWriteCallback != null) {
                    this.clipboardWriteCallback(text, clearMs);
                }
            }
            catch (e) {
                // tslint:disable-next-line
                console.warn('Copy to clipboard failed.', e);
            }
            finally {
                doc.body.removeChild(textarea);
            }
        }
    }
    readFromClipboard(options) {
        return browserPlatformUtils_service_awaiter(this, void 0, void 0, function* () {
            let win = window;
            let doc = window.document;
            if (options && (options.window || options.win)) {
                win = options.window || options.win;
                doc = win.document;
            }
            else if (options && options.doc) {
                doc = options.doc;
            }
            if (this.isSafariExtension()) {
                return yield safariApp["a" /* SafariApp */].sendMessageToApp('readFromClipboard');
            }
            else if (this.isFirefox() && win.navigator.clipboard && win.navigator.clipboard.readText) {
                return yield win.navigator.clipboard.readText();
            }
            else if (doc.queryCommandSupported && doc.queryCommandSupported('paste')) {
                const textarea = doc.createElement('textarea');
                // Prevent scrolling to bottom of page in MS Edge.
                textarea.style.position = 'fixed';
                doc.body.appendChild(textarea);
                textarea.focus();
                try {
                    // Security exception may be thrown by some browsers.
                    if (doc.execCommand('paste')) {
                        return textarea.value;
                    }
                }
                catch (e) {
                    // tslint:disable-next-line
                    console.warn('Read from clipboard failed.', e);
                }
                finally {
                    doc.body.removeChild(textarea);
                }
            }
            return null;
        });
    }
    resolveDialogPromise(dialogId, confirmed) {
        if (this.showDialogResolves.has(dialogId)) {
            const resolveObj = this.showDialogResolves.get(dialogId);
            resolveObj.resolve(confirmed);
            this.showDialogResolves.delete(dialogId);
        }
        // Clean up old promises
        const deleteIds = [];
        this.showDialogResolves.forEach((val, key) => {
            const age = new Date().getTime() - val.date.getTime();
            if (age > DialogPromiseExpiration) {
                deleteIds.push(key);
            }
        });
        deleteIds.forEach((id) => {
            this.showDialogResolves.delete(id);
        });
    }
    supportsBiometric() {
        return Promise.resolve(false);
    }
    authenticateBiometric() {
        return Promise.resolve(false);
    }
    sidebarViewName() {
        if (window.chrome.sidebarAction && this.isFirefox()) {
            return 'sidebar';
        }
        else if (this.isOpera() && (typeof opr !== 'undefined') && opr.sidebarAction) {
            return 'sidebar_panel';
        }
        return null;
    }
    supportsSecureStorage() {
        return false;
    }
    isSafariExtension() {
        return window.safariAppExtension === true;
    }
}

// CONCATENATED MODULE: ./src/services/browserStorage.service.ts
var browserStorage_service_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

class browserStorage_service_BrowserStorageService {
    constructor(platformUtilsService) {
        this.isSafari = platformUtilsService.isSafari();
        if (!this.isSafari) {
            this.chromeStorageApi = chrome.storage.local;
        }
    }
    get(key) {
        return browserStorage_service_awaiter(this, void 0, void 0, function* () {
            if (this.isSafari) {
                const obj = yield safariApp["a" /* SafariApp */].sendMessageToApp('storage_get', key);
                return obj == null ? null : JSON.parse(obj);
            }
            else {
                return new Promise((resolve) => {
                    this.chromeStorageApi.get(key, (obj) => {
                        if (obj != null && obj[key] != null) {
                            resolve(obj[key]);
                            return;
                        }
                        resolve(null);
                    });
                });
            }
        });
    }
    save(key, obj) {
        return browserStorage_service_awaiter(this, void 0, void 0, function* () {
            const keyedObj = { [key]: obj };
            if (this.isSafari) {
                yield safariApp["a" /* SafariApp */].sendMessageToApp('storage_save', JSON.stringify({
                    key: key,
                    obj: JSON.stringify(obj),
                }));
            }
            else {
                return new Promise((resolve) => {
                    this.chromeStorageApi.set(keyedObj, () => {
                        resolve();
                    });
                });
            }
        });
    }
    remove(key) {
        return browserStorage_service_awaiter(this, void 0, void 0, function* () {
            if (this.isSafari) {
                yield safariApp["a" /* SafariApp */].sendMessageToApp('storage_remove', key);
            }
            else {
                return new Promise((resolve) => {
                    this.chromeStorageApi.remove(key, () => {
                        resolve();
                    });
                });
            }
        });
    }
}

// CONCATENATED MODULE: ./src/services/i18n.service.ts
var services_i18n_service_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



class services_i18n_service_I18nService extends i18n_service_I18nService {
    constructor(systemLanguage) {
        super(systemLanguage, browserApi["a" /* BrowserApi */].isSafariApi ? 'safari' : null, (formattedLocale) => services_i18n_service_awaiter(this, void 0, void 0, function* () {
            if (browserApi["a" /* BrowserApi */].isSafariApi) {
                yield safariApp["a" /* SafariApp */].sendMessageToApp('getLocaleStrings', formattedLocale);
                return window.bitwardenLocaleStrings;
            }
            else {
                // Deprecated
                const file = yield fetch(this.localesDirectory + formattedLocale + '/messages.json');
                return yield file.json();
            }
        }));
        this.supportedTranslationLocales = [
            'en', 'be', 'bg', 'ca', 'cs', 'da', 'de', 'el', 'en-GB', 'es', 'et', 'fa', 'fi', 'fr', 'he', 'hr', 'hu',
            'id', 'it', 'ja', 'ko', 'nb', 'nl', 'pl', 'pt-BR', 'pt-PT', 'ro', 'ru', 'sk', 'sr', 'sv', 'th', 'tr', 'uk',
            'vi', 'zh-CN', 'zh-TW',
        ];
    }
    t(id, p1, p2, p3) {
        return this.translate(id, p1, p2, p3);
    }
    translate(id, p1, p2, p3) {
        if (this.localesDirectory == null) {
            const placeholders = [];
            if (p1 != null) {
                placeholders.push(p1);
            }
            if (p2 != null) {
                placeholders.push(p2);
            }
            if (p3 != null) {
                placeholders.push(p3);
            }
            if (placeholders.length) {
                return chrome.i18n.getMessage(id, placeholders);
            }
            else {
                return chrome.i18n.getMessage(id);
            }
        }
        return super.translate(id, p1, p2, p3);
    }
}

// EXTERNAL MODULE: ./src/popup/services/popup-utils.service.ts
var popup_utils_service = __webpack_require__(24);

// CONCATENATED MODULE: ./src/background/main.background.ts
var main_background_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};



























class main_background_MainBackground {
    constructor() {
        this.loginToAutoFill = null;
        this.notificationQueue = [];
        this.menuOptionsLoaded = [];
        // Services
        this.messagingService = new browserMessaging_service["a" /* default */]();
        this.platformUtilsService = new browserPlatformUtils_service_BrowserPlatformUtilsService(this.messagingService, (clipboardValue, clearMs) => {
            if (this.systemService != null) {
                this.systemService.clearClipboard(clipboardValue, clearMs);
            }
        });
        this.storageService = new browserStorage_service_BrowserStorageService(this.platformUtilsService);
        this.secureStorageService = new browserStorage_service_BrowserStorageService(this.platformUtilsService);
        this.i18nService = new services_i18n_service_I18nService(browserApi["a" /* BrowserApi */].getUILanguage(window));
        this.cryptoFunctionService = new webCryptoFunction_service_WebCryptoFunctionService(window, this.platformUtilsService);
        this.cryptoService = new crypto_service_CryptoService(this.storageService, this.secureStorageService, this.cryptoFunctionService, this.platformUtilsService);
        this.tokenService = new token_service_TokenService(this.storageService);
        this.appIdService = new appId_service_AppIdService(this.storageService);
        this.apiService = new api_service_ApiService(this.tokenService, this.platformUtilsService, (expired) => this.logout(expired));
        this.userService = new user_service_UserService(this.tokenService, this.storageService);
        this.authService = new auth_service["a" /* AuthService */](this.cryptoService, this.apiService, this.userService, this.tokenService, this.appIdService, this.i18nService, this.platformUtilsService, this.messagingService, this.vaultTimeoutService);
        this.settingsService = new SettingsService(this.userService, this.storageService);
        this.cipherService = new cipher_service["a" /* CipherService */](this.cryptoService, this.userService, this.settingsService, this.apiService, this.storageService, this.i18nService, () => this.searchService);
        this.folderService = new folder_service_FolderService(this.cryptoService, this.userService, this.apiService, this.storageService, this.i18nService, this.cipherService);
        this.collectionService = new collection_service_CollectionService(this.cryptoService, this.userService, this.storageService, this.i18nService);
        this.searchService = new search_service["a" /* SearchService */](this.cipherService);
        this.sendService = new send_service["a" /* SendService */](this.cryptoService, this.userService, this.apiService, this.storageService, this.i18nService, this.cryptoFunctionService);
        this.stateService = new state_service["a" /* StateService */]();
        this.policyService = new policy_service_PolicyService(this.userService, this.storageService);
        this.vaultTimeoutService = new vaultTimeout_service_VaultTimeoutService(this.cipherService, this.folderService, this.collectionService, this.cryptoService, this.platformUtilsService, this.storageService, this.messagingService, this.searchService, this.userService, this.tokenService, () => main_background_awaiter(this, void 0, void 0, function* () {
            if (this.notificationsService != null) {
                this.notificationsService.updateConnection(false);
            }
            yield this.setIcon();
            yield this.refreshBadgeAndMenu(true);
            if (this.systemService != null) {
                this.systemService.startProcessReload();
                yield this.systemService.clearPendingClipboard();
            }
        }), () => main_background_awaiter(this, void 0, void 0, function* () { return yield this.logout(false); }));
        this.syncService = new sync_service_SyncService(this.userService, this.apiService, this.settingsService, this.folderService, this.cipherService, this.cryptoService, this.collectionService, this.storageService, this.messagingService, this.policyService, this.sendService, (expired) => main_background_awaiter(this, void 0, void 0, function* () { return yield this.logout(expired); }));
        this.eventService = new event_service_EventService(this.storageService, this.apiService, this.userService, this.cipherService);
        this.passwordGenerationService = new passwordGeneration_service_PasswordGenerationService(this.cryptoService, this.storageService, this.policyService);
        this.totpService = new totp_service_TotpService(this.storageService, this.cryptoFunctionService);
        this.autofillService = new autofill_service_AutofillService(this.cipherService, this.userService, this.totpService, this.eventService);
        this.containerService = new ContainerService(this.cryptoService);
        this.auditService = new audit_service_AuditService(this.cryptoFunctionService, this.apiService);
        this.exportService = new export_service_ExportService(this.folderService, this.cipherService, this.apiService);
        this.notificationsService = new notifications_service_NotificationsService(this.userService, this.syncService, this.appIdService, this.apiService, this.vaultTimeoutService, () => this.logout(true));
        this.environmentService = new environment_service_EnvironmentService(this.apiService, this.storageService, this.notificationsService);
        this.analytics = new analytics["a" /* Analytics */](window, () => browserApi["a" /* BrowserApi */].gaFilter(), this.platformUtilsService, this.storageService, this.appIdService);
        this.popupUtilsService = new popup_utils_service["a" /* PopupUtilsService */](this.platformUtilsService);
        this.systemService = new system_service_SystemService(this.storageService, this.vaultTimeoutService, this.messagingService, this.platformUtilsService, () => {
            const forceWindowReload = this.platformUtilsService.isSafari() ||
                this.platformUtilsService.isFirefox() || this.platformUtilsService.isOpera();
            browserApi["a" /* BrowserApi */].reloadExtension(forceWindowReload ? window : null);
            return Promise.resolve();
        });
        // Other fields
        this.isSafari = this.platformUtilsService.isSafari();
        this.sidebarAction = this.isSafari ? null : (typeof opr !== 'undefined') && opr.sidebarAction ?
            opr.sidebarAction : window.chrome.sidebarAction;
        // Background
        this.runtimeBackground = new runtime_background_RuntimeBackground(this, this.autofillService, this.cipherService, this.platformUtilsService, this.storageService, this.i18nService, this.analytics, this.notificationsService, this.systemService, this.vaultTimeoutService, this.environmentService);
        this.commandsBackground = new commands_background_CommandsBackground(this, this.passwordGenerationService, this.platformUtilsService, this.analytics, this.vaultTimeoutService);
        if (!this.isSafari) {
            this.tabsBackground = new TabsBackground(this);
            this.contextMenusBackground = new contextMenus_background_ContextMenusBackground(this, this.cipherService, this.passwordGenerationService, this.analytics, this.platformUtilsService, this.vaultTimeoutService, this.eventService, this.totpService);
            this.idleBackground = new idle_background_IdleBackground(this.vaultTimeoutService, this.storageService, this.notificationsService);
            this.webRequestBackground = new webRequest_background_WebRequestBackground(this.platformUtilsService, this.cipherService, this.vaultTimeoutService);
            this.windowsBackground = new WindowsBackground(this);
        }
    }
    bootstrap() {
        return main_background_awaiter(this, void 0, void 0, function* () {
            safariApp["a" /* SafariApp */].init();
            this.analytics.ga('send', 'pageview', '/background.html');
            this.containerService.attachToWindow(window);
            yield this.vaultTimeoutService.init(true);
            yield this.i18nService.init();
            yield this.eventService.init(true);
            yield this.runtimeBackground.init();
            yield this.commandsBackground.init();
            if (!this.isSafari) {
                yield this.tabsBackground.init();
                yield this.contextMenusBackground.init();
                yield this.idleBackground.init();
                yield this.webRequestBackground.init();
                yield this.windowsBackground.init();
            }
            return new Promise((resolve) => {
                setTimeout(() => main_background_awaiter(this, void 0, void 0, function* () {
                    yield this.environmentService.setUrlsFromStorage();
                    yield this.setIcon();
                    this.cleanupNotificationQueue();
                    this.fullSync(true);
                    setTimeout(() => this.notificationsService.init(this.environmentService), 2500);
                    resolve();
                }), 500);
            });
        });
    }
    setIcon() {
        return main_background_awaiter(this, void 0, void 0, function* () {
            if (this.isSafari || (!chrome.browserAction && !this.sidebarAction)) {
                return;
            }
            const isAuthenticated = yield this.userService.isAuthenticated();
            const locked = yield this.vaultTimeoutService.isLocked();
            let suffix = '';
            if (!isAuthenticated) {
                suffix = '_gray';
            }
            else if (locked) {
                suffix = '_locked';
            }
            yield this.actionSetIcon(chrome.browserAction, suffix);
            yield this.actionSetIcon(this.sidebarAction, suffix);
        });
    }
    refreshBadgeAndMenu(forLocked = false) {
        return main_background_awaiter(this, void 0, void 0, function* () {
            if (this.isSafari || !chrome.windows || !chrome.contextMenus) {
                return;
            }
            const menuDisabled = yield this.storageService.get(constants_service["a" /* ConstantsService */].disableContextMenuItemKey);
            if (!menuDisabled) {
                yield this.buildContextMenu();
            }
            else {
                yield this.contextMenusRemoveAll();
            }
            if (forLocked) {
                yield this.loadMenuAndUpdateBadgeForNoAccessState(!menuDisabled);
                this.onUpdatedRan = this.onReplacedRan = false;
                return;
            }
            const tab = yield browserApi["a" /* BrowserApi */].getTabFromCurrentWindow();
            if (tab) {
                yield this.contextMenuReady(tab, !menuDisabled);
            }
        });
    }
    logout(expired) {
        return main_background_awaiter(this, void 0, void 0, function* () {
            yield this.eventService.uploadEvents();
            const userId = yield this.userService.getUserId();
            yield Promise.all([
                this.eventService.clearEvents(),
                this.syncService.setLastSync(new Date(0)),
                this.tokenService.clearToken(),
                this.cryptoService.clearKeys(),
                this.userService.clear(),
                this.settingsService.clear(userId),
                this.cipherService.clear(userId),
                this.folderService.clear(userId),
                this.collectionService.clear(userId),
                this.policyService.clear(userId),
                this.passwordGenerationService.clear(),
                this.vaultTimeoutService.clear(),
            ]);
            this.searchService.clearIndex();
            this.messagingService.send('doneLoggingOut', { expired: expired });
            yield this.setIcon();
            yield this.refreshBadgeAndMenu();
            yield this.reseedStorage();
            this.notificationsService.updateConnection(false);
            this.systemService.startProcessReload();
            yield this.systemService.clearPendingClipboard();
        });
    }
    collectPageDetailsForContentScript(tab, sender, frameId = null) {
        return main_background_awaiter(this, void 0, void 0, function* () {
            if (tab == null || !tab.id) {
                return;
            }
            if (yield this.vaultTimeoutService.isLocked()) {
                return;
            }
            const options = {};
            if (frameId != null) {
                options.frameId = frameId;
            }
            browserApi["a" /* BrowserApi */].tabSendMessage(tab, {
                command: 'collectPageDetails',
                tab: tab,
                sender: sender,
            }, options);
        });
    }
    checkNotificationQueue(tab = null) {
        return main_background_awaiter(this, void 0, void 0, function* () {
            if (this.notificationQueue.length === 0) {
                return;
            }
            if (tab != null) {
                this.doNotificationQueueCheck(tab);
                return;
            }
            const currentTab = yield browserApi["a" /* BrowserApi */].getTabFromCurrentWindow();
            if (currentTab != null) {
                this.doNotificationQueueCheck(currentTab);
            }
        });
    }
    openPopup() {
        return main_background_awaiter(this, void 0, void 0, function* () {
            // Chrome APIs cannot open popup
            // TODO: Do we need to open this popup?
            if (!this.isSafari) {
                return;
            }
            yield safariApp["a" /* SafariApp */].sendMessageToApp('showPopover', null, true);
        });
    }
    reseedStorage() {
        return main_background_awaiter(this, void 0, void 0, function* () {
            if (!this.platformUtilsService.isChrome() && !this.platformUtilsService.isVivaldi() &&
                !this.platformUtilsService.isOpera()) {
                return;
            }
            const currentVaultTimeout = yield this.storageService.get(constants_service["a" /* ConstantsService */].vaultTimeoutKey);
            if (currentVaultTimeout == null) {
                return;
            }
            const getStorage = () => new Promise((resolve) => {
                chrome.storage.local.get(null, (o) => resolve(o));
            });
            const clearStorage = () => new Promise((resolve) => {
                chrome.storage.local.clear(() => resolve());
            });
            const storage = yield getStorage();
            yield clearStorage();
            for (const key in storage) {
                if (!storage.hasOwnProperty(key)) {
                    continue;
                }
                yield this.storageService.save(key, storage[key]);
            }
        });
    }
    buildContextMenu() {
        return main_background_awaiter(this, void 0, void 0, function* () {
            if (this.isSafari || !chrome.contextMenus || this.buildingContextMenu) {
                return;
            }
            this.buildingContextMenu = true;
            yield this.contextMenusRemoveAll();
            yield this.contextMenusCreate({
                type: 'normal',
                id: 'root',
                contexts: ['all'],
                title: 'Bitwarden',
            });
            yield this.contextMenusCreate({
                type: 'normal',
                id: 'autofill',
                parentId: 'root',
                contexts: ['all'],
                title: this.i18nService.t('autoFill'),
            });
            yield this.contextMenusCreate({
                type: 'normal',
                id: 'copy-username',
                parentId: 'root',
                contexts: ['all'],
                title: this.i18nService.t('copyUsername'),
            });
            yield this.contextMenusCreate({
                type: 'normal',
                id: 'copy-password',
                parentId: 'root',
                contexts: ['all'],
                title: this.i18nService.t('copyPassword'),
            });
            if (yield this.userService.canAccessPremium()) {
                yield this.contextMenusCreate({
                    type: 'normal',
                    id: 'copy-totp',
                    parentId: 'root',
                    contexts: ['all'],
                    title: this.i18nService.t('copyVerificationCode'),
                });
            }
            yield this.contextMenusCreate({
                type: 'separator',
                parentId: 'root',
            });
            yield this.contextMenusCreate({
                type: 'normal',
                id: 'generate-password',
                parentId: 'root',
                contexts: ['all'],
                title: this.i18nService.t('generatePasswordCopied'),
            });
            this.buildingContextMenu = false;
        });
    }
    contextMenuReady(tab, contextMenuEnabled) {
        return main_background_awaiter(this, void 0, void 0, function* () {
            yield this.loadMenuAndUpdateBadge(tab.url, tab.id, contextMenuEnabled);
            this.onUpdatedRan = this.onReplacedRan = false;
        });
    }
    loadMenuAndUpdateBadge(url, tabId, contextMenuEnabled) {
        return main_background_awaiter(this, void 0, void 0, function* () {
            if (!url || (!chrome.browserAction && !this.sidebarAction)) {
                return;
            }
            this.actionSetBadgeBackgroundColor(chrome.browserAction);
            this.actionSetBadgeBackgroundColor(this.sidebarAction);
            this.menuOptionsLoaded = [];
            const locked = yield this.vaultTimeoutService.isLocked();
            if (!locked) {
                try {
                    const ciphers = yield this.cipherService.getAllDecryptedForUrl(url);
                    ciphers.sort((a, b) => this.cipherService.sortCiphersByLastUsedThenName(a, b));
                    if (contextMenuEnabled) {
                        ciphers.forEach((cipher) => {
                            this.loadLoginContextMenuOptions(cipher);
                        });
                    }
                    let theText = '';
                    if (ciphers.length > 0 && ciphers.length <= 9) {
                        theText = ciphers.length.toString();
                    }
                    else if (ciphers.length > 0) {
                        theText = '9+';
                    }
                    else {
                        if (contextMenuEnabled) {
                            yield this.loadNoLoginsContextMenuOptions(this.i18nService.t('noMatchingLogins'));
                        }
                    }
                    this.browserActionSetBadgeText(theText, tabId);
                    this.sidebarActionSetBadgeText(theText, tabId);
                    return;
                }
                catch (_a) { }
            }
            yield this.loadMenuAndUpdateBadgeForNoAccessState(contextMenuEnabled);
        });
    }
    loadMenuAndUpdateBadgeForNoAccessState(contextMenuEnabled) {
        return main_background_awaiter(this, void 0, void 0, function* () {
            if (contextMenuEnabled) {
                const authed = yield this.userService.isAuthenticated();
                yield this.loadNoLoginsContextMenuOptions(this.i18nService.t(authed ? 'vaultLocked' : 'vaultLoggedOut'));
            }
            const tabs = yield browserApi["a" /* BrowserApi */].getActiveTabs();
            if (tabs != null) {
                tabs.forEach((tab) => {
                    if (tab.id != null) {
                        this.browserActionSetBadgeText('', tab.id);
                        this.sidebarActionSetBadgeText('', tab.id);
                    }
                });
            }
        });
    }
    loadLoginContextMenuOptions(cipher) {
        return main_background_awaiter(this, void 0, void 0, function* () {
            if (cipher == null || cipher.type !== cipherType["a" /* CipherType */].Login) {
                return;
            }
            let title = cipher.name;
            if (cipher.login.username && cipher.login.username !== '') {
                title += (' (' + cipher.login.username + ')');
            }
            yield this.loadContextMenuOptions(title, cipher.id, cipher);
        });
    }
    loadNoLoginsContextMenuOptions(noLoginsMessage) {
        return main_background_awaiter(this, void 0, void 0, function* () {
            yield this.loadContextMenuOptions(noLoginsMessage, 'noop', null);
        });
    }
    loadContextMenuOptions(title, idSuffix, cipher) {
        return main_background_awaiter(this, void 0, void 0, function* () {
            if (!chrome.contextMenus || this.menuOptionsLoaded.indexOf(idSuffix) > -1 ||
                (cipher != null && cipher.type !== cipherType["a" /* CipherType */].Login)) {
                return;
            }
            this.menuOptionsLoaded.push(idSuffix);
            if (cipher == null || (cipher.login.password && cipher.login.password !== '')) {
                yield this.contextMenusCreate({
                    type: 'normal',
                    id: 'autofill_' + idSuffix,
                    parentId: 'autofill',
                    contexts: ['all'],
                    title: this.sanitizeContextMenuTitle(title),
                });
            }
            if (cipher == null || (cipher.login.username && cipher.login.username !== '')) {
                yield this.contextMenusCreate({
                    type: 'normal',
                    id: 'copy-username_' + idSuffix,
                    parentId: 'copy-username',
                    contexts: ['all'],
                    title: this.sanitizeContextMenuTitle(title),
                });
            }
            if (cipher == null || (cipher.login.password && cipher.login.password !== '' && cipher.viewPassword)) {
                yield this.contextMenusCreate({
                    type: 'normal',
                    id: 'copy-password_' + idSuffix,
                    parentId: 'copy-password',
                    contexts: ['all'],
                    title: this.sanitizeContextMenuTitle(title),
                });
            }
            const canAccessPremium = yield this.userService.canAccessPremium();
            if (canAccessPremium && (cipher == null || (cipher.login.totp && cipher.login.totp !== ''))) {
                yield this.contextMenusCreate({
                    type: 'normal',
                    id: 'copy-totp_' + idSuffix,
                    parentId: 'copy-totp',
                    contexts: ['all'],
                    title: this.sanitizeContextMenuTitle(title),
                });
            }
        });
    }
    sanitizeContextMenuTitle(title) {
        return title.replace(/&/g, '&&');
    }
    cleanupNotificationQueue() {
        for (let i = this.notificationQueue.length - 1; i >= 0; i--) {
            if (this.notificationQueue[i].expires < new Date()) {
                this.notificationQueue.splice(i, 1);
            }
        }
        setTimeout(() => this.cleanupNotificationQueue(), 2 * 60 * 1000); // check every 2 minutes
    }
    doNotificationQueueCheck(tab) {
        if (tab == null) {
            return;
        }
        const tabDomain = utils["a" /* Utils */].getDomain(tab.url);
        if (tabDomain == null) {
            return;
        }
        for (let i = 0; i < this.notificationQueue.length; i++) {
            if (this.notificationQueue[i].tabId !== tab.id || this.notificationQueue[i].domain !== tabDomain) {
                continue;
            }
            if (this.notificationQueue[i].type === 'addLogin') {
                browserApi["a" /* BrowserApi */].tabSendMessageData(tab, 'openNotificationBar', {
                    type: 'add',
                });
            }
            else if (this.notificationQueue[i].type === 'changePassword') {
                browserApi["a" /* BrowserApi */].tabSendMessageData(tab, 'openNotificationBar', {
                    type: 'change',
                });
            }
            break;
        }
    }
    fullSync(override = false) {
        return main_background_awaiter(this, void 0, void 0, function* () {
            const syncInternal = 6 * 60 * 60 * 1000; // 6 hours
            const lastSync = yield this.syncService.getLastSync();
            let lastSyncAgo = syncInternal + 1;
            if (lastSync != null) {
                lastSyncAgo = new Date().getTime() - lastSync.getTime();
            }
            if (override || lastSyncAgo >= syncInternal) {
                yield this.syncService.fullSync(override);
                this.scheduleNextSync();
            }
            else {
                this.scheduleNextSync();
            }
        });
    }
    scheduleNextSync() {
        if (this.syncTimeout) {
            clearTimeout(this.syncTimeout);
        }
        this.syncTimeout = setTimeout(() => main_background_awaiter(this, void 0, void 0, function* () { return yield this.fullSync(); }), 5 * 60 * 1000); // check every 5 minutes
    }
    // Browser API Helpers
    contextMenusRemoveAll() {
        return new Promise((resolve) => {
            chrome.contextMenus.removeAll(() => {
                resolve();
                if (chrome.runtime.lastError) {
                    return;
                }
            });
        });
    }
    contextMenusCreate(options) {
        return new Promise((resolve) => {
            chrome.contextMenus.create(options, () => {
                resolve();
                if (chrome.runtime.lastError) {
                    return;
                }
            });
        });
    }
    actionSetIcon(theAction, suffix) {
        return main_background_awaiter(this, void 0, void 0, function* () {
            if (!theAction || !theAction.setIcon) {
                return;
            }
            const options = {
                path: {
                    19: 'images/icon19' + suffix + '.png',
                    38: 'images/icon38' + suffix + '.png',
                },
            };
            if (this.platformUtilsService.isFirefox()) {
                yield theAction.setIcon(options);
            }
            else {
                return new Promise((resolve) => {
                    theAction.setIcon(options, () => resolve());
                });
            }
        });
    }
    actionSetBadgeBackgroundColor(action) {
        if (action && action.setBadgeBackgroundColor) {
            action.setBadgeBackgroundColor({ color: '#294e5f' });
        }
    }
    browserActionSetBadgeText(text, tabId) {
        if (chrome.browserAction && chrome.browserAction.setBadgeText) {
            chrome.browserAction.setBadgeText({
                text: text,
                tabId: tabId,
            });
        }
    }
    sidebarActionSetBadgeText(text, tabId) {
        if (!this.sidebarAction) {
            return;
        }
        if (this.sidebarAction.setBadgeText) {
            this.sidebarAction.setBadgeText({
                text: text,
                tabId: tabId,
            });
        }
        else if (this.sidebarAction.setTitle) {
            let title = 'Bitwarden';
            if (text && text !== '') {
                title += (' [' + text + ']');
            }
            this.sidebarAction.setTitle({
                title: title,
                tabId: tabId,
            });
        }
    }
}

// CONCATENATED MODULE: ./src/background.ts

const bitwardenMain = window.bitwardenMain = new main_background_MainBackground();
bitwardenMain.bootstrap().then(() => {
    // Finished bootstrapping
});


/***/ }),

/***/ 72:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CipherView; });
/* harmony import */ var _enums_cipherType__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(11);
/* harmony import */ var _cardView__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(73);
/* harmony import */ var _identityView__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(74);
/* harmony import */ var _loginView__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(60);
/* harmony import */ var _secureNoteView__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(75);





class CipherView {
    constructor(c) {
        this.id = null;
        this.organizationId = null;
        this.folderId = null;
        this.name = null;
        this.notes = null;
        this.type = null;
        this.favorite = false;
        this.organizationUseTotp = false;
        this.edit = false;
        this.viewPassword = true;
        this.login = new _loginView__WEBPACK_IMPORTED_MODULE_3__[/* LoginView */ "a"]();
        this.identity = new _identityView__WEBPACK_IMPORTED_MODULE_2__[/* IdentityView */ "a"]();
        this.card = new _cardView__WEBPACK_IMPORTED_MODULE_1__[/* CardView */ "a"]();
        this.secureNote = new _secureNoteView__WEBPACK_IMPORTED_MODULE_4__[/* SecureNoteView */ "a"]();
        this.attachments = null;
        this.fields = null;
        this.passwordHistory = null;
        this.collectionIds = null;
        this.revisionDate = null;
        this.deletedDate = null;
        if (!c) {
            return;
        }
        this.id = c.id;
        this.organizationId = c.organizationId;
        this.folderId = c.folderId;
        this.favorite = c.favorite;
        this.organizationUseTotp = c.organizationUseTotp;
        this.edit = c.edit;
        this.viewPassword = c.viewPassword;
        this.type = c.type;
        this.localData = c.localData;
        this.collectionIds = c.collectionIds;
        this.revisionDate = c.revisionDate;
        this.deletedDate = c.deletedDate;
    }
    get subTitle() {
        switch (this.type) {
            case _enums_cipherType__WEBPACK_IMPORTED_MODULE_0__[/* CipherType */ "a"].Login:
                return this.login.subTitle;
            case _enums_cipherType__WEBPACK_IMPORTED_MODULE_0__[/* CipherType */ "a"].SecureNote:
                return this.secureNote.subTitle;
            case _enums_cipherType__WEBPACK_IMPORTED_MODULE_0__[/* CipherType */ "a"].Card:
                return this.card.subTitle;
            case _enums_cipherType__WEBPACK_IMPORTED_MODULE_0__[/* CipherType */ "a"].Identity:
                return this.identity.subTitle;
            default:
                break;
        }
        return null;
    }
    get hasPasswordHistory() {
        return this.passwordHistory && this.passwordHistory.length > 0;
    }
    get hasAttachments() {
        return this.attachments && this.attachments.length > 0;
    }
    get hasOldAttachments() {
        if (this.hasAttachments) {
            for (let i = 0; i < this.attachments.length; i++) {
                if (this.attachments[i].key == null) {
                    return true;
                }
            }
        }
        return false;
    }
    get hasFields() {
        return this.fields && this.fields.length > 0;
    }
    get passwordRevisionDisplayDate() {
        if (this.type !== _enums_cipherType__WEBPACK_IMPORTED_MODULE_0__[/* CipherType */ "a"].Login || this.login == null) {
            return null;
        }
        else if (this.login.password == null || this.login.password === '') {
            return null;
        }
        return this.login.passwordRevisionDate;
    }
    get isDeleted() {
        return this.deletedDate != null;
    }
}


/***/ }),

/***/ 73:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CardView; });
class CardView {
    // tslint:enable
    constructor(c) {
        this.cardholderName = null;
        this.expMonth = null;
        this.expYear = null;
        this.code = null;
        // tslint:disable
        this._brand = null;
        this._number = null;
        this._subTitle = null;
        // ctor
    }
    get maskedCode() {
        return this.code != null ? '•'.repeat(this.code.length) : null;
    }
    get brand() {
        return this._brand;
    }
    set brand(value) {
        this._brand = value;
        this._subTitle = null;
    }
    get number() {
        return this._number;
    }
    set number(value) {
        this._number = value;
        this._subTitle = null;
    }
    get subTitle() {
        if (this._subTitle == null) {
            this._subTitle = this.brand;
            if (this.number != null && this.number.length >= 4) {
                if (this._subTitle != null && this._subTitle !== '') {
                    this._subTitle += ', ';
                }
                else {
                    this._subTitle = '';
                }
                // Show last 5 on amex, last 4 for all others
                const count = this.number.length >= 5 && this.number.match(new RegExp('^3[47]')) != null ? 5 : 4;
                this._subTitle += ('*' + this.number.substr(this.number.length - count));
            }
        }
        return this._subTitle;
    }
    get expiration() {
        if (!this.expMonth && !this.expYear) {
            return null;
        }
        let exp = this.expMonth != null ? ('0' + this.expMonth).slice(-2) : '__';
        exp += (' / ' + (this.expYear != null ? this.formatYear(this.expYear) : '____'));
        return exp;
    }
    formatYear(year) {
        return year.length === 2 ? '20' + year : year;
    }
}


/***/ }),

/***/ 74:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return IdentityView; });
/* harmony import */ var _misc_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8);

class IdentityView {
    // tslint:enable
    constructor(i) {
        this.title = null;
        this.middleName = null;
        this.address1 = null;
        this.address2 = null;
        this.address3 = null;
        this.city = null;
        this.state = null;
        this.postalCode = null;
        this.country = null;
        this.company = null;
        this.email = null;
        this.phone = null;
        this.ssn = null;
        this.username = null;
        this.passportNumber = null;
        this.licenseNumber = null;
        // tslint:disable
        this._firstName = null;
        this._lastName = null;
        this._subTitle = null;
        // ctor
    }
    get firstName() {
        return this._firstName;
    }
    set firstName(value) {
        this._firstName = value;
        this._subTitle = null;
    }
    get lastName() {
        return this._lastName;
    }
    set lastName(value) {
        this._lastName = value;
        this._subTitle = null;
    }
    get subTitle() {
        if (this._subTitle == null && (this.firstName != null || this.lastName != null)) {
            this._subTitle = '';
            if (this.firstName != null) {
                this._subTitle = this.firstName;
            }
            if (this.lastName != null) {
                if (this._subTitle !== '') {
                    this._subTitle += ' ';
                }
                this._subTitle += this.lastName;
            }
        }
        return this._subTitle;
    }
    get fullName() {
        if (this.title != null || this.firstName != null || this.middleName != null || this.lastName != null) {
            let name = '';
            if (this.title != null) {
                name += (this.title + ' ');
            }
            if (this.firstName != null) {
                name += (this.firstName + ' ');
            }
            if (this.middleName != null) {
                name += (this.middleName + ' ');
            }
            if (this.lastName != null) {
                name += this.lastName;
            }
            return name.trim();
        }
        return null;
    }
    get fullAddress() {
        let address = this.address1;
        if (!_misc_utils__WEBPACK_IMPORTED_MODULE_0__[/* Utils */ "a"].isNullOrWhitespace(this.address2)) {
            if (!_misc_utils__WEBPACK_IMPORTED_MODULE_0__[/* Utils */ "a"].isNullOrWhitespace(address)) {
                address += ', ';
            }
            address += this.address2;
        }
        if (!_misc_utils__WEBPACK_IMPORTED_MODULE_0__[/* Utils */ "a"].isNullOrWhitespace(this.address3)) {
            if (!_misc_utils__WEBPACK_IMPORTED_MODULE_0__[/* Utils */ "a"].isNullOrWhitespace(address)) {
                address += ', ';
            }
            address += this.address3;
        }
        return address;
    }
    get fullAddressPart2() {
        if (this.city == null && this.state == null && this.postalCode == null) {
            return null;
        }
        const city = this.city || '-';
        const state = this.state;
        const postalCode = this.postalCode || '-';
        let addressPart2 = city;
        if (!_misc_utils__WEBPACK_IMPORTED_MODULE_0__[/* Utils */ "a"].isNullOrWhitespace(state)) {
            addressPart2 += ', ' + state;
        }
        addressPart2 += ', ' + postalCode;
        return addressPart2;
    }
}


/***/ }),

/***/ 75:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SecureNoteView; });
class SecureNoteView {
    constructor(n) {
        this.type = null;
        if (!n) {
            return;
        }
        this.type = n.type;
    }
    get subTitle() {
        return null;
    }
}


/***/ }),

/***/ 76:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CipherData; });
/* harmony import */ var _enums_cipherType__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(11);
/* harmony import */ var _attachmentData__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(234);
/* harmony import */ var _cardData__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(235);
/* harmony import */ var _fieldData__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(236);
/* harmony import */ var _identityData__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(237);
/* harmony import */ var _loginData__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(238);
/* harmony import */ var _passwordHistoryData__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(240);
/* harmony import */ var _secureNoteData__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(241);








class CipherData {
    constructor(response, userId, collectionIds) {
        if (response == null) {
            return;
        }
        this.id = response.id;
        this.organizationId = response.organizationId;
        this.folderId = response.folderId;
        this.userId = userId;
        this.edit = response.edit;
        this.viewPassword = response.viewPassword;
        this.organizationUseTotp = response.organizationUseTotp;
        this.favorite = response.favorite;
        this.revisionDate = response.revisionDate;
        this.type = response.type;
        this.name = response.name;
        this.notes = response.notes;
        this.collectionIds = collectionIds != null ? collectionIds : response.collectionIds;
        this.deletedDate = response.deletedDate;
        switch (this.type) {
            case _enums_cipherType__WEBPACK_IMPORTED_MODULE_0__[/* CipherType */ "a"].Login:
                this.login = new _loginData__WEBPACK_IMPORTED_MODULE_5__[/* LoginData */ "a"](response.login);
                break;
            case _enums_cipherType__WEBPACK_IMPORTED_MODULE_0__[/* CipherType */ "a"].SecureNote:
                this.secureNote = new _secureNoteData__WEBPACK_IMPORTED_MODULE_7__[/* SecureNoteData */ "a"](response.secureNote);
                break;
            case _enums_cipherType__WEBPACK_IMPORTED_MODULE_0__[/* CipherType */ "a"].Card:
                this.card = new _cardData__WEBPACK_IMPORTED_MODULE_2__[/* CardData */ "a"](response.card);
                break;
            case _enums_cipherType__WEBPACK_IMPORTED_MODULE_0__[/* CipherType */ "a"].Identity:
                this.identity = new _identityData__WEBPACK_IMPORTED_MODULE_4__[/* IdentityData */ "a"](response.identity);
                break;
            default:
                break;
        }
        if (response.fields != null) {
            this.fields = response.fields.map((f) => new _fieldData__WEBPACK_IMPORTED_MODULE_3__[/* FieldData */ "a"](f));
        }
        if (response.attachments != null) {
            this.attachments = response.attachments.map((a) => new _attachmentData__WEBPACK_IMPORTED_MODULE_1__[/* AttachmentData */ "a"](a));
        }
        if (response.passwordHistory != null) {
            this.passwordHistory = response.passwordHistory.map((ph) => new _passwordHistoryData__WEBPACK_IMPORTED_MODULE_6__[/* PasswordHistoryData */ "a"](ph));
        }
    }
}


/***/ }),

/***/ 78:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return LoginUriView; });
/* harmony import */ var _enums_uriMatchType__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(25);
/* harmony import */ var _misc_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8);


const CanLaunchWhitelist = [
    'https://',
    'http://',
    'ssh://',
    'ftp://',
    'sftp://',
    'irc://',
    'vnc://',
    // https://docs.microsoft.com/en-us/windows-server/remote/remote-desktop-services/clients/remote-desktop-uri
    'rdp://',
    'ms-rd:',
    'chrome://',
    'iosapp://',
    'androidapp://',
];
class LoginUriView {
    // tslint:enable
    constructor(u) {
        this.match = null;
        // tslint:disable
        this._uri = null;
        this._domain = null;
        this._hostname = null;
        this._host = null;
        this._canLaunch = null;
        if (!u) {
            return;
        }
        this.match = u.match;
    }
    get uri() {
        return this._uri;
    }
    set uri(value) {
        this._uri = value;
        this._domain = null;
        this._canLaunch = null;
    }
    get domain() {
        if (this._domain == null && this.uri != null) {
            this._domain = _misc_utils__WEBPACK_IMPORTED_MODULE_1__[/* Utils */ "a"].getDomain(this.uri);
            if (this._domain === '') {
                this._domain = null;
            }
        }
        return this._domain;
    }
    get hostname() {
        if (this.match === _enums_uriMatchType__WEBPACK_IMPORTED_MODULE_0__[/* UriMatchType */ "a"].RegularExpression) {
            return null;
        }
        if (this._hostname == null && this.uri != null) {
            this._hostname = _misc_utils__WEBPACK_IMPORTED_MODULE_1__[/* Utils */ "a"].getHostname(this.uri);
            if (this._hostname === '') {
                this._hostname = null;
            }
        }
        return this._hostname;
    }
    get host() {
        if (this.match === _enums_uriMatchType__WEBPACK_IMPORTED_MODULE_0__[/* UriMatchType */ "a"].RegularExpression) {
            return null;
        }
        if (this._host == null && this.uri != null) {
            this._host = _misc_utils__WEBPACK_IMPORTED_MODULE_1__[/* Utils */ "a"].getHost(this.uri);
            if (this._host === '') {
                this._host = null;
            }
        }
        return this._host;
    }
    get hostnameOrUri() {
        return this.hostname != null ? this.hostname : this.uri;
    }
    get hostOrUri() {
        return this.host != null ? this.host : this.uri;
    }
    get isWebsite() {
        return this.uri != null && (this.uri.indexOf('http://') === 0 || this.uri.indexOf('https://') === 0 ||
            (this.uri.indexOf('://') < 0 && _misc_utils__WEBPACK_IMPORTED_MODULE_1__[/* Utils */ "a"].tldEndingRegex.test(this.uri)));
    }
    get canLaunch() {
        if (this._canLaunch != null) {
            return this._canLaunch;
        }
        if (this.uri != null && this.match !== _enums_uriMatchType__WEBPACK_IMPORTED_MODULE_0__[/* UriMatchType */ "a"].RegularExpression) {
            const uri = this.launchUri;
            for (let i = 0; i < CanLaunchWhitelist.length; i++) {
                if (uri.indexOf(CanLaunchWhitelist[i]) === 0) {
                    this._canLaunch = true;
                    return this._canLaunch;
                }
            }
        }
        this._canLaunch = false;
        return this._canLaunch;
    }
    get launchUri() {
        return this.uri.indexOf('://') < 0 && _misc_utils__WEBPACK_IMPORTED_MODULE_1__[/* Utils */ "a"].tldEndingRegex.test(this.uri) ? ('http://' + this.uri) : this.uri;
    }
}


/***/ }),

/***/ 8:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, global, Buffer) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Utils; });
/* harmony import */ var tldjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(62);
/* harmony import */ var tldjs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(tldjs__WEBPACK_IMPORTED_MODULE_0__);

// tslint:disable-next-line
const nodeURL = typeof window === 'undefined' ? __webpack_require__(177) : null;
class Utils {
    static init() {
        if (Utils.inited) {
            return;
        }
        Utils.inited = true;
        Utils.isNode = typeof process !== 'undefined' && process.release != null &&
            process.release.name === 'node';
        Utils.isBrowser = typeof window !== 'undefined';
        Utils.isNativeScript = !Utils.isNode && !Utils.isBrowser;
        Utils.isMobileBrowser = Utils.isBrowser && this.isMobile(window);
        Utils.isAppleMobileBrowser = Utils.isBrowser && this.isAppleMobile(window);
        Utils.global = Utils.isNativeScript ? global : (Utils.isNode && !Utils.isBrowser ? global : window);
    }
    static fromB64ToArray(str) {
        if (Utils.isNode || Utils.isNativeScript) {
            return new Uint8Array(Buffer.from(str, 'base64'));
        }
        else {
            const binaryString = window.atob(str);
            const bytes = new Uint8Array(binaryString.length);
            for (let i = 0; i < binaryString.length; i++) {
                bytes[i] = binaryString.charCodeAt(i);
            }
            return bytes;
        }
    }
    static fromUrlB64ToArray(str) {
        return Utils.fromB64ToArray(Utils.fromUrlB64ToB64(str));
    }
    static fromHexToArray(str) {
        if (Utils.isNode || Utils.isNativeScript) {
            return new Uint8Array(Buffer.from(str, 'hex'));
        }
        else {
            const bytes = new Uint8Array(str.length / 2);
            for (let i = 0; i < str.length; i += 2) {
                bytes[i / 2] = parseInt(str.substr(i, 2), 16);
            }
            return bytes;
        }
    }
    static fromUtf8ToArray(str) {
        if (Utils.isNode || Utils.isNativeScript) {
            return new Uint8Array(Buffer.from(str, 'utf8'));
        }
        else {
            const strUtf8 = unescape(encodeURIComponent(str));
            const arr = new Uint8Array(strUtf8.length);
            for (let i = 0; i < strUtf8.length; i++) {
                arr[i] = strUtf8.charCodeAt(i);
            }
            return arr;
        }
    }
    static fromByteStringToArray(str) {
        const arr = new Uint8Array(str.length);
        for (let i = 0; i < str.length; i++) {
            arr[i] = str.charCodeAt(i);
        }
        return arr;
    }
    static fromBufferToB64(buffer) {
        if (Utils.isNode || Utils.isNativeScript) {
            return Buffer.from(buffer).toString('base64');
        }
        else {
            let binary = '';
            const bytes = new Uint8Array(buffer);
            for (let i = 0; i < bytes.byteLength; i++) {
                binary += String.fromCharCode(bytes[i]);
            }
            return window.btoa(binary);
        }
    }
    static fromBufferToUrlB64(buffer) {
        return Utils.fromB64toUrlB64(Utils.fromBufferToB64(buffer));
    }
    static fromB64toUrlB64(b64Str) {
        return b64Str.replace(/\+/g, '-')
            .replace(/\//g, '_')
            .replace(/=/g, '');
    }
    static fromBufferToUtf8(buffer) {
        if (Utils.isNode || Utils.isNativeScript) {
            return Buffer.from(buffer).toString('utf8');
        }
        else {
            const bytes = new Uint8Array(buffer);
            const encodedString = String.fromCharCode.apply(null, bytes);
            return decodeURIComponent(escape(encodedString));
        }
    }
    static fromBufferToByteString(buffer) {
        return String.fromCharCode.apply(null, new Uint8Array(buffer));
    }
    // ref: https://stackoverflow.com/a/40031979/1090359
    static fromBufferToHex(buffer) {
        if (Utils.isNode || Utils.isNativeScript) {
            return Buffer.from(buffer).toString('hex');
        }
        else {
            const bytes = new Uint8Array(buffer);
            return Array.prototype.map.call(bytes, (x) => ('00' + x.toString(16)).slice(-2)).join('');
        }
    }
    static fromUrlB64ToB64(urlB64Str) {
        let output = urlB64Str.replace(/-/g, '+').replace(/_/g, '/');
        switch (output.length % 4) {
            case 0:
                break;
            case 2:
                output += '==';
                break;
            case 3:
                output += '=';
                break;
            default:
                throw new Error('Illegal base64url string!');
        }
        return output;
    }
    static fromUrlB64ToUtf8(urlB64Str) {
        return Utils.fromB64ToUtf8(Utils.fromUrlB64ToB64(urlB64Str));
    }
    static fromB64ToUtf8(b64Str) {
        if (Utils.isNode || Utils.isNativeScript) {
            return Buffer.from(b64Str, 'base64').toString('utf8');
        }
        else {
            return decodeURIComponent(escape(window.atob(b64Str)));
        }
    }
    // ref: http://stackoverflow.com/a/2117523/1090359
    static newGuid() {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {
            // tslint:disable-next-line
            const r = Math.random() * 16 | 0;
            // tslint:disable-next-line
            const v = c === 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
    }
    static isGuid(id) {
        return RegExp(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/, 'i').test(id);
    }
    static getHostname(uriString) {
        const url = Utils.getUrl(uriString);
        try {
            return url != null && url.hostname !== '' ? url.hostname : null;
        }
        catch (_a) {
            return null;
        }
    }
    static getHost(uriString) {
        const url = Utils.getUrl(uriString);
        try {
            return url != null && url.host !== '' ? url.host : null;
        }
        catch (_a) {
            return null;
        }
    }
    static getDomain(uriString) {
        if (uriString == null) {
            return null;
        }
        uriString = uriString.trim();
        if (uriString === '') {
            return null;
        }
        if (uriString.startsWith('data:')) {
            return null;
        }
        let httpUrl = uriString.startsWith('http://') || uriString.startsWith('https://');
        if (!httpUrl && uriString.indexOf('://') < 0 && Utils.tldEndingRegex.test(uriString)) {
            uriString = 'http://' + uriString;
            httpUrl = true;
        }
        if (httpUrl) {
            try {
                const url = Utils.getUrlObject(uriString);
                if (url.hostname === 'localhost' || Utils.validIpAddress(url.hostname)) {
                    return url.hostname;
                }
                const urlDomain = tldjs__WEBPACK_IMPORTED_MODULE_0__ != null && tldjs__WEBPACK_IMPORTED_MODULE_0__["getDomain"] != null ? tldjs__WEBPACK_IMPORTED_MODULE_0__["getDomain"](url.hostname) : null;
                return urlDomain != null ? urlDomain : url.hostname;
            }
            catch (e) { }
        }
        try {
            const domain = tldjs__WEBPACK_IMPORTED_MODULE_0__ != null && tldjs__WEBPACK_IMPORTED_MODULE_0__["getDomain"] != null ? tldjs__WEBPACK_IMPORTED_MODULE_0__["getDomain"](uriString) : null;
            if (domain != null) {
                return domain;
            }
        }
        catch (_a) {
            return null;
        }
        return null;
    }
    static getQueryParams(uriString) {
        const url = Utils.getUrl(uriString);
        if (url == null || url.search == null || url.search === '') {
            return null;
        }
        const map = new Map();
        const pairs = (url.search[0] === '?' ? url.search.substr(1) : url.search).split('&');
        pairs.forEach((pair) => {
            const parts = pair.split('=');
            if (parts.length < 1) {
                return;
            }
            map.set(decodeURIComponent(parts[0]).toLowerCase(), parts[1] == null ? '' : decodeURIComponent(parts[1]));
        });
        return map;
    }
    static getSortFunction(i18nService, prop) {
        return (a, b) => {
            if (a[prop] == null && b[prop] != null) {
                return -1;
            }
            if (a[prop] != null && b[prop] == null) {
                return 1;
            }
            if (a[prop] == null && b[prop] == null) {
                return 0;
            }
            return i18nService.collator ? i18nService.collator.compare(a[prop], b[prop]) :
                a[prop].localeCompare(b[prop]);
        };
    }
    static isNullOrWhitespace(str) {
        return str == null || typeof str !== 'string' || str.trim() === '';
    }
    static validIpAddress(ipString) {
        // tslint:disable-next-line
        const ipRegex = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;
        return ipRegex.test(ipString);
    }
    static isMobile(win) {
        let mobile = false;
        ((a) => {
            // tslint:disable-next-line
            if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4))) {
                mobile = true;
            }
        })(win.navigator.userAgent || win.navigator.vendor || win.opera);
        return mobile || win.navigator.userAgent.match(/iPad/i) != null;
    }
    static isAppleMobile(win) {
        return win.navigator.userAgent.match(/iPhone/i) != null || win.navigator.userAgent.match(/iPad/i) != null;
    }
    static getUrl(uriString) {
        if (uriString == null) {
            return null;
        }
        uriString = uriString.trim();
        if (uriString === '') {
            return null;
        }
        let url = Utils.getUrlObject(uriString);
        if (url == null) {
            const hasHttpProtocol = uriString.indexOf('http://') === 0 || uriString.indexOf('https://') === 0;
            if (!hasHttpProtocol && uriString.indexOf('.') > -1) {
                url = Utils.getUrlObject('http://' + uriString);
            }
        }
        return url;
    }
    static getUrlObject(uriString) {
        try {
            if (nodeURL != null) {
                return nodeURL.URL ? new nodeURL.URL(uriString) : nodeURL.parse(uriString);
            }
            else if (typeof URL === 'function') {
                return new URL(uriString);
            }
            else if (window != null) {
                const hasProtocol = uriString.indexOf('://') > -1;
                if (!hasProtocol && uriString.indexOf('.') > -1) {
                    uriString = 'http://' + uriString;
                }
                else if (!hasProtocol) {
                    return null;
                }
                const anchor = window.document.createElement('a');
                anchor.href = uriString;
                return anchor;
            }
        }
        catch (e) { }
        return null;
    }
}
Utils.inited = false;
Utils.isNativeScript = false;
Utils.isNode = false;
Utils.isBrowser = true;
Utils.isMobileBrowser = false;
Utils.isAppleMobileBrowser = false;
Utils.global = null;
Utils.tldEndingRegex = /.*\.(com|net|org|edu|uk|gov|ca|de|jp|fr|au|ru|ch|io|es|us|co|xyz|info|ly|mil)$/;
Utils.init();

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(83), __webpack_require__(59), __webpack_require__(55).Buffer))

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL2Fic3RyYWN0aW9ucy9wbGF0Zm9ybVV0aWxzLnNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL21vZGVscy92aWV3L2ZvbGRlclZpZXcudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL21vZGVscy92aWV3L2ZpZWxkVmlldy50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9zcmMvbW9kZWxzL3JlcXVlc3Qva2V5c1JlcXVlc3QudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL2VudW1zL2NpcGhlclR5cGUudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL21vZGVscy9yZXF1ZXN0L2F0dGFjaG1lbnRSZXF1ZXN0LnRzIiwid2VicGFjazovLy8uL2pzbGliL3NyYy9tb2RlbHMvcmVxdWVzdC9jaXBoZXJSZXF1ZXN0LnRzIiwid2VicGFjazovLy8uL2pzbGliL3NyYy9tb2RlbHMvcmVzcG9uc2UvYmFzZVJlc3BvbnNlLnRzIiwid2VicGFjazovLy8uL2pzbGliL3NyYy9tb2RlbHMvZG9tYWluL2F1dGhSZXN1bHQudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL21vZGVscy9yZXF1ZXN0L2RldmljZVJlcXVlc3QudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL21vZGVscy9yZXF1ZXN0L3ByZWxvZ2luUmVxdWVzdC50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9zcmMvbW9kZWxzL3JlcXVlc3QvdG9rZW5SZXF1ZXN0LnRzIiwid2VicGFjazovLy8uL2pzbGliL3NyYy9zZXJ2aWNlcy9hdXRoLnNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL21vZGVscy9kb21haW4vY2lwaGVyLnRzIiwid2VicGFjazovLy8uL3NyYy9icm93c2VyL2Jyb3dzZXJBcGkudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL2VudW1zL3R3b0ZhY3RvclByb3ZpZGVyVHlwZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9zcmMvZW51bXMvc2VjdXJlTm90ZVR5cGUudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL21pc2MvYW5hbHl0aWNzLnRzIiwid2VicGFjazovLy8uL2pzbGliL3NyYy9lbnVtcy9rZGZUeXBlLnRzIiwid2VicGFjazovLy8uL2pzbGliL3NyYy9lbnVtcy9vcmdhbml6YXRpb25Vc2VyU3RhdHVzVHlwZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9zcmMvZW51bXMvZGV2aWNlVHlwZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9zcmMvbW9kZWxzL2RhdGEvc2VuZERhdGEudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL21vZGVscy9hcGkvc2VuZEZpbGVBcGkudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL21vZGVscy9hcGkvc2VuZFRleHRBcGkudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL21vZGVscy92aWV3L2F0dGFjaG1lbnRWaWV3LnRzIiwid2VicGFjazovLy8uL2pzbGliL3NyYy9zZXJ2aWNlcy9zdGF0ZS5zZXJ2aWNlLnRzIiwid2VicGFjazovLy8uL3NyYy9zZXJ2aWNlcy9icm93c2VyTWVzc2FnaW5nLnNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL3NlcnZpY2VzL3NlYXJjaC5zZXJ2aWNlLnRzIiwid2VicGFjazovLy8uL2pzbGliL3NyYy9tb2RlbHMvdmlldy9wYXNzd29yZEhpc3RvcnlWaWV3LnRzIiwid2VicGFjazovLy8uL2pzbGliL3NyYy9taXNjL3NlcXVlbnRpYWxpemUudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL2VudW1zL2VuY3J5cHRpb25UeXBlLnRzIiwid2VicGFjazovLy8uL2pzbGliL3NyYy9tb2RlbHMvYXBpL2NhcmRBcGkudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL21vZGVscy9hcGkvZmllbGRBcGkudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL21vZGVscy9hcGkvaWRlbnRpdHlBcGkudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL21vZGVscy9hcGkvbG9naW5BcGkudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL21vZGVscy9hcGkvbG9naW5VcmlBcGkudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL21vZGVscy9hcGkvc2VjdXJlTm90ZUFwaS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9zcmMvbW9kZWxzL2RhdGEvYXR0YWNobWVudERhdGEudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL21vZGVscy9kYXRhL2NhcmREYXRhLnRzIiwid2VicGFjazovLy8uL2pzbGliL3NyYy9tb2RlbHMvZGF0YS9maWVsZERhdGEudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL21vZGVscy9kYXRhL2lkZW50aXR5RGF0YS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9zcmMvbW9kZWxzL2RhdGEvbG9naW5EYXRhLnRzIiwid2VicGFjazovLy8uL2pzbGliL3NyYy9tb2RlbHMvZGF0YS9sb2dpblVyaURhdGEudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BvcHVwL3NlcnZpY2VzL3BvcHVwLXV0aWxzLnNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL21vZGVscy9kYXRhL3Bhc3N3b3JkSGlzdG9yeURhdGEudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL21vZGVscy9kYXRhL3NlY3VyZU5vdGVEYXRhLnRzIiwid2VicGFjazovLy8uL2pzbGliL3NyYy9tb2RlbHMvZG9tYWluL2F0dGFjaG1lbnQudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL21vZGVscy9kb21haW4vY2FyZC50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9zcmMvbW9kZWxzL2RvbWFpbi9maWVsZC50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9zcmMvbW9kZWxzL2RvbWFpbi9pZGVudGl0eS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9zcmMvbW9kZWxzL2RvbWFpbi9sb2dpbi50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9zcmMvbW9kZWxzL2RvbWFpbi9sb2dpblVyaS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9zcmMvbW9kZWxzL2RvbWFpbi9wYXNzd29yZC50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9zcmMvbW9kZWxzL2RvbWFpbi9zZWN1cmVOb3RlLnRzIiwid2VicGFjazovLy8uL2pzbGliL3NyYy9lbnVtcy91cmlNYXRjaFR5cGUudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL21vZGVscy9kYXRhL3NlbmRGaWxlRGF0YS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9zcmMvbW9kZWxzL2RhdGEvc2VuZFRleHREYXRhLnRzIiwid2VicGFjazovLy8uL2pzbGliL3NyYy9tb2RlbHMvdmlldy9zZW5kRmlsZVZpZXcudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL21vZGVscy92aWV3L3NlbmRUZXh0Vmlldy50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9zcmMvbW9kZWxzL2RvbWFpbi9zZW5kRmlsZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9zcmMvbW9kZWxzL2RvbWFpbi9zZW5kVGV4dC50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9zcmMvbW9kZWxzL3ZpZXcvc2VuZFZpZXcudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL21vZGVscy9kb21haW4vc2VuZC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYnJvd3Nlci9zYWZhcmlBcHAudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL21vZGVscy9kb21haW4vZG9tYWluQmFzZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9zcmMvbW9kZWxzL3JlcXVlc3QvY2lwaGVyQnVsa0RlbGV0ZVJlcXVlc3QudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL3NlcnZpY2VzL2NpcGhlci5zZXJ2aWNlLnRzIiwid2VicGFjazovLy9jcnlwdG8gKGlnbm9yZWQpIiwid2VicGFjazovLy8uL2pzbGliL3NyYy9tb2RlbHMvcmVxdWVzdC9jaXBoZXJCdWxrTW92ZVJlcXVlc3QudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL21vZGVscy9yZXF1ZXN0L2NpcGhlckJ1bGtSZXN0b3JlUmVxdWVzdC50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9zcmMvbW9kZWxzL3JlcXVlc3QvY2lwaGVyQ29sbGVjdGlvbnNSZXF1ZXN0LnRzIiwid2VicGFjazovLy8uL2pzbGliL3NyYy9lbnVtcy9ldmVudFR5cGUudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL21vZGVscy9yZXF1ZXN0L2NpcGhlckNyZWF0ZVJlcXVlc3QudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL21vZGVscy9yZXF1ZXN0L2NpcGhlclNoYXJlUmVxdWVzdC50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9zcmMvbW9kZWxzL2RvbWFpbi9zb3J0ZWRDaXBoZXJzQ2FjaGUudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL3NlcnZpY2VzL3NlbmQuc2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9zcmMvbW9kZWxzL3JlcXVlc3Qvc2VuZFJlcXVlc3QudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL21vZGVscy9yZXF1ZXN0L2NpcGhlcldpdGhJZFJlcXVlc3QudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL21vZGVscy9yZXF1ZXN0L2NpcGhlckJ1bGtTaGFyZVJlcXVlc3QudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL2VudW1zL2ZpZWxkVHlwZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9zcmMvZW51bXMvc2VuZFR5cGUudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL3NlcnZpY2VzL2NvbnN0YW50cy5zZXJ2aWNlLnRzIiwid2VicGFjazovLy8uL2pzbGliL3NyYy9tb2RlbHMvdmlldy9sb2dpblZpZXcudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL21vZGVscy9kb21haW4vY2lwaGVyU3RyaW5nLnRzIiwid2VicGFjazovLy8uL2pzbGliL3NyYy9tb2RlbHMvZG9tYWluL3N5bW1ldHJpY0NyeXB0b0tleS50cyIsIndlYnBhY2s6Ly8vdXRpbCAoaWdub3JlZCkiLCJ3ZWJwYWNrOi8vL3V0aWwgKGlnbm9yZWQpP2VkMzUiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL2VudW1zL2xvZ0xldmVsVHlwZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9zcmMvZW51bXMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL21vZGVscy9yZXNwb25zZS9hcGlLZXlSZXNwb25zZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9zcmMvbW9kZWxzL3Jlc3BvbnNlL2JpbGxpbmdSZXNwb25zZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9zcmMvbW9kZWxzL3Jlc3BvbnNlL2JyZWFjaEFjY291bnRSZXNwb25zZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9zcmMvbW9kZWxzL3Jlc3BvbnNlL2F0dGFjaG1lbnRSZXNwb25zZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9zcmMvbW9kZWxzL3Jlc3BvbnNlL3Bhc3N3b3JkSGlzdG9yeVJlc3BvbnNlLnRzIiwid2VicGFjazovLy8uL2pzbGliL3NyYy9tb2RlbHMvcmVzcG9uc2UvY2lwaGVyUmVzcG9uc2UudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL21vZGVscy9yZXNwb25zZS9zZWxlY3Rpb25SZWFkT25seVJlc3BvbnNlLnRzIiwid2VicGFjazovLy8uL2pzbGliL3NyYy9tb2RlbHMvcmVzcG9uc2UvY29sbGVjdGlvblJlc3BvbnNlLnRzIiwid2VicGFjazovLy8uL2pzbGliL3NyYy9tb2RlbHMvcmVzcG9uc2UvZ2xvYmFsRG9tYWluUmVzcG9uc2UudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL21vZGVscy9yZXNwb25zZS9kb21haW5zUmVzcG9uc2UudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL21vZGVscy9yZXNwb25zZS9lcnJvclJlc3BvbnNlLnRzIiwid2VicGFjazovLy8uL2pzbGliL3NyYy9tb2RlbHMvcmVzcG9uc2UvZXZlbnRSZXNwb25zZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9zcmMvbW9kZWxzL3Jlc3BvbnNlL2ZvbGRlclJlc3BvbnNlLnRzIiwid2VicGFjazovLy8uL2pzbGliL3NyYy9tb2RlbHMvcmVzcG9uc2UvZ3JvdXBSZXNwb25zZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9zcmMvbW9kZWxzL3Jlc3BvbnNlL2lkZW50aXR5VG9rZW5SZXNwb25zZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9zcmMvbW9kZWxzL3Jlc3BvbnNlL2lkZW50aXR5VHdvRmFjdG9yUmVzcG9uc2UudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL21vZGVscy9yZXNwb25zZS9saXN0UmVzcG9uc2UudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL21vZGVscy9yZXNwb25zZS9wbGFuUmVzcG9uc2UudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL21vZGVscy9yZXNwb25zZS9vcmdhbml6YXRpb25SZXNwb25zZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9zcmMvbW9kZWxzL3Jlc3BvbnNlL3N1YnNjcmlwdGlvblJlc3BvbnNlLnRzIiwid2VicGFjazovLy8uL2pzbGliL3NyYy9tb2RlbHMvcmVzcG9uc2Uvb3JnYW5pemF0aW9uU3Vic2NyaXB0aW9uUmVzcG9uc2UudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL21vZGVscy9yZXNwb25zZS9vcmdhbml6YXRpb25Vc2VyUmVzcG9uc2UudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL21vZGVscy9yZXNwb25zZS9wcm9maWxlT3JnYW5pemF0aW9uUmVzcG9uc2UudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL21vZGVscy9yZXNwb25zZS9wcm9maWxlUmVzcG9uc2UudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL21vZGVscy9yZXNwb25zZS9wYXltZW50UmVzcG9uc2UudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL21vZGVscy9yZXNwb25zZS9wb2xpY3lSZXNwb25zZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9zcmMvbW9kZWxzL3Jlc3BvbnNlL3ByZWxvZ2luUmVzcG9uc2UudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL21vZGVscy9yZXNwb25zZS9zZW5kQWNjZXNzUmVzcG9uc2UudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL21vZGVscy9yZXNwb25zZS9zZW5kUmVzcG9uc2UudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL21vZGVscy9yZXNwb25zZS9zeW5jUmVzcG9uc2UudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL21vZGVscy9yZXNwb25zZS90YXhJbmZvUmVzcG9uc2UudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL21vZGVscy9yZXNwb25zZS90d29GYWN0b3JBdXRoZW50aWNhdG9yUmVzcG9uc2UudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL21vZGVscy9yZXNwb25zZS90d29GYWN0b3JEdW9SZXNwb25zZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9zcmMvbW9kZWxzL3Jlc3BvbnNlL3R3b0ZhY3RvckVtYWlsUmVzcG9uc2UudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL21vZGVscy9yZXNwb25zZS90d29GYWN0b3JQcm92aWRlclJlc3BvbnNlLnRzIiwid2VicGFjazovLy8uL2pzbGliL3NyYy9tb2RlbHMvcmVzcG9uc2UvdHdvRmFjdG9yUmVzY292ZXJSZXNwb25zZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9zcmMvbW9kZWxzL3Jlc3BvbnNlL3R3b0ZhY3RvclUyZlJlc3BvbnNlLnRzIiwid2VicGFjazovLy8uL2pzbGliL3NyYy9tb2RlbHMvcmVzcG9uc2UvdHdvRmFjdG9yWXViaUtleVJlc3BvbnNlLnRzIiwid2VicGFjazovLy8uL2pzbGliL3NyYy9tb2RlbHMvcmVzcG9uc2UvdXNlcktleVJlc3BvbnNlLnRzIiwid2VicGFjazovLy8uL2pzbGliL3NyYy9zZXJ2aWNlcy9hcGkuc2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9zcmMvc2VydmljZXMvYXBwSWQuc2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9zcmMvbWlzYy90aHJvdHRsZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9zcmMvc2VydmljZXMvYXVkaXQuc2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9zcmMvbW9kZWxzL2RhdGEvY29sbGVjdGlvbkRhdGEudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL21vZGVscy92aWV3L2NvbGxlY3Rpb25WaWV3LnRzIiwid2VicGFjazovLy8uL2pzbGliL3NyYy9tb2RlbHMvZG9tYWluL2NvbGxlY3Rpb24udHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL21vZGVscy9kb21haW4vdHJlZU5vZGUudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL21pc2Mvc2VydmljZVV0aWxzLnRzIiwid2VicGFjazovLy8uL2pzbGliL3NyYy9zZXJ2aWNlcy9jb2xsZWN0aW9uLnNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL3NlcnZpY2VzL2NvbnRhaW5lci5zZXJ2aWNlLnRzIiwid2VicGFjazovLy8uL2pzbGliL3NyYy9tb2RlbHMvZG9tYWluL2VuY3J5cHRlZE9iamVjdC50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9zcmMvbWlzYy93b3JkbGlzdC50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9zcmMvc2VydmljZXMvY3J5cHRvLnNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL21vZGVscy9kb21haW4vZW52aXJvbm1lbnRVcmxzLnRzIiwid2VicGFjazovLy8uL2pzbGliL3NyYy9zZXJ2aWNlcy9lbnZpcm9ubWVudC5zZXJ2aWNlLnRzIiwid2VicGFjazovLy8uL2pzbGliL3NyYy9tb2RlbHMvZGF0YS9mb2xkZXJEYXRhLnRzIiwid2VicGFjazovLy8uL2pzbGliL3NyYy9tb2RlbHMvZG9tYWluL2ZvbGRlci50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9zcmMvbW9kZWxzL3JlcXVlc3QvZm9sZGVyUmVxdWVzdC50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9zcmMvc2VydmljZXMvZm9sZGVyLnNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL3NlcnZpY2VzL2kxOG4uc2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9zcmMvbW9kZWxzL2RvbWFpbi9nZW5lcmF0ZWRQYXNzd29yZEhpc3RvcnkudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL21vZGVscy9kb21haW4vcGFzc3dvcmRHZW5lcmF0b3JQb2xpY3lPcHRpb25zLnRzIiwid2VicGFjazovLy8uL2pzbGliL3NyYy9lbnVtcy9wb2xpY3lUeXBlLnRzIiwid2VicGFjazovLy8uL2pzbGliL3NyYy9zZXJ2aWNlcy9wYXNzd29yZEdlbmVyYXRpb24uc2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9zcmMvc2VydmljZXMvc2V0dGluZ3Muc2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9zcmMvbW9kZWxzL2RhdGEvb3JnYW5pemF0aW9uRGF0YS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9zcmMvbW9kZWxzL2RhdGEvcG9saWN5RGF0YS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9zcmMvc2VydmljZXMvc3luYy5zZXJ2aWNlLnRzIiwid2VicGFjazovLy8uL2pzbGliL3NyYy9zZXJ2aWNlcy90b2tlbi5zZXJ2aWNlLnRzIiwid2VicGFjazovLy8uL2pzbGliL3NyYy9zZXJ2aWNlcy90b3RwLnNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL2VudW1zL29yZ2FuaXphdGlvblVzZXJUeXBlLnRzIiwid2VicGFjazovLy8uL2pzbGliL3NyYy9tb2RlbHMvZG9tYWluL29yZ2FuaXphdGlvbi50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9zcmMvc2VydmljZXMvdXNlci5zZXJ2aWNlLnRzIiwid2VicGFjazovLy8uL2pzbGliL3NyYy9zZXJ2aWNlcy92YXVsdFRpbWVvdXQuc2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9zcmMvc2VydmljZXMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL21vZGVscy9kYXRhL2V2ZW50RGF0YS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9zcmMvbW9kZWxzL3JlcXVlc3QvZXZlbnRSZXF1ZXN0LnRzIiwid2VicGFjazovLy8uL2pzbGliL3NyYy9zZXJ2aWNlcy9ldmVudC5zZXJ2aWNlLnRzIiwid2VicGFjazovLy8uL2pzbGliL3NyYy9tb2RlbHMvZXhwb3J0L2NhcmQudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL21vZGVscy9leHBvcnQvZmllbGQudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL21vZGVscy9leHBvcnQvaWRlbnRpdHkudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL21vZGVscy9leHBvcnQvbG9naW5VcmkudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL21vZGVscy9leHBvcnQvbG9naW4udHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL21vZGVscy9leHBvcnQvc2VjdXJlTm90ZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9zcmMvbW9kZWxzL2V4cG9ydC9jaXBoZXIudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL21vZGVscy9leHBvcnQvY2lwaGVyV2l0aElkcy50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9zcmMvbW9kZWxzL2V4cG9ydC9jb2xsZWN0aW9uLnRzIiwid2VicGFjazovLy8uL2pzbGliL3NyYy9tb2RlbHMvZXhwb3J0L2NvbGxlY3Rpb25XaXRoSWQudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL21vZGVscy9leHBvcnQvZm9sZGVyLnRzIiwid2VicGFjazovLy8uL2pzbGliL3NyYy9tb2RlbHMvZXhwb3J0L2ZvbGRlcldpdGhJZC50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9zcmMvc2VydmljZXMvZXhwb3J0LnNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL2VudW1zL25vdGlmaWNhdGlvblR5cGUudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL21vZGVscy9yZXNwb25zZS9ub3RpZmljYXRpb25SZXNwb25zZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9zcmMvc2VydmljZXMvbm90aWZpY2F0aW9ucy5zZXJ2aWNlLnRzIiwid2VicGFjazovLy8uL2pzbGliL3NyYy9tb2RlbHMvZG9tYWluL21hc3RlclBhc3N3b3JkUG9saWN5T3B0aW9ucy50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9zcmMvbW9kZWxzL2RvbWFpbi9wb2xpY3kudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL3NlcnZpY2VzL3BvbGljeS5zZXJ2aWNlLnRzIiwid2VicGFjazovLy8uL2pzbGliL3NyYy9zZXJ2aWNlcy9zeXN0ZW0uc2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9zcmMvbW9kZWxzL2RvbWFpbi9kZWNyeXB0UGFyYW1ldGVycy50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9zcmMvc2VydmljZXMvd2ViQ3J5cHRvRnVuY3Rpb24uc2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9zcmMvbWlzYy9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYmFja2dyb3VuZC9jb21tYW5kcy5iYWNrZ3JvdW5kLnRzIiwid2VicGFjazovLy8uL3NyYy9iYWNrZ3JvdW5kL2NvbnRleHRNZW51cy5iYWNrZ3JvdW5kLnRzIiwid2VicGFjazovLy8uL3NyYy9iYWNrZ3JvdW5kL2lkbGUuYmFja2dyb3VuZC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYmFja2dyb3VuZC9ydW50aW1lLmJhY2tncm91bmQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2JhY2tncm91bmQvdGFicy5iYWNrZ3JvdW5kLnRzIiwid2VicGFjazovLy8uL3NyYy9iYWNrZ3JvdW5kL3dlYlJlcXVlc3QuYmFja2dyb3VuZC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYmFja2dyb3VuZC93aW5kb3dzLmJhY2tncm91bmQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZGVscy9hdXRvZmlsbFNjcmlwdC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvc2VydmljZXMvYXV0b2ZpbGwuc2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvc2VydmljZXMvYnJvd3NlclBsYXRmb3JtVXRpbHMuc2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvc2VydmljZXMvYnJvd3NlclN0b3JhZ2Uuc2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvc2VydmljZXMvaTE4bi5zZXJ2aWNlLnRzIiwid2VicGFjazovLy8uL3NyYy9iYWNrZ3JvdW5kL21haW4uYmFja2dyb3VuZC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYmFja2dyb3VuZC50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9zcmMvbW9kZWxzL3ZpZXcvY2lwaGVyVmlldy50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9zcmMvbW9kZWxzL3ZpZXcvY2FyZFZpZXcudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL21vZGVscy92aWV3L2lkZW50aXR5Vmlldy50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9zcmMvbW9kZWxzL3ZpZXcvc2VjdXJlTm90ZVZpZXcudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL21vZGVscy9kYXRhL2NpcGhlckRhdGEudHMiLCJ3ZWJwYWNrOi8vLy4vanNsaWIvc3JjL21vZGVscy92aWV3L2xvZ2luVXJpVmlldy50cyIsIndlYnBhY2s6Ly8vLi9qc2xpYi9zcmMvbWlzYy91dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxnQkFBUSxvQkFBb0I7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBaUIsNEJBQTRCO0FBQzdDO0FBQ0E7QUFDQSwwQkFBa0IsMkJBQTJCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGtEQUEwQyxnQ0FBZ0M7QUFDMUU7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxnRUFBd0Qsa0JBQWtCO0FBQzFFO0FBQ0EseURBQWlELGNBQWM7QUFDL0Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUF5QyxpQ0FBaUM7QUFDMUUsd0hBQWdILG1CQUFtQixFQUFFO0FBQ3JJO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsbUNBQTJCLDBCQUEwQixFQUFFO0FBQ3ZELHlDQUFpQyxlQUFlO0FBQ2hEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDhEQUFzRCwrREFBK0Q7O0FBRXJIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBZ0IsdUJBQXVCO0FBQ3ZDOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7O0FDcEpBO0FBQU8sTUFBZSxvQkFBb0I7Q0FtQ3pDOzs7Ozs7Ozs7QUNoQ0Q7QUFBTyxNQUFNLFVBQVU7SUFLbkIsWUFBWSxDQUFVO1FBSnRCLE9BQUUsR0FBVyxJQUFJLENBQUM7UUFDbEIsU0FBSSxHQUFXLElBQUksQ0FBQztRQUNwQixpQkFBWSxHQUFTLElBQUksQ0FBQztRQUd0QixJQUFJLENBQUMsQ0FBQyxFQUFFO1lBQ0osT0FBTztTQUNWO1FBRUQsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ2YsSUFBSSxDQUFDLFlBQVksR0FBRyxDQUFDLENBQUMsWUFBWSxDQUFDO0lBQ3ZDLENBQUM7Q0FDSjs7Ozs7Ozs7O0FDWkQ7QUFBTyxNQUFNLFNBQVM7SUFPbEIsWUFBWSxDQUFTO1FBTnJCLFNBQUksR0FBVyxJQUFJLENBQUM7UUFDcEIsVUFBSyxHQUFXLElBQUksQ0FBQztRQUNyQixTQUFJLEdBQWMsSUFBSSxDQUFDO1FBQ3ZCLGFBQVEsR0FBWSxLQUFLLENBQUMsQ0FBQyxrREFBa0Q7UUFDN0UsY0FBUyxHQUFZLEtBQUssQ0FBQztRQUd2QixJQUFJLENBQUMsQ0FBQyxFQUFFO1lBQ0osT0FBTztTQUNWO1FBRUQsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxJQUFJLFdBQVc7UUFDWCxPQUFPLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUNsRCxDQUFDO0NBQ0o7Ozs7Ozs7OztBQ3hCRDtBQUFPLE1BQU0sV0FBVztJQUlwQixZQUFZLFNBQWlCLEVBQUUsbUJBQTJCO1FBQ3RELElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBQzNCLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxtQkFBbUIsQ0FBQztJQUNuRCxDQUFDO0NBQ0o7Ozs7Ozs7OztBQ1JEO0FBQUEsSUFBWSxVQUtYO0FBTEQsV0FBWSxVQUFVO0lBQ2xCLDZDQUFTO0lBQ1QsdURBQWM7SUFDZCwyQ0FBUTtJQUNSLG1EQUFZO0FBQ2hCLENBQUMsRUFMVyxVQUFVLEtBQVYsVUFBVSxRQUtyQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNMTSxNQUFNLGlCQUFpQjtDQUc3Qjs7O0FDSEQ7QUFBb0Q7QUFJWDtBQUNFO0FBQ007QUFDTjtBQUNNO0FBQ0k7QUFFRztBQUdqRCxNQUFNLDJCQUFhO0lBa0J0QixZQUFZLE1BQWM7UUFDdEIsSUFBSSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQztRQUNoQyxJQUFJLENBQUMsY0FBYyxHQUFHLE1BQU0sQ0FBQyxjQUFjLENBQUM7UUFDNUMsSUFBSSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQzdELElBQUksQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUNoRSxJQUFJLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUM7UUFDaEMsSUFBSSxDQUFDLHFCQUFxQixHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUM7UUFFakQsUUFBUSxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ2YsS0FBSyxnQ0FBVSxDQUFDLEtBQUs7Z0JBQ2pCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSw0QkFBUSxFQUFFLENBQUM7Z0JBQzVCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztnQkFDdkIsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO2dCQUMzRixJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7Z0JBQzNGLElBQUksQ0FBQyxLQUFLLENBQUMsb0JBQW9CLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxvQkFBb0IsSUFBSSxJQUFJLENBQUMsQ0FBQztvQkFDekUsTUFBTSxDQUFDLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO2dCQUMzRCxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7Z0JBRS9FLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksSUFBSSxFQUFFO29CQUMzQixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTt3QkFDMUMsTUFBTSxHQUFHLEdBQUcsSUFBSSxrQ0FBVyxFQUFFLENBQUM7d0JBQzlCLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7d0JBQ3ZELEdBQUcsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQzt3QkFDN0MsT0FBTyxHQUFHLENBQUM7b0JBQ2YsQ0FBQyxDQUFDLENBQUM7aUJBQ047Z0JBQ0QsTUFBTTtZQUNWLEtBQUssZ0NBQVUsQ0FBQyxVQUFVO2dCQUN0QixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksc0NBQWEsRUFBRSxDQUFDO2dCQUN0QyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQztnQkFDOUMsTUFBTTtZQUNWLEtBQUssZ0NBQVUsQ0FBQyxJQUFJO2dCQUNoQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksMEJBQU8sRUFBRSxDQUFDO2dCQUMxQixJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLGNBQWMsSUFBSSxJQUFJLENBQUMsQ0FBQztvQkFDM0QsTUFBTSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7Z0JBQ3RELElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7Z0JBQ3ZGLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7Z0JBQzFGLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7Z0JBQ2hHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7Z0JBQzdGLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7Z0JBQ3BGLE1BQU07WUFDVixLQUFLLGdDQUFVLENBQUMsUUFBUTtnQkFDcEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLGtDQUFXLEVBQUUsQ0FBQztnQkFDbEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztnQkFDbkcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxTQUFTLElBQUksSUFBSSxDQUFDLENBQUM7b0JBQ3pELE1BQU0sQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO2dCQUNyRCxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUMsQ0FBQztvQkFDM0QsTUFBTSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7Z0JBQ3RELElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxDQUFDO29CQUN2RCxNQUFNLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztnQkFDcEQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLENBQUM7b0JBQ3ZELE1BQU0sQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO2dCQUNwRCxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsQ0FBQztvQkFDdkQsTUFBTSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7Z0JBQ3BELElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxDQUFDO29CQUN2RCxNQUFNLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztnQkFDcEQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztnQkFDaEcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztnQkFDbkcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLENBQUM7b0JBQzNELE1BQU0sQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO2dCQUN0RCxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsQ0FBQztvQkFDckQsTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7Z0JBQ25ELElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxDQUFDO29CQUNyRCxNQUFNLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztnQkFDbkQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztnQkFDbkcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztnQkFDbkcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztnQkFDN0YsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLENBQUM7b0JBQ3ZELE1BQU0sQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO2dCQUNwRCxJQUFJLENBQUMsUUFBUSxDQUFDLGNBQWMsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLGNBQWMsSUFBSSxJQUFJLENBQUMsQ0FBQztvQkFDbkUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7Z0JBQzFELElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsYUFBYSxJQUFJLElBQUksQ0FBQyxDQUFDO29CQUNqRSxNQUFNLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztnQkFDekQsTUFBTTtZQUNWO2dCQUNJLE1BQU07U0FDYjtRQUVELElBQUksTUFBTSxDQUFDLE1BQU0sSUFBSSxJQUFJLEVBQUU7WUFDdkIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFO2dCQUNsQyxNQUFNLEtBQUssR0FBRyxJQUFJLDRCQUFRLEVBQUUsQ0FBQztnQkFDN0IsS0FBSyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO2dCQUNwQixLQUFLLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7Z0JBQ3BELEtBQUssQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztnQkFDdkQsT0FBTyxLQUFLLENBQUM7WUFDakIsQ0FBQyxDQUFDLENBQUM7U0FDTjtRQUVELElBQUksTUFBTSxDQUFDLGVBQWUsSUFBSSxJQUFJLEVBQUU7WUFDaEMsSUFBSSxDQUFDLGVBQWUsR0FBRyxFQUFFLENBQUM7WUFDMUIsTUFBTSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRTtnQkFDbEMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUM7b0JBQ3RCLFlBQVksRUFBRSxFQUFFLENBQUMsWUFBWTtvQkFDN0IsUUFBUSxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxJQUFJO2lCQUM3RCxDQUFDLENBQUM7WUFDUCxDQUFDLENBQUMsQ0FBQztTQUNOO1FBRUQsSUFBSSxNQUFNLENBQUMsV0FBVyxJQUFJLElBQUksRUFBRTtZQUM1QixJQUFJLENBQUMsV0FBVyxHQUFHLEVBQUUsQ0FBQztZQUN0QixJQUFJLENBQUMsWUFBWSxHQUFHLEVBQUUsQ0FBQztZQUN2QixNQUFNLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFVBQVUsRUFBRSxFQUFFO2dCQUN0QyxNQUFNLFFBQVEsR0FBRyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO2dCQUNsRixJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsR0FBRyxRQUFRLENBQUM7Z0JBQzNDLE1BQU0saUJBQWlCLEdBQUcsSUFBSSxpQkFBaUIsRUFBRSxDQUFDO2dCQUNsRCxpQkFBaUIsQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO2dCQUN0QyxJQUFJLFVBQVUsQ0FBQyxHQUFHLElBQUksSUFBSSxFQUFFO29CQUN4QixpQkFBaUIsQ0FBQyxHQUFHLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUM7aUJBQzFEO2dCQUNELElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxHQUFHLGlCQUFpQixDQUFDO1lBQ3pELENBQUMsQ0FBQyxDQUFDO1NBQ047SUFDTCxDQUFDO0NBQ0o7Ozs7Ozs7OztBQ2xKRDtBQUFPLE1BQWUsWUFBWTtJQUc5QixZQUFZLFFBQWE7UUFDckIsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7SUFDN0IsQ0FBQztJQUVTLG1CQUFtQixDQUFDLFlBQW9CLEVBQUUsV0FBZ0IsSUFBSSxFQUFFLFNBQVMsR0FBRyxLQUFLO1FBQ3ZGLElBQUksWUFBWSxJQUFJLElBQUksSUFBSSxZQUFZLEtBQUssRUFBRSxFQUFFO1lBQzdDLE1BQU0sSUFBSSxLQUFLLENBQUMsc0NBQXNDLENBQUMsQ0FBQztTQUMzRDtRQUNELElBQUksUUFBUSxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksRUFBRTtZQUMzQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztTQUM1QjtRQUNELElBQUksUUFBUSxJQUFJLElBQUksRUFBRTtZQUNsQixPQUFPLElBQUksQ0FBQztTQUNmO1FBQ0QsSUFBSSxDQUFDLFNBQVMsSUFBSSxRQUFRLENBQUMsWUFBWSxDQUFDLEtBQUssU0FBUyxFQUFFO1lBQ3BELElBQUkscUJBQXFCLEdBQVcsSUFBSSxDQUFDO1lBQ3pDLElBQUksWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxFQUFFO2dCQUNqRSxxQkFBcUIsR0FBRyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO2FBQ2hFO2lCQUFNO2dCQUNILHFCQUFxQixHQUFHLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7YUFDaEU7WUFDRCxJQUFJLFlBQVksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUN6QixxQkFBcUIsSUFBSSxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ2xEO1lBRUQsWUFBWSxHQUFHLHFCQUFxQixDQUFDO1lBQ3JDLElBQUksUUFBUSxDQUFDLFlBQVksQ0FBQyxLQUFLLFNBQVMsRUFBRTtnQkFDdEMsWUFBWSxHQUFHLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQzthQUM3QztZQUNELElBQUksUUFBUSxDQUFDLFlBQVksQ0FBQyxLQUFLLFNBQVMsRUFBRTtnQkFDdEMsWUFBWSxHQUFHLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQzthQUM3QztTQUNKO1FBQ0QsT0FBTyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDbEMsQ0FBQztDQUNKOzs7Ozs7Ozs7Ozs7OztBQ3BDTSxNQUFNLFVBQVU7SUFBdkI7UUFDSSxjQUFTLEdBQVksS0FBSyxDQUFDO1FBQzNCLHdCQUFtQixHQUFZLEtBQUssQ0FBQztRQUNyQyx1QkFBa0IsR0FBMkQsSUFBSSxDQUFDO0lBQ3RGLENBQUM7Q0FBQTs7O0FDRk0sTUFBTSxhQUFhO0lBTXRCLFlBQVksS0FBYSxFQUFFLG9CQUEwQztRQUNqRSxJQUFJLENBQUMsSUFBSSxHQUFHLG9CQUFvQixDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQzdDLElBQUksQ0FBQyxJQUFJLEdBQUcsb0JBQW9CLENBQUMsZUFBZSxFQUFFLENBQUM7UUFDbkQsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7UUFDeEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7SUFDMUIsQ0FBQztDQUNKOzs7Ozs7QUNoQk0sTUFBTSxlQUFlO0lBR3hCLFlBQVksS0FBYTtRQUNyQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUN2QixDQUFDO0NBQ0o7OztBQ0ZNLE1BQU0sWUFBWTtJQWFyQixZQUFZLFdBQXFCLEVBQUUsS0FBZSxFQUFFLG9CQUE4QixFQUFFLFFBQStCLEVBQy9HLEtBQWEsRUFBRSxRQUFpQixFQUFFLE1BQXNCO1FBQ3hELElBQUksV0FBVyxJQUFJLElBQUksSUFBSSxXQUFXLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUMvQyxJQUFJLENBQUMsS0FBSyxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM1QixJQUFJLENBQUMsa0JBQWtCLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQzVDO2FBQU0sSUFBSSxLQUFLLElBQUksSUFBSSxJQUFJLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQzFDLElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3JCLElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzdCLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQy9CO2FBQU0sSUFBSSxvQkFBb0IsSUFBSSxJQUFJLElBQUksb0JBQW9CLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUN4RSxJQUFJLENBQUMsUUFBUSxHQUFHLG9CQUFvQixDQUFDLENBQUMsQ0FBQztZQUN2QyxJQUFJLENBQUMsWUFBWSxHQUFHLG9CQUFvQixDQUFDLENBQUMsQ0FBQztTQUM5QztRQUNELElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDakQsQ0FBQztJQUVELGVBQWUsQ0FBQyxRQUFnQjtRQUM1QixNQUFNLEdBQUcsR0FBUTtZQUNiLEtBQUssRUFBRSxvQkFBb0I7WUFDM0IsU0FBUyxFQUFFLFFBQVE7U0FDdEIsQ0FBQztRQUVGLElBQUksSUFBSSxDQUFDLFlBQVksSUFBSSxJQUFJLEVBQUU7WUFDM0IsR0FBRyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7WUFDbEIsR0FBRyxDQUFDLFVBQVUsR0FBRyxvQkFBb0IsQ0FBQztZQUN0QyxHQUFHLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUM7U0FDekM7YUFBTSxJQUFJLElBQUksQ0FBQyxrQkFBa0IsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLEVBQUU7WUFDOUQsR0FBRyxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7WUFDNUIsR0FBRyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1lBQzFCLEdBQUcsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDO1NBQzFDO2FBQU0sSUFBSSxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsWUFBWSxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsV0FBVyxJQUFJLElBQUksRUFBRTtZQUNuRixHQUFHLENBQUMsVUFBVSxHQUFHLG9CQUFvQixDQUFDO1lBQ3RDLEdBQUcsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztZQUNyQixHQUFHLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUM7WUFDdEMsR0FBRyxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO1NBQ3ZDO2FBQU07WUFDSCxNQUFNLElBQUksS0FBSyxDQUFDLG1DQUFtQyxDQUFDLENBQUM7U0FDeEQ7UUFFRCxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDYixHQUFHLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDO1lBQ2xDLEdBQUcsQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQztZQUM5QyxHQUFHLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDO1lBQ2xDLHNDQUFzQztZQUN0QywrQ0FBK0M7U0FDbEQ7UUFFRCxJQUFJLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLEVBQUU7WUFDckMsR0FBRyxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1lBQ2hDLEdBQUcsQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO1lBQ3RDLEdBQUcsQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQztTQUNyRDtRQUVELE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQztDQUNKOzs7Ozs7Ozs7Ozs7OztBQzFFc0U7QUFFZDtBQUdPO0FBQ0o7QUFDUTtBQUNOO0FBZ0J2RCxNQUFNLGtCQUFrQixHQUFHO0lBQzlCLENBQUMsc0RBQXFCLENBQUMsYUFBYSxDQUFDLEVBQUU7UUFDbkMsSUFBSSxFQUFFLHNEQUFxQixDQUFDLGFBQWE7UUFDekMsSUFBSSxFQUFFLElBQWM7UUFDcEIsV0FBVyxFQUFFLElBQWM7UUFDM0IsUUFBUSxFQUFFLENBQUM7UUFDWCxJQUFJLEVBQUUsQ0FBQztRQUNQLE9BQU8sRUFBRSxLQUFLO0tBQ2pCO0lBQ0QsQ0FBQyxzREFBcUIsQ0FBQyxPQUFPLENBQUMsRUFBRTtRQUM3QixJQUFJLEVBQUUsc0RBQXFCLENBQUMsT0FBTztRQUNuQyxJQUFJLEVBQUUsSUFBYztRQUNwQixXQUFXLEVBQUUsSUFBYztRQUMzQixRQUFRLEVBQUUsQ0FBQztRQUNYLElBQUksRUFBRSxDQUFDO1FBQ1AsT0FBTyxFQUFFLElBQUk7S0FDaEI7SUFDRCxDQUFDLHNEQUFxQixDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ3pCLElBQUksRUFBRSxzREFBcUIsQ0FBQyxHQUFHO1FBQy9CLElBQUksRUFBRSxLQUFLO1FBQ1gsV0FBVyxFQUFFLElBQWM7UUFDM0IsUUFBUSxFQUFFLENBQUM7UUFDWCxJQUFJLEVBQUUsQ0FBQztRQUNQLE9BQU8sRUFBRSxJQUFJO0tBQ2hCO0lBQ0QsQ0FBQyxzREFBcUIsQ0FBQyxlQUFlLENBQUMsRUFBRTtRQUNyQyxJQUFJLEVBQUUsc0RBQXFCLENBQUMsZUFBZTtRQUMzQyxJQUFJLEVBQUUsb0JBQW9CO1FBQzFCLFdBQVcsRUFBRSxJQUFjO1FBQzNCLFFBQVEsRUFBRSxFQUFFO1FBQ1osSUFBSSxFQUFFLENBQUM7UUFDUCxPQUFPLEVBQUUsS0FBSztLQUNqQjtJQUNELENBQUMsc0RBQXFCLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDekIsSUFBSSxFQUFFLHNEQUFxQixDQUFDLEdBQUc7UUFDL0IsSUFBSSxFQUFFLElBQWM7UUFDcEIsV0FBVyxFQUFFLElBQWM7UUFDM0IsUUFBUSxFQUFFLENBQUM7UUFDWCxJQUFJLEVBQUUsQ0FBQztRQUNQLE9BQU8sRUFBRSxJQUFJO0tBQ2hCO0lBQ0QsQ0FBQyxzREFBcUIsQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUMzQixJQUFJLEVBQUUsc0RBQXFCLENBQUMsS0FBSztRQUNqQyxJQUFJLEVBQUUsSUFBYztRQUNwQixXQUFXLEVBQUUsSUFBYztRQUMzQixRQUFRLEVBQUUsQ0FBQztRQUNYLElBQUksRUFBRSxDQUFDO1FBQ1AsT0FBTyxFQUFFLEtBQUs7S0FDakI7Q0FDSixDQUFDO0FBRUssTUFBTSx3QkFBVztJQWFwQixZQUFvQixhQUE0QixFQUFVLFVBQXNCLEVBQ3BFLFdBQXdCLEVBQVUsWUFBMEIsRUFDNUQsWUFBMEIsRUFBVSxXQUF3QixFQUM1RCxvQkFBMEMsRUFBVSxnQkFBa0MsRUFDdEYsbUJBQXdDLEVBQVUsZ0JBQWdCLElBQUk7UUFKOUQsa0JBQWEsR0FBYixhQUFhLENBQWU7UUFBVSxlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQ3BFLGdCQUFXLEdBQVgsV0FBVyxDQUFhO1FBQVUsaUJBQVksR0FBWixZQUFZLENBQWM7UUFDNUQsaUJBQVksR0FBWixZQUFZLENBQWM7UUFBVSxnQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQUM1RCx5QkFBb0IsR0FBcEIsb0JBQW9CLENBQXNCO1FBQVUscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUN0Rix3QkFBbUIsR0FBbkIsbUJBQW1CLENBQXFCO1FBQVUsa0JBQWEsR0FBYixhQUFhLENBQU87UUFSbEYsa0NBQTZCLEdBQTBCLElBQUksQ0FBQztJQVEwQixDQUFDO0lBRXZGLElBQUk7UUFDQSxrQkFBa0IsQ0FBQyxzREFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDeEYsa0JBQWtCLENBQUMsc0RBQXFCLENBQUMsS0FBSyxDQUFDLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBRTlGLGtCQUFrQixDQUFDLHNEQUFxQixDQUFDLGFBQWEsQ0FBQyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1FBQzNHLGtCQUFrQixDQUFDLHNEQUFxQixDQUFDLGFBQWEsQ0FBQyxDQUFDLFdBQVc7WUFDL0QsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsc0JBQXNCLENBQUMsQ0FBQztRQUUvQyxrQkFBa0IsQ0FBQyxzREFBcUIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFMUYsa0JBQWtCLENBQUMsc0RBQXFCLENBQUMsZUFBZSxDQUFDLENBQUMsSUFBSTtZQUMxRCxPQUFPLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ3ZELGtCQUFrQixDQUFDLHNEQUFxQixDQUFDLGVBQWUsQ0FBQyxDQUFDLFdBQVc7WUFDakUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMscUJBQXFCLENBQUMsQ0FBQztRQUU5QyxrQkFBa0IsQ0FBQyxzREFBcUIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDcEYsa0JBQWtCLENBQUMsc0RBQXFCLENBQUMsR0FBRyxDQUFDLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRTFGLGtCQUFrQixDQUFDLHNEQUFxQixDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUM1RixrQkFBa0IsQ0FBQyxzREFBcUIsQ0FBQyxPQUFPLENBQUMsQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDdEcsQ0FBQztJQUVLLEtBQUssQ0FBQyxLQUFhLEVBQUUsY0FBc0I7O1lBQzdDLElBQUksQ0FBQyw2QkFBNkIsR0FBRyxJQUFJLENBQUM7WUFDMUMsTUFBTSxHQUFHLEdBQUcsTUFBTSxJQUFJLENBQUMsZUFBZSxDQUFDLGNBQWMsRUFBRSxLQUFLLENBQUMsQ0FBQztZQUM5RCxNQUFNLGNBQWMsR0FBRyxNQUFNLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLGNBQWMsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUNsRixPQUFPLE1BQU0sSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsY0FBYyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQzdFLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQy9CLENBQUM7S0FBQTtJQUVLLFFBQVEsQ0FBQyxJQUFZLEVBQUUsWUFBb0IsRUFBRSxXQUFtQjs7WUFDbEUsSUFBSSxDQUFDLDZCQUE2QixHQUFHLElBQUksQ0FBQztZQUMxQyxPQUFPLE1BQU0sSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQ2pGLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ2hDLENBQUM7S0FBQTtJQUVLLFdBQVcsQ0FBQyxRQUFnQixFQUFFLFlBQW9COztZQUNwRCxJQUFJLENBQUMsNkJBQTZCLEdBQUcsSUFBSSxDQUFDO1lBQzFDLE9BQU8sTUFBTSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLFlBQVksRUFDOUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDaEMsQ0FBQztLQUFBO0lBRUssY0FBYyxDQUFDLGlCQUF3QyxFQUFFLGNBQXNCLEVBQ2pGLFFBQWtCOztZQUNsQixPQUFPLE1BQU0sSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxZQUFZLEVBQzNGLElBQUksQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsaUJBQWlCLEVBQ2xGLGNBQWMsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUNsQyxDQUFDO0tBQUE7SUFFSyxhQUFhLENBQUMsS0FBYSxFQUFFLGNBQXNCLEVBQUUsaUJBQXdDLEVBQy9GLGNBQXNCLEVBQUUsUUFBa0I7O1lBQzFDLElBQUksQ0FBQyw2QkFBNkIsR0FBRyxJQUFJLENBQUM7WUFDMUMsTUFBTSxHQUFHLEdBQUcsTUFBTSxJQUFJLENBQUMsZUFBZSxDQUFDLGNBQWMsRUFBRSxLQUFLLENBQUMsQ0FBQztZQUM5RCxNQUFNLGNBQWMsR0FBRyxNQUFNLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLGNBQWMsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUNsRixPQUFPLE1BQU0sSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsY0FBYyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUNsRixpQkFBaUIsRUFBRSxjQUFjLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDckQsQ0FBQztLQUFBO0lBRUssZ0JBQWdCLENBQUMsSUFBWSxFQUFFLFlBQW9CLEVBQUUsV0FBbUIsRUFDMUUsaUJBQXdDLEVBQUUsY0FBc0IsRUFBRSxRQUFrQjs7WUFDcEYsSUFBSSxDQUFDLDZCQUE2QixHQUFHLElBQUksQ0FBQztZQUMxQyxPQUFPLE1BQU0sSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsV0FBVyxFQUFFLElBQUksRUFDM0UsSUFBSSxFQUFFLElBQUksRUFBRSxpQkFBaUIsRUFBRSxjQUFjLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDakUsQ0FBQztLQUFBO0lBRUssbUJBQW1CLENBQUMsUUFBZ0IsRUFBRSxZQUFvQixFQUFFLGlCQUF3QyxFQUN0RyxjQUFzQixFQUFFLFFBQWtCOztZQUMxQyxJQUFJLENBQUMsNkJBQTZCLEdBQUcsSUFBSSxDQUFDO1lBQzFDLE9BQU8sTUFBTSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLFlBQVksRUFBRSxJQUFJLEVBQ3BGLGlCQUFpQixFQUFFLGNBQWMsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUNyRCxDQUFDO0tBQUE7SUFFRCxNQUFNLENBQUMsUUFBa0I7UUFDckIsUUFBUSxFQUFFLENBQUM7UUFDWCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFFRCw4QkFBOEIsQ0FBQyxHQUFXO1FBQ3RDLE1BQU0sU0FBUyxHQUFVLEVBQUUsQ0FBQztRQUM1QixJQUFJLElBQUksQ0FBQyxzQkFBc0IsSUFBSSxJQUFJLEVBQUU7WUFDckMsT0FBTyxTQUFTLENBQUM7U0FDcEI7UUFFRCxJQUFJLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxHQUFHLENBQUMsc0RBQXFCLENBQUMsZUFBZSxDQUFDO1lBQ3RFLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxXQUFXLEVBQUUsRUFBRTtZQUN6QyxTQUFTLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLHNEQUFxQixDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUM7U0FDN0U7UUFFRCxJQUFJLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxHQUFHLENBQUMsc0RBQXFCLENBQUMsYUFBYSxDQUFDLEVBQUU7WUFDdEUsU0FBUyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxzREFBcUIsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO1NBQzNFO1FBRUQsSUFBSSxJQUFJLENBQUMsc0JBQXNCLENBQUMsR0FBRyxDQUFDLHNEQUFxQixDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ2hFLFNBQVMsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsc0RBQXFCLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztTQUNyRTtRQUVELElBQUksSUFBSSxDQUFDLHNCQUFzQixDQUFDLEdBQUcsQ0FBQyxzREFBcUIsQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsb0JBQW9CLENBQUMsV0FBVyxFQUFFLEVBQUU7WUFDdkcsU0FBUyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxzREFBcUIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQ2pFO1FBRUQsSUFBSSxJQUFJLENBQUMsc0JBQXNCLENBQUMsR0FBRyxDQUFDLHNEQUFxQixDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDMUcsU0FBUyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxzREFBcUIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQ2pFO1FBRUQsSUFBSSxJQUFJLENBQUMsc0JBQXNCLENBQUMsR0FBRyxDQUFDLHNEQUFxQixDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQzlELFNBQVMsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsc0RBQXFCLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztTQUNuRTtRQUVELE9BQU8sU0FBUyxDQUFDO0lBQ3JCLENBQUM7SUFFRCwyQkFBMkIsQ0FBQyxZQUFxQjtRQUM3QyxJQUFJLElBQUksQ0FBQyxzQkFBc0IsSUFBSSxJQUFJLEVBQUU7WUFDckMsT0FBTyxJQUFJLENBQUM7U0FDZjtRQUVELElBQUksSUFBSSxDQUFDLDZCQUE2QixJQUFJLElBQUk7WUFDMUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsNkJBQTZCLENBQUMsRUFBRTtZQUNyRSxPQUFPLElBQUksQ0FBQyw2QkFBNkIsQ0FBQztTQUM3QztRQUVELElBQUksWUFBWSxHQUEwQixJQUFJLENBQUM7UUFDL0MsSUFBSSxnQkFBZ0IsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUMxQixJQUFJLENBQUMsc0JBQXNCLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxFQUFFO1lBQ2hELE1BQU0sUUFBUSxHQUFJLGtCQUEwQixDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ25ELElBQUksUUFBUSxJQUFJLElBQUksSUFBSSxRQUFRLENBQUMsUUFBUSxHQUFHLGdCQUFnQixFQUFFO2dCQUMxRCxJQUFJLElBQUksS0FBSyxzREFBcUIsQ0FBQyxHQUFHLElBQUksQ0FBQyxZQUFZLEVBQUU7b0JBQ3JELE9BQU87aUJBQ1Y7Z0JBRUQsWUFBWSxHQUFHLElBQUksQ0FBQztnQkFDcEIsZ0JBQWdCLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQzthQUN4QztRQUNMLENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxZQUFZLENBQUM7SUFDeEIsQ0FBQztJQUVLLGVBQWUsQ0FBQyxjQUFzQixFQUFFLEtBQWE7O1lBQ3ZELEtBQUssR0FBRyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDbkMsSUFBSSxHQUFHLEdBQVksSUFBSSxDQUFDO1lBQ3hCLElBQUksYUFBYSxHQUFXLElBQUksQ0FBQztZQUNqQyxJQUFJO2dCQUNBLE1BQU0sZ0JBQWdCLEdBQUcsTUFBTSxJQUFJLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxJQUFJLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO2dCQUN4RixJQUFJLGdCQUFnQixJQUFJLElBQUksRUFBRTtvQkFDMUIsR0FBRyxHQUFHLGdCQUFnQixDQUFDLEdBQUcsQ0FBQztvQkFDM0IsYUFBYSxHQUFHLGdCQUFnQixDQUFDLGFBQWEsQ0FBQztpQkFDbEQ7YUFDSjtZQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUNSLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLENBQUMsVUFBVSxLQUFLLEdBQUcsRUFBRTtvQkFDbkMsTUFBTSxDQUFDLENBQUM7aUJBQ1g7YUFDSjtZQUNELE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsY0FBYyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFDakYsQ0FBQztLQUFBO0lBRUQsaUJBQWlCO1FBQ2IsT0FBTyxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsWUFBWSxJQUFJLElBQUksQ0FBQztJQUM5RCxDQUFDO0lBRUQsY0FBYztRQUNWLE9BQU8sSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLFlBQVksSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLGNBQWMsSUFBSSxJQUFJLENBQUM7SUFDekYsQ0FBQztJQUVELG1CQUFtQjtRQUNmLE9BQU8sSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLGtCQUFrQixJQUFJLElBQUksQ0FBQztJQUNqRSxDQUFDO0lBRWEsV0FBVyxDQUFDLEtBQWEsRUFBRSxjQUFzQixFQUFFLElBQVksRUFBRSxZQUFvQixFQUMvRixXQUFtQixFQUFFLFFBQWdCLEVBQUUsWUFBb0IsRUFBRSxHQUF1QixFQUNwRixpQkFBeUMsRUFBRSxjQUF1QixFQUFFLFFBQWtCOztZQUN0RixNQUFNLG9CQUFvQixHQUFHLE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUM5RSxNQUFNLEtBQUssR0FBRyxNQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDakQsTUFBTSxhQUFhLEdBQUcsSUFBSSxhQUFhLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1lBRTFFLElBQUksYUFBYSxHQUFhLEVBQUUsQ0FBQztZQUNqQyxJQUFJLGdCQUFnQixHQUFhLEVBQUUsQ0FBQztZQUNwQyxJQUFJLG9CQUFvQixHQUFhLEVBQUUsQ0FBQztZQUV4QyxJQUFJLEtBQUssSUFBSSxJQUFJLElBQUksY0FBYyxJQUFJLElBQUksRUFBRTtnQkFDekMsYUFBYSxHQUFHLENBQUMsS0FBSyxFQUFFLGNBQWMsQ0FBQyxDQUFDO2FBQzNDO2lCQUFNO2dCQUNILGFBQWEsR0FBRyxJQUFJLENBQUM7YUFDeEI7WUFDRCxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksWUFBWSxJQUFJLElBQUksSUFBSSxXQUFXLElBQUksSUFBSSxFQUFFO2dCQUM3RCxnQkFBZ0IsR0FBRyxDQUFDLElBQUksRUFBRSxZQUFZLEVBQUUsV0FBVyxDQUFDLENBQUM7YUFDeEQ7aUJBQU07Z0JBQ0gsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDO2FBQzNCO1lBQ0QsSUFBSSxRQUFRLElBQUksSUFBSSxJQUFJLFlBQVksSUFBSSxJQUFJLEVBQUU7Z0JBQzFDLG9CQUFvQixHQUFHLENBQUMsUUFBUSxFQUFFLFlBQVksQ0FBQzthQUNsRDtpQkFBTTtnQkFDSCxvQkFBb0IsR0FBRyxJQUFJLENBQUM7YUFDL0I7WUFFRCxJQUFJLE9BQXFCLENBQUM7WUFDMUIsSUFBSSxjQUFjLElBQUksSUFBSSxJQUFJLGlCQUFpQixJQUFJLElBQUksRUFBRTtnQkFDckQsT0FBTyxHQUFHLElBQUksWUFBWSxDQUFDLGFBQWEsRUFBRSxnQkFBZ0IsRUFBRSxvQkFBb0IsRUFBRSxpQkFBaUIsRUFDL0YsY0FBYyxFQUFFLFFBQVEsRUFBRSxhQUFhLENBQUMsQ0FBQzthQUNoRDtpQkFBTSxJQUFJLG9CQUFvQixJQUFJLElBQUksRUFBRTtnQkFDckMsT0FBTyxHQUFHLElBQUksWUFBWSxDQUFDLGFBQWEsRUFBRSxnQkFBZ0IsRUFBRSxvQkFBb0IsRUFBRSxzREFBcUIsQ0FBQyxRQUFRLEVBQzVHLG9CQUFvQixFQUFFLEtBQUssRUFBRSxhQUFhLENBQUMsQ0FBQzthQUNuRDtpQkFBTTtnQkFDSCxPQUFPLEdBQUcsSUFBSSxZQUFZLENBQUMsYUFBYSxFQUFFLGdCQUFnQixFQUFFLG9CQUFvQixFQUFFLElBQUksRUFDbEYsSUFBSSxFQUFFLEtBQUssRUFBRSxhQUFhLENBQUMsQ0FBQzthQUNuQztZQUVELE1BQU0sUUFBUSxHQUFHLE1BQU0sSUFBSSxDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUVsRSxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7WUFDbEIsTUFBTSxNQUFNLEdBQUcsSUFBSSxVQUFVLEVBQUUsQ0FBQztZQUNoQyxNQUFNLENBQUMsU0FBUyxHQUFHLENBQUUsUUFBZ0IsQ0FBQyxXQUFXLENBQUM7WUFFbEQsSUFBSSxNQUFNLENBQUMsU0FBUyxFQUFFO2dCQUNsQixzQkFBc0I7Z0JBQ3RCLE1BQU0saUJBQWlCLEdBQUcsUUFBcUMsQ0FBQztnQkFDaEUsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7Z0JBQ25CLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxjQUFjLENBQUM7Z0JBQ3pDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO2dCQUNqQixJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztnQkFDakMsSUFBSSxDQUFDLGNBQWMsR0FBRyxXQUFXLENBQUM7Z0JBQ2xDLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO2dCQUN6QixJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztnQkFDakMsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztnQkFDM0MsSUFBSSxDQUFDLHNCQUFzQixHQUFHLGlCQUFpQixDQUFDLG1CQUFtQixDQUFDO2dCQUNwRSxNQUFNLENBQUMsa0JBQWtCLEdBQUcsaUJBQWlCLENBQUMsbUJBQW1CLENBQUM7Z0JBQ2xFLE9BQU8sTUFBTSxDQUFDO2FBQ2pCO1lBRUQsTUFBTSxhQUFhLEdBQUcsUUFBaUMsQ0FBQztZQUN4RCxNQUFNLENBQUMsbUJBQW1CLEdBQUcsYUFBYSxDQUFDLG1CQUFtQixDQUFDO1lBQy9ELElBQUksYUFBYSxDQUFDLGNBQWMsSUFBSSxJQUFJLEVBQUU7Z0JBQ3RDLE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxpQkFBaUIsQ0FBQyxhQUFhLENBQUMsY0FBYyxFQUFFLEtBQUssQ0FBQyxDQUFDO2FBQ2xGO1lBRUQsTUFBTSxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsV0FBVyxFQUFFLGFBQWEsQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUN6RixNQUFNLElBQUksQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFFLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsRUFDN0YsYUFBYSxDQUFDLEdBQUcsRUFBRSxhQUFhLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDcEQsSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFO2dCQUNwQixJQUFJLEdBQUcsSUFBSSxJQUFJLEVBQUU7b0JBQ2IsTUFBTSxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztpQkFDeEM7Z0JBQ0QsSUFBSSxjQUFjLElBQUksSUFBSSxFQUFFO29CQUN4QixNQUFNLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQyxDQUFDO2lCQUN2RDtnQkFFRCwyRUFBMkU7Z0JBQzNFLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxhQUFhLENBQUMsR0FBRyxJQUFJLElBQUksRUFBRTtvQkFDM0MsTUFBTSxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUM7b0JBRXRELDhFQUE4RTtvQkFDOUUsSUFBSSxhQUFhLENBQUMsVUFBVSxJQUFJLElBQUksRUFBRTt3QkFDbEMsSUFBSTs0QkFDQSxNQUFNLE9BQU8sR0FBRyxNQUFNLElBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxFQUFFLENBQUM7NEJBQ3ZELE1BQU0sSUFBSSxDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUMsSUFBSSxrQ0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQzs0QkFDL0YsYUFBYSxDQUFDLFVBQVUsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDO3lCQUN6RDt3QkFBQyxPQUFPLENBQUMsRUFBRTs0QkFDUiwyQkFBMkI7NEJBQzNCLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7eUJBQ3BCO3FCQUNKO29CQUVELE1BQU0sSUFBSSxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLENBQUM7aUJBQ3ZFO2FBQ0o7WUFFRCxJQUFJLElBQUksQ0FBQyxtQkFBbUIsSUFBSSxJQUFJLEVBQUU7Z0JBQ2xDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxlQUFlLEdBQUcsS0FBSyxDQUFDO2FBQ3BEO1lBQ0QsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUN2QyxPQUFPLE1BQU0sQ0FBQztRQUNsQixDQUFDO0tBQUE7SUFFTyxVQUFVO1FBQ2QsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUM7UUFDaEIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7UUFDbEIsSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQztRQUMvQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztRQUN6QixJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQztRQUMzQixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztRQUNyQixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztRQUN6QixJQUFJLENBQUMsc0JBQXNCLEdBQUcsSUFBSSxDQUFDO1FBQ25DLElBQUksQ0FBQyw2QkFBNkIsR0FBRyxJQUFJLENBQUM7SUFDOUMsQ0FBQztDQUNKOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUM1WG1EO0FBRUo7QUFFQTtBQUVOO0FBQ1o7QUFFSTtBQUNGO0FBQ007QUFDTjtBQUNNO0FBQ0k7QUFFbkMsTUFBTSxNQUFPLFNBQVEsMkRBQU07SUF1QjlCLFlBQVksR0FBZ0IsRUFBRSxtQkFBNEIsS0FBSyxFQUFFLFlBQWlCLElBQUk7UUFDbEYsS0FBSyxFQUFFLENBQUM7UUFDUixJQUFJLEdBQUcsSUFBSSxJQUFJLEVBQUU7WUFDYixPQUFPO1NBQ1Y7UUFFRCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRTtZQUM3QixFQUFFLEVBQUUsSUFBSTtZQUNSLE1BQU0sRUFBRSxJQUFJO1lBQ1osY0FBYyxFQUFFLElBQUk7WUFDcEIsUUFBUSxFQUFFLElBQUk7WUFDZCxJQUFJLEVBQUUsSUFBSTtZQUNWLEtBQUssRUFBRSxJQUFJO1NBQ2QsRUFBRSxnQkFBZ0IsRUFBRSxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsZ0JBQWdCLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUVyRSxJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUM7UUFDckIsSUFBSSxDQUFDLFFBQVEsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDO1FBQzdCLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxHQUFHLENBQUMsbUJBQW1CLENBQUM7UUFDbkQsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDO1FBQ3JCLElBQUksR0FBRyxDQUFDLFlBQVksSUFBSSxJQUFJLEVBQUU7WUFDMUIsSUFBSSxDQUFDLFlBQVksR0FBRyxHQUFHLENBQUMsWUFBWSxDQUFDO1NBQ3hDO2FBQU07WUFDSCxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxDQUFDLDBEQUEwRDtTQUN2RjtRQUNELElBQUksQ0FBQyxZQUFZLEdBQUcsR0FBRyxDQUFDLFlBQVksSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ2pGLElBQUksQ0FBQyxhQUFhLEdBQUcsR0FBRyxDQUFDLGFBQWEsQ0FBQztRQUN2QyxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMzQixJQUFJLENBQUMsV0FBVyxHQUFHLEdBQUcsQ0FBQyxXQUFXLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUU5RSxRQUFRLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDZixLQUFLLG9FQUFVLENBQUMsS0FBSztnQkFDakIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLG9EQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO2dCQUNwRCxNQUFNO1lBQ1YsS0FBSyxvRUFBVSxDQUFDLFVBQVU7Z0JBQ3RCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSwrREFBVSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztnQkFDbkUsTUFBTTtZQUNWLEtBQUssb0VBQVUsQ0FBQyxJQUFJO2dCQUNoQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksa0RBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLGdCQUFnQixDQUFDLENBQUM7Z0JBQ2pELE1BQU07WUFDVixLQUFLLG9FQUFVLENBQUMsUUFBUTtnQkFDcEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLDBEQUFRLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO2dCQUM3RCxNQUFNO1lBQ1Y7Z0JBQ0ksTUFBTTtTQUNiO1FBRUQsSUFBSSxHQUFHLENBQUMsV0FBVyxJQUFJLElBQUksRUFBRTtZQUN6QixJQUFJLENBQUMsV0FBVyxHQUFHLEdBQUcsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLDhEQUFVLENBQUMsQ0FBQyxFQUFFLGdCQUFnQixDQUFDLENBQUMsQ0FBQztTQUN0RjthQUFNO1lBQ0gsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7U0FDM0I7UUFFRCxJQUFJLEdBQUcsQ0FBQyxNQUFNLElBQUksSUFBSSxFQUFFO1lBQ3BCLElBQUksQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksb0RBQUssQ0FBQyxDQUFDLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO1NBQ3ZFO2FBQU07WUFDSCxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztTQUN0QjtRQUVELElBQUksR0FBRyxDQUFDLGVBQWUsSUFBSSxJQUFJLEVBQUU7WUFDN0IsSUFBSSxDQUFDLGVBQWUsR0FBRyxHQUFHLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsSUFBSSwwREFBUSxDQUFDLEVBQUUsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7U0FDOUY7YUFBTTtZQUNILElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDO1NBQy9CO0lBQ0wsQ0FBQztJQUVLLE9BQU87O1lBQ1QsTUFBTSxLQUFLLEdBQUcsSUFBSSxtRUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBRW5DLE1BQU0sSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUU7Z0JBQ3pCLElBQUksRUFBRSxJQUFJO2dCQUNWLEtBQUssRUFBRSxJQUFJO2FBQ2QsRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7WUFFeEIsUUFBUSxJQUFJLENBQUMsSUFBSSxFQUFFO2dCQUNmLEtBQUssb0VBQVUsQ0FBQyxLQUFLO29CQUNqQixLQUFLLENBQUMsS0FBSyxHQUFHLE1BQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO29CQUM1RCxNQUFNO2dCQUNWLEtBQUssb0VBQVUsQ0FBQyxVQUFVO29CQUN0QixLQUFLLENBQUMsVUFBVSxHQUFHLE1BQU0sSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO29CQUN0RSxNQUFNO2dCQUNWLEtBQUssb0VBQVUsQ0FBQyxJQUFJO29CQUNoQixLQUFLLENBQUMsSUFBSSxHQUFHLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO29CQUMxRCxNQUFNO2dCQUNWLEtBQUssb0VBQVUsQ0FBQyxRQUFRO29CQUNwQixLQUFLLENBQUMsUUFBUSxHQUFHLE1BQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO29CQUNsRSxNQUFNO2dCQUNWO29CQUNJLE1BQU07YUFDYjtZQUVELE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUM7WUFFbEMsSUFBSSxJQUFJLENBQUMsV0FBVyxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7Z0JBQ3pELE1BQU0sV0FBVyxHQUFVLEVBQUUsQ0FBQztnQkFDOUIsTUFBTSxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sRUFBRSxVQUFVLEVBQUUsRUFBRTtvQkFDbEQsT0FBTyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRTt3QkFDckIsT0FBTyxVQUFVLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO29CQUNyQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxhQUFhLEVBQUUsRUFBRTt3QkFDdEIsV0FBVyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztvQkFDcEMsQ0FBQyxDQUFDLENBQUM7Z0JBQ1AsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO2dCQUN0QixLQUFLLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQzthQUNuQztZQUVELElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUMvQyxNQUFNLE1BQU0sR0FBVSxFQUFFLENBQUM7Z0JBQ3pCLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLEVBQUU7b0JBQ3hDLE9BQU8sT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUU7d0JBQ3JCLE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztvQkFDaEMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUU7d0JBQ2pCLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7b0JBQzFCLENBQUMsQ0FBQyxDQUFDO2dCQUNQLENBQUMsRUFBRSxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztnQkFDdEIsS0FBSyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7YUFDekI7WUFFRCxJQUFJLElBQUksQ0FBQyxlQUFlLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtnQkFDakUsTUFBTSxlQUFlLEdBQVUsRUFBRSxDQUFDO2dCQUNsQyxNQUFNLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUUsRUFBRSxFQUFFO29CQUM5QyxPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFO3dCQUNyQixPQUFPLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7b0JBQzdCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFO3dCQUNkLGVBQWUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7b0JBQ2hDLENBQUMsQ0FBQyxDQUFDO2dCQUNQLENBQUMsRUFBRSxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztnQkFDdEIsS0FBSyxDQUFDLGVBQWUsR0FBRyxlQUFlLENBQUM7YUFDM0M7WUFFRCxPQUFPLEtBQUssQ0FBQztRQUNqQixDQUFDO0tBQUE7SUFFRCxZQUFZLENBQUMsTUFBYztRQUN2QixNQUFNLENBQUMsR0FBRyxJQUFJLG1FQUFVLEVBQUUsQ0FBQztRQUMzQixDQUFDLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUM7UUFDZixDQUFDLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUM7UUFDdkMsQ0FBQyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQzNCLENBQUMsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLGNBQWMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ3ZELENBQUMsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztRQUNuQixDQUFDLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUM7UUFDbkMsQ0FBQyxDQUFDLG1CQUFtQixHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQztRQUNqRCxDQUFDLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDM0IsQ0FBQyxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsWUFBWSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ3BGLENBQUMsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztRQUNuQixDQUFDLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUM7UUFDckMsQ0FBQyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBRWpGLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRTtZQUN6QixJQUFJLEVBQUUsSUFBSTtZQUNWLEtBQUssRUFBRSxJQUFJO1NBQ2QsQ0FBQyxDQUFDO1FBRUgsUUFBUSxDQUFDLENBQUMsSUFBSSxFQUFFO1lBQ1osS0FBSyxvRUFBVSxDQUFDLEtBQUs7Z0JBQ2pCLENBQUMsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQztnQkFDbkMsTUFBTTtZQUNWLEtBQUssb0VBQVUsQ0FBQyxVQUFVO2dCQUN0QixDQUFDLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztnQkFDbEQsTUFBTTtZQUNWLEtBQUssb0VBQVUsQ0FBQyxJQUFJO2dCQUNoQixDQUFDLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7Z0JBQ2hDLE1BQU07WUFDVixLQUFLLG9FQUFVLENBQUMsUUFBUTtnQkFDcEIsQ0FBQyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGNBQWMsRUFBRSxDQUFDO2dCQUM1QyxNQUFNO1lBQ1Y7Z0JBQ0ksTUFBTTtTQUNiO1FBRUQsSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksRUFBRTtZQUNyQixDQUFDLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztTQUN0RDtRQUNELElBQUksSUFBSSxDQUFDLFdBQVcsSUFBSSxJQUFJLEVBQUU7WUFDMUIsQ0FBQyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FBQztTQUNyRTtRQUNELElBQUksSUFBSSxDQUFDLGVBQWUsSUFBSSxJQUFJLEVBQUU7WUFDOUIsQ0FBQyxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLHFCQUFxQixFQUFFLENBQUMsQ0FBQztTQUNwRjtRQUNELE9BQU8sQ0FBQyxDQUFDO0lBQ2IsQ0FBQztDQUNKOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUMxTnVDO0FBRUM7QUFFbEMsTUFBTSxVQUFVO0lBT25CLE1BQU0sQ0FBTyx5QkFBeUI7O1lBQ2xDLElBQUksVUFBVSxDQUFDLFdBQVcsRUFBRTtnQkFDeEIsT0FBTyxNQUFNLFVBQVUsQ0FBQyxjQUFjLENBQUM7b0JBQ25DLE1BQU0sRUFBRSxJQUFJO29CQUNaLFFBQVEsRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLGlCQUFpQjtpQkFDN0MsQ0FBQyxDQUFDO2FBQ047aUJBQU0sSUFBSSxVQUFVLENBQUMsV0FBVyxFQUFFO2dCQUMvQixPQUFPLE1BQU0sVUFBVSxDQUFDLHVCQUF1QixFQUFFLENBQUM7YUFDckQ7UUFDTCxDQUFDO0tBQUE7SUFFRCxNQUFNLENBQU8sdUJBQXVCOztZQUNoQyxPQUFPLE1BQU0sVUFBVSxDQUFDLGNBQWMsQ0FBQztnQkFDbkMsTUFBTSxFQUFFLElBQUk7Z0JBQ1osYUFBYSxFQUFFLElBQUk7YUFDdEIsQ0FBQyxDQUFDO1FBQ1AsQ0FBQztLQUFBO0lBRUQsTUFBTSxDQUFPLGFBQWE7O1lBQ3RCLE9BQU8sTUFBTSxVQUFVLENBQUMsU0FBUyxDQUFDO2dCQUM5QixNQUFNLEVBQUUsSUFBSTthQUNmLENBQUMsQ0FBQztRQUNQLENBQUM7S0FBQTtJQUVELE1BQU0sQ0FBTyxTQUFTLENBQUMsT0FBWTs7WUFDL0IsSUFBSSxVQUFVLENBQUMsV0FBVyxFQUFFO2dCQUN4QixPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUU7b0JBQzNCLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQVcsRUFBRSxFQUFFO3dCQUN2QyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7b0JBQ2xCLENBQUMsQ0FBQyxDQUFDO2dCQUNQLENBQUMsQ0FBQyxDQUFDO2FBQ047aUJBQU0sSUFBSSxVQUFVLENBQUMsV0FBVyxFQUFFO2dCQUMvQixNQUFNLElBQUksR0FBRyxNQUFNLDREQUFTLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztnQkFDckYsT0FBTyxJQUFJLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7YUFDakQ7UUFDTCxDQUFDO0tBQUE7SUFFRCxNQUFNLENBQU8sY0FBYyxDQUFDLE9BQVk7O1lBQ3BDLE1BQU0sSUFBSSxHQUFHLE1BQU0sVUFBVSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNqRCxJQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUNqQixPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUNsQjtZQUVELE9BQU8sSUFBSSxDQUFDO1FBQ2hCLENBQUM7S0FBQTtJQUVELE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxHQUFRLEVBQUUsT0FBZSxFQUFFLE9BQVksSUFBSTtRQUNqRSxNQUFNLEdBQUcsR0FBUTtZQUNiLE9BQU8sRUFBRSxPQUFPO1NBQ25CLENBQUM7UUFFRixJQUFJLElBQUksSUFBSSxJQUFJLEVBQUU7WUFDZCxHQUFHLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztTQUNuQjtRQUVELE9BQU8sVUFBVSxDQUFDLGNBQWMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUVELE1BQU0sQ0FBTyxjQUFjLENBQUMsR0FBUSxFQUFFLEdBQVEsRUFBRSxVQUFlLElBQUk7O1lBQy9ELElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFO2dCQUNqQixPQUFPO2FBQ1Y7WUFFRCxJQUFJLFVBQVUsQ0FBQyxXQUFXLEVBQUU7Z0JBQ3hCLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRTtvQkFDM0IsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRTt3QkFDL0MsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRTs0QkFDMUIsc0JBQXNCO3lCQUN6Qjt3QkFDRCxPQUFPLEVBQUUsQ0FBQztvQkFDZCxDQUFDLENBQUMsQ0FBQztnQkFDUCxDQUFDLENBQUMsQ0FBQzthQUNOO2lCQUFNLElBQUksVUFBVSxDQUFDLFdBQVcsRUFBRTtnQkFDL0IsSUFBSSxPQUFPLElBQUksSUFBSSxJQUFJLE9BQU8sQ0FBQyxPQUFPLElBQUksSUFBSSxJQUFJLEdBQUcsQ0FBQyxnQkFBZ0IsSUFBSSxJQUFJLEVBQUU7b0JBQzVFLEdBQUcsQ0FBQyxnQkFBZ0IsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDO2lCQUMxQztnQkFDRCxNQUFNLDREQUFTLENBQUMsZ0JBQWdCLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUM7b0JBQzVELEdBQUcsRUFBRSxHQUFHO29CQUNSLEdBQUcsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQztvQkFDeEIsT0FBTyxFQUFFLE9BQU87aUJBQ25CLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQzthQUNiO1FBQ0wsQ0FBQztLQUFBO0lBRUQsTUFBTSxDQUFDLGlCQUFpQjtRQUNwQixJQUFJLFVBQVUsQ0FBQyxXQUFXLEVBQUU7WUFDeEIsT0FBTyxNQUFNLENBQUMsU0FBUyxDQUFDLGlCQUFpQixFQUFFLENBQUM7U0FDL0M7YUFBTSxJQUFJLFVBQVUsQ0FBQyxXQUFXLEVBQUU7WUFDL0IsT0FBTyxNQUFNLENBQUM7U0FDakI7YUFBTTtZQUNILE9BQU8sSUFBSSxDQUFDO1NBQ2Y7SUFDTCxDQUFDO0lBRUQsTUFBTSxDQUFDLHFCQUFxQjtRQUN4QixJQUFJLFVBQVUsQ0FBQyxXQUFXLEVBQUU7WUFDeEIsT0FBTyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxDQUFDLE9BQU8sQ0FBQztTQUMvQzthQUFNLElBQUksVUFBVSxDQUFDLFdBQVcsRUFBRTtZQUMvQixPQUFRLE1BQWMsQ0FBQywyQkFBMkIsQ0FBQztTQUN0RDthQUFNO1lBQ0gsT0FBTyxJQUFJLENBQUM7U0FDZjtJQUNMLENBQUM7SUFFRCxNQUFNLENBQU8sV0FBVzs7WUFDcEIsSUFBSSxVQUFVLENBQUMsV0FBVyxFQUFFO2dCQUN4QixPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7YUFDbkY7aUJBQU0sSUFBSSxVQUFVLENBQUMsV0FBVyxFQUFFO2dCQUMvQixNQUFNLElBQUksR0FBRyxNQUFNLDREQUFTLENBQUMsZ0JBQWdCLENBQUMsZUFBZSxDQUFDLENBQUM7Z0JBQy9ELE9BQU8sSUFBSSxLQUFLLE1BQU0sQ0FBQzthQUMxQjtpQkFBTTtnQkFDSCxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDakM7UUFDTCxDQUFDO0tBQUE7SUFFRCxNQUFNLENBQUMsWUFBWSxDQUFDLEdBQVcsRUFBRSxnQkFBeUIsS0FBSztRQUMzRCxJQUFJLFVBQVUsQ0FBQyxXQUFXLEVBQUU7WUFDeEIsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztTQUNwQzthQUFNLElBQUksVUFBVSxDQUFDLFdBQVcsRUFBRTtZQUMvQiw0REFBUyxDQUFDLGdCQUFnQixDQUFDLGNBQWMsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDekQ7SUFDTCxDQUFDO0lBRUQsTUFBTSxDQUFDLGVBQWUsQ0FBQyxJQUFZLEVBQUUsUUFBNEQ7UUFDN0YsSUFBSSxVQUFVLENBQUMsV0FBVyxFQUFFO1lBQ3hCLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxDQUFDLEdBQVEsRUFBRSxNQUFXLEVBQUUsUUFBYSxFQUFFLEVBQUU7Z0JBQzFFLFFBQVEsQ0FBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQ3BDLENBQUMsQ0FBQyxDQUFDO1NBQ047YUFBTSxJQUFJLFVBQVUsQ0FBQyxXQUFXLEVBQUU7WUFDL0IsNERBQVMsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxPQUFZLEVBQUUsTUFBVyxFQUFFLFFBQWEsRUFBRSxFQUFFO2dCQUM1RSxJQUFJLE9BQU8sQ0FBQyxnQkFBZ0IsSUFBSSxJQUFJLEVBQUU7b0JBQ2xDLElBQUksTUFBTSxJQUFJLElBQUksSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssUUFBUSxJQUFJLE1BQU0sQ0FBQyxPQUFPLElBQUksSUFBSSxFQUFFO3dCQUMxRSxNQUFNLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQztxQkFDN0M7aUJBQ0o7Z0JBQ0QsUUFBUSxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDeEMsQ0FBQyxDQUFDLENBQUM7U0FDTjtJQUNMLENBQUM7SUFFRCxNQUFNLENBQUMsVUFBVSxDQUFDLEdBQVc7UUFDekIsSUFBSSxVQUFVLENBQUMsa0JBQWtCLElBQUksVUFBVSxDQUFDLGtCQUFrQixFQUFFO1lBQ2hFLHlFQUF5RTtZQUN6RSxvRkFBb0Y7WUFDcEYsNERBQTREO1lBQzVELE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUM1RDthQUFNLElBQUksVUFBVSxDQUFDLGtCQUFrQixJQUFJLFVBQVUsQ0FBQyxXQUFXLEVBQUU7WUFDaEUsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ2Y7YUFBTSxJQUFJLFVBQVUsQ0FBQyxXQUFXLEVBQUU7WUFDL0IsNERBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLENBQUMsQ0FBQztTQUM3QztJQUNMLENBQUM7SUFFRCxNQUFNLENBQUMsWUFBWSxDQUFDLEdBQVcsRUFBRSxRQUFhLEVBQUUsV0FBZ0IsRUFBRSxRQUFnQjtRQUM5RSxJQUFJLFVBQVUsQ0FBQyxXQUFXLEVBQUU7WUFDeEIsTUFBTSxJQUFJLEdBQUcsV0FBVyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQzNELElBQUksSUFBSSxHQUFXLElBQUksQ0FBQztZQUN4QixJQUFJLElBQUksS0FBSyxZQUFZLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxLQUFLLFFBQVEsRUFBRTtnQkFDekQsSUFBSSxHQUFHLFFBQVEsQ0FBQzthQUNuQjtpQkFBTTtnQkFDSCxJQUFJLEdBQUcsOERBQUssQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLENBQUM7YUFDMUM7WUFDRCw0REFBUyxDQUFDLGdCQUFnQixDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDO2dCQUN0RCxRQUFRLEVBQUUsSUFBSTtnQkFDZCxXQUFXLEVBQUUsV0FBVztnQkFDeEIsUUFBUSxFQUFFLFFBQVE7YUFDckIsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQ2I7YUFBTTtZQUNILE1BQU0sSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsV0FBVyxDQUFDLENBQUM7WUFDL0MsSUFBSSxTQUFTLENBQUMsZ0JBQWdCLEVBQUU7Z0JBQzVCLFNBQVMsQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO2FBQ3hDO2lCQUFNO2dCQUNILE1BQU0sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUMxQyxDQUFDLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ25DLENBQUMsQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO2dCQUN0QixHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2pDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDVixHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDcEM7U0FDSjtJQUNMLENBQUM7SUFFRCxNQUFNLENBQUMsUUFBUTtRQUNYLE9BQU8sWUFBZSxLQUFLLFlBQVksQ0FBQztJQUM1QyxDQUFDO0lBRUQsTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUFXO1FBQzVCLElBQUksVUFBVSxDQUFDLFdBQVcsRUFBRTtZQUN4QixPQUFPLEdBQUcsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDO1NBQ2pDO2FBQU07WUFDSCxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7U0FDdEM7SUFDTCxDQUFDO0lBRUQsTUFBTSxDQUFDLGVBQWUsQ0FBQyxHQUFXO1FBQzlCLElBQUksR0FBRyxJQUFJLElBQUksRUFBRTtZQUNiLE9BQU8sR0FBRyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDcEM7YUFBTSxJQUFJLFVBQVUsQ0FBQyxXQUFXLEVBQUU7WUFDL0IsNERBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1NBQ2pEO2FBQU0sSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUU7WUFDaEMsT0FBTyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDO1NBQ2xDO0lBQ0wsQ0FBQztJQUVELE1BQU0sQ0FBQyxpQkFBaUI7UUFDcEIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUU7WUFDekIsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQWMsQ0FBQztZQUN0RCxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtnQkFDdkQsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUN4QixDQUFDLENBQUMsQ0FBQztTQUNOO0lBQ0wsQ0FBQzs7QUF6Tk0sNkJBQWtCLEdBQVksQ0FBQyxPQUFPLE9BQU8sS0FBSyxXQUFXLENBQUMsQ0FBQztBQUMvRCxzQkFBVyxHQUFhLE1BQWMsQ0FBQyxrQkFBa0IsS0FBSyxJQUFJLENBQUM7QUFDbkUsc0JBQVcsR0FBWSxDQUFDLFVBQVUsQ0FBQyxXQUFXLElBQUksQ0FBQyxPQUFPLE1BQU0sS0FBSyxXQUFXLENBQUMsQ0FBQztBQUNsRiw2QkFBa0IsR0FBWSxTQUFTLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDL0UsU0FBUyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7Ozs7Ozs7OztBQ1R0RDtBQUFBLElBQVkscUJBUVg7QUFSRCxXQUFZLHFCQUFxQjtJQUM3QixtRkFBaUI7SUFDakIsbUVBQVM7SUFDVCwrREFBTztJQUNQLHVFQUFXO0lBQ1gsK0RBQU87SUFDUCx5RUFBWTtJQUNaLHVGQUFtQjtBQUN2QixDQUFDLEVBUlcscUJBQXFCLEtBQXJCLHFCQUFxQixRQVFoQzs7Ozs7Ozs7O0FDUkQ7QUFBQSxJQUFZLGNBRVg7QUFGRCxXQUFZLGNBQWM7SUFDdEIseURBQVc7QUFDZixDQUFDLEVBRlcsY0FBYyxLQUFkLGNBQWMsUUFFekI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNFZ0U7QUFFaEI7QUFFakQsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDO0FBRVosTUFBTSxZQUFZLEdBQUc7SUFDeEIsQ0FBQyxvRUFBVSxDQUFDLGVBQWUsQ0FBQyxFQUFFLGVBQWU7SUFDN0MsQ0FBQyxvRUFBVSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsZUFBZTtJQUM5QyxDQUFDLG9FQUFVLENBQUMsY0FBYyxDQUFDLEVBQUUsZUFBZTtJQUM1QyxDQUFDLG9FQUFVLENBQUMsYUFBYSxDQUFDLEVBQUUsZUFBZTtJQUMzQyxDQUFDLG9FQUFVLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxnQkFBZ0I7SUFDL0MsQ0FBQyxvRUFBVSxDQUFDLGVBQWUsQ0FBQyxFQUFFLGdCQUFnQjtJQUM5QyxDQUFDLG9FQUFVLENBQUMsY0FBYyxDQUFDLEVBQUUsZ0JBQWdCO0lBQzdDLENBQUMsb0VBQVUsQ0FBQyxZQUFZLENBQUMsRUFBRSxnQkFBZ0I7SUFDM0MsQ0FBQyxvRUFBVSxDQUFDLFlBQVksQ0FBQyxFQUFFLGdCQUFnQjtDQUM5QyxDQUFDO0FBRUssTUFBTSxTQUFTO0lBS2xCLFlBQVksR0FBVyxFQUFVLFFBQXdCLEVBQzdDLG9CQUEyQyxFQUFVLGNBQStCLEVBQ3BGLFlBQTJCLEVBQVUsa0JBQThCO1FBRjlDLGFBQVEsR0FBUixRQUFRLENBQWdCO1FBQzdDLHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBdUI7UUFBVSxtQkFBYyxHQUFkLGNBQWMsQ0FBaUI7UUFDcEYsaUJBQVksR0FBWixZQUFZLENBQWU7UUFBVSx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQVk7UUFOdkUsaUJBQVksR0FBVyxJQUFJLENBQUM7UUFDNUIsb0JBQWUsR0FBRyxLQUFLLENBQUM7UUFNNUIsSUFBSSxrQkFBa0IsSUFBSSxJQUFJLEVBQUU7WUFDNUIsTUFBTSxJQUFJLEdBQUcsa0JBQWtCLEVBQUUsQ0FBQztZQUNsQyxJQUFJLG9CQUFvQixJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsb0JBQW9CLEVBQUU7Z0JBQzNELElBQUksQ0FBQyxvQkFBb0IsR0FBRyxJQUFJLENBQUMsb0JBQTRDLENBQUM7YUFDakY7WUFDRCxJQUFJLGNBQWMsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLGNBQWMsRUFBRTtnQkFDL0MsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsY0FBZ0MsQ0FBQzthQUMvRDtZQUNELElBQUksWUFBWSxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO2dCQUMzQyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxZQUE0QixDQUFDO2FBQ3pEO1NBQ0o7UUFFRCxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO1FBQ3BFLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUFDLFNBQVMsRUFBRSxLQUFLLG9FQUFVLENBQUMsZ0JBQWdCO1lBQ3hGLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUM5QyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUUzRCxHQUFXLENBQUMscUJBQXFCLEdBQUcsS0FBSyxDQUFDO1FBQzFDLEdBQVcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFPLE1BQWMsRUFBRSxNQUFXLEVBQUUsTUFBWSxFQUFFLEVBQUU7WUFDdEUsTUFBTSxJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDMUMsQ0FBQyxFQUFDO0lBQ04sQ0FBQztJQUVLLEVBQUUsQ0FBQyxNQUFjLEVBQUUsTUFBVyxFQUFFLE1BQVk7O1lBQzlDLE9BQU87WUFFUCxJQUFJLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRTtnQkFDMUMsT0FBTzthQUNWO1lBRUQsTUFBTSxRQUFRLEdBQUcsTUFBTSxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBVSxvRkFBZ0IsQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUN2RixJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsSUFBSSxRQUFRLElBQUksSUFBSSxDQUFDLElBQUksUUFBUSxJQUFJLElBQUksSUFBSSxRQUFRLEVBQUU7Z0JBQzVFLE9BQU87YUFDVjtZQUVELElBQUksTUFBTSxLQUFLLE1BQU0sSUFBSSxDQUFDLE1BQU0sRUFBRTtnQkFDOUIsT0FBTzthQUNWO1lBRUQsTUFBTSxXQUFXLEdBQUcsTUFBTSxJQUFJLENBQUMsWUFBWSxDQUFDLGlCQUFpQixFQUFFLENBQUM7WUFDaEUsTUFBTSxPQUFPLEdBQUcsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQ3BELElBQUksT0FBTyxHQUFHLFVBQVUsR0FBRyxJQUFJLENBQUMsWUFBWSxHQUFHLE9BQU8sR0FBRyxXQUFXLEdBQUcsT0FBTyxHQUFHLE9BQU8sQ0FBQztZQUV6RixJQUFJLE1BQU0sS0FBSyxVQUFVLElBQUksTUFBTSxFQUFFO2dCQUNqQyxPQUFPLElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUMzQztpQkFBTSxJQUFJLE9BQU8sTUFBTSxLQUFLLFFBQVEsSUFBSSxNQUFNLENBQUMsT0FBTyxLQUFLLFVBQVUsRUFBRTtnQkFDcEUsT0FBTyxJQUFJLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ2hEO2lCQUFNLElBQUksTUFBTSxLQUFLLE9BQU8sSUFBSSxNQUFNLEVBQUU7Z0JBQ3JDLE9BQU8sSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQ3hDO2lCQUFNLElBQUksT0FBTyxNQUFNLEtBQUssUUFBUSxJQUFJLE1BQU0sQ0FBQyxPQUFPLEtBQUssT0FBTyxFQUFFO2dCQUNqRSxPQUFPLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUN4QztZQUVELE1BQU0sT0FBTyxHQUFHLElBQUksY0FBYyxFQUFFLENBQUM7WUFDckMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsMENBQTBDLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDdkUsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMxQixDQUFDO0tBQUE7SUFFTyxZQUFZLENBQUMsT0FBWTtRQUM3QixPQUFPLGNBQWMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDO1lBQ2pHLE1BQU0sR0FBRyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDO1lBQ2hELENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQzNFLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQzNFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN4RSxDQUFDO0lBRU8sZUFBZSxDQUFDLFFBQWdCO1FBQ3BDLE9BQU8saUJBQWlCLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUM1RCxDQUFDO0lBRU8sYUFBYSxDQUFDLFFBQWdCO1FBQ2xDLE1BQU0sVUFBVSxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDekMsSUFBSSxVQUFVLEdBQUcsQ0FBQyxDQUFDLEVBQUU7WUFDakIsUUFBUSxHQUFHLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1NBQ2hEO1FBQ0QsSUFBSSxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUM5RCxRQUFRLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNwQztRQUNELE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDdEMsTUFBTSxZQUFZLEdBQWEsRUFBRSxDQUFDO1FBQ2xDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtZQUNwQixJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsNEVBQTRFLENBQUMsRUFBRTtnQkFDdkYsWUFBWSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQzthQUNqQztpQkFBTTtnQkFDSCxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ3hCO1FBQ0wsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLGtCQUFrQixDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUN0RCxDQUFDO0NBQ0o7Ozs7Ozs7OztBQ3hIRDtBQUFBLElBQVksT0FFWDtBQUZELFdBQVksT0FBTztJQUNmLHVEQUFpQjtBQUNyQixDQUFDLEVBRlcsT0FBTyxLQUFQLE9BQU8sUUFFbEI7Ozs7Ozs7OztBQ0ZEO0FBQUEsSUFBWSwwQkFJWDtBQUpELFdBQVksMEJBQTBCO0lBQ2xDLGlGQUFXO0lBQ1gsbUZBQVk7SUFDWixxRkFBYTtBQUNqQixDQUFDLEVBSlcsMEJBQTBCLEtBQTFCLDBCQUEwQixRQUlyQzs7Ozs7Ozs7O0FDSkQ7QUFBQSxJQUFZLFVBc0JYO0FBdEJELFdBQVksVUFBVTtJQUNsQixpREFBVztJQUNYLHlDQUFPO0lBQ1AsaUVBQW1CO0lBQ25CLG1FQUFvQjtJQUNwQiwrREFBa0I7SUFDbEIsNkRBQWlCO0lBQ2pCLCtEQUFrQjtJQUNsQiwyREFBZ0I7SUFDaEIsMkRBQWdCO0lBQ2hCLDZEQUFpQjtJQUNqQixnRUFBbUI7SUFDbkIsNERBQWlCO0lBQ2pCLDBEQUFnQjtJQUNoQixzREFBYztJQUNkLGdFQUFtQjtJQUNuQiw4REFBa0I7SUFDbEIsMENBQVE7SUFDUiw4REFBa0I7SUFDbEIsZ0VBQW1CO0lBQ25CLG9FQUFxQjtJQUNyQixrRUFBb0I7QUFDeEIsQ0FBQyxFQXRCVyxVQUFVLEtBQVYsVUFBVSxRQXNCckI7Ozs7Ozs7OztBQ3RCRDtBQUFBO0FBQUE7QUFBQTtBQUFnRDtBQUVGO0FBQ0E7QUFJdkMsTUFBTSxRQUFRO0lBa0JqQixZQUFZLFFBQXVCLEVBQUUsTUFBZTtRQUNoRCxJQUFJLFFBQVEsSUFBSSxJQUFJLEVBQUU7WUFDbEIsT0FBTztTQUNWO1FBRUQsSUFBSSxDQUFDLEVBQUUsR0FBRyxRQUFRLENBQUMsRUFBRSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQztRQUNsQyxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUM7UUFDMUIsSUFBSSxDQUFDLElBQUksR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDO1FBQzFCLElBQUksQ0FBQyxLQUFLLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQztRQUM1QixJQUFJLENBQUMsR0FBRyxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUM7UUFDeEIsSUFBSSxDQUFDLGNBQWMsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDO1FBQzlDLElBQUksQ0FBQyxXQUFXLEdBQUcsUUFBUSxDQUFDLFdBQVcsQ0FBQztRQUN4QyxJQUFJLENBQUMsWUFBWSxHQUFHLFFBQVEsQ0FBQyxZQUFZLENBQUM7UUFDMUMsSUFBSSxDQUFDLGNBQWMsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDO1FBQzlDLElBQUksQ0FBQyxZQUFZLEdBQUcsUUFBUSxDQUFDLFlBQVksQ0FBQztRQUMxQyxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUM7UUFDbEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDO1FBRWpDLFFBQVEsSUFBSSxDQUFDLElBQUksRUFBRTtZQUNmLEtBQUssZ0VBQVEsQ0FBQyxJQUFJO2dCQUNkLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxrRUFBWSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDNUMsTUFBTTtZQUNWLEtBQUssZ0VBQVEsQ0FBQyxJQUFJO2dCQUNkLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxrRUFBWSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDNUMsTUFBTTtZQUNWO2dCQUNJLE1BQU07U0FDYjtJQUNMLENBQUM7Q0FDSjs7Ozs7Ozs7O0FDeEREO0FBQUE7QUFBd0Q7QUFFakQsTUFBTSxXQUFZLFNBQVEsMkVBQVk7SUFRekMsWUFBWSxPQUFZLElBQUk7UUFDeEIsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ1osSUFBSSxJQUFJLElBQUksSUFBSSxFQUFFO1lBQ2QsT0FBTztTQUNWO1FBQ0QsSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDekMsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDM0MsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDckQsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDM0MsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDN0MsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDekQsQ0FBQztDQUNKOzs7Ozs7Ozs7QUN0QkQ7QUFBQTtBQUF3RDtBQUVqRCxNQUFNLFdBQVksU0FBUSwyRUFBWTtJQUl6QyxZQUFZLE9BQVksSUFBSTtRQUN4QixLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDWixJQUFJLElBQUksSUFBSSxJQUFJLEVBQUU7WUFDZCxPQUFPO1NBQ1Y7UUFDRCxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM3QyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRLENBQUMsSUFBSSxLQUFLLENBQUM7SUFDOUQsQ0FBQztDQUNKOzs7Ozs7Ozs7QUNURDtBQUFPLE1BQU0sY0FBYztJQVF2QixZQUFZLENBQWM7UUFQMUIsT0FBRSxHQUFXLElBQUksQ0FBQztRQUNsQixRQUFHLEdBQVcsSUFBSSxDQUFDO1FBQ25CLFNBQUksR0FBVyxJQUFJLENBQUM7UUFDcEIsYUFBUSxHQUFXLElBQUksQ0FBQztRQUN4QixhQUFRLEdBQVcsSUFBSSxDQUFDO1FBQ3hCLFFBQUcsR0FBdUIsSUFBSSxDQUFDO1FBRzNCLElBQUksQ0FBQyxDQUFDLEVBQUU7WUFDSixPQUFPO1NBQ1Y7UUFFRCxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDZixJQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUM7UUFDakIsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ25CLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQztJQUMvQixDQUFDO0lBRUQsSUFBSSxRQUFRO1FBQ1IsSUFBSTtZQUNBLElBQUksSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLEVBQUU7Z0JBQ25CLE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7YUFDcEM7U0FDSjtRQUFDLFdBQU0sR0FBRztRQUNYLE9BQU8sQ0FBQyxDQUFDO0lBQ2IsQ0FBQztDQUNKOzs7Ozs7Ozs7QUM5QkQ7QUFBTyxNQUFNLFlBQVk7SUFBekI7UUFDWSxVQUFLLEdBQVEsRUFBRSxDQUFDO0lBdUI1QixDQUFDO0lBckJHLEdBQUcsQ0FBSSxHQUFXO1FBQ2QsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUNoQyxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQzNDO1FBQ0QsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFFRCxJQUFJLENBQUMsR0FBVyxFQUFFLEdBQVE7UUFDdEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDdEIsT0FBTyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDN0IsQ0FBQztJQUVELE1BQU0sQ0FBQyxHQUFXO1FBQ2QsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3ZCLE9BQU8sT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQzdCLENBQUM7SUFFRCxLQUFLO1FBQ0QsSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7UUFDaEIsT0FBTyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDN0IsQ0FBQztDQUNKOzs7Ozs7Ozs7QUMxQkQ7QUFBQTtBQUFBO0FBQW1EO0FBQ0Y7QUFJbEMsTUFBTSx1QkFBdUI7SUFDeEMsSUFBSSxDQUFDLFVBQWtCLEVBQUUsTUFBVyxFQUFFO1FBQ2xDLE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ2hFLElBQUksc0VBQVUsQ0FBQyxXQUFXLEVBQUU7WUFDeEIsb0VBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDNUMsb0VBQVMsQ0FBQyxzQkFBc0IsQ0FBQyxPQUFPLEVBQUUseUJBQXlCLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDOUU7YUFBTTtZQUNILE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ3ZDO0lBQ0wsQ0FBQztDQUNKOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNmNEI7QUFPb0I7QUFDRjtBQUNNO0FBRTlDLE1BQU0sYUFBYTtJQUl0QixZQUFvQixhQUE0QjtRQUE1QixrQkFBYSxHQUFiLGFBQWEsQ0FBZTtRQUh4QyxhQUFRLEdBQUcsS0FBSyxDQUFDO1FBQ2pCLFVBQUssR0FBZSxJQUFJLENBQUM7SUFHakMsQ0FBQztJQUVELFVBQVU7UUFDTixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztJQUN0QixDQUFDO0lBRUQsWUFBWSxDQUFDLEtBQWE7UUFDdEIsTUFBTSxhQUFhLEdBQUcsS0FBSyxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxJQUFJLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1lBQzNFLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLElBQUksS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUN6RSxPQUFPLENBQUMsYUFBYSxDQUFDO0lBQzFCLENBQUM7SUFFSyxZQUFZOztZQUNkLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtnQkFDZixPQUFPO2FBQ1Y7WUFDRCwyQkFBMkI7WUFDM0IsT0FBTyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1lBQ2hDLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO1lBQ3JCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1lBQ2xCLE1BQU0sT0FBTyxHQUFHLElBQUksNENBQVksRUFBRSxDQUFDO1lBQ25DLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDbEIsT0FBTyxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQWEsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUMxRixPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ3JDLE9BQU8sQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFO2dCQUN0QixLQUFLLEVBQUUsQ0FBQztnQkFDUixTQUFTLEVBQUUsQ0FBQyxDQUFhLEVBQUUsRUFBRTtvQkFDekIsSUFBSSxDQUFDLENBQUMsUUFBUSxJQUFJLElBQUksSUFBSSxDQUFDLENBQUMsSUFBSSxLQUFLLG9FQUFVLENBQUMsSUFBSSxFQUFFO3dCQUNsRCxPQUFPLENBQUMsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztxQkFDeEM7b0JBQ0QsT0FBTyxDQUFDLENBQUMsUUFBUSxDQUFDO2dCQUN0QixDQUFDO2FBQ0osQ0FBQyxDQUFDO1lBQ0gsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUN2QixPQUFPLENBQUMsS0FBSyxDQUFDLGdCQUFnQixFQUFFO2dCQUM1QixTQUFTLEVBQUUsQ0FBQyxDQUFhLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssb0VBQVUsQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJO2FBQ3pHLENBQUMsQ0FBQztZQUNILE9BQU8sQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFhLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQzlGLE9BQU8sQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBYSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDekYsT0FBTyxDQUFDLEtBQUssQ0FBQyxlQUFlLEVBQUUsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFhLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUMvRixPQUFPLENBQUMsS0FBSyxDQUFDLGFBQWEsRUFBRSxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQWEsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDbkcsT0FBTyxDQUFDLEtBQUssQ0FBQyxvQkFBb0IsRUFDOUIsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFhLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3pFLE9BQU8sQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLEVBQUUsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFhLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDO1lBQ3BGLE1BQU0sT0FBTyxHQUFHLE1BQU0sSUFBSSxDQUFDLGFBQWEsQ0FBQyxlQUFlLEVBQUUsQ0FBQztZQUMzRCxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdkMsSUFBSSxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDN0IsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7WUFDdEIsMkJBQTJCO1lBQzNCLE9BQU8sQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUN2QyxDQUFDO0tBQUE7SUFFSyxhQUFhLENBQUMsS0FBYSxFQUM3QixTQUFzRixJQUFJLEVBQzFGLFVBQXdCLElBQUk7O1lBRTVCLE1BQU0sT0FBTyxHQUFpQixFQUFFLENBQUM7WUFDakMsSUFBSSxLQUFLLElBQUksSUFBSSxFQUFFO2dCQUNmLEtBQUssR0FBRyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUM7YUFDdEM7WUFDRCxJQUFJLEtBQUssS0FBSyxFQUFFLEVBQUU7Z0JBQ2QsS0FBSyxHQUFHLElBQUksQ0FBQzthQUNoQjtZQUVELElBQUksT0FBTyxJQUFJLElBQUksRUFBRTtnQkFDakIsT0FBTyxHQUFHLE1BQU0sSUFBSSxDQUFDLGFBQWEsQ0FBQyxlQUFlLEVBQUUsQ0FBQzthQUN4RDtZQUVELElBQUksTUFBTSxJQUFJLElBQUksSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUM5RCxPQUFPLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQzNFO2lCQUFNLElBQUksTUFBTSxJQUFJLElBQUksRUFBRTtnQkFDdkIsT0FBTyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBeUMsQ0FBQyxDQUFDO2FBQ3ZFO1lBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQzNCLE9BQU8sT0FBTyxDQUFDO2FBQ2xCO1lBRUQsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO2dCQUNmLE1BQU0sSUFBSSxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDN0MsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO29CQUNmLE1BQU0sSUFBSSxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztpQkFDaEQ7YUFDSjtZQUVELE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1lBQ3ZDLElBQUksS0FBSyxJQUFJLElBQUksRUFBRTtnQkFDZixzREFBc0Q7Z0JBQ3RELE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQzthQUNsRDtZQUVELE1BQU0sVUFBVSxHQUFHLElBQUksR0FBRyxFQUFzQixDQUFDO1lBQ2pELE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRWhELElBQUksYUFBYSxHQUF3QixJQUFJLENBQUM7WUFDOUMsTUFBTSxhQUFhLEdBQUcsS0FBSyxJQUFJLElBQUksSUFBSSxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNwRixJQUFJLGFBQWEsRUFBRTtnQkFDZixJQUFJO29CQUNBLGFBQWEsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztpQkFDeEQ7Z0JBQUMsV0FBTSxHQUFHO2FBQ2Q7aUJBQU07Z0JBQ0gsMkJBQTJCO2dCQUMzQixNQUFNLE1BQU0sR0FBRywwQ0FBVSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEdBQUcsMENBQVUsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDO2dCQUMxRSxhQUFhLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFO29CQUM5Qiw4Q0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFO3dCQUNwQyxNQUFNLENBQUMsR0FBRyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7d0JBQzNCLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLEVBQUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7d0JBQ2xELENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLEVBQUUsTUFBTSxFQUFFLENBQUMsVUFBVSxDQUFDLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7d0JBQ3RELENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLEVBQUUsTUFBTSxFQUFFLENBQUMsWUFBWSxDQUFDLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7d0JBQ3hELENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO29CQUNsQixDQUFDLENBQUMsQ0FBQztnQkFDUCxDQUFDLENBQUMsQ0FBQzthQUNOO1lBRUQsSUFBSSxhQUFhLElBQUksSUFBSSxFQUFFO2dCQUN2QixhQUFhLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7b0JBQ3hCLElBQUksVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUU7d0JBQ3ZCLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztxQkFDdkM7Z0JBQ0wsQ0FBQyxDQUFDLENBQUM7YUFDTjtZQUNELE9BQU8sT0FBTyxDQUFDO1FBQ25CLENBQUM7S0FBQTtJQUVELGtCQUFrQixDQUFDLE9BQXFCLEVBQUUsS0FBYSxFQUFFLFVBQW1CLEtBQUs7UUFDN0UsS0FBSyxHQUFHLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNuQyxPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtZQUN4QixJQUFJLE9BQU8sS0FBSyxDQUFDLENBQUMsU0FBUyxFQUFFO2dCQUN6QixPQUFPLEtBQUssQ0FBQzthQUNoQjtZQUNELElBQUksQ0FBQyxDQUFDLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUU7Z0JBQzVELE9BQU8sSUFBSSxDQUFDO2FBQ2Y7WUFDRCxJQUFJLEtBQUssQ0FBQyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUM3QyxPQUFPLElBQUksQ0FBQzthQUNmO1lBQ0QsSUFBSSxDQUFDLENBQUMsUUFBUSxJQUFJLElBQUksSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRTtnQkFDcEUsT0FBTyxJQUFJLENBQUM7YUFDZjtZQUNELElBQUksQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxJQUFJLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFO2dCQUNqRixPQUFPLElBQUksQ0FBQzthQUNmO1lBQ0QsT0FBTyxLQUFLLENBQUM7UUFDakIsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsaUJBQWlCO1FBQ2IsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3RCLENBQUM7SUFFTyxjQUFjLENBQUMsQ0FBYSxFQUFFLE1BQWU7UUFDakQsSUFBSSxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUU7WUFDZCxPQUFPLElBQUksQ0FBQztTQUNmO1FBQ0QsSUFBSSxNQUFNLEdBQWEsRUFBRSxDQUFDO1FBQzFCLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7WUFDbkIsSUFBSSxDQUFDLENBQUMsSUFBSSxJQUFJLElBQUksRUFBRTtnQkFDaEIsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDdkI7WUFDRCxJQUFJLENBQUMsQ0FBQyxJQUFJLEtBQUssa0VBQVMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLEtBQUssSUFBSSxJQUFJLEVBQUU7Z0JBQzlDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ3hCO1FBQ0wsQ0FBQyxDQUFDLENBQUM7UUFDSCxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQy9DLElBQUksTUFBTSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDckIsT0FBTyxJQUFJLENBQUM7U0FDZjtRQUNELE9BQU8sTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7SUFDOUMsQ0FBQztJQUVPLG1CQUFtQixDQUFDLENBQWEsRUFBRSxNQUFlO1FBQ3RELElBQUksQ0FBQyxDQUFDLENBQUMsY0FBYyxFQUFFO1lBQ25CLE9BQU8sSUFBSSxDQUFDO1NBQ2Y7UUFDRCxJQUFJLFdBQVcsR0FBYSxFQUFFLENBQUM7UUFDL0IsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtZQUN4QixJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxDQUFDLFFBQVEsSUFBSSxJQUFJLEVBQUU7Z0JBQ2pDLElBQUksTUFBTSxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFO29CQUN4QyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQ3ZFO3FCQUFNO29CQUNILFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDO2lCQUNoQzthQUNKO1FBQ0wsQ0FBQyxDQUFDLENBQUM7UUFDSCxXQUFXLEdBQUcsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQ3pELElBQUksV0FBVyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDMUIsT0FBTyxJQUFJLENBQUM7U0FDZjtRQUNELE9BQU8sTUFBTSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUM7SUFDeEQsQ0FBQztJQUVPLFlBQVksQ0FBQyxDQUFhO1FBQzlCLElBQUksQ0FBQyxDQUFDLElBQUksS0FBSyxvRUFBVSxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUMsS0FBSyxJQUFJLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFO1lBQ3BFLE9BQU8sSUFBSSxDQUFDO1NBQ2Y7UUFDRCxNQUFNLElBQUksR0FBYSxFQUFFLENBQUM7UUFDMUIsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7WUFDdkIsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLElBQUksSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLEVBQUUsRUFBRTtnQkFDL0IsT0FBTzthQUNWO1lBQ0QsSUFBSSxDQUFDLENBQUMsUUFBUSxJQUFJLElBQUksRUFBRTtnQkFDcEIsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQ3RCLE9BQU87YUFDVjtZQUNELElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUM7WUFDaEIsSUFBSSxDQUFDLENBQUMsS0FBSyxLQUFLLHdFQUFZLENBQUMsaUJBQWlCLEVBQUU7Z0JBQzVDLE1BQU0sYUFBYSxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ3pDLElBQUksYUFBYSxHQUFHLENBQUMsQ0FBQyxFQUFFO29CQUNwQixHQUFHLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxhQUFhLEdBQUcsQ0FBQyxDQUFDLENBQUM7aUJBQ3ZDO2dCQUNELE1BQU0sVUFBVSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQ3hDLElBQUksVUFBVSxHQUFHLENBQUMsQ0FBQyxFQUFFO29CQUNqQixHQUFHLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsVUFBVSxDQUFDLENBQUM7aUJBQ3RDO2FBQ0o7WUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ25CLENBQUMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDekMsQ0FBQztDQUNKOzs7Ozs7Ozs7QUN2T0Q7QUFBTyxNQUFNLG1CQUFtQjtJQUk1QixZQUFZLEVBQWE7UUFIekIsYUFBUSxHQUFXLElBQUksQ0FBQztRQUN4QixpQkFBWSxHQUFTLElBQUksQ0FBQztRQUd0QixJQUFJLENBQUMsRUFBRSxFQUFFO1lBQ0wsT0FBTztTQUNWO1FBRUQsSUFBSSxDQUFDLFlBQVksR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDO0lBQ3hDLENBQUM7Q0FDSjs7Ozs7Ozs7O0FDZkQ7QUFBQTs7Ozs7Ozs7O0dBU0c7QUFDSSxTQUFTLGFBQWEsQ0FBQyxRQUFpQztJQUMzRCxPQUFPLENBQUMsTUFBVyxFQUFFLFdBQTRCLEVBQUUsVUFBOEIsRUFBRSxFQUFFO1FBQ2pGLE1BQU0sY0FBYyxHQUF1QixVQUFVLENBQUMsS0FBSyxDQUFDO1FBQzVELE1BQU0sTUFBTSxHQUFHLElBQUksR0FBRyxFQUFrQyxDQUFDO1FBRXpELE1BQU0sUUFBUSxHQUFHLENBQUMsR0FBUSxFQUFFLEVBQUU7WUFDMUIsSUFBSSxLQUFLLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUM1QixJQUFJLEtBQUssSUFBSSxJQUFJLEVBQUU7Z0JBQ2YsT0FBTyxLQUFLLENBQUM7YUFDaEI7WUFDRCxLQUFLLEdBQUcsSUFBSSxHQUFHLEVBQXdCLENBQUM7WUFDeEMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDdkIsT0FBTyxLQUFLLENBQUM7UUFDakIsQ0FBQyxDQUFDO1FBRUYsT0FBTztZQUNILEtBQUssRUFBRSxVQUFTLEdBQUcsSUFBVztnQkFDMUIsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUM3QixNQUFNLFlBQVksR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ3BDLElBQUksUUFBUSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7Z0JBQ3ZDLElBQUksUUFBUSxJQUFJLElBQUksRUFBRTtvQkFDbEIsT0FBTyxRQUFRLENBQUM7aUJBQ25CO2dCQUVELE1BQU0sU0FBUyxHQUFHLEdBQUcsRUFBRTtvQkFDbkIsS0FBSyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQztvQkFDM0IsSUFBSSxLQUFLLENBQUMsSUFBSSxLQUFLLENBQUMsRUFBRTt3QkFDbEIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztxQkFDdkI7Z0JBQ0wsQ0FBQyxDQUFDO2dCQUNGLFFBQVEsR0FBRyxjQUFjLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFRLEVBQUUsRUFBRTtvQkFDMUQsU0FBUyxFQUFFLENBQUM7b0JBQ1osT0FBTyxHQUFHLENBQUM7Z0JBQ2YsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBUSxFQUFFLEVBQUU7b0JBQ2xCLFNBQVMsRUFBRSxDQUFDO29CQUNaLE1BQU0sR0FBRyxDQUFDO2dCQUNkLENBQUMsQ0FBQyxDQUFDO2dCQUVILEtBQUssQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLFFBQVEsQ0FBQyxDQUFDO2dCQUNsQyxPQUFPLFFBQVEsQ0FBQztZQUNwQixDQUFDO1NBQ0osQ0FBQztJQUNOLENBQUMsQ0FBQztBQUNOLENBQUM7Ozs7Ozs7OztBQ3JERDtBQUFBLElBQVksY0FRWDtBQVJELFdBQVksY0FBYztJQUN0QixxRUFBaUI7SUFDakIsMkZBQTRCO0lBQzVCLDJGQUE0QjtJQUM1Qix1RkFBMEI7SUFDMUIsbUZBQXdCO0lBQ3hCLDZHQUFxQztJQUNyQyx5R0FBbUM7QUFDdkMsQ0FBQyxFQVJXLGNBQWMsS0FBZCxjQUFjLFFBUXpCOzs7Ozs7Ozs7QUNSRDtBQUFBO0FBQXdEO0FBRWpELE1BQU0sT0FBUSxTQUFRLDJFQUFZO0lBUXJDLFlBQVksT0FBWSxJQUFJO1FBQ3hCLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNaLElBQUksSUFBSSxJQUFJLElBQUksRUFBRTtZQUNkLE9BQU87U0FDVjtRQUNELElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDakUsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDL0MsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDakQsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDckQsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDbkQsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDakQsQ0FBQztDQUNKOzs7Ozs7Ozs7QUN0QkQ7QUFBQTtBQUF3RDtBQUlqRCxNQUFNLFFBQVMsU0FBUSwyRUFBWTtJQUt0QyxZQUFZLE9BQVksSUFBSTtRQUN4QixLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDWixJQUFJLElBQUksSUFBSSxJQUFJLEVBQUU7WUFDZCxPQUFPO1NBQ1Y7UUFDRCxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM3QyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM3QyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNuRCxDQUFDO0NBQ0o7Ozs7Ozs7OztBQ2xCRDtBQUFBO0FBQXdEO0FBRWpELE1BQU0sV0FBWSxTQUFRLDJFQUFZO0lBb0J6QyxZQUFZLE9BQVksSUFBSTtRQUN4QixLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDWixJQUFJLElBQUksSUFBSSxJQUFJLEVBQUU7WUFDZCxPQUFPO1NBQ1Y7UUFDRCxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMvQyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUN2RCxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUN6RCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNyRCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNyRCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNyRCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNyRCxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM3QyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMvQyxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUN6RCxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNuRCxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNuRCxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMvQyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMvQyxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMzQyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNyRCxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ2pFLElB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QU07SUFDTixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsU0FBUztJQUNULFFBQVE7SUFDUixVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixRQUFRO0lBQ1IsUUFBUTtJQUNSLFNBQVM7SUFDVCxXQUFXO0lBQ1gsV0FBVztJQUNYLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsVUFBVTtJQUNWLFFBQVE7SUFDUixNQUFNO0lBQ04sT0FBTztJQUNQLFVBQVU7SUFDVixTQUFTO0lBQ1QsTUFBTTtJQUNOLFNBQVM7SUFDVCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFFBQVE7SUFDUixVQUFVO0lBQ1YsV0FBVztJQUNYLFFBQVE7SUFDUixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsTUFBTTtJQUNOLFNBQVM7SUFDVCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsV0FBVztJQUNYLE1BQU07SUFDTixRQUFRO0lBQ1IsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxRQUFRO0lBQ1IsT0FBTztJQUNQLFdBQVc7SUFDWCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFNBQVM7SUFDVCxRQUFRO0lBQ1IsUUFBUTtJQUNSLFVBQVU7SUFDVixPQUFPO0lBQ1AsUUFBUTtJQUNSLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsTUFBTTtJQUNOLFNBQVM7SUFDVCxRQUFRO0lBQ1IsUUFBUTtJQUNSLE9BQU87SUFDUCxXQUFXO0lBQ1gsUUFBUTtJQUNSLE9BQU87SUFDUCxTQUFTO0lBQ1QsT0FBTztJQUNQLFVBQVU7SUFDVixTQUFTO0lBQ1QsV0FBVztJQUNYLE9BQU87SUFDUCxXQUFXO0lBQ1gsV0FBVztJQUNYLFFBQVE7SUFDUixVQUFVO0lBQ1YsV0FBVztJQUNYLFNBQVM7SUFDVCxPQUFPO0lBQ1AsTUFBTTtJQUNOLE1BQU07SUFDTixNQUFNO0lBQ04sS0FBSztJQUNMLE1BQU07SUFDTixXQUFXO0lBQ1gsT0FBTztJQUNQLFdBQVc7SUFDWCxPQUFPO0lBQ1AsU0FBUztJQUNULFNBQVM7SUFDVCxXQUFXO0lBQ1gsT0FBTztJQUNQLE9BQU87SUFDUCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFFBQVE7SUFDUixPQUFPO0lBQ1AsT0FBTztJQUNQLFVBQVU7SUFDVixVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixRQUFRO0lBQ1IsTUFBTTtJQUNOLE9BQU87SUFDUCxPQUFPO0lBQ1AsT0FBTztJQUNQLFdBQVc7SUFDWCxPQUFPO0lBQ1AsVUFBVTtJQUNWLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLE1BQU07SUFDTixVQUFVO0lBQ1YsUUFBUTtJQUNSLFFBQVE7SUFDUixVQUFVO0lBQ1YsT0FBTztJQUNQLFdBQVc7SUFDWCxPQUFPO0lBQ1AsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFdBQVc7SUFDWCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLE1BQU07SUFDTixPQUFPO0lBQ1AsT0FBTztJQUNQLE9BQU87SUFDUCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFNBQVM7SUFDVCxVQUFVO0lBQ1YsT0FBTztJQUNQLFFBQVE7SUFDUixVQUFVO0lBQ1YsT0FBTztJQUNQLFdBQVc7SUFDWCxTQUFTO0lBQ1QsT0FBTztJQUNQLE9BQU87SUFDUCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFFBQVE7SUFDUixXQUFXO0lBQ1gsUUFBUTtJQUNSLFNBQVM7SUFDVCxVQUFVO0lBQ1YsV0FBVztJQUNYLFNBQVM7SUFDVCxXQUFXO0lBQ1gsU0FBUztJQUNULFFBQVE7SUFDUixTQUFTO0lBQ1QsU0FBUztJQUNULFNBQVM7SUFDVCxRQUFRO0lBQ1IsUUFBUTtJQUNSLFVBQVU7SUFDVixNQUFNO0lBQ04sV0FBVztJQUNYLFNBQVM7SUFDVCxPQUFPO0lBQ1AsUUFBUTtJQUNSLFFBQVE7SUFDUixRQUFRO0lBQ1IsU0FBUztJQUNULFNBQVM7SUFDVCxXQUFXO0lBQ1gsV0FBVztJQUNYLFNBQVM7SUFDVCxRQUFRO0lBQ1IsU0FBUztJQUNULFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLE9BQU87SUFDUCxXQUFXO0lBQ1gsT0FBTztJQUNQLE9BQU87SUFDUCxVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixTQUFTO0lBQ1QsV0FBVztJQUNYLFNBQVM7SUFDVCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsUUFBUTtJQUNSLFNBQVM7SUFDVCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFFBQVE7SUFDUixVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFNBQVM7SUFDVCxPQUFPO0lBQ1AsT0FBTztJQUNQLFNBQVM7SUFDVCxRQUFRO0lBQ1IsU0FBUztJQUNULFFBQVE7SUFDUixVQUFVO0lBQ1YsVUFBVTtJQUNWLFNBQVM7SUFDVCxRQUFRO0lBQ1IsVUFBVTtJQUNWLE9BQU87SUFDUCxRQUFRO0lBQ1IsU0FBUztJQUNULFdBQVc7SUFDWCxRQUFRO0lBQ1IsU0FBUztJQUNULFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsU0FBUztJQUNULFVBQVU7SUFDVixPQUFPO0lBQ1AsV0FBVztJQUNYLFdBQVc7SUFDWCxTQUFTO0lBQ1QsT0FBTztJQUNQLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFNBQVM7SUFDVCxTQUFTO0lBQ1QsT0FBTztJQUNQLE9BQU87SUFDUCxVQUFVO0lBQ1YsT0FBTztJQUNQLE1BQU07SUFDTixVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsTUFBTTtJQUNOLE9BQU87SUFDUCxVQUFVO0lBQ1YsVUFBVTtJQUNWLE9BQU87SUFDUCxPQUFPO0lBQ1AsV0FBVztJQUNYLFNBQVM7SUFDVCxVQUFVO0lBQ1YsT0FBTztJQUNQLFFBQVE7SUFDUixTQUFTO0lBQ1QsUUFBUTtJQUNSLFNBQVM7SUFDVCxTQUFTO0lBQ1QsU0FBUztJQUNULFFBQVE7SUFDUixTQUFTO0lBQ1QsTUFBTTtJQUNOLE9BQU87SUFDUCxPQUFPO0lBQ1AsUUFBUTtJQUNSLFNBQVM7SUFDVCxTQUFTO0lBQ1QsT0FBTztJQUNQLFFBQVE7SUFDUixTQUFTO0lBQ1QsUUFBUTtJQUNSLFdBQVc7SUFDWCxVQUFVO0lBQ1YsT0FBTztJQUNQLEtBQUs7SUFDTCxRQUFRO0lBQ1IsV0FBVztJQUNYLFFBQVE7SUFDUixXQUFXO0lBQ1gsU0FBUztJQUNULE9BQU87SUFDUCxPQUFPO0lBQ1AsTUFBTTtJQUNOLE9BQU87SUFDUCxPQUFPO0lBQ1AsUUFBUTtJQUNSLFdBQVc7SUFDWCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFFBQVE7SUFDUixTQUFTO0lBQ1QsVUFBVTtJQUNWLFNBQVM7SUFDVCxTQUFTO0lBQ1QsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFVBQVU7SUFDVixPQUFPO0lBQ1AsTUFBTTtJQUNOLFVBQVU7SUFDVixNQUFNO0lBQ04sUUFBUTtJQUNSLFdBQVc7SUFDWCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFFBQVE7SUFDUixTQUFTO0lBQ1QsV0FBVztJQUNYLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFFBQVE7SUFDUixPQUFPO0lBQ1AsUUFBUTtJQUNSLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVixTQUFTO0lBQ1QsV0FBVztJQUNYLFVBQVU7SUFDVixTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixPQUFPO0lBQ1AsVUFBVTtJQUNWLFdBQVc7SUFDWCxRQUFRO0lBQ1IsV0FBVztJQUNYLFFBQVE7SUFDUixRQUFRO0lBQ1IsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxRQUFRO0lBQ1IsUUFBUTtJQUNSLFVBQVU7SUFDVixRQUFRO0lBQ1IsU0FBUztJQUNULFVBQVU7SUFDVixPQUFPO0lBQ1AsVUFBVTtJQUNWLFNBQVM7SUFDVCxNQUFNO0lBQ04sT0FBTztJQUNQLE9BQU87SUFDUCxRQUFRO0lBQ1IsT0FBTztJQUNQLE9BQU87SUFDUCxRQUFRO0lBQ1IsU0FBUztJQUNULFFBQVE7SUFDUixPQUFPO0lBQ1AsTUFBTTtJQUNOLE1BQU07SUFDTixRQUFRO0lBQ1IsVUFBVTtJQUNWLFFBQVE7SUFDUixRQUFRO0lBQ1IsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFFBQVE7SUFDUixRQUFRO0lBQ1IsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsU0FBUztJQUNULFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFdBQVc7SUFDWCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLE9BQU87SUFDUCxVQUFVO0lBQ1YsV0FBVztJQUNYLFFBQVE7SUFDUixPQUFPO0lBQ1AsU0FBUztJQUNULE9BQU87SUFDUCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFVBQVU7SUFDVixPQUFPO0lBQ1AsUUFBUTtJQUNSLFNBQVM7SUFDVCxRQUFRO0lBQ1IsUUFBUTtJQUNSLFdBQVc7SUFDWCxTQUFTO0lBQ1QsT0FBTztJQUNQLFNBQVM7SUFDVCxVQUFVO0lBQ1YsT0FBTztJQUNQLFFBQVE7SUFDUixVQUFVO0lBQ1YsUUFBUTtJQUNSLFNBQVM7SUFDVCxXQUFXO0lBQ1gsU0FBUztJQUNULE9BQU87SUFDUCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFFBQVE7SUFDUixRQUFRO0lBQ1IsVUFBVTtJQUNWLE9BQU87SUFDUCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFFBQVE7SUFDUixRQUFRO0lBQ1IsU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsUUFBUTtJQUNSLFdBQVc7SUFDWCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFVBQVU7SUFDVixRQUFRO0lBQ1IsU0FBUztJQUNULFFBQVE7SUFDUixTQUFTO0lBQ1QsT0FBTztJQUNQLFVBQVU7SUFDVixTQUFTO0lBQ1QsVUFBVTtJQUNWLFFBQVE7SUFDUixTQUFTO0lBQ1QsUUFBUTtJQUNSLE1BQU07SUFDTixXQUFXO0lBQ1gsU0FBUztJQUNULFdBQVc7SUFDWCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsTUFBTTtJQUNOLFdBQVc7SUFDWCxRQUFRO0lBQ1IsT0FBTztJQUNQLE9BQU87SUFDUCxPQUFPO0lBQ1AsUUFBUTtJQUNSLFFBQVE7SUFDUixPQUFPO0lBQ1AsTUFBTTtJQUNOLE9BQU87SUFDUCxNQUFNO0lBQ04sV0FBVztJQUNYLFVBQVU7SUFDVixXQUFXO0lBQ1gsU0FBUztJQUNULFNBQVM7SUFDVCxRQUFRO0lBQ1IsUUFBUTtJQUNSLFNBQVM7SUFDVCxTQUFTO0lBQ1QsU0FBUztJQUNULE9BQU87SUFDUCxNQUFNO0lBQ04sT0FBTztJQUNQLFNBQVM7SUFDVCxXQUFXO0lBQ1gsV0FBVztJQUNYLE9BQU87SUFDUCxXQUFXO0lBQ1gsV0FBVztJQUNYLE9BQU87SUFDUCxVQUFVO0lBQ1YsV0FBVztJQUNYLFFBQVE7SUFDUixTQUFTO0lBQ1QsUUFBUTtJQUNSLE9BQU87SUFDUCxPQUFPO0lBQ1AsU0FBUztJQUNULE9BQU87SUFDUCxPQUFPO0lBQ1AsVUFBVTtJQUNWLE9BQU87SUFDUCxPQUFPO0lBQ1AsU0FBUztJQUNULFNBQVM7SUFDVCxVQUFVO0lBQ1YsUUFBUTtJQUNSLE1BQU07SUFDTixVQUFVO0lBQ1YsT0FBTztJQUNQLFVBQVU7SUFDVixTQUFTO0lBQ1QsVUFBVTtJQUNWLE1BQU07SUFDTixNQUFNO0lBQ04sVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsTUFBTTtJQUNOLFFBQVE7SUFDUixTQUFTO0lBQ1QsT0FBTztJQUNQLFFBQVE7SUFDUixXQUFXO0lBQ1gsT0FBTztJQUNQLE9BQU87SUFDUCxTQUFTO0lBQ1QsUUFBUTtJQUNSLE9BQU87SUFDUCxPQUFPO0lBQ1AsVUFBVTtJQUNWLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLE1BQU07SUFDTixRQUFRO0lBQ1IsU0FBUztJQUNULFFBQVE7SUFDUixRQUFRO0lBQ1IsU0FBUztJQUNULFNBQVM7SUFDVCxXQUFXO0lBQ1gsTUFBTTtJQUNOLFFBQVE7SUFDUixRQUFRO0lBQ1IsT0FBTztJQUNQLE1BQU07SUFDTixLQUFLO0lBQ0wsU0FBUztJQUNULE1BQU07SUFDTixTQUFTO0lBQ1QsUUFBUTtJQUNSLFNBQVM7SUFDVCxVQUFVO0lBQ1YsT0FBTztJQUNQLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLE9BQU87SUFDUCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFFBQVE7SUFDUixPQUFPO0lBQ1AsTUFBTTtJQUNOLFdBQVc7SUFDWCxXQUFXO0lBQ1gsTUFBTTtJQUNOLFdBQVc7SUFDWCxRQUFRO0lBQ1IsT0FBTztJQUNQLFFBQVE7SUFDUixTQUFTO0lBQ1QsVUFBVTtJQUNWLFNBQVM7SUFDVCxPQUFPO0lBQ1AsT0FBTztJQUNQLE9BQU87SUFDUCxRQUFRO0lBQ1IsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsTUFBTTtJQUNOLFdBQVc7SUFDWCxVQUFVO0lBQ1YsUUFBUTtJQUNSLE9BQU87SUFDUCxNQUFNO0lBQ04sUUFBUTtJQUNSLFVBQVU7SUFDVixRQUFRO0lBQ1IsUUFBUTtJQUNSLFVBQVU7SUFDVixRQUFRO0lBQ1IsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFFBQVE7SUFDUixPQUFPO0lBQ1AsUUFBUTtJQUNSLFNBQVM7SUFDVCxNQUFNO0lBQ04sUUFBUTtJQUNSLFFBQVE7SUFDUixVQUFVO0lBQ1YsV0FBVztJQUNYLFNBQVM7SUFDVCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFFBQVE7SUFDUixVQUFVO0lBQ1YsU0FBUztJQUNULFNBQVM7SUFDVCxPQUFPO0lBQ1AsT0FBTztJQUNQLE9BQU87SUFDUCxPQUFPO0lBQ1AsU0FBUztJQUNULFNBQVM7SUFDVCxRQUFRO0lBQ1IsV0FBVztJQUNYLE1BQU07SUFDTixPQUFPO0lBQ1AsT0FBTztJQUNQLFNBQVM7SUFDVCxTQUFTO0lBQ1QsV0FBVztJQUNYLFNBQVM7SUFDVCxTQUFTO0lBQ1QsV0FBVztJQUNYLFdBQVc7SUFDWCxTQUFTO0lBQ1QsU0FBUztJQUNULFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFNBQVM7SUFDVCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFFBQVE7SUFDUixXQUFXO0lBQ1gsUUFBUTtJQUNSLFFBQVE7SUFDUixVQUFVO0lBQ1YsT0FBTztJQUNQLE9BQU87SUFDUCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFdBQVc7SUFDWCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFVBQVU7SUFDVixRQUFRO0lBQ1IsVUFBVTtJQUNWLE9BQU87SUFDUCxPQUFPO0lBQ1AsVUFBVTtJQUNWLE9BQU87SUFDUCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFVBQVU7SUFDVixRQUFRO0lBQ1IsV0FBVztJQUNYLFFBQVE7SUFDUixRQUFRO0lBQ1IsUUFBUTtJQUNSLFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFNBQVM7SUFDVCxPQUFPO0lBQ1AsUUFBUTtJQUNSLFNBQVM7SUFDVCxRQUFRO0lBQ1IsUUFBUTtJQUNSLFNBQVM7SUFDVCxTQUFTO0lBQ1QsT0FBTztJQUNQLE1BQU07SUFDTixPQUFPO0lBQ1AsV0FBVztJQUNYLFFBQVE7SUFDUixNQUFNO0lBQ04sU0FBUztJQUNULFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsU0FBUztJQUNULFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixPQUFPO0lBQ1AsT0FBTztJQUNQLFFBQVE7SUFDUixRQUFRO0lBQ1IsUUFBUTtJQUNSLFNBQVM7SUFDVCxXQUFXO0lBQ1gsVUFBVTtJQUNWLE9BQU87SUFDUCxNQUFNO0lBQ04sUUFBUTtJQUNSLE1BQU07SUFDTixRQUFRO0lBQ1IsU0FBUztJQUNULE1BQU07SUFDTixVQUFVO0lBQ1YsTUFBTTtJQUNOLFFBQVE7SUFDUixTQUFTO0lBQ1QsUUFBUTtJQUNSLFdBQVc7SUFDWCxPQUFPO0lBQ1AsU0FBUztJQUNULE9BQU87SUFDUCxRQUFRO0lBQ1IsT0FBTztJQUNQLFFBQVE7SUFDUixRQUFRO0lBQ1IsT0FBTztJQUNQLE9BQU87SUFDUCxVQUFVO0lBQ1YsU0FBUztJQUNULE1BQU07SUFDTixTQUFTO0lBQ1QsTUFBTTtJQUNOLFVBQVU7SUFDVixVQUFVO0lBQ1YsU0FBUztJQUNULFdBQVc7SUFDWCxVQUFVO0lBQ1YsU0FBUztJQUNULFdBQVc7SUFDWCxNQUFNO0lBQ04sU0FBUztJQUNULFNBQVM7SUFDVCxTQUFTO0lBQ1QsV0FBVztJQUNYLE9BQU87SUFDUCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFFBQVE7SUFDUixVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixRQUFRO0lBQ1IsT0FBTztJQUNQLFFBQVE7SUFDUixRQUFRO0lBQ1IsU0FBUztJQUNULFFBQVE7SUFDUixPQUFPO0lBQ1AsTUFBTTtJQUNOLFFBQVE7SUFDUixVQUFVO0lBQ1YsVUFBVTtJQUNWLFFBQVE7SUFDUixTQUFTO0lBQ1QsUUFBUTtJQUNSLFFBQVE7SUFDUixRQUFRO0lBQ1IsT0FBTztJQUNQLFdBQVc7SUFDWCxRQUFRO0lBQ1IsU0FBUztJQUNULFFBQVE7SUFDUixTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixNQUFNO0lBQ04sV0FBVztJQUNYLFNBQVM7SUFDVCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFdBQVc7SUFDWCxTQUFTO0lBQ1QsU0FBUztJQUNULFNBQVM7SUFDVCxXQUFXO0lBQ1gsU0FBUztJQUNULFdBQVc7SUFDWCxTQUFTO0lBQ1QsU0FBUztJQUNULE9BQU87SUFDUCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFdBQVc7SUFDWCxRQUFRO0lBQ1IsU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFFBQVE7SUFDUixXQUFXO0lBQ1gsT0FBTztJQUNQLFFBQVE7SUFDUixTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixTQUFTO0lBQ1QsV0FBVztJQUNYLFVBQVU7SUFDVixXQUFXO0lBQ1gsT0FBTztJQUNQLFdBQVc7SUFDWCxXQUFXO0lBQ1gsU0FBUztJQUNULFNBQVM7SUFDVCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFdBQVc7SUFDWCxPQUFPO0lBQ1AsUUFBUTtJQUNSLFVBQVU7SUFDVixRQUFRO0lBQ1IsU0FBUztJQUNULFdBQVc7SUFDWCxXQUFXO0lBQ1gsT0FBTztJQUNQLFNBQVM7SUFDVCxTQUFTO0lBQ1QsU0FBUztJQUNULE1BQU07SUFDTixNQUFNO0lBQ04sUUFBUTtJQUNSLFFBQVE7SUFDUixRQUFRO0lBQ1IsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFNBQVM7SUFDVCxXQUFXO0lBQ1gsU0FBUztJQUNULFVBQVU7SUFDVixRQUFRO0lBQ1IsU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsU0FBUztJQUNULFdBQVc7SUFDWCxVQUFVO0lBQ1YsU0FBUztJQUNULFFBQVE7SUFDUixRQUFRO0lBQ1IsUUFBUTtJQUNSLFNBQVM7SUFDVCxXQUFXO0lBQ1gsUUFBUTtJQUNSLE9BQU87SUFDUCxTQUFTO0lBQ1QsV0FBVztJQUNYLFFBQVE7SUFDUixRQUFRO0lBQ1IsV0FBVztJQUNYLE9BQU87SUFDUCxTQUFTO0lBQ1QsV0FBVztJQUNYLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFNBQVM7SUFDVCxRQUFRO0lBQ1IsUUFBUTtJQUNSLE9BQU87SUFDUCxRQUFRO0lBQ1IsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsUUFBUTtJQUNSLFFBQVE7SUFDUixRQUFRO0lBQ1IsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixPQUFPO0lBQ1AsVUFBVTtJQUNWLE9BQU87SUFDUCxPQUFPO0lBQ1AsU0FBUztJQUNULFdBQVc7SUFDWCxTQUFTO0lBQ1QsV0FBVztJQUNYLFVBQVU7SUFDVixRQUFRO0lBQ1IsUUFBUTtJQUNSLFNBQVM7SUFDVCxPQUFPO0lBQ1AsT0FBTztJQUNQLFdBQVc7SUFDWCxVQUFVO0lBQ1YsU0FBUztJQUNULE9BQU87SUFDUCxTQUFTO0lBQ1QsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixTQUFTO0lBQ1QsU0FBUztJQUNULE9BQU87SUFDUCxTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixPQUFPO0lBQ1AsU0FBUztJQUNULFFBQVE7SUFDUixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsVUFBVTtJQUNWLFFBQVE7SUFDUixVQUFVO0lBQ1YsU0FBUztJQUNULE9BQU87SUFDUCxPQUFPO0lBQ1AsUUFBUTtJQUNSLFFBQVE7SUFDUixNQUFNO0lBQ04sV0FBVztJQUNYLFNBQVM7SUFDVCxPQUFPO0lBQ1AsV0FBVztJQUNYLFFBQVE7SUFDUixPQUFPO0lBQ1AsT0FBTztJQUNQLFNBQVM7SUFDVCxPQUFPO0lBQ1AsVUFBVTtJQUNWLFFBQVE7SUFDUixTQUFTO0lBQ1QsT0FBTztJQUNQLE9BQU87SUFDUCxXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxPQUFPO0lBQ1AsT0FBTztJQUNQLE9BQU87SUFDUCxNQUFNO0lBQ04sVUFBVTtJQUNWLFFBQVE7SUFDUixVQUFVO0lBQ1YsVUFBVTtJQUNWLE9BQU87SUFDUCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFFBQVE7SUFDUixXQUFXO0lBQ1gsU0FBUztJQUNULE9BQU87SUFDUCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFFBQVE7SUFDUixNQUFNO0lBQ04sUUFBUTtJQUNSLFNBQVM7SUFDVCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFFBQVE7SUFDUixPQUFPO0lBQ1AsTUFBTTtJQUNOLFFBQVE7SUFDUixPQUFPO0lBQ1AsT0FBTztJQUNQLE9BQU87SUFDUCxPQUFPO0lBQ1AsT0FBTztJQUNQLFVBQVU7SUFDVixPQUFPO0lBQ1AsUUFBUTtJQUNSLFVBQVU7SUFDVixRQUFRO0lBQ1IsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsUUFBUTtJQUNSLFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFNBQVM7SUFDVCxRQUFRO0lBQ1IsUUFBUTtJQUNSLE1BQU07SUFDTixPQUFPO0lBQ1AsT0FBTztJQUNQLE1BQU07SUFDTixPQUFPO0lBQ1AsVUFBVTtJQUNWLFFBQVE7SUFDUixRQUFRO0lBQ1IsT0FBTztJQUNQLFdBQVc7SUFDWCxPQUFPO0lBQ1AsVUFBVTtJQUNWLFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFNBQVM7SUFDVCxVQUFVO0lBQ1YsU0FBUztJQUNULE9BQU87SUFDUCxPQUFPO0lBQ1AsT0FBTztJQUNQLFNBQVM7SUFDVCxRQUFRO0lBQ1IsVUFBVTtJQUNWLE1BQU07SUFDTixNQUFNO0lBQ04sT0FBTztJQUNQLE9BQU87SUFDUCxPQUFPO0lBQ1AsU0FBUztJQUNULE9BQU87SUFDUCxRQUFRO0lBQ1IsV0FBVztJQUNYLFVBQVU7SUFDVixPQUFPO0lBQ1AsUUFBUTtJQUNSLFNBQVM7SUFDVCxRQUFRO0lBQ1IsU0FBUztJQUNULFVBQVU7SUFDVixPQUFPO0lBQ1AsUUFBUTtJQUNSLFVBQVU7SUFDVixNQUFNO0lBQ04sUUFBUTtJQUNSLE9BQU87SUFDUCxTQUFTO0lBQ1QsT0FBTztJQUNQLE9BQU87SUFDUCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLE9BQU87SUFDUCxRQUFRO0lBQ1IsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsT0FBTztJQUNQLFVBQVU7SUFDVixRQUFRO0lBQ1IsUUFBUTtJQUNSLFdBQVc7SUFDWCxRQUFRO0lBQ1IsU0FBUztJQUNULE9BQU87SUFDUCxXQUFXO0lBQ1gsU0FBUztJQUNULFNBQVM7SUFDVCxVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxNQUFNO0lBQ04sVUFBVTtJQUNWLFFBQVE7SUFDUixTQUFTO0lBQ1QsUUFBUTtJQUNSLE9BQU87SUFDUCxTQUFTO0lBQ1QsS0FBSztJQUNMLFVBQVU7SUFDVixRQUFRO0lBQ1IsU0FBUztJQUNULFFBQVE7SUFDUixXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsTUFBTTtJQUNOLE1BQU07SUFDTixNQUFNO0lBQ04sTUFBTTtJQUNOLFVBQVU7SUFDVixVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixRQUFRO0lBQ1IsV0FBVztJQUNYLFdBQVc7SUFDWCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixRQUFRO0lBQ1IsVUFBVTtJQUNWLE1BQU07SUFDTixNQUFNO0lBQ04sTUFBTTtJQUNOLFNBQVM7SUFDVCxPQUFPO0lBQ1AsT0FBTztJQUNQLFFBQVE7SUFDUixPQUFPO0lBQ1AsVUFBVTtJQUNWLFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFNBQVM7SUFDVCxXQUFXO0lBQ1gsV0FBVztJQUNYLFFBQVE7SUFDUixXQUFXO0lBQ1gsU0FBUztJQUNULFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFNBQVM7SUFDVCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFNBQVM7SUFDVCxRQUFRO0lBQ1IsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFNBQVM7SUFDVCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFdBQVc7SUFDWCxTQUFTO0lBQ1QsU0FBUztJQUNULFNBQVM7SUFDVCxVQUFVO0lBQ1YsU0FBUztJQUNULFdBQVc7SUFDWCxTQUFTO0lBQ1QsT0FBTztJQUNQLFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixRQUFRO0lBQ1IsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsU0FBUztJQUNULFdBQVc7SUFDWCxXQUFXO0lBQ1gsU0FBUztJQUNULE1BQU07SUFDTixTQUFTO0lBQ1QsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsV0FBVztJQUNYLFNBQVM7SUFDVCxVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsU0FBUztJQUNULFNBQVM7SUFDVCxXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsU0FBUztJQUNULFdBQVc7SUFDWCxVQUFVO0lBQ1YsU0FBUztJQUNULFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFNBQVM7SUFDVCxTQUFTO0lBQ1QsU0FBUztJQUNULFNBQVM7SUFDVCxVQUFVO0lBQ1YsU0FBUztJQUNULFdBQVc7SUFDWCxTQUFTO0lBQ1QsU0FBUztJQUNULFdBQVc7SUFDWCxNQUFNO0lBQ04sUUFBUTtJQUNSLFFBQVE7SUFDUixTQUFTO0lBQ1QsUUFBUTtJQUNSLFNBQVM7SUFDVCxRQUFRO0lBQ1IsTUFBTTtJQUNOLE9BQU87SUFDUCxNQUFNO0lBQ04sVUFBVTtJQUNWLFdBQVc7SUFDWCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFFBQVE7SUFDUixRQUFRO0lBQ1IsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxPQUFPO0lBQ1AsVUFBVTtJQUNWLFNBQVM7SUFDVCxVQUFVO0lBQ1YsV0FBVztJQUNYLFFBQVE7SUFDUixTQUFTO0lBQ1QsVUFBVTtJQUNWLFNBQVM7SUFDVCxXQUFXO0lBQ1gsV0FBVztJQUNYLFNBQVM7SUFDVCxRQUFRO0lBQ1IsUUFBUTtJQUNSLFVBQVU7SUFDVixXQUFXO0lBQ1gsUUFBUTtJQUNSLFFBQVE7SUFDUixXQUFXO0lBQ1gsTUFBTTtJQUNOLFNBQVM7SUFDVCxRQUFRO0lBQ1IsT0FBTztJQUNQLE9BQU87SUFDUCxPQUFPO0lBQ1AsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLFNBQVM7SUFDVCxRQUFRO0lBQ1IsU0FBUztJQUNULFVBQVU7SUFDVixPQUFPO0lBQ1AsU0FBUztJQUNULFVBQVU7SUFDVixTQUFTO0lBQ1QsUUFBUTtJQUNSLFVBQVU7SUFDVixNQUFNO0lBQ04sVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFFBQVE7SUFDUixVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFFBQVE7SUFDUixPQUFPO0lBQ1AsV0FBVztJQUNYLE9BQU87SUFDUCxTQUFTO0lBQ1QsU0FBUztJQUNULE9BQU87SUFDUCxPQUFPO0lBQ1AsT0FBTztJQUNQLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsUUFBUTtJQUNSLFFBQVE7SUFDUixTQUFTO0lBQ1QsV0FBVztJQUNYLE9BQU87SUFDUCxTQUFTO0lBQ1QsU0FBUztJQUNULFdBQVc7SUFDWCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFdBQVc7SUFDWCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixRQUFRO0lBQ1IsT0FBTztJQUNQLE9BQU87SUFDUCxRQUFRO0lBQ1IsT0FBTztJQUNQLE9BQU87SUFDUCxVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsU0FBUztJQUNULFVBQVU7SUFDVixTQUFTO0lBQ1QsVUFBVTtJQUNWLE1BQU07SUFDTixTQUFTO0lBQ1QsT0FBTztJQUNQLE9BQU87SUFDUCxPQUFPO0lBQ1AsU0FBUztJQUNULFFBQVE7SUFDUixVQUFVO0lBQ1YsU0FBUztJQUNULFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFNBQVM7SUFDVCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFVBQVU7SUFDVixTQUFTO0lBQ1QsT0FBTztJQUNQLE9BQU87SUFDUCxPQUFPO0lBQ1AsT0FBTztJQUNQLE1BQU07SUFDTixPQUFPO0lBQ1AsUUFBUTtJQUNSLFNBQVM7SUFDVCxTQUFTO0lBQ1QsT0FBTztJQUNQLE9BQU87SUFDUCxTQUFTO0lBQ1QsU0FBUztJQUNULFdBQVc7SUFDWCxTQUFTO0lBQ1QsV0FBVztJQUNYLFNBQVM7SUFDVCxPQUFPO0lBQ1AsV0FBVztJQUNYLFFBQVE7SUFDUixTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsU0FBUztJQUNULFNBQVM7SUFDVCxVQUFVO0lBQ1YsT0FBTztJQUNQLE1BQU07SUFDTixRQUFRO0lBQ1IsU0FBUztJQUNULFNBQVM7SUFDVCxXQUFXO0lBQ1gsTUFBTTtJQUNOLFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFFBQVE7SUFDUixRQUFRO0lBQ1IsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFNBQVM7SUFDVCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFNBQVM7SUFDVCxXQUFXO0lBQ1gsU0FBUztJQUNULE9BQU87SUFDUCxRQUFRO0lBQ1IsU0FBUztJQUNULFNBQVM7SUFDVCxTQUFTO0lBQ1QsUUFBUTtJQUNSLE1BQU07SUFDTixRQUFRO0lBQ1IsUUFBUTtJQUNSLFFBQVE7SUFDUixRQUFRO0lBQ1IsV0FBVztJQUNYLFNBQVM7SUFDVCxPQUFPO0lBQ1AsT0FBTztJQUNQLE9BQU87SUFDUCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFNBQVM7SUFDVCxRQUFRO0lBQ1IsUUFBUTtJQUNSLFdBQVc7SUFDWCxPQUFPO0lBQ1AsT0FBTztJQUNQLE9BQU87SUFDUCxNQUFNO0lBQ04sUUFBUTtJQUNSLFNBQVM7SUFDVCxXQUFXO0lBQ1gsU0FBUztJQUNULFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLFNBQVM7SUFDVCxLQUFLO0lBQ0wsT0FBTztJQUNQLFFBQVE7SUFDUixTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixRQUFRO0lBQ1IsV0FBVztJQUNYLFdBQVc7SUFDWCxLQUFLO0lBQ0wsS0FBSztJQUNMLFVBQVU7SUFDVixRQUFRO0lBQ1IsT0FBTztJQUNQLFVBQVU7SUFDVixRQUFRO0lBQ1IsT0FBTztJQUNQLE9BQU87SUFDUCxVQUFVO0lBQ1YsT0FBTztJQUNQLFNBQVM7SUFDVCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFVBQVU7SUFDVixPQUFPO0lBQ1AsUUFBUTtJQUNSLFFBQVE7SUFDUixVQUFVO0lBQ1YsV0FBVztJQUNYLE9BQU87SUFDUCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsTUFBTTtJQUNOLE1BQU07SUFDTixXQUFXO0lBQ1gsTUFBTTtJQUNOLFdBQVc7SUFDWCxNQUFNO0lBQ04sVUFBVTtJQUNWLFFBQVE7SUFDUixVQUFVO0lBQ1YsVUFBVTtJQUNWLFNBQVM7SUFDVCxNQUFNO0lBQ04sUUFBUTtJQUNSLFVBQVU7SUFDVixTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsU0FBUztJQUNULFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFFBQVE7SUFDUixXQUFXO0lBQ1gsVUFBVTtJQUNWLFFBQVE7SUFDUixTQUFTO0lBQ1QsV0FBVztJQUNYLE9BQU87SUFDUCxNQUFNO0lBQ04sV0FBVztJQUNYLFFBQVE7SUFDUixVQUFVO0lBQ1YsT0FBTztJQUNQLFNBQVM7SUFDVCxVQUFVO0lBQ1YsUUFBUTtJQUNSLE9BQU87SUFDUCxRQUFRO0lBQ1IsUUFBUTtJQUNSLE9BQU87SUFDUCxPQUFPO0lBQ1AsV0FBVztJQUNYLE9BQU87SUFDUCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFNBQVM7SUFDVCxRQUFRO0lBQ1IsV0FBVztJQUNYLFdBQVc7SUFDWCxTQUFTO0lBQ1QsV0FBVztJQUNYLFNBQVM7SUFDVCxXQUFXO0lBQ1gsVUFBVTtJQUNWLE1BQU07SUFDTixVQUFVO0lBQ1YsU0FBUztJQUNULFFBQVE7SUFDUixXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxPQUFPO0lBQ1AsVUFBVTtJQUNWLFFBQVE7SUFDUixVQUFVO0lBQ1YsV0FBVztJQUNYLFFBQVE7SUFDUixRQUFRO0lBQ1IsTUFBTTtJQUNOLE1BQU07SUFDTixRQUFRO0lBQ1IsUUFBUTtJQUNSLFVBQVU7SUFDVixRQUFRO0lBQ1IsVUFBVTtJQUNWLFFBQVE7SUFDUixTQUFTO0lBQ1QsUUFBUTtJQUNSLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVixTQUFTO0lBQ1QsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFNBQVM7SUFDVCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFFBQVE7SUFDUixVQUFVO0lBQ1YsU0FBUztJQUNULFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxPQUFPO0lBQ1AsVUFBVTtJQUNWLFNBQVM7SUFDVCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFFBQVE7SUFDUixNQUFNO0lBQ04sVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFdBQVc7SUFDWCxPQUFPO0lBQ1AsVUFBVTtJQUNWLE9BQU87SUFDUCxVQUFVO0lBQ1YsV0FBVztJQUNYLFFBQVE7SUFDUixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixTQUFTO0lBQ1QsT0FBTztJQUNQLFFBQVE7SUFDUixVQUFVO0lBQ1YsUUFBUTtJQUNSLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFFBQVE7SUFDUixXQUFXO0lBQ1gsVUFBVTtJQUNWLFFBQVE7SUFDUixVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsUUFBUTtJQUNSLE9BQU87SUFDUCxRQUFRO0lBQ1IsT0FBTztJQUNQLFNBQVM7SUFDVCxRQUFRO0lBQ1IsU0FBUztJQUNULFNBQVM7SUFDVCxNQUFNO0lBQ04sV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLFFBQVE7SUFDUixTQUFTO0lBQ1QsV0FBVztJQUNYLFVBQVU7SUFDVixRQUFRO0lBQ1IsUUFBUTtJQUNSLFFBQVE7SUFDUixVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxTQUFTO0lBQ1QsU0FBUztJQUNULE9BQU87SUFDUCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFFBQVE7SUFDUixVQUFVO0lBQ1YsT0FBTztJQUNQLFNBQVM7SUFDVCxXQUFXO0lBQ1gsU0FBUztJQUNULFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFNBQVM7SUFDVCxTQUFTO0lBQ1QsU0FBUztJQUNULFNBQVM7SUFDVCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixRQUFRO0lBQ1IsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsU0FBUztJQUNULE9BQU87SUFDUCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFNBQVM7SUFDVCxTQUFTO0lBQ1QsV0FBVztJQUNYLFVBQVU7SUFDVixRQUFRO0lBQ1IsU0FBUztJQUNULFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxTQUFTO0lBQ1QsTUFBTTtJQUNOLFVBQVU7SUFDVixRQUFRO0lBQ1IsV0FBVztJQUNYLE9BQU87SUFDUCxNQUFNO0lBQ04sUUFBUTtJQUNSLFNBQVM7SUFDVCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsS0FBSztJQUNMLFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLE1BQU07SUFDTixRQUFRO0lBQ1IsTUFBTTtJQUNOLFVBQVU7SUFDVixPQUFPO0lBQ1AsUUFBUTtJQUNSLFFBQVE7SUFDUixTQUFTO0lBQ1QsUUFBUTtJQUNSLE9BQU87SUFDUCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFdBQVc7SUFDWCxPQUFPO0lBQ1AsT0FBTztJQUNQLFFBQVE7SUFDUixRQUFRO0lBQ1IsU0FBUztJQUNULFNBQVM7SUFDVCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFFBQVE7SUFDUixTQUFTO0lBQ1QsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFFBQVE7SUFDUixVQUFVO0lBQ1YsVUFBVTtJQUNWLFNBQVM7SUFDVCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFNBQVM7SUFDVCxTQUFTO0lBQ1QsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsU0FBUztJQUNULFNBQVM7SUFDVCxXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVixNQUFNO0lBQ04sV0FBVztJQUNYLFNBQVM7SUFDVCxNQUFNO0lBQ04sU0FBUztJQUNULFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsUUFBUTtJQUNSLFNBQVM7SUFDVCxVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixRQUFRO0lBQ1IsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVixTQUFTO0lBQ1QsV0FBVztJQUNYLFVBQVU7SUFDVixTQUFTO0lBQ1QsVUFBVTtJQUNWLFNBQVM7SUFDVCxXQUFXO0lBQ1gsU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixTQUFTO0lBQ1QsVUFBVTtJQUNWLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsT0FBTztJQUNQLE9BQU87SUFDUCxPQUFPO0lBQ1AsV0FBVztJQUNYLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsUUFBUTtJQUNSLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxPQUFPO0lBQ1AsUUFBUTtJQUNSLFFBQVE7SUFDUixNQUFNO0lBQ04sVUFBVTtJQUNWLFVBQVU7SUFDVixPQUFPO0lBQ1AsT0FBTztJQUNQLE9BQU87SUFDUCxPQUFPO0lBQ1AsTUFBTTtJQUNOLFFBQVE7SUFDUixXQUFXO0lBQ1gsUUFBUTtJQUNSLE9BQU87SUFDUCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsVUFBVTtJQUNWLFNBQVM7SUFDVCxPQUFPO0lBQ1AsT0FBTztJQUNQLFFBQVE7SUFDUixVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsT0FBTztJQUNQLE1BQU07SUFDTixXQUFXO0lBQ1gsUUFBUTtJQUNSLFFBQVE7SUFDUixNQUFNO0lBQ04sUUFBUTtJQUNSLFVBQVU7SUFDVixRQUFRO0lBQ1IsTUFBTTtJQUNOLE1BQU07SUFDTixPQUFPO0lBQ1AsTUFBTTtJQUNOLE1BQU07SUFDTixVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixTQUFTO0lBQ1QsU0FBUztJQUNULFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLE9BQU87SUFDUCxTQUFTO0lBQ1QsU0FBUztJQUNULE1BQU07SUFDTixTQUFTO0lBQ1QsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFFBQVE7SUFDUixRQUFRO0lBQ1IsVUFBVTtJQUNWLFFBQVE7SUFDUixRQUFRO0lBQ1IsT0FBTztJQUNQLE1BQU07SUFDTixTQUFTO0lBQ1QsT0FBTztJQUNQLE9BQU87SUFDUCxPQUFPO0lBQ1AsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixRQUFRO0lBQ1IsVUFBVTtJQUNWLFFBQVE7SUFDUixRQUFRO0lBQ1IsVUFBVTtJQUNWLFNBQVM7SUFDVCxTQUFTO0lBQ1QsU0FBUztJQUNULE9BQU87SUFDUCxPQUFPO0lBQ1AsT0FBTztJQUNQLFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFNBQVM7SUFDVCxTQUFTO0lBQ1QsU0FBUztJQUNULE9BQU87SUFDUCxPQUFPO0lBQ1AsVUFBVTtJQUNWLFFBQVE7SUFDUixNQUFNO0lBQ04sS0FBSztJQUNMLFFBQVE7SUFDUixXQUFXO0lBQ1gsU0FBUztJQUNULFVBQVU7SUFDVixTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixPQUFPO0lBQ1AsTUFBTTtJQUNOLE1BQU07SUFDTixRQUFRO0lBQ1IsUUFBUTtJQUNSLEtBQUs7SUFDTCxNQUFNO0lBQ04sUUFBUTtJQUNSLFVBQVU7SUFDVixNQUFNO0lBQ04sU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsS0FBSztJQUNMLE1BQU07SUFDTixRQUFRO0lBQ1IsV0FBVztJQUNYLFdBQVc7SUFDWCxTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixRQUFRO0lBQ1IsUUFBUTtJQUNSLE1BQU07SUFDTixNQUFNO0lBQ04sU0FBUztJQUNULE1BQU07SUFDTixPQUFPO0lBQ1AsT0FBTztJQUNQLE9BQU87SUFDUCxTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixTQUFTO0lBQ1QsV0FBVztJQUNYLFNBQVM7SUFDVCxVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsTUFBTTtJQUNOLE9BQU87SUFDUCxTQUFTO0lBQ1QsU0FBUztJQUNULFNBQVM7SUFDVCxRQUFRO0lBQ1IsU0FBUztJQUNULE9BQU87SUFDUCxTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFNBQVM7SUFDVCxTQUFTO0lBQ1QsU0FBUztJQUNULFdBQVc7SUFDWCxXQUFXO0lBQ1gsU0FBUztJQUNULFdBQVc7SUFDWCxRQUFRO0lBQ1IsUUFBUTtJQUNSLFNBQVM7SUFDVCxPQUFPO0lBQ1AsU0FBUztJQUNULFFBQVE7SUFDUixVQUFVO0lBQ1YsUUFBUTtJQUNSLFdBQVc7SUFDWCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFVBQVU7SUFDVixTQUFTO0lBQ1QsT0FBTztJQUNQLFFBQVE7SUFDUixRQUFRO0lBQ1IsTUFBTTtJQUNOLE1BQU07SUFDTixPQUFPO0lBQ1AsT0FBTztJQUNQLE9BQU87SUFDUCxXQUFXO0lBQ1gsTUFBTTtJQUNOLFFBQVE7SUFDUixTQUFTO0lBQ1QsV0FBVztJQUNYLFNBQVM7SUFDVCxVQUFVO0lBQ1YsV0FBVztJQUNYLFNBQVM7SUFDVCxXQUFXO0lBQ1gsV0FBVztJQUNYLE1BQU07SUFDTixVQUFVO0lBQ1YsUUFBUTtJQUNSLE1BQU07SUFDTixTQUFTO0lBQ1QsUUFBUTtJQUNSLFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLEtBQUs7SUFDTCxXQUFXO0lBQ1gsU0FBUztJQUNULFdBQVc7SUFDWCxRQUFRO0lBQ1IsV0FBVztJQUNYLFFBQVE7SUFDUixRQUFRO0lBQ1IsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsU0FBUztJQUNULFdBQVc7SUFDWCxRQUFRO0lBQ1IsT0FBTztJQUNQLFdBQVc7SUFDWCxTQUFTO0lBQ1QsUUFBUTtJQUNSLE9BQU87SUFDUCxXQUFXO0lBQ1gsU0FBUztJQUNULFFBQVE7SUFDUixXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsU0FBUztJQUNULFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFFBQVE7SUFDUixLQUFLO0lBQ0wsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsT0FBTztJQUNQLFNBQVM7SUFDVCxRQUFRO0lBQ1IsS0FBSztJQUNMLFNBQVM7SUFDVCxVQUFVO0lBQ1YsS0FBSztJQUNMLFdBQVc7SUFDWCxPQUFPO0lBQ1AsV0FBVztJQUNYLFVBQVU7SUFDVixXQUFXO0lBQ1gsT0FBTztJQUNQLFNBQVM7SUFDVCxPQUFPO0lBQ1AsT0FBTztJQUNQLFNBQVM7SUFDVCxRQUFRO0lBQ1IsU0FBUztJQUNULFdBQVc7SUFDWCxXQUFXO0lBQ1gsT0FBTztJQUNQLFVBQVU7SUFDVixTQUFTO0lBQ1QsUUFBUTtJQUNSLFFBQVE7SUFDUixVQUFVO0lBQ1YsUUFBUTtJQUNSLFdBQVc7SUFDWCxPQUFPO0lBQ1AsU0FBUztJQUNULFdBQVc7SUFDWCxVQUFVO0lBQ1YsTUFBTTtJQUNOLE9BQU87SUFDUCxVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFNBQVM7SUFDVCxTQUFTO0lBQ1QsV0FBVztJQUNYLE9BQU87SUFDUCxLQUFLO0lBQ0wsUUFBUTtJQUNSLFdBQVc7SUFDWCxRQUFRO0lBQ1IsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsU0FBUztJQUNULFdBQVc7SUFDWCxRQUFRO0lBQ1IsUUFBUTtJQUNSLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsT0FBTztJQUNQLFFBQVE7SUFDUixTQUFTO0lBQ1QsU0FBUztJQUNULFdBQVc7SUFDWCxXQUFXO0lBQ1gsU0FBUztJQUNULFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixRQUFRO0lBQ1IsVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsVUFBVTtJQUNWLFFBQVE7SUFDUixTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsU0FBUztJQUNULFFBQVE7SUFDUixTQUFTO0lBQ1QsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixRQUFRO0lBQ1IsUUFBUTtJQUNSLFFBQVE7SUFDUixTQUFTO0lBQ1QsU0FBUztJQUNULFFBQVE7SUFDUixRQUFRO0lBQ1IsV0FBVztJQUNYLFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFFBQVE7SUFDUixTQUFTO0lBQ1QsUUFBUTtJQUNSLFFBQVE7SUFDUixXQUFXO0lBQ1gsUUFBUTtJQUNSLFFBQVE7SUFDUixVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixTQUFTO0lBQ1QsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFNBQVM7SUFDVCxVQUFVO0lBQ1YsT0FBTztJQUNQLE1BQU07SUFDTixRQUFRO0lBQ1IsTUFBTTtJQUNOLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsU0FBUztJQUNULE9BQU87SUFDUCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFNBQVM7SUFDVCxTQUFTO0lBQ1QsV0FBVztJQUNYLFFBQVE7SUFDUixXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVixRQUFRO0lBQ1IsUUFBUTtJQUNSLFNBQVM7SUFDVCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFFBQVE7SUFDUixTQUFTO0lBQ1QsT0FBTztJQUNQLE9BQU87SUFDUCxVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixRQUFRO0lBQ1IsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsU0FBUztJQUNULE9BQU87SUFDUCxTQUFTO0lBQ1QsV0FBVztJQUNYLFdBQVc7SUFDWCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVixTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixTQUFTO0lBQ1QsT0FBTztJQUNQLFdBQVc7SUFDWCxRQUFRO0lBQ1IsV0FBVztJQUNYLFVBQVU7SUFDVixTQUFTO0lBQ1QsT0FBTztJQUNQLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFNBQVM7SUFDVCxTQUFTO0lBQ1QsTUFBTTtJQUNOLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsT0FBTztJQUNQLFVBQVU7SUFDVixTQUFTO0lBQ1QsTUFBTTtJQUNOLE9BQU87SUFDUCxXQUFXO0lBQ1gsUUFBUTtJQUNSLE9BQU87SUFDUCxTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsU0FBUztJQUNULFNBQVM7SUFDVCxXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFFBQVE7SUFDUixXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsT0FBTztJQUNQLE1BQU07SUFDTixXQUFXO0lBQ1gsUUFBUTtJQUNSLFNBQVM7SUFDVCxRQUFRO0lBQ1IsT0FBTztJQUNQLFVBQVU7SUFDVixNQUFNO0lBQ04sUUFBUTtJQUNSLFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFFBQVE7SUFDUixTQUFTO0lBQ1QsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxPQUFPO0lBQ1AsUUFBUTtJQUNSLFVBQVU7SUFDVixXQUFXO0lBQ1gsUUFBUTtJQUNSLFFBQVE7SUFDUixVQUFVO0lBQ1YsU0FBUztJQUNULFdBQVc7SUFDWCxVQUFVO0lBQ1YsU0FBUztJQUNULFNBQVM7SUFDVCxTQUFTO0lBQ1QsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFFBQVE7SUFDUixVQUFVO0lBQ1YsU0FBUztJQUNULFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFdBQVc7SUFDWCxRQUFRO0lBQ1IsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsU0FBUztJQUNULFdBQVc7SUFDWCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFdBQVc7SUFDWCxTQUFTO0lBQ1QsV0FBVztJQUNYLFdBQVc7SUFDWCxPQUFPO0lBQ1AsUUFBUTtJQUNSLFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFVBQVU7SUFDVixRQUFRO0lBQ1IsV0FBVztJQUNYLFNBQVM7SUFDVCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFdBQVc7SUFDWCxTQUFTO0lBQ1QsU0FBUztJQUNULE1BQU07SUFDTixRQUFRO0lBQ1IsU0FBUztJQUNULFFBQVE7SUFDUixNQUFNO0lBQ04sT0FBTztJQUNQLFNBQVM7SUFDVCxNQUFNO0lBQ04sVUFBVTtJQUNWLFFBQVE7SUFDUixRQUFRO0lBQ1IsVUFBVTtJQUNWLFNBQVM7SUFDVCxTQUFTO0lBQ1QsV0FBVztJQUNYLE9BQU87SUFDUCxTQUFTO0lBQ1QsTUFBTTtJQUNOLFNBQVM7SUFDVCxXQUFXO0lBQ1gsV0FBVztJQUNYLFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFFBQVE7SUFDUixTQUFTO0lBQ1QsVUFBVTtJQUNWLFFBQVE7SUFDUixXQUFXO0lBQ1gsV0FBVztJQUNYLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLEtBQUs7SUFDTCxPQUFPO0lBQ1AsU0FBUztJQUNULFFBQVE7SUFDUixRQUFRO0lBQ1IsTUFBTTtJQUNOLE1BQU07SUFDTixRQUFRO0lBQ1IsUUFBUTtJQUNSLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsT0FBTztJQUNQLE9BQU87SUFDUCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFNBQVM7SUFDVCxVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixRQUFRO0lBQ1IsUUFBUTtJQUNSLE9BQU87SUFDUCxRQUFRO0lBQ1IsUUFBUTtJQUNSLFVBQVU7SUFDVixTQUFTO0lBQ1QsV0FBVztJQUNYLE9BQU87SUFDUCxPQUFPO0lBQ1AsT0FBTztJQUNQLE9BQU87SUFDUCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFNBQVM7SUFDVCxTQUFTO0lBQ1QsT0FBTztJQUNQLFVBQVU7SUFDVixPQUFPO0lBQ1AsU0FBUztJQUNULFFBQVE7SUFDUixVQUFVO0lBQ1YsUUFBUTtJQUNSLFFBQVE7SUFDUixRQUFRO0lBQ1IsU0FBUztJQUNULE1BQU07SUFDTixRQUFRO0lBQ1IsT0FBTztJQUNQLFVBQVU7SUFDVixRQUFRO0lBQ1IsVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsU0FBUztJQUNULFdBQVc7SUFDWCxPQUFPO0lBQ1AsVUFBVTtJQUNWLE9BQU87SUFDUCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsUUFBUTtJQUNSLFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLEtBQUs7SUFDTCxNQUFNO0lBQ04sU0FBUztJQUNULFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsT0FBTztJQUNQLFNBQVM7SUFDVCxPQUFPO0lBQ1AsT0FBTztJQUNQLFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixNQUFNO0lBQ04sU0FBUztJQUNULFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsUUFBUTtJQUNSLE9BQU87SUFDUCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFFBQVE7SUFDUixVQUFVO0lBQ1YsU0FBUztJQUNULFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVixNQUFNO0lBQ04sU0FBUztJQUNULFFBQVE7SUFDUixPQUFPO0lBQ1AsT0FBTztJQUNQLFFBQVE7SUFDUixRQUFRO0lBQ1IsT0FBTztJQUNQLE9BQU87SUFDUCxNQUFNO0lBQ04sT0FBTztJQUNQLE9BQU87SUFDUCxPQUFPO0lBQ1AsVUFBVTtJQUNWLE1BQU07SUFDTixRQUFRO0lBQ1IsU0FBUztJQUNULE9BQU87SUFDUCxVQUFVO0lBQ1YsU0FBUztJQUNULFNBQVM7SUFDVCxPQUFPO0lBQ1AsUUFBUTtJQUNSLFNBQVM7SUFDVCxVQUFVO0lBQ1YsTUFBTTtJQUNOLEtBQUs7SUFDTCxLQUFLO0lBQ0wsTUFBTTtJQUNOLE9BQU87SUFDUCxNQUFNO0lBQ04sVUFBVTtJQUNWLFFBQVE7SUFDUixVQUFVO0lBQ1YsUUFBUTtJQUNSLFVBQVU7SUFDVixRQUFRO0lBQ1IsTUFBTTtJQUNOLE1BQU07SUFDTixNQUFNO0lBQ04sU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFFBQVE7SUFDUixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsVUFBVTtJQUNWLFNBQVM7SUFDVCxVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixRQUFRO0lBQ1IsUUFBUTtJQUNSLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLEtBQUs7SUFDTCxPQUFPO0lBQ1AsVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsV0FBVztJQUNYLFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLE9BQU87SUFDUCxPQUFPO0lBQ1AsU0FBUztJQUNULFNBQVM7SUFDVCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFNBQVM7SUFDVCxPQUFPO0lBQ1AsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsU0FBUztJQUNULFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsVUFBVTtJQUNWLFFBQVE7SUFDUixXQUFXO0lBQ1gsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFNBQVM7SUFDVCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFFBQVE7SUFDUixXQUFXO0lBQ1gsVUFBVTtJQUNWLE9BQU87SUFDUCxTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixRQUFRO0lBQ1IsUUFBUTtJQUNSLE9BQU87SUFDUCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLE9BQU87SUFDUCxRQUFRO0lBQ1IsU0FBUztJQUNULE9BQU87SUFDUCxTQUFTO0lBQ1QsV0FBVztJQUNYLFFBQVE7SUFDUixNQUFNO0lBQ04sT0FBTztJQUNQLFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsUUFBUTtJQUNSLE9BQU87SUFDUCxPQUFPO0lBQ1AsUUFBUTtJQUNSLFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLE9BQU87SUFDUCxXQUFXO0lBQ1gsUUFBUTtJQUNSLEtBQUs7SUFDTCxPQUFPO0lBQ1AsS0FBSztJQUNMLFdBQVc7SUFDWCxTQUFTO0lBQ1QsT0FBTztJQUNQLE1BQU07SUFDTixXQUFXO0lBQ1gsVUFBVTtJQUNWLFNBQVM7SUFDVCxRQUFRO0lBQ1IsUUFBUTtJQUNSLFNBQVM7SUFDVCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFdBQVc7SUFDWCxVQUFVO0lBQ1YsTUFBTTtJQUNOLFFBQVE7SUFDUixPQUFPO0lBQ1AsUUFBUTtJQUNSLFFBQVE7SUFDUixVQUFVO0lBQ1YsU0FBUztJQUNULEtBQUs7SUFDTCxRQUFRO0lBQ1IsU0FBUztJQUNULFFBQVE7SUFDUixRQUFRO0lBQ1IsU0FBUztJQUNULFFBQVE7SUFDUixTQUFTO0lBQ1QsUUFBUTtJQUNSLFNBQVM7SUFDVCxRQUFRO0lBQ1IsS0FBSztJQUNMLFVBQVU7SUFDVixXQUFXO0lBQ1gsUUFBUTtJQUNSLFNBQVM7SUFDVCxVQUFVO0lBQ1YsT0FBTztJQUNQLE1BQU07SUFDTixNQUFNO0lBQ04sUUFBUTtJQUNSLE1BQU07SUFDTixPQUFPO0lBQ1AsTUFBTTtJQUNOLFFBQVE7SUFDUixLQUFLO0lBQ0wsUUFBUTtJQUNSLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLE9BQU87SUFDUCxTQUFTO0lBQ1QsV0FBVztJQUNYLFFBQVE7SUFDUixPQUFPO0lBQ1AsV0FBVztJQUNYLFVBQVU7SUFDVixXQUFXO0lBQ1gsU0FBUztJQUNULFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFFBQVE7SUFDUixXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLFNBQVM7SUFDVCxXQUFXO0lBQ1gsU0FBUztJQUNULFNBQVM7SUFDVCxTQUFTO0lBQ1QsT0FBTztJQUNQLE9BQU87SUFDUCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFNBQVM7SUFDVCxXQUFXO0lBQ1gsT0FBTztJQUNQLE1BQU07SUFDTixVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixRQUFRO0lBQ1IsVUFBVTtJQUNWLFFBQVE7SUFDUixRQUFRO0lBQ1IsUUFBUTtJQUNSLE9BQU87SUFDUCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFVBQVU7SUFDVixPQUFPO0lBQ1AsT0FBTztJQUNQLFFBQVE7SUFDUixPQUFPO0lBQ1AsU0FBUztJQUNULFNBQVM7SUFDVCxTQUFTO0lBQ1QsT0FBTztJQUNQLFdBQVc7SUFDWCxRQUFRO0lBQ1IsV0FBVztJQUNYLFNBQVM7SUFDVCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFdBQVc7SUFDWCxPQUFPO0lBQ1AsU0FBUztJQUNULE9BQU87SUFDUCxVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixTQUFTO0lBQ1QsUUFBUTtJQUNSLFNBQVM7SUFDVCxTQUFTO0lBQ1QsU0FBUztJQUNULFNBQVM7SUFDVCxRQUFRO0lBQ1IsU0FBUztJQUNULFFBQVE7SUFDUixTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixRQUFRO0lBQ1IsV0FBVztJQUNYLFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLE9BQU87SUFDUCxPQUFPO0lBQ1AsT0FBTztJQUNQLFNBQVM7SUFDVCxVQUFVO0lBQ1YsU0FBUztJQUNULE1BQU07SUFDTixRQUFRO0lBQ1IsV0FBVztJQUNYLFNBQVM7SUFDVCxRQUFRO0lBQ1IsTUFBTTtJQUNOLE1BQU07SUFDTixVQUFVO0lBQ1YsTUFBTTtJQUNOLFNBQVM7SUFDVCxPQUFPO0lBQ1AsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsTUFBTTtJQUNOLFNBQVM7SUFDVCxPQUFPO0lBQ1AsU0FBUztJQUNULE1BQU07SUFDTixNQUFNO0lBQ04sTUFBTTtJQUNOLE9BQU87SUFDUCxVQUFVO0lBQ1YsV0FBVztJQUNYLE9BQU87SUFDUCxRQUFRO0lBQ1IsTUFBTTtJQUNOLFFBQVE7SUFDUixNQUFNO0lBQ04sUUFBUTtJQUNSLFVBQVU7SUFDVixNQUFNO0lBQ04sU0FBUztJQUNULFFBQVE7SUFDUixRQUFRO0lBQ1IsUUFBUTtJQUNSLE1BQU07SUFDTixNQUFNO0lBQ04sTUFBTTtJQUNOLFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFdBQVc7SUFDWCxRQUFRO0lBQ1IsUUFBUTtJQUNSLFVBQVU7SUFDVixTQUFTO0lBQ1QsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixPQUFPO0lBQ1AsVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsU0FBUztJQUNULFNBQVM7SUFDVCxVQUFVO0lBQ1YsU0FBUztJQUNULFFBQVE7SUFDUixTQUFTO0lBQ1QsT0FBTztJQUNQLFVBQVU7SUFDVixPQUFPO0lBQ1AsT0FBTztJQUNQLFNBQVM7SUFDVCxXQUFXO0lBQ1gsT0FBTztJQUNQLE9BQU87SUFDUCxXQUFXO0lBQ1gsU0FBUztJQUNULFNBQVM7SUFDVCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFFBQVE7SUFDUixXQUFXO0lBQ1gsUUFBUTtJQUNSLFdBQVc7SUFDWCxXQUFXO0lBQ1gsU0FBUztJQUNULE9BQU87SUFDUCxNQUFNO0lBQ04sU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFFBQVE7SUFDUixPQUFPO0lBQ1AsU0FBUztJQUNULFVBQVU7SUFDVixNQUFNO0lBQ04sV0FBVztJQUNYLE1BQU07SUFDTixPQUFPO0lBQ1AsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsT0FBTztJQUNQLFNBQVM7SUFDVCxXQUFXO0lBQ1gsT0FBTztJQUNQLFdBQVc7SUFDWCxPQUFPO0lBQ1AsUUFBUTtJQUNSLFVBQVU7SUFDVixNQUFNO0lBQ04sU0FBUztJQUNULE1BQU07SUFDTixVQUFVO0lBQ1YsUUFBUTtJQUNSLE9BQU87SUFDUCxPQUFPO0lBQ1AsUUFBUTtJQUNSLFVBQVU7SUFDVixRQUFRO0lBQ1IsT0FBTztJQUNQLFFBQVE7SUFDUixTQUFTO0lBQ1QsT0FBTztJQUNQLE9BQU87SUFDUCxRQUFRO0lBQ1IsU0FBUztJQUNULE9BQU87SUFDUCxNQUFNO0lBQ04sUUFBUTtJQUNSLFVBQVU7SUFDVixVQUFVO0lBQ1YsU0FBUztJQUNULFNBQVM7SUFDVCxXQUFXO0lBQ1gsU0FBUztJQUNULFVBQVU7SUFDVixRQUFRO0lBQ1IsT0FBTztJQUNQLFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLE9BQU87SUFDUCxTQUFTO0lBQ1QsV0FBVztJQUNYLE9BQU87SUFDUCxNQUFNO0lBQ04sVUFBVTtJQUNWLE9BQU87SUFDUCxNQUFNO0lBQ04sU0FBUztJQUNULFNBQVM7SUFDVCxXQUFXO0lBQ1gsU0FBUztJQUNULE9BQU87SUFDUCxRQUFRO0lBQ1IsVUFBVTtJQUNWLE1BQU07SUFDTixNQUFNO0lBQ04sT0FBTztJQUNQLE9BQU87SUFDUCxTQUFTO0lBQ1QsTUFBTTtJQUNOLFFBQVE7SUFDUixLQUFLO0lBQ0wsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFNBQVM7SUFDVCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFFBQVE7SUFDUixTQUFTO0lBQ1QsU0FBUztJQUNULEtBQUs7SUFDTCxTQUFTO0lBQ1QsT0FBTztJQUNQLE1BQU07SUFDTixTQUFTO0lBQ1QsTUFBTTtJQUNOLFFBQVE7SUFDUixRQUFRO0lBQ1IsV0FBVztJQUNYLFFBQVE7SUFDUixTQUFTO0lBQ1QsUUFBUTtJQUNSLFNBQVM7SUFDVCxXQUFXO0lBQ1gsU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFNBQVM7SUFDVCxVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFNBQVM7SUFDVCxTQUFTO0lBQ1QsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixRQUFRO0lBQ1IsV0FBVztJQUNYLFFBQVE7SUFDUixPQUFPO0lBQ1AsV0FBVztJQUNYLFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFNBQVM7SUFDVCxXQUFXO0lBQ1gsT0FBTztJQUNQLFFBQVE7SUFDUixVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsUUFBUTtJQUNSLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsT0FBTztJQUNQLFNBQVM7SUFDVCxVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsU0FBUztJQUNULFNBQVM7SUFDVCxTQUFTO0lBQ1QsT0FBTztJQUNQLFNBQVM7SUFDVCxNQUFNO0lBQ04sUUFBUTtJQUNSLE9BQU87SUFDUCxTQUFTO0lBQ1QsV0FBVztJQUNYLE9BQU87SUFDUCxRQUFRO0lBQ1IsV0FBVztJQUNYLFVBQVU7SUFDVixTQUFTO0lBQ1QsVUFBVTtJQUNWLFdBQVc7SUFDWCxNQUFNO0lBQ04sU0FBUztJQUNULFFBQVE7SUFDUixPQUFPO0lBQ1AsT0FBTztJQUNQLFFBQVE7SUFDUixVQUFVO0lBQ1YsUUFBUTtJQUNSLFVBQVU7SUFDVixRQUFRO0lBQ1IsTUFBTTtJQUNOLFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFFBQVE7SUFDUixXQUFXO0lBQ1gsVUFBVTtJQUNWLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFNBQVM7SUFDVCxVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLE1BQU07SUFDTixNQUFNO0lBQ04sT0FBTztJQUNQLFNBQVM7SUFDVCxXQUFXO0lBQ1gsU0FBUztJQUNULE9BQU87SUFDUCxTQUFTO0lBQ1QsV0FBVztJQUNYLE9BQU87SUFDUCxRQUFRO0lBQ1IsUUFBUTtJQUNSLFFBQVE7SUFDUixTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsU0FBUztJQUNULFdBQVc7SUFDWCxPQUFPO0lBQ1AsVUFBVTtJQUNWLE9BQU87SUFDUCxRQUFRO0lBQ1IsUUFBUTtJQUNSLFdBQVc7SUFDWCxPQUFPO0lBQ1AsVUFBVTtJQUNWLFFBQVE7SUFDUixTQUFTO0lBQ1QsU0FBUztJQUNULFNBQVM7SUFDVCxTQUFTO0lBQ1QsT0FBTztJQUNQLFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFNBQVM7SUFDVCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFFBQVE7SUFDUixVQUFVO0lBQ1YsTUFBTTtJQUNOLEtBQUs7SUFDTCxNQUFNO0lBQ04sTUFBTTtJQUNOLE1BQU07SUFDTixPQUFPO0lBQ1AsUUFBUTtJQUNSLFVBQVU7SUFDVixRQUFRO0lBQ1IsT0FBTztJQUNQLFdBQVc7SUFDWCxVQUFVO0lBQ1YsU0FBUztJQUNULFFBQVE7SUFDUixXQUFXO0lBQ1gsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFFBQVE7SUFDUixRQUFRO0lBQ1IsV0FBVztJQUNYLFdBQVc7SUFDWCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFFBQVE7SUFDUixNQUFNO0lBQ04sUUFBUTtJQUNSLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFFBQVE7SUFDUixRQUFRO0lBQ1IsUUFBUTtJQUNSLFNBQVM7SUFDVCxRQUFRO0lBQ1IsV0FBVztJQUNYLFNBQVM7SUFDVCxPQUFPO0lBQ1AsTUFBTTtJQUNOLFNBQVM7SUFDVCxNQUFNO0lBQ04sUUFBUTtJQUNSLFdBQVc7SUFDWCxLQUFLO0lBQ0wsUUFBUTtJQUNSLFNBQVM7SUFDVCxVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsS0FBSztJQUNMLFNBQVM7SUFDVCxPQUFPO0lBQ1AsTUFBTTtJQUNOLE1BQU07SUFDTixLQUFLO0lBQ0wsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsU0FBUztJQUNULFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsUUFBUTtJQUNSLE9BQU87SUFDUCxNQUFNO0lBQ04sT0FBTztJQUNQLFVBQVU7SUFDVixRQUFRO0lBQ1IsUUFBUTtJQUNSLFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLE9BQU87SUFDUCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFNBQVM7SUFDVCxVQUFVO0lBQ1YsU0FBUztJQUNULFdBQVc7SUFDWCxVQUFVO0lBQ1YsU0FBUztJQUNULFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsUUFBUTtJQUNSLFFBQVE7SUFDUixXQUFXO0lBQ1gsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVixRQUFRO0lBQ1IsU0FBUztJQUNULFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFNBQVM7SUFDVCxXQUFXO0lBQ1gsV0FBVztJQUNYLE9BQU87SUFDUCxVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixRQUFRO0lBQ1IsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFNBQVM7SUFDVCxXQUFXO0lBQ1gsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFNBQVM7SUFDVCxXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxTQUFTO0lBQ1QsV0FBVztJQUNYLFFBQVE7SUFDUixVQUFVO0lBQ1YsUUFBUTtJQUNSLFFBQVE7SUFDUixLQUFLO0lBQ0wsTUFBTTtJQUNOLFFBQVE7SUFDUixNQUFNO0lBQ04sT0FBTztJQUNQLEtBQUs7SUFDTCxNQUFNO0lBQ04sV0FBVztJQUNYLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxTQUFTO0lBQ1QsT0FBTztJQUNQLFNBQVM7SUFDVCxXQUFXO0lBQ1gsU0FBUztJQUNULE1BQU07SUFDTixXQUFXO0lBQ1gsUUFBUTtJQUNSLE9BQU87SUFDUCxLQUFLO0lBQ0wsS0FBSztJQUNMLFFBQVE7SUFDUixRQUFRO0lBQ1IsV0FBVztJQUNYLFNBQVM7SUFDVCxVQUFVO0lBQ1YsV0FBVztJQUNYLFFBQVE7SUFDUixXQUFXO0lBQ1gsVUFBVTtJQUNWLEtBQUs7SUFDTCxTQUFTO0lBQ1QsU0FBUztJQUNULFFBQVE7SUFDUixTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixPQUFPO0lBQ1AsTUFBTTtJQUNOLE9BQU87SUFDUCxTQUFTO0lBQ1QsU0FBUztJQUNULE1BQU07SUFDTixTQUFTO0lBQ1QsV0FBVztJQUNYLE1BQU07SUFDTixNQUFNO0lBQ04sV0FBVztJQUNYLFNBQVM7SUFDVCxPQUFPO0lBQ1AsUUFBUTtJQUNSLFFBQVE7SUFDUixLQUFLO0lBQ0wsT0FBTztJQUNQLFFBQVE7SUFDUixPQUFPO0lBQ1AsUUFBUTtJQUNSLFVBQVU7SUFDVixNQUFNO0lBQ04sU0FBUztJQUNULFNBQVM7SUFDVCxLQUFLO0lBQ0wsUUFBUTtJQUNSLFdBQVc7SUFDWCxRQUFRO0lBQ1IsU0FBUztJQUNULE1BQU07SUFDTixTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsT0FBTztJQUNQLE1BQU07SUFDTixLQUFLO0lBQ0wsUUFBUTtJQUNSLFVBQVU7SUFDVixXQUFXO0lBQ1gsUUFBUTtJQUNSLFNBQVM7SUFDVCxVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixPQUFPO0lBQ1AsV0FBVztJQUNYLFVBQVU7SUFDVixXQUFXO0lBQ1gsTUFBTTtJQUNOLFFBQVE7SUFDUixVQUFVO0lBQ1YsU0FBUztJQUNULE9BQU87SUFDUCxXQUFXO0lBQ1gsT0FBTztJQUNQLFNBQVM7SUFDVCxTQUFTO0lBQ1QsTUFBTTtJQUNOLFFBQVE7SUFDUixPQUFPO0lBQ1AsTUFBTTtJQUNOLFVBQVU7SUFDVixVQUFVO0lBQ1YsTUFBTTtJQUNOLFFBQVE7SUFDUixTQUFTO0lBQ1QsUUFBUTtJQUNSLFNBQVM7SUFDVCxVQUFVO0lBQ1YsUUFBUTtJQUNSLE9BQU87SUFDUCxNQUFNO0lBQ04sU0FBUztJQUNULFdBQVc7SUFDWCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFVBQVU7SUFDVixVQUFVO0lBQ1YsT0FBTztJQUNQLFVBQVU7SUFDVixTQUFTO0lBQ1QsUUFBUTtJQUNSLE9BQU87SUFDUCxPQUFPO0lBQ1AsUUFBUTtJQUNSLFVBQVU7SUFDVixNQUFNO0lBQ04sS0FBSztJQUNMLE1BQU07SUFDTixRQUFRO0lBQ1IsTUFBTTtJQUNOLFVBQVU7SUFDVixVQUFVO0lBQ1YsUUFBUTtJQUNSLE1BQU07SUFDTixNQUFNO0lBQ04sVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLE1BQU07SUFDTixRQUFRO0lBQ1IsUUFBUTtJQUNSLFVBQVU7SUFDVixRQUFRO0lBQ1IsVUFBVTtJQUNWLFNBQVM7SUFDVCxTQUFTO0lBQ1QsU0FBUztJQUNULE1BQU07SUFDTixTQUFTO0lBQ1QsU0FBUztJQUNULFdBQVc7SUFDWCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFNBQVM7SUFDVCxTQUFTO0lBQ1QsTUFBTTtJQUNOLFFBQVE7SUFDUixPQUFPO0lBQ1AsTUFBTTtJQUNOLFNBQVM7SUFDVCxVQUFVO0lBQ1YsTUFBTTtJQUNOLE9BQU87SUFDUCxVQUFVO0lBQ1YsT0FBTztJQUNQLE9BQU87SUFDUCxPQUFPO0lBQ1AsUUFBUTtJQUNSLFNBQVM7SUFDVCxPQUFPO0lBQ1AsTUFBTTtJQUNOLFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFFBQVE7SUFDUixPQUFPO0lBQ1AsU0FBUztJQUNULFVBQVU7SUFDVixRQUFRO0lBQ1IsU0FBUztJQUNULFFBQVE7SUFDUixNQUFNO0lBQ04sTUFBTTtJQUNOLE9BQU87SUFDUCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLE9BQU87SUFDUCxTQUFTO0lBQ1QsUUFBUTtJQUNSLE9BQU87SUFDUCxRQUFRO0lBQ1IsU0FBUztJQUNULFFBQVE7SUFDUixNQUFNO0lBQ04sT0FBTztJQUNQLE1BQU07SUFDTixNQUFNO0lBQ04sT0FBTztJQUNQLE1BQU07SUFDTixPQUFPO0lBQ1AsTUFBTTtJQUNOLFFBQVE7SUFDUixVQUFVO0lBQ1YsU0FBUztJQUNULFFBQVE7SUFDUixVQUFVO0lBQ1YsUUFBUTtJQUNSLFNBQVM7SUFDVCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFVBQVU7SUFDVixRQUFRO0lBQ1IsVUFBVTtJQUNWLFFBQVE7SUFDUixVQUFVO0lBQ1YsTUFBTTtJQUNOLFVBQVU7SUFDVixNQUFNO0lBQ04sUUFBUTtJQUNSLE9BQU87SUFDUCxRQUFRO0lBQ1IsUUFBUTtJQUNSLFVBQVU7SUFDVixTQUFTO0lBQ1QsU0FBUztJQUNULFdBQVc7SUFDWCxNQUFNO0lBQ04sU0FBUztJQUNULFFBQVE7SUFDUixXQUFXO0lBQ1gsU0FBUztJQUNULE9BQU87SUFDUCxNQUFNO0lBQ04sUUFBUTtJQUNSLE1BQU07SUFDTixNQUFNO0lBQ04sU0FBUztJQUNULFFBQVE7SUFDUixTQUFTO0lBQ1QsV0FBVztJQUNYLFVBQVU7SUFDVixRQUFRO0lBQ1IsU0FBUztJQUNULE9BQU87SUFDUCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFFBQVE7SUFDUixTQUFTO0lBQ1QsV0FBVztJQUNYLFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLEtBQUs7SUFDTCxNQUFNO0lBQ04sUUFBUTtJQUNSLFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFFBQVE7SUFDUixVQUFVO0lBQ1YsVUFBVTtJQUNWLFFBQVE7SUFDUixPQUFPO0lBQ1AsT0FBTztJQUNQLE1BQU07SUFDTixNQUFNO0lBQ04sU0FBUztJQUNULFdBQVc7SUFDWCxPQUFPO0lBQ1AsT0FBTztJQUNQLFNBQVM7SUFDVCxVQUFVO0lBQ1YsTUFBTTtJQUNOLE9BQU87SUFDUCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFFBQVE7SUFDUixRQUFRO0lBQ1IsVUFBVTtJQUNWLFNBQVM7SUFDVCxNQUFNO0lBQ04sTUFBTTtJQUNOLEtBQUs7SUFDTCxTQUFTO0lBQ1QsU0FBUztJQUNULFFBQVE7SUFDUixNQUFNO0lBQ04sTUFBTTtJQUNOLFVBQVU7SUFDVixXQUFXO0lBQ1gsUUFBUTtJQUNSLFFBQVE7SUFDUixRQUFRO0lBQ1IsU0FBUztJQUNULE9BQU87SUFDUCxRQUFRO0lBQ1IsT0FBTztJQUNQLFdBQVc7SUFDWCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFFBQVE7SUFDUixXQUFXO0lBQ1gsV0FBVztJQUNYLE9BQU87SUFDUCxTQUFTO0lBQ1QsV0FBVztJQUNYLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFFBQVE7SUFDUixVQUFVO0lBQ1YsU0FBUztJQUNULFFBQVE7SUFDUixXQUFXO0lBQ1gsVUFBVTtJQUNWLFdBQVc7SUFDWCxTQUFTO0lBQ1QsU0FBUztJQUNULFFBQVE7SUFDUixPQUFPO0lBQ1AsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLE1BQU07SUFDTixPQUFPO0lBQ1AsTUFBTTtJQUNOLFdBQVc7SUFDWCxNQUFNO0lBQ04sUUFBUTtJQUNSLFVBQVU7SUFDVixRQUFRO0lBQ1IsV0FBVztJQUNYLFNBQVM7SUFDVCxXQUFXO0lBQ1gsVUFBVTtJQUNWLE9BQU87SUFDUCxXQUFXO0lBQ1gsUUFBUTtJQUNSLE9BQU87SUFDUCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixRQUFRO0lBQ1IsVUFBVTtJQUNWLFVBQVU7SUFDVixPQUFPO0lBQ1AsTUFBTTtJQUNOLFNBQVM7SUFDVCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFNBQVM7SUFDVCxRQUFRO0lBQ1IsU0FBUztJQUNULFVBQVU7SUFDVixPQUFPO0lBQ1AsV0FBVztJQUNYLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxTQUFTO0lBQ1QsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsUUFBUTtJQUNSLFVBQVU7SUFDVixTQUFTO0lBQ1QsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsT0FBTztJQUNQLFdBQVc7SUFDWCxRQUFRO0lBQ1IsV0FBVztJQUNYLE1BQU07SUFDTixNQUFNO0lBQ04sUUFBUTtJQUNSLFNBQVM7SUFDVCxXQUFXO0lBQ1gsU0FBUztJQUNULFVBQVU7SUFDVixTQUFTO0lBQ1QsVUFBVTtJQUNWLFNBQVM7SUFDVCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFFBQVE7SUFDUixRQUFRO0lBQ1IsT0FBTztJQUNQLE9BQU87SUFDUCxXQUFXO0lBQ1gsU0FBUztJQUNULFNBQVM7SUFDVCxTQUFTO0lBQ1QsV0FBVztJQUNYLFVBQVU7SUFDVixXQUFXO0lBQ1gsUUFBUTtJQUNSLFNBQVM7SUFDVCxTQUFTO0lBQ1QsV0FBVztJQUNYLE9BQU87SUFDUCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFNBQVM7SUFDVCxPQUFPO0lBQ1AsVUFBVTtJQUNWLFFBQVE7SUFDUixRQUFRO0lBQ1IsUUFBUTtJQUNSLE1BQU07SUFDTixLQUFLO0lBQ0wsVUFBVTtJQUNWLFdBQVc7SUFDWCxTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixPQUFPO0lBQ1AsT0FBTztJQUNQLFdBQVc7SUFDWCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFVBQVU7SUFDVixRQUFRO0lBQ1IsUUFBUTtJQUNSLFNBQVM7SUFDVCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFdBQVc7SUFDWCxRQUFRO0lBQ1IsU0FBUztJQUNULFFBQVE7SUFDUixPQUFPO0lBQ1AsV0FBVztJQUNYLFFBQVE7SUFDUixXQUFXO0lBQ1gsV0FBVztJQUNYLFNBQVM7SUFDVCxRQUFRO0lBQ1IsV0FBVztJQUNYLFFBQVE7SUFDUixTQUFTO0lBQ1QsVUFBVTtJQUNWLFFBQVE7SUFDUixTQUFTO0lBQ1QsU0FBUztJQUNULFNBQVM7SUFDVCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFNBQVM7SUFDVCxVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLE1BQU07SUFDTixRQUFRO0lBQ1IsV0FBVztJQUNYLFdBQVc7SUFDWCxRQUFRO0lBQ1IsUUFBUTtJQUNSLFFBQVE7SUFDUixRQUFRO0lBQ1IsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsT0FBTztJQUNQLFVBQVU7SUFDVixVQUFVO0lBQ1YsU0FBUztJQUNULE9BQU87SUFDUCxRQUFRO0lBQ1IsV0FBVztJQUNYLFFBQVE7SUFDUixTQUFTO0lBQ1QsUUFBUTtJQUNSLFVBQVU7SUFDVixVQUFVO0lBQ1YsU0FBUztJQUNULE9BQU87SUFDUCxRQUFRO0lBQ1IsUUFBUTtJQUNSLFVBQVU7SUFDVixRQUFRO0lBQ1IsU0FBUztJQUNULFdBQVc7SUFDWCxRQUFRO0lBQ1IsU0FBUztJQUNULFdBQVc7SUFDWCxVQUFVO0lBQ1YsT0FBTztJQUNQLFVBQVU7SUFDVixNQUFNO0lBQ04sV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsU0FBUztJQUNULEtBQUs7SUFDTCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFNBQVM7SUFDVCxXQUFXO0lBQ1gsU0FBUztJQUNULFVBQVU7SUFDVixTQUFTO0lBQ1QsV0FBVztJQUNYLE9BQU87SUFDUCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFFBQVE7SUFDUixXQUFXO0lBQ1gsVUFBVTtJQUNWLFNBQVM7SUFDVCxVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLEtBQUs7SUFDTCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFNBQVM7SUFDVCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsT0FBTztJQUNQLFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFFBQVE7SUFDUixPQUFPO0lBQ1AsTUFBTTtJQUNOLFVBQVU7SUFDVixXQUFXO0lBQ1gsUUFBUTtJQUNSLFVBQVU7SUFDVixXQUFXO0lBQ1gsUUFBUTtJQUNSLFdBQVc7SUFDWCxPQUFPO0lBQ1AsT0FBTztJQUNQLFdBQVc7SUFDWCxVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixTQUFTO0lBQ1QsVUFBVTtJQUNWLE9BQU87SUFDUCxXQUFXO0lBQ1gsV0FBVztJQUNYLE9BQU87SUFDUCxPQUFPO0lBQ1AsU0FBUztJQUNULE1BQU07SUFDTixPQUFPO0lBQ1AsUUFBUTtJQUNSLE9BQU87SUFDUCxRQUFRO0lBQ1IsTUFBTTtJQUNOLE1BQU07SUFDTixLQUFLO0lBQ0wsS0FBSztJQUNMLFVBQVU7SUFDVixPQUFPO0lBQ1AsTUFBTTtJQUNOLFFBQVE7SUFDUixTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFFBQVE7SUFDUixVQUFVO0lBQ1YsT0FBTztJQUNQLFdBQVc7SUFDWCxTQUFTO0lBQ1QsT0FBTztJQUNQLE9BQU87SUFDUCxVQUFVO0lBQ1YsU0FBUztJQUNULFdBQVc7SUFDWCxRQUFRO0lBQ1IsT0FBTztJQUNQLFdBQVc7SUFDWCxPQUFPO0lBQ1AsV0FBVztJQUNYLFVBQVU7SUFDVixRQUFRO0lBQ1IsU0FBUztJQUNULFdBQVc7SUFDWCxVQUFVO0lBQ1YsT0FBTztJQUNQLE9BQU87SUFDUCxRQUFRO0lBQ1IsV0FBVztJQUNYLE9BQU87SUFDUCxTQUFTO0lBQ1QsU0FBUztJQUNULFFBQVE7SUFDUixXQUFXO0lBQ1gsT0FBTztJQUNQLFNBQVM7SUFDVCxRQUFRO0lBQ1IsVUFBVTtJQUNWLE1BQU07SUFDTixXQUFXO0lBQ1gsV0FBVztJQUNYLFFBQVE7SUFDUixNQUFNO0lBQ04sUUFBUTtJQUNSLFFBQVE7SUFDUixRQUFRO0lBQ1IsU0FBUztJQUNULFdBQVc7SUFDWCxTQUFTO0lBQ1QsTUFBTTtJQUNOLE9BQU87SUFDUCxLQUFLO0lBQ0wsTUFBTTtJQUNOLE1BQU07SUFDTixRQUFRO0lBQ1IsT0FBTztJQUNQLFdBQVc7SUFDWCxNQUFNO0lBQ04sUUFBUTtJQUNSLFFBQVE7SUFDUixTQUFTO0lBQ1QsT0FBTztJQUNQLFFBQVE7SUFDUixTQUFTO0lBQ1QsV0FBVztJQUNYLFVBQVU7SUFDVixRQUFRO0lBQ1IsVUFBVTtJQUNWLFNBQVM7SUFDVCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLE1BQU07SUFDTixRQUFRO0lBQ1IsU0FBUztJQUNULFFBQVE7SUFDUixVQUFVO0lBQ1YsUUFBUTtJQUNSLFVBQVU7SUFDVixRQUFRO0lBQ1IsV0FBVztJQUNYLFFBQVE7SUFDUixRQUFRO0lBQ1IsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsU0FBUztJQUNULFNBQVM7SUFDVCxNQUFNO0lBQ04sUUFBUTtJQUNSLE1BQU07SUFDTixTQUFTO0lBQ1QsT0FBTztJQUNQLE1BQU07SUFDTixLQUFLO0lBQ0wsV0FBVztJQUNYLFFBQVE7SUFDUixVQUFVO0lBQ1YsVUFBVTtJQUNWLFFBQVE7SUFDUixTQUFTO0lBQ1QsT0FBTztJQUNQLE1BQU07SUFDTixRQUFRO0lBQ1IsVUFBVTtJQUNWLFVBQVU7SUFDVixPQUFPO0lBQ1AsT0FBTztJQUNQLFFBQVE7SUFDUixRQUFRO0lBQ1IsVUFBVTtJQUNWLFdBQVc7SUFDWCxPQUFPO0lBQ1AsVUFBVTtJQUNWLE9BQU87SUFDUCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFNBQVM7SUFDVCxRQUFRO0lBQ1IsU0FBUztJQUNULFFBQVE7SUFDUixTQUFTO0lBQ1QsUUFBUTtJQUNSLFVBQVU7SUFDVixTQUFTO0lBQ1QsVUFBVTtJQUNWLFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsU0FBUztJQUNULFNBQVM7SUFDVCxTQUFTO0lBQ1QsU0FBUztJQUNULFFBQVE7SUFDUixVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxPQUFPO0lBQ1AsUUFBUTtJQUNSLE9BQU87SUFDUCxLQUFLO0lBQ0wsS0FBSztJQUNMLE9BQU87SUFDUCxLQUFLO0lBQ0wsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsUUFBUTtJQUNSLFVBQVU7SUFDVixTQUFTO0lBQ1QsVUFBVTtJQUNWLFdBQVc7SUFDWCxRQUFRO0lBQ1IsV0FBVztJQUNYLE1BQU07SUFDTixTQUFTO0lBQ1QsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixRQUFRO0lBQ1IsV0FBVztJQUNYLFFBQVE7SUFDUixTQUFTO0lBQ1QsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFFBQVE7SUFDUixPQUFPO0lBQ1AsUUFBUTtJQUNSLFNBQVM7SUFDVCxRQUFRO0lBQ1IsU0FBUztJQUNULFNBQVM7SUFDVCxNQUFNO0lBQ04sS0FBSztJQUNMLE1BQU07SUFDTixVQUFVO0lBQ1YsTUFBTTtJQUNOLEtBQUs7SUFDTCxPQUFPO0lBQ1AsVUFBVTtJQUNWLE9BQU87SUFDUCxNQUFNO0lBQ04sU0FBUztJQUNULFVBQVU7SUFDVixNQUFNO0lBQ04sVUFBVTtJQUNWLFNBQVM7SUFDVCxVQUFVO0lBQ1YsU0FBUztJQUNULE9BQU87SUFDUCxRQUFRO0lBQ1IsVUFBVTtJQUNWLE1BQU07SUFDTixVQUFVO0lBQ1YsT0FBTztJQUNQLFNBQVM7SUFDVCxXQUFXO0lBQ1gsU0FBUztJQUNULE1BQU07SUFDTixRQUFRO0lBQ1IsTUFBTTtJQUNOLE1BQU07SUFDTixNQUFNO0lBQ04sTUFBTTtJQUNOLFNBQVM7SUFDVCxNQUFNO0lBQ04sTUFBTTtJQUNOLFVBQVU7SUFDVixTQUFTO0lBQ1QsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLE9BQU87SUFDUCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFFBQVE7SUFDUixVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsS0FBSztJQUNMLFdBQVc7SUFDWCxTQUFTO0lBQ1QsT0FBTztJQUNQLE9BQU87SUFDUCxNQUFNO0lBQ04sT0FBTztJQUNQLE9BQU87SUFDUCxRQUFRO0lBQ1IsU0FBUztJQUNULFFBQVE7SUFDUixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixPQUFPO0lBQ1AsVUFBVTtJQUNWLFFBQVE7SUFDUixVQUFVO0lBQ1YsVUFBVTtJQUNWLFNBQVM7SUFDVCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFNBQVM7SUFDVCxRQUFRO0lBQ1IsU0FBUztJQUNULFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFNBQVM7SUFDVCxXQUFXO0lBQ1gsV0FBVztJQUNYLFNBQVM7SUFDVCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFNBQVM7SUFDVCxVQUFVO0lBQ1YsUUFBUTtJQUNSLE1BQU07SUFDTixPQUFPO0lBQ1AsTUFBTTtJQUNOLFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxTQUFTO0lBQ1QsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFNBQVM7SUFDVCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsU0FBUztJQUNULFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsU0FBUztJQUNULFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLEtBQUs7SUFDTCxRQUFRO0lBQ1IsU0FBUztJQUNULFdBQVc7SUFDWCxTQUFTO0lBQ1QsV0FBVztJQUNYLFFBQVE7SUFDUixVQUFVO0lBQ1YsUUFBUTtJQUNSLE9BQU87SUFDUCxPQUFPO0lBQ1AsV0FBVztJQUNYLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixRQUFRO0lBQ1IsUUFBUTtJQUNSLFNBQVM7SUFDVCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFNBQVM7SUFDVCxPQUFPO0lBQ1AsT0FBTztJQUNQLFFBQVE7SUFDUixTQUFTO0lBQ1QsUUFBUTtJQUNSLFdBQVc7SUFDWCxNQUFNO0lBQ04sVUFBVTtJQUNWLFdBQVc7SUFDWCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsVUFBVTtJQUNWLFFBQVE7SUFDUixTQUFTO0lBQ1QsVUFBVTtJQUNWLE9BQU87SUFDUCxVQUFVO0lBQ1YsTUFBTTtJQUNOLFdBQVc7SUFDWCxPQUFPO0lBQ1AsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsU0FBUztJQUNULFdBQVc7SUFDWCxRQUFRO0lBQ1IsT0FBTztJQUNQLFdBQVc7SUFDWCxXQUFXO0lBQ1gsUUFBUTtJQUNSLE9BQU87SUFDUCxTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsUUFBUTtJQUNSLFNBQVM7SUFDVCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxRQUFRO0lBQ1IsU0FBUztJQUNULFdBQVc7SUFDWCxRQUFRO0lBQ1IsUUFBUTtJQUNSLE9BQU87SUFDUCxTQUFTO0lBQ1QsU0FBUztJQUNULFFBQVE7SUFDUixVQUFVO0lBQ1YsUUFBUTtJQUNSLFFBQVE7SUFDUixTQUFTO0lBQ1QsU0FBUztJQUNULFNBQVM7SUFDVCxRQUFRO0lBQ1IsU0FBUztJQUNULFdBQVc7SUFDWCxRQUFRO0lBQ1IsU0FBUztJQUNULFdBQVc7SUFDWCxPQUFPO0lBQ1AsVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsU0FBUztJQUNULFNBQVM7SUFDVCxTQUFTO0lBQ1QsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLE9BQU87SUFDUCxRQUFRO0lBQ1IsUUFBUTtJQUNSLFNBQVM7SUFDVCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFNBQVM7SUFDVCxPQUFPO0lBQ1AsV0FBVztJQUNYLFFBQVE7SUFDUixVQUFVO0lBQ1YsV0FBVztJQUNYLE1BQU07SUFDTixVQUFVO0lBQ1YsU0FBUztJQUNULE9BQU87SUFDUCxXQUFXO0lBQ1gsU0FBUztJQUNULFFBQVE7SUFDUixXQUFXO0lBQ1gsV0FBVztJQUNYLFFBQVE7SUFDUixVQUFVO0lBQ1YsT0FBTztJQUNQLFdBQVc7SUFDWCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFFBQVE7SUFDUixTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixRQUFRO0lBQ1IsT0FBTztJQUNQLE9BQU87SUFDUCxRQUFRO0lBQ1IsU0FBUztJQUNULFVBQVU7SUFDVixTQUFTO0lBQ1QsUUFBUTtJQUNSLFFBQVE7SUFDUixPQUFPO0lBQ1AsUUFBUTtJQUNSLFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixTQUFTO0lBQ1QsUUFBUTtJQUNSLE1BQU07SUFDTixRQUFRO0lBQ1IsVUFBVTtJQUNWLFNBQVM7SUFDVCxRQUFRO0lBQ1IsU0FBUztJQUNULFNBQVM7SUFDVCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFNBQVM7SUFDVCxXQUFXO0lBQ1gsT0FBTztJQUNQLFFBQVE7SUFDUixTQUFTO0lBQ1QsVUFBVTtJQUNWLFdBQVc7SUFDWCxLQUFLO0lBQ0wsVUFBVTtJQUNWLFNBQVM7SUFDVCxPQUFPO0lBQ1AsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFNBQVM7SUFDVCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFVBQVU7SUFDVixTQUFTO0lBQ1QsV0FBVztJQUNYLE9BQU87SUFDUCxNQUFNO0lBQ04sVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLE9BQU87SUFDUCxNQUFNO0lBQ04sV0FBVztJQUNYLFdBQVc7SUFDWCxRQUFRO0lBQ1IsV0FBVztJQUNYLE9BQU87SUFDUCxRQUFRO0lBQ1IsVUFBVTtJQUNWLE9BQU87SUFDUCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFdBQVc7SUFDWCxXQUFXO0lBQ1gsT0FBTztJQUNQLFNBQVM7SUFDVCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFNBQVM7SUFDVCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFNBQVM7SUFDVCxXQUFXO0lBQ1gsT0FBTztJQUNQLFdBQVc7SUFDWCxPQUFPO0lBQ1AsUUFBUTtJQUNSLFVBQVU7SUFDVixTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixPQUFPO0lBQ1AsU0FBUztJQUNULE9BQU87SUFDUCxRQUFRO0lBQ1IsU0FBUztJQUNULFNBQVM7SUFDVCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFNBQVM7SUFDVCxVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFFBQVE7SUFDUixTQUFTO0lBQ1QsV0FBVztJQUNYLFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsU0FBUztJQUNULFNBQVM7SUFDVCxVQUFVO0lBQ1YsU0FBUztJQUNULFdBQVc7SUFDWCxVQUFVO0lBQ1YsT0FBTztJQUNQLFVBQVU7SUFDVixPQUFPO0lBQ1AsUUFBUTtJQUNSLFdBQVc7SUFDWCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFdBQVc7SUFDWCxTQUFTO0lBQ1QsTUFBTTtJQUNOLE1BQU07SUFDTixNQUFNO0lBQ04sTUFBTTtJQUNOLE1BQU07SUFDTixPQUFPO0lBQ1AsTUFBTTtJQUNOLFNBQVM7SUFDVCxVQUFVO0lBQ1YsUUFBUTtJQUNSLE1BQU07SUFDTixXQUFXO0lBQ1gsU0FBUztJQUNULE9BQU87SUFDUCxLQUFLO0lBQ0wsTUFBTTtJQUNOLE1BQU07SUFDTixNQUFNO0lBQ04sU0FBUztJQUNULFNBQVM7SUFDVCxVQUFVO0lBQ1YsV0FBVztJQUNYLFFBQVE7SUFDUixPQUFPO0lBQ1AsUUFBUTtJQUNSLE9BQU87SUFDUCxRQUFRO0lBQ1IsT0FBTztJQUNQLFFBQVE7SUFDUixRQUFRO0lBQ1IsT0FBTztJQUNQLFFBQVE7SUFDUixVQUFVO0lBQ1YsT0FBTztJQUNQLE1BQU07SUFDTixXQUFXO0lBQ1gsU0FBUztJQUNULFdBQVc7SUFDWCxTQUFTO0lBQ1QsUUFBUTtJQUNSLE1BQU07SUFDTixNQUFNO0lBQ04sU0FBUztJQUNULE1BQU07SUFDTixRQUFRO0lBQ1IsUUFBUTtJQUNSLE9BQU87SUFDUCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFNBQVM7SUFDVCxVQUFVO0lBQ1YsV0FBVztJQUNYLE1BQU07SUFDTixRQUFRO0lBQ1IsVUFBVTtJQUNWLFVBQVU7SUFDVixRQUFRO0lBQ1IsV0FBVztJQUNYLFVBQVU7SUFDVixTQUFTO0lBQ1QsUUFBUTtJQUNSLFVBQVU7SUFDVixPQUFPO0lBQ1AsTUFBTTtJQUNOLFFBQVE7SUFDUixVQUFVO0lBQ1YsVUFBVTtJQUNWLFFBQVE7SUFDUixTQUFTO0lBQ1QsUUFBUTtJQUNSLFNBQVM7SUFDVCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFFBQVE7SUFDUixTQUFTO0lBQ1QsV0FBVztJQUNYLFNBQVM7SUFDVCxTQUFTO0lBQ1QsT0FBTztJQUNQLFFBQVE7SUFDUixVQUFVO0lBQ1YsT0FBTztJQUNQLFNBQVM7SUFDVCxNQUFNO0lBQ04sVUFBVTtJQUNWLFdBQVc7SUFDWCxTQUFTO0lBQ1QsT0FBTztJQUNQLFFBQVE7SUFDUixLQUFLO0lBQ0wsVUFBVTtJQUNWLFFBQVE7SUFDUixVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsUUFBUTtJQUNSLFNBQVM7SUFDVCxVQUFVO0lBQ1YsV0FBVztJQUNYLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFNBQVM7SUFDVCxXQUFXO0lBQ1gsU0FBUztJQUNULFFBQVE7SUFDUixVQUFVO0lBQ1YsV0FBVztJQUNYLFNBQVM7SUFDVCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFdBQVc7SUFDWCxXQUFXO0lBQ1gsU0FBUztJQUNULFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxRQUFRO0lBQ1IsU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFNBQVM7SUFDVCxRQUFRO0lBQ1IsU0FBUztJQUNULFFBQVE7SUFDUixXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxRQUFRO0lBQ1IsU0FBUztJQUNULFdBQVc7SUFDWCxTQUFTO0lBQ1QsT0FBTztJQUNQLFNBQVM7SUFDVCxXQUFXO0lBQ1gsU0FBUztJQUNULFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFNBQVM7SUFDVCxRQUFRO0lBQ1IsU0FBUztJQUNULFNBQVM7SUFDVCxXQUFXO0lBQ1gsU0FBUztJQUNULFNBQVM7SUFDVCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFdBQVc7SUFDWCxVQUFVO0lBQ1YsT0FBTztJQUNQLFFBQVE7SUFDUixXQUFXO0lBQ1gsU0FBUztJQUNULFNBQVM7SUFDVCxRQUFRO0lBQ1IsT0FBTztJQUNQLFVBQVU7SUFDVixPQUFPO0lBQ1AsT0FBTztJQUNQLE9BQU87SUFDUCxRQUFRO0lBQ1IsUUFBUTtJQUNSLFVBQVU7SUFDVixTQUFTO0lBQ1QsU0FBUztJQUNULFdBQVc7SUFDWCxPQUFPO0lBQ1AsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLE9BQU87SUFDUCxTQUFTO0lBQ1QsV0FBVztJQUNYLFNBQVM7SUFDVCxXQUFXO0lBQ1gsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsU0FBUztJQUNULFNBQVM7SUFDVCxTQUFTO0lBQ1QsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsU0FBUztJQUNULFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLE9BQU87SUFDUCxPQUFPO0lBQ1AsV0FBVztJQUNYLFFBQVE7SUFDUixVQUFVO0lBQ1YsV0FBVztJQUNYLFFBQVE7SUFDUixXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFNBQVM7SUFDVCxPQUFPO0lBQ1AsU0FBUztJQUNULFdBQVc7SUFDWCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixPQUFPO0lBQ1AsVUFBVTtJQUNWLFFBQVE7SUFDUixRQUFRO0lBQ1IsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFNBQVM7SUFDVCxTQUFTO0lBQ1QsV0FBVztJQUNYLFdBQVc7SUFDWCxTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsT0FBTztJQUNQLFFBQVE7SUFDUixPQUFPO0lBQ1AsV0FBVztJQUNYLE9BQU87SUFDUCxTQUFTO0lBQ1QsS0FBSztJQUNMLFNBQVM7SUFDVCxRQUFRO0lBQ1IsV0FBVztJQUNYLFFBQVE7SUFDUixRQUFRO0lBQ1IsS0FBSztJQUNMLE1BQU07SUFDTixXQUFXO0lBQ1gsTUFBTTtJQUNOLFNBQVM7SUFDVCxPQUFPO0lBQ1AsV0FBVztJQUNYLE1BQU07SUFDTixRQUFRO0lBQ1IsUUFBUTtJQUNSLE9BQU87SUFDUCxVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLE1BQU07SUFDTixPQUFPO0lBQ1AsUUFBUTtJQUNSLE9BQU87SUFDUCxVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixRQUFRO0lBQ1IsVUFBVTtJQUNWLFdBQVc7SUFDWCxPQUFPO0lBQ1AsU0FBUztJQUNULFVBQVU7SUFDVixRQUFRO0lBQ1IsUUFBUTtJQUNSLFNBQVM7SUFDVCxRQUFRO0lBQ1IsUUFBUTtJQUNSLFVBQVU7SUFDVixXQUFXO0lBQ1gsTUFBTTtJQUNOLE9BQU87SUFDUCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxRQUFRO0lBQ1IsV0FBVztJQUNYLFNBQVM7SUFDVCxVQUFVO0lBQ1YsU0FBUztJQUNULFFBQVE7SUFDUixPQUFPO0lBQ1AsU0FBUztJQUNULE1BQU07SUFDTixRQUFRO0lBQ1IsVUFBVTtJQUNWLFNBQVM7SUFDVCxXQUFXO0lBQ1gsUUFBUTtJQUNSLE9BQU87SUFDUCxVQUFVO0lBQ1YsT0FBTztJQUNQLFVBQVU7SUFDVixPQUFPO0lBQ1AsU0FBUztJQUNULFdBQVc7SUFDWCxXQUFXO0lBQ1gsU0FBUztJQUNULFNBQVM7SUFDVCxPQUFPO0lBQ1AsU0FBUztJQUNULFNBQVM7SUFDVCxRQUFRO0lBQ1IsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsU0FBUztJQUNULFFBQVE7SUFDUixPQUFPO0lBQ1AsU0FBUztJQUNULFNBQVM7SUFDVCxXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxPQUFPO0lBQ1AsT0FBTztJQUNQLE9BQU87SUFDUCxTQUFTO0lBQ1QsV0FBVztJQUNYLE9BQU87SUFDUCxNQUFNO0lBQ04sUUFBUTtJQUNSLFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLE9BQU87SUFDUCxPQUFPO0lBQ1AsTUFBTTtJQUNOLFFBQVE7SUFDUixRQUFRO0lBQ1IsTUFBTTtJQUNOLFFBQVE7SUFDUixPQUFPO0lBQ1AsUUFBUTtJQUNSLFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsT0FBTztJQUNQLFFBQVE7SUFDUixRQUFRO0lBQ1IsTUFBTTtJQUNOLE1BQU07SUFDTixRQUFRO0lBQ1IsUUFBUTtJQUNSLFNBQVM7SUFDVCxRQUFRO0lBQ1IsU0FBUztJQUNULFNBQVM7SUFDVCxVQUFVO0lBQ1YsU0FBUztJQUNULFFBQVE7SUFDUixNQUFNO0lBQ04sUUFBUTtJQUNSLE9BQU87SUFDUCxRQUFRO0lBQ1IsVUFBVTtJQUNWLE1BQU07SUFDTixRQUFRO0lBQ1IsT0FBTztJQUNQLFdBQVc7SUFDWCxRQUFRO0lBQ1IsUUFBUTtJQUNSLFFBQVE7SUFDUixTQUFTO0lBQ1QsUUFBUTtJQUNSLFNBQVM7SUFDVCxTQUFTO0lBQ1QsU0FBUztJQUNULE9BQU87SUFDUCxNQUFNO0lBQ04sUUFBUTtJQUNSLFFBQVE7SUFDUixNQUFNO0lBQ04sU0FBUztJQUNULFFBQVE7SUFDUixPQUFPO0lBQ1AsUUFBUTtJQUNSLFFBQVE7SUFDUixTQUFTO0lBQ1QsV0FBVztJQUNYLFVBQVU7SUFDVixPQUFPO0lBQ1AsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixNQUFNO0lBQ04sV0FBVztJQUNYLFVBQVU7SUFDVixTQUFTO0lBQ1QsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFFBQVE7SUFDUixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsV0FBVztJQUNYLFFBQVE7SUFDUixPQUFPO0lBQ1AsU0FBUztJQUNULFFBQVE7SUFDUixRQUFRO0lBQ1IsU0FBUztJQUNULFFBQVE7SUFDUixTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsUUFBUTtJQUNSLFFBQVE7SUFDUixXQUFXO0lBQ1gsUUFBUTtJQUNSLFFBQVE7SUFDUixRQUFRO0lBQ1IsUUFBUTtJQUNSLFdBQVc7SUFDWCxXQUFXO0lBQ1gsU0FBUztJQUNULFFBQVE7SUFDUixVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsU0FBUztJQUNULFdBQVc7SUFDWCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFdBQVc7SUFDWCxTQUFTO0lBQ1QsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFFBQVE7SUFDUixTQUFTO0lBQ1QsUUFBUTtJQUNSLFVBQVU7SUFDVixVQUFVO0lBQ1YsUUFBUTtJQUNSLFdBQVc7SUFDWCxXQUFXO0lBQ1gsU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixTQUFTO0lBQ1QsU0FBUztJQUNULFNBQVM7SUFDVCxXQUFXO0lBQ1gsV0FBVztJQUNYLFNBQVM7SUFDVCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxRQUFRO0lBQ1IsUUFBUTtJQUNSLFNBQVM7SUFDVCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixTQUFTO0lBQ1QsU0FBUztJQUNULFdBQVc7SUFDWCxRQUFRO0lBQ1IsV0FBVztJQUNYLFdBQVc7SUFDWCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFVBQVU7SUFDVixXQUFXO0lBQ1gsUUFBUTtJQUNSLFFBQVE7SUFDUixTQUFTO0lBQ1QsU0FBUztJQUNULFFBQVE7SUFDUixRQUFRO0lBQ1IsUUFBUTtJQUNSLFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFNBQVM7SUFDVCxXQUFXO0lBQ1gsU0FBUztJQUNULFNBQVM7SUFDVCxVQUFVO0lBQ1YsV0FBVztJQUNYLE9BQU87SUFDUCxRQUFRO0lBQ1IsUUFBUTtJQUNSLFdBQVc7SUFDWCxXQUFXO0lBQ1gsU0FBUztJQUNULFdBQVc7SUFDWCxTQUFTO0lBQ1QsV0FBVztJQUNYLFFBQVE7SUFDUixVQUFVO0lBQ1YsU0FBUztJQUNULFdBQVc7SUFDWCxXQUFXO0lBQ1gsU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsT0FBTztJQUNQLE9BQU87SUFDUCxTQUFTO0lBQ1QsU0FBUztJQUNULFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsT0FBTztJQUNQLFNBQVM7SUFDVCxXQUFXO0lBQ1gsU0FBUztJQUNULFFBQVE7SUFDUixRQUFRO0lBQ1IsUUFBUTtJQUNSLFVBQVU7SUFDVixRQUFRO0lBQ1IsV0FBVztJQUNYLE1BQU07SUFDTixRQUFRO0lBQ1IsUUFBUTtJQUNSLFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFFBQVE7SUFDUixVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsT0FBTztJQUNQLFNBQVM7SUFDVCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFNBQVM7SUFDVCxRQUFRO0lBQ1IsV0FBVztJQUNYLFNBQVM7SUFDVCxTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixRQUFRO0lBQ1IsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsU0FBUztJQUNULFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFFBQVE7SUFDUixRQUFRO0lBQ1IsVUFBVTtJQUNWLFNBQVM7SUFDVCxRQUFRO0lBQ1IsU0FBUztJQUNULFdBQVc7SUFDWCxXQUFXO0lBQ1gsU0FBUztJQUNULFFBQVE7SUFDUixRQUFRO0lBQ1IsVUFBVTtJQUNWLFdBQVc7SUFDWCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFVBQVU7SUFDVixRQUFRO0lBQ1IsVUFBVTtJQUNWLFNBQVM7SUFDVCxRQUFRO0lBQ1IsU0FBUztJQUNULE9BQU87SUFDUCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFdBQVc7SUFDWCxRQUFRO0lBQ1IsV0FBVztJQUNYLFdBQVc7SUFDWCxTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxNQUFNO0lBQ04sU0FBUztJQUNULFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxTQUFTO0lBQ1QsU0FBUztJQUNULFdBQVc7SUFDWCxTQUFTO0lBQ1QsT0FBTztJQUNQLFFBQVE7SUFDUixVQUFVO0lBQ1YsU0FBUztJQUNULFFBQVE7SUFDUixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsUUFBUTtJQUNSLFFBQVE7SUFDUixPQUFPO0lBQ1AsU0FBUztJQUNULFNBQVM7SUFDVCxXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFNBQVM7SUFDVCxVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixRQUFRO0lBQ1IsVUFBVTtJQUNWLFNBQVM7SUFDVCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFFBQVE7SUFDUixVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFdBQVc7SUFDWCxRQUFRO0lBQ1IsV0FBVztJQUNYLFdBQVc7SUFDWCxTQUFTO0lBQ1QsU0FBUztJQUNULFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFFBQVE7SUFDUixRQUFRO0lBQ1IsVUFBVTtJQUNWLFNBQVM7SUFDVCxTQUFTO0lBQ1QsU0FBUztJQUNULFNBQVM7SUFDVCxTQUFTO0lBQ1QsU0FBUztJQUNULFNBQVM7SUFDVCxXQUFXO0lBQ1gsV0FBVztJQUNYLE9BQU87SUFDUCxRQUFRO0lBQ1IsU0FBUztJQUNULFFBQVE7SUFDUixTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixPQUFPO0lBQ1AsUUFBUTtJQUNSLFNBQVM7SUFDVCxTQUFTO0lBQ1QsU0FBUztJQUNULFFBQVE7SUFDUixTQUFTO0lBQ1QsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsU0FBUztJQUNULFdBQVc7SUFDWCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFdBQVc7SUFDWCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFNBQVM7SUFDVCxXQUFXO0lBQ1gsU0FBUztJQUNULFNBQVM7SUFDVCxVQUFVO0lBQ1YsV0FBVztJQUNYLFFBQVE7SUFDUixRQUFRO0lBQ1IsVUFBVTtJQUNWLFdBQVc7SUFDWCxRQUFRO0lBQ1IsUUFBUTtJQUNSLFFBQVE7SUFDUixRQUFRO0lBQ1IsUUFBUTtJQUNSLFFBQVE7SUFDUixRQUFRO0lBQ1IsU0FBUztJQUNULE9BQU87SUFDUCxRQUFRO0lBQ1IsU0FBUztJQUNULE1BQU07SUFDTixRQUFRO0lBQ1IsUUFBUTtJQUNSLFVBQVU7SUFDVixTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixRQUFRO0lBQ1IsTUFBTTtJQUNOLFFBQVE7SUFDUixTQUFTO0lBQ1QsTUFBTTtJQUNOLFNBQVM7SUFDVCxPQUFPO0lBQ1AsT0FBTztJQUNQLFNBQVM7SUFDVCxRQUFRO0lBQ1IsTUFBTTtJQUNOLE1BQU07SUFDTixPQUFPO0lBQ1AsU0FBUztJQUNULE1BQU07SUFDTixTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsUUFBUTtJQUNSLFVBQVU7SUFDVixTQUFTO0lBQ1QsTUFBTTtJQUNOLFFBQVE7SUFDUixNQUFNO0lBQ04sU0FBUztJQUNULFNBQVM7SUFDVCxPQUFPO0lBQ1AsT0FBTztJQUNQLFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFFBQVE7SUFDUixTQUFTO0lBQ1QsT0FBTztJQUNQLFNBQVM7SUFDVCxNQUFNO0lBQ04sT0FBTztJQUNQLFVBQVU7SUFDVixRQUFRO0lBQ1IsVUFBVTtJQUNWLFFBQVE7SUFDUixRQUFRO0lBQ1IsVUFBVTtJQUNWLFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsT0FBTztJQUNQLE9BQU87SUFDUCxPQUFPO0lBQ1AsTUFBTTtJQUNOLE1BQU07SUFDTixRQUFRO0lBQ1IsUUFBUTtJQUNSLE1BQU07SUFDTixRQUFRO0lBQ1IsU0FBUztJQUNULFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsU0FBUztJQUNULFdBQVc7SUFDWCxTQUFTO0lBQ1QsU0FBUztJQUNULE9BQU87SUFDUCxRQUFRO0lBQ1IsT0FBTztJQUNQLFFBQVE7SUFDUixRQUFRO0lBQ1IsU0FBUztJQUNULFFBQVE7SUFDUixTQUFTO0lBQ1QsTUFBTTtJQUNOLFFBQVE7SUFDUixRQUFRO0lBQ1IsS0FBSztJQUNMLFFBQVE7SUFDUixNQUFNO0lBQ04sUUFBUTtJQUNSLFVBQVU7SUFDVixTQUFTO0lBQ1QsT0FBTztJQUNQLFdBQVc7SUFDWCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFNBQVM7SUFDVCxPQUFPO0lBQ1AsTUFBTTtJQUNOLFFBQVE7SUFDUixTQUFTO0lBQ1QsT0FBTztJQUNQLE1BQU07SUFDTixNQUFNO0lBQ04sTUFBTTtJQUNOLEtBQUs7SUFDTCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFdBQVc7SUFDWCxRQUFRO0lBQ1IsV0FBVztJQUNYLFFBQVE7SUFDUixXQUFXO0lBQ1gsU0FBUztJQUNULFVBQVU7SUFDVixPQUFPO0lBQ1AsU0FBUztJQUNULFFBQVE7SUFDUixXQUFXO0lBQ1gsV0FBVztJQUNYLFFBQVE7SUFDUixVQUFVO0lBQ1YsU0FBUztJQUNULE1BQU07SUFDTixNQUFNO0lBQ04sU0FBUztJQUNULE9BQU87SUFDUCxNQUFNO0lBQ04sT0FBTztJQUNQLE1BQU07SUFDTixPQUFPO0lBQ1AsUUFBUTtJQUNSLFVBQVU7SUFDVixRQUFRO0lBQ1IsUUFBUTtJQUNSLE9BQU87SUFDUCxRQUFRO0lBQ1IsT0FBTztJQUNQLE1BQU07SUFDTixVQUFVO0lBQ1YsUUFBUTtJQUNSLFNBQVM7SUFDVCxXQUFXO0lBQ1gsV0FBVztJQUNYLE1BQU07SUFDTixRQUFRO0lBQ1IsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFFBQVE7SUFDUixTQUFTO0lBQ1QsVUFBVTtJQUNWLFNBQVM7SUFDVCxXQUFXO0lBQ1gsU0FBUztJQUNULFFBQVE7SUFDUixVQUFVO0lBQ1YsU0FBUztJQUNULFNBQVM7SUFDVCxXQUFXO0lBQ1gsU0FBUztJQUNULFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLE9BQU87SUFDUCxVQUFVO0lBQ1YsV0FBVztJQUNYLE1BQU07SUFDTixPQUFPO0lBQ1AsU0FBUztJQUNULFdBQVc7SUFDWCxPQUFPO0lBQ1AsU0FBUztJQUNULFdBQVc7SUFDWCxTQUFTO0lBQ1QsTUFBTTtJQUNOLFdBQVc7SUFDWCxPQUFPO0lBQ1AsU0FBUztJQUNULFVBQVU7SUFDVixPQUFPO0lBQ1AsV0FBVztJQUNYLFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsT0FBTztJQUNQLE9BQU87SUFDUCxRQUFRO0lBQ1IsU0FBUztJQUNULE9BQU87SUFDUCxTQUFTO0lBQ1QsUUFBUTtJQUNSLE9BQU87SUFDUCxXQUFXO0lBQ1gsS0FBSztJQUNMLFNBQVM7SUFDVCxRQUFRO0lBQ1IsU0FBUztJQUNULFVBQVU7SUFDVixPQUFPO0lBQ1AsU0FBUztJQUNULFVBQVU7SUFDVixTQUFTO0lBQ1QsVUFBVTtJQUNWLE1BQU07SUFDTixTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixPQUFPO0lBQ1AsV0FBVztJQUNYLFFBQVE7SUFDUixVQUFVO0lBQ1YsV0FBVztJQUNYLFFBQVE7SUFDUixPQUFPO0lBQ1AsU0FBUztJQUNULFdBQVc7SUFDWCxVQUFVO0lBQ1YsT0FBTztJQUNQLFdBQVc7SUFDWCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFdBQVc7SUFDWCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsU0FBUztJQUNULFNBQVM7SUFDVCxXQUFXO0lBQ1gsT0FBTztJQUNQLE9BQU87SUFDUCxVQUFVO0lBQ1YsT0FBTztJQUNQLE9BQU87SUFDUCxTQUFTO0lBQ1QsT0FBTztJQUNQLFFBQVE7SUFDUixXQUFXO0lBQ1gsV0FBVztJQUNYLFFBQVE7SUFDUixXQUFXO0lBQ1gsUUFBUTtJQUNSLFNBQVM7SUFDVCxPQUFPO0lBQ1AsVUFBVTtJQUNWLFFBQVE7SUFDUixXQUFXO0lBQ1gsU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsUUFBUTtJQUNSLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsT0FBTztJQUNQLFNBQVM7SUFDVCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFVBQVU7SUFDVixRQUFRO0lBQ1IsVUFBVTtJQUNWLFdBQVc7SUFDWCxRQUFRO0lBQ1IsUUFBUTtJQUNSLFNBQVM7SUFDVCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixPQUFPO0lBQ1AsT0FBTztJQUNQLFVBQVU7SUFDVixXQUFXO0lBQ1gsUUFBUTtJQUNSLFNBQVM7SUFDVCxVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxRQUFRO0lBQ1IsU0FBUztJQUNULFFBQVE7SUFDUixXQUFXO0lBQ1gsUUFBUTtJQUNSLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLE9BQU87SUFDUCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsUUFBUTtJQUNSLFVBQVU7SUFDVixTQUFTO0lBQ1QsU0FBUztJQUNULFNBQVM7SUFDVCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLE1BQU07SUFDTixTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFNBQVM7SUFDVCxVQUFVO0lBQ1YsV0FBVztJQUNYLFFBQVE7SUFDUixTQUFTO0lBQ1QsTUFBTTtJQUNOLFFBQVE7SUFDUixVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVixPQUFPO0lBQ1AsV0FBVztJQUNYLFFBQVE7SUFDUixRQUFRO0lBQ1IsUUFBUTtJQUNSLFVBQVU7SUFDVixXQUFXO0lBQ1gsUUFBUTtJQUNSLFFBQVE7SUFDUixXQUFXO0lBQ1gsU0FBUztJQUNULFVBQVU7SUFDVixPQUFPO0lBQ1AsU0FBUztJQUNULFNBQVM7SUFDVCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFNBQVM7SUFDVCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFVBQVU7SUFDVixPQUFPO0lBQ1AsV0FBVztJQUNYLFdBQVc7SUFDWCxTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixRQUFRO0lBQ1IsT0FBTztJQUNQLFFBQVE7SUFDUixTQUFTO0lBQ1QsV0FBVztJQUNYLFNBQVM7SUFDVCxRQUFRO0lBQ1IsT0FBTztJQUNQLE9BQU87SUFDUCxVQUFVO0lBQ1YsU0FBUztJQUNULFdBQVc7SUFDWCxTQUFTO0lBQ1QsT0FBTztJQUNQLE9BQU87SUFDUCxTQUFTO0lBQ1QsU0FBUztJQUNULE9BQU87SUFDUCxTQUFTO0lBQ1QsVUFBVTtJQUNWLE9BQU87SUFDUCxRQUFRO0lBQ1IsT0FBTztJQUNQLFNBQVM7SUFDVCxPQUFPO0lBQ1AsV0FBVztJQUNYLFNBQVM7SUFDVCxTQUFTO0lBQ1QsU0FBUztJQUNULFdBQVc7SUFDWCxPQUFPO0lBQ1AsUUFBUTtJQUNSLE1BQU07SUFDTixPQUFPO0lBQ1AsT0FBTztJQUNQLE9BQU87SUFDUCxPQUFPO0lBQ1AsU0FBUztJQUNULFFBQVE7SUFDUixVQUFVO0lBQ1YsUUFBUTtJQUNSLFFBQVE7SUFDUixTQUFTO0lBQ1QsVUFBVTtJQUNWLFdBQVc7SUFDWCxRQUFRO0lBQ1IsU0FBUztJQUNULFFBQVE7SUFDUixTQUFTO0lBQ1QsT0FBTztJQUNQLFNBQVM7SUFDVCxXQUFXO0lBQ1gsU0FBUztJQUNULE9BQU87SUFDUCxNQUFNO0lBQ04sT0FBTztJQUNQLFdBQVc7SUFDWCxPQUFPO0lBQ1AsT0FBTztJQUNQLFVBQVU7SUFDVixTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixPQUFPO0lBQ1AsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsU0FBUztJQUNULFNBQVM7SUFDVCxXQUFXO0lBQ1gsV0FBVztJQUNYLFNBQVM7SUFDVCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFdBQVc7SUFDWCxRQUFRO0lBQ1IsT0FBTztJQUNQLE9BQU87SUFDUCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixRQUFRO0lBQ1IsVUFBVTtJQUNWLFNBQVM7SUFDVCxTQUFTO0lBQ1QsT0FBTztJQUNQLFNBQVM7SUFDVCxXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVixPQUFPO0lBQ1AsUUFBUTtJQUNSLFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixRQUFRO0lBQ1IsUUFBUTtJQUNSLFFBQVE7SUFDUixRQUFRO0lBQ1IsUUFBUTtJQUNSLFNBQVM7SUFDVCxVQUFVO0lBQ1YsV0FBVztJQUNYLFFBQVE7SUFDUixPQUFPO0lBQ1AsUUFBUTtJQUNSLFVBQVU7SUFDVixTQUFTO0lBQ1QsU0FBUztJQUNULFdBQVc7SUFDWCxNQUFNO0lBQ04sT0FBTztJQUNQLE1BQU07SUFDTixLQUFLO0lBQ0wsU0FBUztJQUNULFVBQVU7SUFDVixTQUFTO0lBQ1QsUUFBUTtJQUNSLFFBQVE7SUFDUixRQUFRO0lBQ1IsTUFBTTtJQUNOLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFFBQVE7SUFDUixRQUFRO0lBQ1IsU0FBUztJQUNULE1BQU07SUFDTixXQUFXO0lBQ1gsT0FBTztJQUNQLE1BQU07SUFDTixNQUFNO0lBQ04sUUFBUTtJQUNSLFdBQVc7SUFDWCxRQUFRO0lBQ1IsV0FBVztJQUNYLFFBQVE7SUFDUixVQUFVO0lBQ1YsUUFBUTtJQUNSLFNBQVM7SUFDVCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFNBQVM7SUFDVCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsUUFBUTtJQUNSLFNBQVM7SUFDVCxLQUFLO0lBQ0wsT0FBTztJQUNQLFFBQVE7SUFDUixRQUFRO0lBQ1IsUUFBUTtJQUNSLFNBQVM7SUFDVCxVQUFVO0lBQ1YsV0FBVztJQUNYLFNBQVM7SUFDVCxTQUFTO0lBQ1QsT0FBTztJQUNQLFNBQVM7SUFDVCxVQUFVO0lBQ1YsV0FBVztJQUNYLFNBQVM7SUFDVCxTQUFTO0lBQ1QsTUFBTTtJQUNOLFFBQVE7SUFDUixRQUFRO0lBQ1IsVUFBVTtJQUNWLFFBQVE7SUFDUixTQUFTO0lBQ1QsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsU0FBUztJQUNULFFBQVE7SUFDUixRQUFRO0lBQ1IsUUFBUTtJQUNSLE1BQU07SUFDTixPQUFPO0lBQ1AsT0FBTztJQUNQLE9BQU87SUFDUCxRQUFRO0lBQ1IsU0FBUztJQUNULFNBQVM7SUFDVCxVQUFVO0lBQ1YsU0FBUztJQUNULFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixRQUFRO0lBQ1IsV0FBVztJQUNYLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLE9BQU87SUFDUCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsT0FBTztJQUNQLFdBQVc7SUFDWCxTQUFTO0lBQ1QsTUFBTTtJQUNOLFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFdBQVc7SUFDWCxRQUFRO0lBQ1IsT0FBTztJQUNQLE1BQU07SUFDTixTQUFTO0lBQ1QsT0FBTztJQUNQLFVBQVU7SUFDVixXQUFXO0lBQ1gsU0FBUztJQUNULFVBQVU7SUFDVixPQUFPO0lBQ1AsU0FBUztJQUNULE1BQU07SUFDTixNQUFNO0lBQ04sT0FBTztJQUNQLE9BQU87SUFDUCxPQUFPO0lBQ1AsUUFBUTtJQUNSLE9BQU87SUFDUCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFFBQVE7SUFDUixTQUFTO0lBQ1QsT0FBTztJQUNQLFFBQVE7SUFDUixXQUFXO0lBQ1gsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixPQUFPO0lBQ1AsVUFBVTtJQUNWLFdBQVc7SUFDWCxRQUFRO0lBQ1IsTUFBTTtJQUNOLE1BQU07SUFDTixRQUFRO0lBQ1IsVUFBVTtJQUNWLFFBQVE7SUFDUixRQUFRO0lBQ1IsU0FBUztJQUNULFVBQVU7SUFDVixRQUFRO0lBQ1IsTUFBTTtJQUNOLFdBQVc7SUFDWCxTQUFTO0lBQ1QsUUFBUTtJQUNSLE1BQU07SUFDTixNQUFNO0lBQ04sT0FBTztJQUNQLE9BQU87SUFDUCxLQUFLO0lBQ0wsT0FBTztJQUNQLFNBQVM7SUFDVCxXQUFXO0lBQ1gsU0FBUztJQUNULFVBQVU7SUFDVixTQUFTO0lBQ1QsT0FBTztJQUNQLFVBQVU7SUFDVixPQUFPO0lBQ1AsV0FBVztJQUNYLE9BQU87SUFDUCxPQUFPO0lBQ1AsT0FBTztJQUNQLFNBQVM7SUFDVCxPQUFPO0lBQ1AsTUFBTTtJQUNOLFFBQVE7SUFDUixXQUFXO0lBQ1gsV0FBVztJQUNYLFNBQVM7SUFDVCxPQUFPO0lBQ1AsU0FBUztJQUNULFFBQVE7SUFDUixTQUFTO0lBQ1QsUUFBUTtJQUNSLFFBQVE7SUFDUixVQUFVO0lBQ1YsV0FBVztJQUNYLFFBQVE7SUFDUixVQUFVO0lBQ1YsT0FBTztJQUNQLFNBQVM7SUFDVCxTQUFTO0lBQ1QsTUFBTTtJQUNOLE9BQU87SUFDUCxPQUFPO0lBQ1AsUUFBUTtJQUNSLE9BQU87SUFDUCxPQUFPO0lBQ1AsUUFBUTtJQUNSLFVBQVU7SUFDVixPQUFPO0lBQ1AsT0FBTztJQUNQLFNBQVM7SUFDVCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFNBQVM7SUFDVCxRQUFRO0lBQ1IsT0FBTztJQUNQLFNBQVM7SUFDVCxTQUFTO0lBQ1QsT0FBTztJQUNQLE9BQU87SUFDUCxVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxTQUFTO0lBQ1QsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsT0FBTztJQUNQLE1BQU07SUFDTixPQUFPO0lBQ1AsU0FBUztJQUNULFFBQVE7SUFDUixVQUFVO0lBQ1YsT0FBTztJQUNQLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFNBQVM7SUFDVCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFdBQVc7SUFDWCxRQUFRO0lBQ1IsT0FBTztJQUNQLFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLE9BQU87SUFDUCxNQUFNO0lBQ04sUUFBUTtJQUNSLFdBQVc7SUFDWCxRQUFRO0lBQ1IsUUFBUTtJQUNSLE9BQU87SUFDUCxRQUFRO0lBQ1IsT0FBTztJQUNQLE9BQU87SUFDUCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFNBQVM7SUFDVCxVQUFVO0lBQ1YsT0FBTztJQUNQLFFBQVE7SUFDUixVQUFVO0lBQ1YsV0FBVztJQUNYLFNBQVM7SUFDVCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFFBQVE7SUFDUixVQUFVO0lBQ1YsVUFBVTtJQUNWLFFBQVE7SUFDUixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsVUFBVTtJQUNWLFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFFBQVE7SUFDUixRQUFRO0lBQ1IsV0FBVztJQUNYLFFBQVE7SUFDUixRQUFRO0lBQ1IsU0FBUztJQUNULE9BQU87SUFDUCxVQUFVO0lBQ1YsUUFBUTtJQUNSLE9BQU87SUFDUCxPQUFPO0lBQ1AsT0FBTztJQUNQLFVBQVU7SUFDVixRQUFRO0lBQ1IsUUFBUTtJQUNSLFVBQVU7SUFDVixXQUFXO0lBQ1gsU0FBUztJQUNULFNBQVM7SUFDVCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFNBQVM7SUFDVCxRQUFRO0lBQ1IsT0FBTztJQUNQLFFBQVE7SUFDUixRQUFRO0lBQ1IsUUFBUTtJQUNSLE9BQU87SUFDUCxPQUFPO0lBQ1AsT0FBTztJQUNQLFFBQVE7SUFDUixXQUFXO0lBQ1gsV0FBVztJQUNYLFFBQVE7SUFDUixRQUFRO0lBQ1IsUUFBUTtJQUNSLFFBQVE7SUFDUixRQUFRO0lBQ1IsTUFBTTtJQUNOLE1BQU07SUFDTixNQUFNO0lBQ04sU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsT0FBTztJQUNQLFFBQVE7SUFDUixVQUFVO0lBQ1YsUUFBUTtJQUNSLFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFFBQVE7SUFDUixVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsU0FBUztJQUNULFdBQVc7SUFDWCxPQUFPO0lBQ1AsVUFBVTtJQUNWLFVBQVU7SUFDVixRQUFRO0lBQ1IsUUFBUTtJQUNSLFFBQVE7SUFDUixXQUFXO0lBQ1gsU0FBUztJQUNULFdBQVc7SUFDWCxXQUFXO0lBQ1gsUUFBUTtJQUNSLE9BQU87SUFDUCxTQUFTO0lBQ1QsT0FBTztJQUNQLE9BQU87SUFDUCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFNBQVM7SUFDVCxTQUFTO0lBQ1QsT0FBTztJQUNQLE9BQU87SUFDUCxPQUFPO0lBQ1AsUUFBUTtJQUNSLFVBQVU7SUFDVixXQUFXO0lBQ1gsUUFBUTtJQUNSLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxTQUFTO0lBQ1QsT0FBTztJQUNQLFVBQVU7SUFDVixTQUFTO0lBQ1QsV0FBVztJQUNYLFNBQVM7SUFDVCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFVBQVU7SUFDVixTQUFTO0lBQ1QsVUFBVTtJQUNWLFNBQVM7SUFDVCxXQUFXO0lBQ1gsU0FBUztJQUNULFNBQVM7SUFDVCxVQUFVO0lBQ1YsT0FBTztJQUNQLE9BQU87SUFDUCxRQUFRO0lBQ1IsV0FBVztJQUNYLFFBQVE7SUFDUixTQUFTO0lBQ1QsUUFBUTtJQUNSLFNBQVM7SUFDVCxXQUFXO0lBQ1gsU0FBUztJQUNULE9BQU87SUFDUCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsT0FBTztJQUNQLE9BQU87SUFDUCxPQUFPO0lBQ1AsV0FBVztJQUNYLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFNBQVM7SUFDVCxNQUFNO0lBQ04sUUFBUTtJQUNSLFNBQVM7SUFDVCxNQUFNO0lBQ04sUUFBUTtJQUNSLFNBQVM7SUFDVCxXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVixXQUFXO0lBQ1gsU0FBUztJQUNULE1BQU07SUFDTixPQUFPO0lBQ1AsU0FBUztJQUNULFNBQVM7SUFDVCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFVBQVU7SUFDVixXQUFXO0lBQ1gsT0FBTztJQUNQLFdBQVc7SUFDWCxXQUFXO0lBQ1gsU0FBUztJQUNULFVBQVU7SUFDVixTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsUUFBUTtJQUNSLFVBQVU7SUFDVixRQUFRO0lBQ1IsU0FBUztJQUNULFdBQVc7SUFDWCxNQUFNO0lBQ04sUUFBUTtJQUNSLE9BQU87SUFDUCxPQUFPO0lBQ1AsT0FBTztJQUNQLE9BQU87SUFDUCxPQUFPO0lBQ1AsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsU0FBUztJQUNULE9BQU87SUFDUCxPQUFPO0lBQ1AsUUFBUTtJQUNSLE9BQU87SUFDUCxPQUFPO0lBQ1AsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsU0FBUztJQUNULFNBQVM7SUFDVCxVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixTQUFTO0lBQ1QsV0FBVztJQUNYLFdBQVc7SUFDWCxPQUFPO0lBQ1AsT0FBTztJQUNQLE9BQU87SUFDUCxVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixTQUFTO0lBQ1QsT0FBTztJQUNQLE9BQU87SUFDUCxRQUFRO0lBQ1IsUUFBUTtJQUNSLFFBQVE7SUFDUixVQUFVO0lBQ1YsV0FBVztJQUNYLE9BQU87SUFDUCxRQUFRO0lBQ1IsU0FBUztJQUNULFFBQVE7SUFDUixVQUFVO0lBQ1YsUUFBUTtJQUNSLFFBQVE7SUFDUixRQUFRO0lBQ1IsUUFBUTtJQUNSLFVBQVU7SUFDVixRQUFRO0lBQ1IsVUFBVTtJQUNWLFFBQVE7SUFDUixRQUFRO0lBQ1IsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLFFBQVE7SUFDUixXQUFXO0lBQ1gsU0FBUztJQUNULFVBQVU7SUFDVixPQUFPO0lBQ1AsUUFBUTtJQUNSLE9BQU87SUFDUCxTQUFTO0lBQ1QsU0FBUztJQUNULFNBQVM7SUFDVCxVQUFVO0lBQ1YsUUFBUTtJQUNSLE9BQU87SUFDUCxTQUFTO0lBQ1QsU0FBUztJQUNULFFBQVE7SUFDUixPQUFPO0lBQ1AsU0FBUztJQUNULFVBQVU7SUFDVixRQUFRO0lBQ1IsU0FBUztJQUNULFdBQVc7SUFDWCxPQUFPO0lBQ1AsT0FBTztJQUNQLFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLE9BQU87SUFDUCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFFBQVE7SUFDUixTQUFTO0lBQ1QsV0FBVztJQUNYLFNBQVM7SUFDVCxVQUFVO0lBQ1YsUUFBUTtJQUNSLE9BQU87SUFDUCxXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFNBQVM7SUFDVCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFVBQVU7SUFDVixTQUFTO0lBQ1QsV0FBVztJQUNYLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVixRQUFRO0lBQ1IsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxTQUFTO0lBQ1QsV0FBVztJQUNYLFdBQVc7SUFDWCxTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFNBQVM7SUFDVCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFVBQVU7SUFDVixVQUFVO0lBQ1YsU0FBUztJQUNULFFBQVE7SUFDUixRQUFRO0lBQ1IsV0FBVztJQUNYLFNBQVM7SUFDVCxXQUFXO0lBQ1gsTUFBTTtJQUNOLFNBQVM7SUFDVCxRQUFRO0lBQ1IsUUFBUTtJQUNSLE1BQU07SUFDTixVQUFVO0lBQ1YsV0FBVztJQUNYLFNBQVM7SUFDVCxRQUFRO0lBQ1IsV0FBVztJQUNYLFVBQVU7SUFDVixPQUFPO0lBQ1AsU0FBUztJQUNULE9BQU87SUFDUCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixRQUFRO0lBQ1IsU0FBUztJQUNULFNBQVM7SUFDVCxTQUFTO0lBQ1QsUUFBUTtJQUNSLE1BQU07SUFDTixRQUFRO0lBQ1IsVUFBVTtJQUNWLFdBQVc7SUFDWCxRQUFRO0lBQ1IsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFVBQVU7SUFDVixRQUFRO0lBQ1IsU0FBUztJQUNULFdBQVc7SUFDWCxTQUFTO0lBQ1QsV0FBVztJQUNYLFFBQVE7SUFDUixVQUFVO0lBQ1YsU0FBUztJQUNULFdBQVc7SUFDWCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFNBQVM7SUFDVCxVQUFVO0lBQ1YsU0FBUztJQUNULFNBQVM7SUFDVCxTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixTQUFTO0lBQ1QsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFVBQVU7SUFDVixTQUFTO0lBQ1QsV0FBVztJQUNYLFVBQVU7SUFDVixPQUFPO0lBQ1AsU0FBUztJQUNULFNBQVM7SUFDVCxVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxNQUFNO0lBQ04sV0FBVztJQUNYLFNBQVM7SUFDVCxXQUFXO0lBQ1gsTUFBTTtJQUNOLFVBQVU7SUFDVixPQUFPO0lBQ1AsTUFBTTtJQUNOLE9BQU87SUFDUCxPQUFPO0lBQ1AsT0FBTztJQUNQLE9BQU87SUFDUCxPQUFPO0lBQ1AsUUFBUTtJQUNSLFNBQVM7SUFDVCxTQUFTO0lBQ1QsV0FBVztJQUNYLFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixPQUFPO0lBQ1AsT0FBTztJQUNQLFFBQVE7SUFDUixRQUFRO0lBQ1IsU0FBUztJQUNULFNBQVM7SUFDVCxPQUFPO0lBQ1AsUUFBUTtJQUNSLE9BQU87SUFDUCxPQUFPO0lBQ1AsT0FBTztJQUNQLFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLE9BQU87SUFDUCxRQUFRO0lBQ1IsU0FBUztJQUNULFNBQVM7SUFDVCxPQUFPO0lBQ1AsVUFBVTtJQUNWLFFBQVE7SUFDUixRQUFRO0lBQ1IsV0FBVztJQUNYLFNBQVM7SUFDVCxXQUFXO0lBQ1gsU0FBUztJQUNULFFBQVE7SUFDUixVQUFVO0lBQ1YsT0FBTztJQUNQLE1BQU07SUFDTixTQUFTO0lBQ1QsVUFBVTtJQUNWLFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFNBQVM7SUFDVCxXQUFXO0lBQ1gsS0FBSztJQUNMLFNBQVM7SUFDVCxNQUFNO0lBQ04sUUFBUTtJQUNSLFFBQVE7SUFDUixVQUFVO0lBQ1YsTUFBTTtJQUNOLE9BQU87SUFDUCxRQUFRO0lBQ1IsVUFBVTtJQUNWLE9BQU87SUFDUCxRQUFRO0lBQ1IsTUFBTTtJQUNOLFFBQVE7SUFDUixTQUFTO0lBQ1QsU0FBUztJQUNULFNBQVM7SUFDVCxVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsU0FBUztJQUNULFNBQVM7SUFDVCxNQUFNO0lBQ04sV0FBVztJQUNYLFFBQVE7SUFDUixRQUFRO0lBQ1IsU0FBUztJQUNULE9BQU87SUFDUCxRQUFRO0lBQ1IsUUFBUTtJQUNSLFVBQVU7SUFDVixNQUFNO0lBQ04sUUFBUTtJQUNSLE9BQU87SUFDUCxXQUFXO0lBQ1gsU0FBUztJQUNULE9BQU87SUFDUCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFVBQVU7SUFDVixRQUFRO0lBQ1IsT0FBTztJQUNQLFFBQVE7SUFDUixPQUFPO0lBQ1AsTUFBTTtJQUNOLE1BQU07SUFDTixTQUFTO0lBQ1QsV0FBVztJQUNYLE1BQU07SUFDTixPQUFPO0lBQ1AsT0FBTztJQUNQLFVBQVU7SUFDVixVQUFVO0lBQ1YsU0FBUztJQUNULFNBQVM7SUFDVCxXQUFXO0lBQ1gsT0FBTztJQUNQLFFBQVE7SUFDUixVQUFVO0lBQ1YsU0FBUztJQUNULFNBQVM7SUFDVCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixPQUFPO0lBQ1AsU0FBUztJQUNULE9BQU87SUFDUCxPQUFPO0lBQ1AsUUFBUTtJQUNSLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsU0FBUztJQUNULFVBQVU7SUFDVixRQUFRO0lBQ1IsT0FBTztJQUNQLE9BQU87SUFDUCxPQUFPO0lBQ1AsVUFBVTtJQUNWLFFBQVE7SUFDUixRQUFRO0lBQ1IsVUFBVTtJQUNWLFdBQVc7SUFDWCxRQUFRO0lBQ1IsUUFBUTtJQUNSLFFBQVE7SUFDUixVQUFVO0lBQ1YsUUFBUTtJQUNSLFdBQVc7SUFDWCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsU0FBUztJQUNULFVBQVU7SUFDVixNQUFNO0lBQ04sT0FBTztJQUNQLFVBQVU7SUFDVixVQUFVO0lBQ1YsTUFBTTtJQUNOLFdBQVc7SUFDWCxTQUFTO0lBQ1QsT0FBTztJQUNQLE9BQU87SUFDUCxPQUFPO0lBQ1AsUUFBUTtJQUNSLFVBQVU7SUFDVixTQUFTO0lBQ1QsTUFBTTtJQUNOLE9BQU87SUFDUCxTQUFTO0lBQ1QsU0FBUztJQUNULFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFNBQVM7SUFDVCxNQUFNO0lBQ04sUUFBUTtJQUNSLE1BQU07SUFDTixNQUFNO0lBQ04sT0FBTztJQUNQLFFBQVE7SUFDUixTQUFTO0lBQ1QsV0FBVztJQUNYLFNBQVM7SUFDVCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFFBQVE7SUFDUixRQUFRO0lBQ1IsVUFBVTtJQUNWLFFBQVE7SUFDUixVQUFVO0lBQ1YsTUFBTTtJQUNOLFNBQVM7SUFDVCxNQUFNO0lBQ04sUUFBUTtJQUNSLFFBQVE7SUFDUixRQUFRO0lBQ1IsU0FBUztJQUNULFdBQVc7SUFDWCxRQUFRO0lBQ1IsUUFBUTtJQUNSLFFBQVE7SUFDUixPQUFPO0lBQ1AsU0FBUztJQUNULE9BQU87SUFDUCxVQUFVO0lBQ1YsU0FBUztJQUNULE9BQU87SUFDUCxTQUFTO0lBQ1QsV0FBVztJQUNYLFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFdBQVc7SUFDWCxPQUFPO0lBQ1AsU0FBUztJQUNULFFBQVE7SUFDUixVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFNBQVM7SUFDVCxXQUFXO0lBQ1gsU0FBUztJQUNULFNBQVM7SUFDVCxVQUFVO0lBQ1YsT0FBTztJQUNQLE9BQU87SUFDUCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFVBQVU7SUFDVixNQUFNO0lBQ04sV0FBVztJQUNYLFVBQVU7SUFDVixXQUFXO0lBQ1gsU0FBUztJQUNULE9BQU87SUFDUCxRQUFRO0lBQ1IsTUFBTTtJQUNOLFNBQVM7SUFDVCxTQUFTO0lBQ1QsV0FBVztJQUNYLFFBQVE7SUFDUixRQUFRO0lBQ1IsT0FBTztJQUNQLFVBQVU7SUFDVixRQUFRO0lBQ1IsT0FBTztJQUNQLFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFNBQVM7SUFDVCxXQUFXO0lBQ1gsU0FBUztJQUNULFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsV0FBVztJQUNYLFFBQVE7SUFDUixVQUFVO0lBQ1YsVUFBVTtJQUNWLFNBQVM7SUFDVCxPQUFPO0lBQ1AsUUFBUTtJQUNSLFdBQVc7SUFDWCxVQUFVO0lBQ1YsU0FBUztJQUNULFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsTUFBTTtJQUNOLFFBQVE7SUFDUixVQUFVO0lBQ1YsU0FBUztJQUNULFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixRQUFRO0lBQ1IsVUFBVTtJQUNWLFNBQVM7SUFDVCxTQUFTO0lBQ1QsV0FBVztJQUNYLFFBQVE7SUFDUixVQUFVO0lBQ1YsT0FBTztJQUNQLFFBQVE7SUFDUixPQUFPO0lBQ1AsT0FBTztJQUNQLFNBQVM7SUFDVCxPQUFPO0lBQ1AsUUFBUTtJQUNSLFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsT0FBTztJQUNQLEtBQUs7SUFDTCxPQUFPO0lBQ1AsVUFBVTtJQUNWLFNBQVM7SUFDVCxTQUFTO0lBQ1QsU0FBUztJQUNULEtBQUs7SUFDTCxTQUFTO0lBQ1QsT0FBTztJQUNQLFFBQVE7SUFDUixVQUFVO0lBQ1YsT0FBTztJQUNQLFFBQVE7SUFDUixTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsTUFBTTtJQUNOLFFBQVE7SUFDUixTQUFTO0lBQ1QsUUFBUTtJQUNSLFFBQVE7SUFDUixNQUFNO0lBQ04sT0FBTztJQUNQLE1BQU07SUFDTixLQUFLO0lBQ0wsT0FBTztJQUNQLE9BQU87SUFDUCxPQUFPO0lBQ1AsVUFBVTtJQUNWLFFBQVE7SUFDUixXQUFXO0lBQ1gsUUFBUTtJQUNSLE9BQU87SUFDUCxPQUFPO0lBQ1AsU0FBUztJQUNULFdBQVc7SUFDWCxNQUFNO0lBQ04sVUFBVTtJQUNWLE9BQU87SUFDUCxPQUFPO0lBQ1AsT0FBTztJQUNQLFdBQVc7SUFDWCxTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixRQUFRO0lBQ1IsUUFBUTtJQUNSLFNBQVM7SUFDVCxRQUFRO0lBQ1IsT0FBTztJQUNQLE1BQU07SUFDTixPQUFPO0lBQ1AsVUFBVTtJQUNWLFdBQVc7SUFDWCxPQUFPO0lBQ1AsV0FBVztJQUNYLFVBQVU7SUFDVixRQUFRO0lBQ1IsV0FBVztJQUNYLFFBQVE7SUFDUixXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVixTQUFTO0lBQ1QsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxTQUFTO0lBQ1QsU0FBUztJQUNULFNBQVM7SUFDVCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFFBQVE7SUFDUixRQUFRO0lBQ1IsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFNBQVM7SUFDVCxVQUFVO0lBQ1YsV0FBVztJQUNYLFNBQVM7SUFDVCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFNBQVM7SUFDVCxXQUFXO0lBQ1gsV0FBVztJQUNYLFNBQVM7SUFDVCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFdBQVc7SUFDWCxXQUFXO0lBQ1gsU0FBUztJQUNULE9BQU87SUFDUCxRQUFRO0lBQ1IsU0FBUztJQUNULFFBQVE7SUFDUixXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsUUFBUTtJQUNSLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFNBQVM7SUFDVCxTQUFTO0lBQ1QsU0FBUztJQUNULFNBQVM7SUFDVCxXQUFXO0lBQ1gsU0FBUztJQUNULFdBQVc7SUFDWCxVQUFVO0lBQ1YsT0FBTztJQUNQLFdBQVc7SUFDWCxTQUFTO0lBQ1QsV0FBVztJQUNYLFFBQVE7SUFDUixXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxTQUFTO0lBQ1QsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFNBQVM7SUFDVCxRQUFRO0lBQ1IsV0FBVztJQUNYLFNBQVM7SUFDVCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFNBQVM7SUFDVCxVQUFVO0lBQ1YsU0FBUztJQUNULFFBQVE7SUFDUixVQUFVO0lBQ1YsUUFBUTtJQUNSLFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixTQUFTO0lBQ1QsV0FBVztJQUNYLFFBQVE7SUFDUixXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFNBQVM7SUFDVCxXQUFXO0lBQ1gsU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFdBQVc7SUFDWCxRQUFRO0lBQ1IsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixRQUFRO0lBQ1IsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVixXQUFXO0lBQ1gsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsU0FBUztJQUNULFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixTQUFTO0lBQ1QsV0FBVztJQUNYLFFBQVE7SUFDUixRQUFRO0lBQ1IsU0FBUztJQUNULFVBQVU7SUFDVixTQUFTO0lBQ1QsU0FBUztJQUNULFdBQVc7SUFDWCxXQUFXO0lBQ1gsT0FBTztJQUNQLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsT0FBTztJQUNQLFVBQVU7SUFDVixXQUFXO0lBQ1gsUUFBUTtJQUNSLFVBQVU7SUFDVixNQUFNO0lBQ04sV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsU0FBUztJQUNULFFBQVE7SUFDUixXQUFXO0lBQ1gsV0FBVztJQUNYLFNBQVM7SUFDVCxTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFNBQVM7SUFDVCxRQUFRO0lBQ1IsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLE9BQU87SUFDUCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsU0FBUztJQUNULFFBQVE7SUFDUixXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFNBQVM7SUFDVCxXQUFXO0lBQ1gsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsU0FBUztJQUNULFdBQVc7SUFDWCxVQUFVO0lBQ1YsU0FBUztJQUNULFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFdBQVc7SUFDWCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFFBQVE7SUFDUixXQUFXO0lBQ1gsVUFBVTtJQUNWLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVixRQUFRO0lBQ1IsV0FBVztJQUNYLFVBQVU7SUFDVixTQUFTO0lBQ1QsVUFBVTtJQUNWLFNBQVM7SUFDVCxXQUFXO0lBQ1gsV0FBVztJQUNYLFFBQVE7SUFDUixRQUFRO0lBQ1IsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFFBQVE7SUFDUixXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVixRQUFRO0lBQ1IsV0FBVztJQUNYLFdBQVc7SUFDWCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFdBQVc7SUFDWCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFVBQVU7SUFDVixRQUFRO0lBQ1IsUUFBUTtJQUNSLFVBQVU7SUFDVixTQUFTO0lBQ1QsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsUUFBUTtJQUNSLFVBQVU7SUFDVixXQUFXO0lBQ1gsUUFBUTtJQUNSLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFFBQVE7SUFDUixVQUFVO0lBQ1YsVUFBVTtJQUNWLFFBQVE7SUFDUixVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFdBQVc7SUFDWCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFdBQVc7SUFDWCxTQUFTO0lBQ1QsV0FBVztJQUNYLFdBQVc7SUFDWCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixRQUFRO0lBQ1IsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsU0FBUztJQUNULFNBQVM7SUFDVCxXQUFXO0lBQ1gsVUFBVTtJQUNWLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFFBQVE7SUFDUixPQUFPO0lBQ1AsT0FBTztJQUNQLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxRQUFRO0lBQ1IsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFNBQVM7SUFDVCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFNBQVM7SUFDVCxVQUFVO0lBQ1YsU0FBUztJQUNULFNBQVM7SUFDVCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxVQUFVO0lBQ1YsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFNBQVM7SUFDVCxVQUFVO0lBQ1YsV0FBVztJQUNYLFFBQVE7SUFDUixVQUFVO0lBQ1YsV0FBVztJQUNYLFNBQVM7SUFDVCxPQUFPO0lBQ1AsV0FBVztJQUNYLFFBQVE7SUFDUixVQUFVO0lBQ1YsV0FBVztJQUNYLFFBQVE7SUFDUixTQUFTO0lBQ1QsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsUUFBUTtJQUNSLFdBQVc7SUFDWCxVQUFVO0lBQ1YsU0FBUztJQUNULFNBQVM7SUFDVCxXQUFXO0lBQ1gsV0FBVztJQUNYLE9BQU87SUFDUCxRQUFRO0lBQ1IsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsUUFBUTtJQUNSLFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFFBQVE7SUFDUixRQUFRO0lBQ1IsUUFBUTtJQUNSLFVBQVU7SUFDVixXQUFXO0lBQ1gsUUFBUTtJQUNSLE1BQU07SUFDTixPQUFPO0lBQ1AsU0FBUztJQUNULFVBQVU7SUFDVixTQUFTO0lBQ1QsUUFBUTtJQUNSLFFBQVE7SUFDUixTQUFTO0lBQ1QsUUFBUTtJQUNSLFNBQVM7SUFDVCxVQUFVO0lBQ1YsU0FBUztJQUNULFNBQVM7SUFDVCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFNBQVM7SUFDVCxRQUFRO0lBQ1IsU0FBUztJQUNULFFBQVE7SUFDUixVQUFVO0lBQ1YsUUFBUTtJQUNSLFFBQVE7SUFDUixTQUFTO0lBQ1QsT0FBTztJQUNQLFFBQVE7SUFDUixVQUFVO0lBQ1YsU0FBUztJQUNULFFBQVE7SUFDUixRQUFRO0lBQ1IsV0FBVztJQUNYLFNBQVM7SUFDVCxRQUFRO0lBQ1IsT0FBTztJQUNQLFNBQVM7SUFDVCxNQUFNO0lBQ04sV0FBVztJQUNYLE1BQU07SUFDTixPQUFPO0lBQ1AsT0FBTztJQUNQLFNBQVM7SUFDVCxTQUFTO0lBQ1QsU0FBUztJQUNULFFBQVE7SUFDUixRQUFRO0lBQ1IsT0FBTztJQUNQLFNBQVM7SUFDVCxRQUFRO0lBQ1IsUUFBUTtJQUNSLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxTQUFTO0lBQ1QsV0FBVztJQUNYLFNBQVM7SUFDVCxPQUFPO0lBQ1AsUUFBUTtJQUNSLFFBQVE7SUFDUixXQUFXO0lBQ1gsT0FBTztJQUNQLFNBQVM7SUFDVCxRQUFRO0lBQ1IsUUFBUTtJQUNSLFVBQVU7SUFDVixTQUFTO0lBQ1QsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsUUFBUTtJQUNSLFNBQVM7SUFDVCxTQUFTO0lBQ1QsU0FBUztJQUNULFNBQVM7SUFDVCxTQUFTO0lBQ1QsU0FBUztJQUNULFVBQVU7SUFDVixVQUFVO0lBQ1YsUUFBUTtJQUNSLFVBQVU7SUFDVixNQUFNO0lBQ04sT0FBTztJQUNQLFFBQVE7SUFDUixXQUFXO0lBQ1gsUUFBUTtJQUNSLFVBQVU7SUFDVixRQUFRO0lBQ1IsVUFBVTtJQUNWLFNBQVM7SUFDVCxRQUFRO0lBQ1IsV0FBVztJQUNYLFVBQVU7SUFDVixVQUFVO0lBQ1YsV0FBVztJQUNYLFNBQVM7SUFDVCxPQUFPO0lBQ1AsT0FBTztJQUNQLFdBQVc7SUFDWCxVQUFVO0lBQ1YsU0FBUztJQUNULFNBQVM7SUFDVCxRQUFRO0lBQ1IsT0FBTztJQUNQLFNBQVM7SUFDVCxRQUFRO0lBQ1IsV0FBVztJQUNYLFVBQVU7SUFDVixTQUFTO0lBQ1QsTUFBTTtJQUNOLFFBQVE7SUFDUixNQUFNO0lBQ04sU0FBUztJQUNULE1BQU07SUFDTixVQUFVO0lBQ1YsV0FBVztJQUNYLFFBQVE7SUFDUixPQUFPO0lBQ1AsTUFBTTtJQUNOLFVBQVU7SUFDVixTQUFTO0lBQ1QsT0FBTztJQUNQLFVBQVU7SUFDVixRQUFRO0lBQ1IsU0FBUztJQUNULFVBQVU7SUFDVixXQUFXO0lBQ1gsVUFBVTtJQUNWLFNBQVM7SUFDVCxTQUFTO0lBQ1QsV0FBVztJQUNYLFVBQVU7SUFDVixTQUFTO0lBQ1QsU0FBUztJQUNULFdBQVc7SUFDWCxVQUFVO0lBQ1YsUUFBUTtJQUNSLFFBQVE7SUFDUixPQUFPO0lBQ1AsT0FBTztJQUNQLFNBQVM7SUFDVCxVQUFVO0lBQ1YsT0FBTztJQUNQLE1BQU07SUFDTixXQUFXO0lBQ1gsU0FBUztJQUNULFVBQVU7SUFDVixTQUFTO0lBQ1QsU0FBUztJQUNULFFBQVE7SUFDUixVQUFVO0lBQ1YsU0FBUztJQUNULE9BQU87SUFDUCxPQUFPO0lBQ1AsVUFBVTtJQUNWLFVBQVU7SUFDVixTQUFTO0lBQ1QsVUFBVTtJQUNWLFdBQVc7SUFDWCxTQUFTO0lBQ1QsV0FBVztJQUNYLE9BQU87SUFDUCxVQUFVO0lBQ1YsVUFBVTtJQUNWLFNBQVM7SUFDVCxVQUFVO0lBQ1YsT0FBTztJQUNQLFNBQVM7SUFDVCxNQUFNO0lBQ04sVUFBVTtJQUNWLFFBQVE7SUFDUixTQUFTO0lBQ1QsU0FBUztJQUNULE9BQU87SUFDUCxRQUFRO0lBQ1IsU0FBUztJQUNULE9BQU87SUFDUCxPQUFPO0lBQ1AsUUFBUTtJQUNSLFdBQVc7SUFDWCxLQUFLO0lBQ0wsT0FBTztJQUNQLFFBQVE7SUFDUixPQUFPO0lBQ1AsT0FBTztJQUNQLE9BQU87SUFDUCxRQUFRO0lBQ1IsT0FBTztJQUNQLE1BQU07SUFDTixRQUFRO0lBQ1IsTUFBTTtJQUNOLFNBQVM7SUFDVCxRQUFRO0lBQ1IsUUFBUTtJQUNSLE9BQU87SUFDUCxNQUFNO0lBQ04sU0FBUztJQUNULFFBQVE7SUFDUixTQUFTO0lBQ1QsUUFBUTtJQUNSLFVBQVU7SUFDVixXQUFXO0lBQ1gsV0FBVztJQUNYLFVBQVU7SUFDVixXQUFXO0lBQ1gsU0FBUztJQUNULFFBQVE7SUFDUixRQUFRO0lBQ1IsV0FBVztJQUNYLFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtJQUNWLFdBQVc7SUFDWCxTQUFTO0lBQ1QsTUFBTTtJQUNOLFNBQVM7SUFDVCxPQUFPO0lBQ1AsT0FBTztJQUNQLFVBQVU7SUFDVixRQUFRO0lBQ1IsTUFBTTtJQUNOLFVBQVU7SUFDVixRQUFRO0lBQ1IsTUFBTTtJQUNOLE9BQU87SUFDUCxPQUFPO0lBQ1AsVUFBVTtJQUNWLE9BQU87SUFDUCxXQUFXO0lBQ1gsUUFBUTtJQUNSLE9BQU87SUFDUCxVQUFVO0lBQ1YsU0FBUztJQUNULE9BQU87SUFDUCxVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixRQUFRO0lBQ1IsS0FBSztJQUNMLE1BQU07SUFDTixRQUFRO0lBQ1IsT0FBTztJQUNQLFFBQVE7SUFDUixPQUFPO0lBQ1AsT0FBTztJQUNQLFdBQVc7SUFDWCxTQUFTO0lBQ1QsTUFBTTtJQUNOLE1BQU07SUFDTixXQUFXO0lBQ1gsVUFBVTtJQUNWLFNBQVM7SUFDVCxRQUFRO0lBQ1IsVUFBVTtJQUNWLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFFBQVE7SUFDUixVQUFVO0lBQ1YsUUFBUTtJQUNSLFdBQVc7SUFDWCxTQUFTO0lBQ1QsUUFBUTtJQUNSLFdBQVc7SUFDWCxNQUFNO0lBQ04sTUFBTTtJQUNOLE9BQU87SUFDUCxTQUFTO0lBQ1QsTUFBTTtJQUNOLE1BQU07SUFDTixTQUFTO0lBQ1QsUUFBUTtJQUNSLFVBQVU7SUFDVixRQUFRO0lBQ1IsTUFBTTtJQUNOLE9BQU87SUFDUCxVQUFVO0lBQ1YsUUFBUTtJQUNSLE1BQU07SUFDTixRQUFRO0lBQ1IsTUFBTTtJQUNOLE1BQU07SUFDTixVQUFVO0lBQ1YsT0FBTztJQUNQLFNBQVM7SUFDVCxRQUFRO0lBQ1IsUUFBUTtJQUNSLFVBQVU7SUFDVixRQUFRO0lBQ1IsS0FBSztJQUNMLE1BQU07SUFDTixXQUFXO0lBQ1gsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFNBQVM7SUFDVCxNQUFNO0lBQ04sTUFBTTtJQUNOLFFBQVE7SUFDUixNQUFNO0lBQ04sT0FBTztJQUNQLE1BQU07SUFDTixNQUFNO0lBQ04sU0FBUztJQUNULFNBQVM7SUFDVCxXQUFXO0lBQ1gsT0FBTztJQUNQLFdBQVc7SUFDWCxXQUFXO0lBQ1gsT0FBTztJQUNQLE9BQU87SUFDUCxPQUFPO0lBQ1AsS0FBSztJQUNMLFNBQVM7SUFDVCxPQUFPO0lBQ1AsUUFBUTtJQUNSLFVBQVU7SUFDVixTQUFTO0lBQ1QsVUFBVTtJQUNWLFFBQVE7SUFDUixTQUFTO0lBQ1QsU0FBUztJQUNULFNBQVM7SUFDVCxTQUFTO0lBQ1QsT0FBTztJQUNQLFNBQVM7SUFDVCxTQUFTO0lBQ1QsV0FBVztJQUNYLFNBQVM7SUFDVCxVQUFVO0lBQ1YsU0FBUztJQUNULFdBQVc7SUFDWCxTQUFTO0lBQ1QsTUFBTTtJQUNOLE9BQU87SUFDUCxPQUFPO0lBQ1AsS0FBSztJQUNMLFNBQVM7SUFDVCxTQUFTO0lBQ1QsTUFBTTtJQUNOLE1BQU07SUFDTixNQUFNO0lBQ04sVUFBVTtJQUNWLFVBQVU7SUFDVixRQUFRO0lBQ1IsVUFBVTtJQUNWLE9BQU87SUFDUCxTQUFTO0lBQ1QsTUFBTTtJQUNOLEtBQUs7SUFDTCxXQUFXO0lBQ1gsU0FBUztJQUNULE9BQU87SUFDUCxLQUFLO0lBQ0wsUUFBUTtJQUNSLE9B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LGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDbEQsTUFBTSxDQUFDLElBQUksR0FBRyxTQUFTLENBQUM7Z0JBQ3hCLE9BQU8sTUFBYSxDQUFDO2FBQ3hCO1NBQ0o7UUFBQyxPQUFPLENBQUMsRUFBRSxHQUFHO1FBRWYsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQzs7QUF4VU0sWUFBTSxHQUFHLEtBQUssQ0FBQztBQUNmLG9CQUFjLEdBQUcsS0FBSyxDQUFDO0FBQ3ZCLFlBQU0sR0FBRyxLQUFLLENBQUM7QUFDZixlQUFTLEdBQUcsSUFBSSxDQUFDO0FBQ2pCLHFCQUFlLEdBQUcsS0FBSyxDQUFDO0FBQ3hCLDBCQUFvQixHQUFHLEtBQUssQ0FBQztBQUM3QixZQUFNLEdBQVEsSUFBSSxDQUFDO0FBQ25CLG9CQUFjLEdBQUcsZ0ZBQWdGLENBQUM7QUFvVTdHLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQyIsImZpbGUiOiJiYWNrZ3JvdW5kLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gaW5zdGFsbCBhIEpTT05QIGNhbGxiYWNrIGZvciBjaHVuayBsb2FkaW5nXG4gXHRmdW5jdGlvbiB3ZWJwYWNrSnNvbnBDYWxsYmFjayhkYXRhKSB7XG4gXHRcdHZhciBjaHVua0lkcyA9IGRhdGFbMF07XG4gXHRcdHZhciBtb3JlTW9kdWxlcyA9IGRhdGFbMV07XG4gXHRcdHZhciBleGVjdXRlTW9kdWxlcyA9IGRhdGFbMl07XG5cbiBcdFx0Ly8gYWRkIFwibW9yZU1vZHVsZXNcIiB0byB0aGUgbW9kdWxlcyBvYmplY3QsXG4gXHRcdC8vIHRoZW4gZmxhZyBhbGwgXCJjaHVua0lkc1wiIGFzIGxvYWRlZCBhbmQgZmlyZSBjYWxsYmFja1xuIFx0XHR2YXIgbW9kdWxlSWQsIGNodW5rSWQsIGkgPSAwLCByZXNvbHZlcyA9IFtdO1xuIFx0XHRmb3IoO2kgPCBjaHVua0lkcy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdGNodW5rSWQgPSBjaHVua0lkc1tpXTtcbiBcdFx0XHRpZihpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0pIHtcbiBcdFx0XHRcdHJlc29sdmVzLnB1c2goaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdWzBdKTtcbiBcdFx0XHR9XG4gXHRcdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gMDtcbiBcdFx0fVxuIFx0XHRmb3IobW9kdWxlSWQgaW4gbW9yZU1vZHVsZXMpIHtcbiBcdFx0XHRpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9yZU1vZHVsZXMsIG1vZHVsZUlkKSkge1xuIFx0XHRcdFx0bW9kdWxlc1ttb2R1bGVJZF0gPSBtb3JlTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdFx0fVxuIFx0XHR9XG4gXHRcdGlmKHBhcmVudEpzb25wRnVuY3Rpb24pIHBhcmVudEpzb25wRnVuY3Rpb24oZGF0YSk7XG5cbiBcdFx0d2hpbGUocmVzb2x2ZXMubGVuZ3RoKSB7XG4gXHRcdFx0cmVzb2x2ZXMuc2hpZnQoKSgpO1xuIFx0XHR9XG5cbiBcdFx0Ly8gYWRkIGVudHJ5IG1vZHVsZXMgZnJvbSBsb2FkZWQgY2h1bmsgdG8gZGVmZXJyZWQgbGlzdFxuIFx0XHRkZWZlcnJlZE1vZHVsZXMucHVzaC5hcHBseShkZWZlcnJlZE1vZHVsZXMsIGV4ZWN1dGVNb2R1bGVzIHx8IFtdKTtcblxuIFx0XHQvLyBydW4gZGVmZXJyZWQgbW9kdWxlcyB3aGVuIGFsbCBjaHVua3MgcmVhZHlcbiBcdFx0cmV0dXJuIGNoZWNrRGVmZXJyZWRNb2R1bGVzKCk7XG4gXHR9O1xuIFx0ZnVuY3Rpb24gY2hlY2tEZWZlcnJlZE1vZHVsZXMoKSB7XG4gXHRcdHZhciByZXN1bHQ7XG4gXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBkZWZlcnJlZE1vZHVsZXMubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHR2YXIgZGVmZXJyZWRNb2R1bGUgPSBkZWZlcnJlZE1vZHVsZXNbaV07XG4gXHRcdFx0dmFyIGZ1bGZpbGxlZCA9IHRydWU7XG4gXHRcdFx0Zm9yKHZhciBqID0gMTsgaiA8IGRlZmVycmVkTW9kdWxlLmxlbmd0aDsgaisrKSB7XG4gXHRcdFx0XHR2YXIgZGVwSWQgPSBkZWZlcnJlZE1vZHVsZVtqXTtcbiBcdFx0XHRcdGlmKGluc3RhbGxlZENodW5rc1tkZXBJZF0gIT09IDApIGZ1bGZpbGxlZCA9IGZhbHNlO1xuIFx0XHRcdH1cbiBcdFx0XHRpZihmdWxmaWxsZWQpIHtcbiBcdFx0XHRcdGRlZmVycmVkTW9kdWxlcy5zcGxpY2UoaS0tLCAxKTtcbiBcdFx0XHRcdHJlc3VsdCA9IF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gZGVmZXJyZWRNb2R1bGVbMF0pO1xuIFx0XHRcdH1cbiBcdFx0fVxuIFx0XHRyZXR1cm4gcmVzdWx0O1xuIFx0fVxuXG4gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGFuZCBsb2FkaW5nIGNodW5rc1xuIFx0Ly8gdW5kZWZpbmVkID0gY2h1bmsgbm90IGxvYWRlZCwgbnVsbCA9IGNodW5rIHByZWxvYWRlZC9wcmVmZXRjaGVkXG4gXHQvLyBQcm9taXNlID0gY2h1bmsgbG9hZGluZywgMCA9IGNodW5rIGxvYWRlZFxuIFx0dmFyIGluc3RhbGxlZENodW5rcyA9IHtcbiBcdFx0MDogMFxuIFx0fTtcblxuIFx0dmFyIGRlZmVycmVkTW9kdWxlcyA9IFtdO1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHR2YXIganNvbnBBcnJheSA9IHdpbmRvd1tcIndlYnBhY2tKc29ucFwiXSA9IHdpbmRvd1tcIndlYnBhY2tKc29ucFwiXSB8fCBbXTtcbiBcdHZhciBvbGRKc29ucEZ1bmN0aW9uID0ganNvbnBBcnJheS5wdXNoLmJpbmQoanNvbnBBcnJheSk7XG4gXHRqc29ucEFycmF5LnB1c2ggPSB3ZWJwYWNrSnNvbnBDYWxsYmFjaztcbiBcdGpzb25wQXJyYXkgPSBqc29ucEFycmF5LnNsaWNlKCk7XG4gXHRmb3IodmFyIGkgPSAwOyBpIDwganNvbnBBcnJheS5sZW5ndGg7IGkrKykgd2VicGFja0pzb25wQ2FsbGJhY2soanNvbnBBcnJheVtpXSk7XG4gXHR2YXIgcGFyZW50SnNvbnBGdW5jdGlvbiA9IG9sZEpzb25wRnVuY3Rpb247XG5cblxuIFx0Ly8gYWRkIGVudHJ5IG1vZHVsZSB0byBkZWZlcnJlZCBsaXN0XG4gXHRkZWZlcnJlZE1vZHVsZXMucHVzaChbNjg3LDEwXSk7XG4gXHQvLyBydW4gZGVmZXJyZWQgbW9kdWxlcyB3aGVuIHJlYWR5XG4gXHRyZXR1cm4gY2hlY2tEZWZlcnJlZE1vZHVsZXMoKTtcbiIsImltcG9ydCB7IERldmljZVR5cGUgfSBmcm9tICcuLi9lbnVtcy9kZXZpY2VUeXBlJztcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFBsYXRmb3JtVXRpbHNTZXJ2aWNlIHtcbiAgICBpZGVudGl0eUNsaWVudElkOiBzdHJpbmc7XG4gICAgZ2V0RGV2aWNlOiAoKSA9PiBEZXZpY2VUeXBlO1xuICAgIGdldERldmljZVN0cmluZzogKCkgPT4gc3RyaW5nO1xuICAgIGlzRmlyZWZveDogKCkgPT4gYm9vbGVhbjtcbiAgICBpc0Nocm9tZTogKCkgPT4gYm9vbGVhbjtcbiAgICBpc0VkZ2U6ICgpID0+IGJvb2xlYW47XG4gICAgaXNPcGVyYTogKCkgPT4gYm9vbGVhbjtcbiAgICBpc1ZpdmFsZGk6ICgpID0+IGJvb2xlYW47XG4gICAgaXNTYWZhcmk6ICgpID0+IGJvb2xlYW47XG4gICAgaXNJRTogKCkgPT4gYm9vbGVhbjtcbiAgICBpc01hY0FwcFN0b3JlOiAoKSA9PiBib29sZWFuO1xuICAgIGFuYWx5dGljc0lkOiAoKSA9PiBzdHJpbmc7XG4gICAgaXNWaWV3T3BlbjogKCkgPT4gUHJvbWlzZTxib29sZWFuPjtcbiAgICAvKipcbiAgICAgKiBAZGVwcmVjYXRlZCBUaGlzIG9ubHkgZXZlciByZXR1cm5zIG51bGwuIFB1bGwgZnJvbSB5b3VyIHBsYXRmb3JtJ3Mgc3RvcmFnZSB1c2luZyBDb25zdGFudHNTZXJ2aWNlLnZhdWx0VGltZW91dEtleVxuICAgICAqL1xuICAgIGxvY2tUaW1lb3V0OiAoKSA9PiBudW1iZXI7XG4gICAgbGF1bmNoVXJpOiAodXJpOiBzdHJpbmcsIG9wdGlvbnM/OiBhbnkpID0+IHZvaWQ7XG4gICAgc2F2ZUZpbGU6ICh3aW46IFdpbmRvdywgYmxvYkRhdGE6IGFueSwgYmxvYk9wdGlvbnM6IGFueSwgZmlsZU5hbWU6IHN0cmluZykgPT4gdm9pZDtcbiAgICBnZXRBcHBsaWNhdGlvblZlcnNpb246ICgpID0+IHN0cmluZztcbiAgICBzdXBwb3J0c1UyZjogKHdpbjogV2luZG93KSA9PiBib29sZWFuO1xuICAgIHN1cHBvcnRzRHVvOiAoKSA9PiBib29sZWFuO1xuICAgIHNob3dUb2FzdDogKHR5cGU6ICdlcnJvcicgfCAnc3VjY2VzcycgfCAnd2FybmluZycgfCAnaW5mbycsIHRpdGxlOiBzdHJpbmcsIHRleHQ6IHN0cmluZyB8IHN0cmluZ1tdLFxuICAgICAgICBvcHRpb25zPzogYW55KSA9PiB2b2lkO1xuICAgIHNob3dEaWFsb2c6ICh0ZXh0OiBzdHJpbmcsIHRpdGxlPzogc3RyaW5nLCBjb25maXJtVGV4dD86IHN0cmluZywgY2FuY2VsVGV4dD86IHN0cmluZyxcbiAgICAgICAgdHlwZT86IHN0cmluZykgPT4gUHJvbWlzZTxib29sZWFuPjtcbiAgICBldmVudFRyYWNrOiAoYWN0aW9uOiBzdHJpbmcsIGxhYmVsPzogc3RyaW5nLCBvcHRpb25zPzogYW55KSA9PiB2b2lkO1xuICAgIGlzRGV2OiAoKSA9PiBib29sZWFuO1xuICAgIGlzU2VsZkhvc3Q6ICgpID0+IGJvb2xlYW47XG4gICAgY29weVRvQ2xpcGJvYXJkOiAodGV4dDogc3RyaW5nLCBvcHRpb25zPzogYW55KSA9PiB2b2lkO1xuICAgIHJlYWRGcm9tQ2xpcGJvYXJkOiAob3B0aW9ucz86IGFueSkgPT4gUHJvbWlzZTxzdHJpbmc+O1xuICAgIHN1cHBvcnRzQmlvbWV0cmljOiAoKSA9PiBQcm9taXNlPGJvb2xlYW4+O1xuICAgIGF1dGhlbnRpY2F0ZUJpb21ldHJpYzogKCkgPT4gUHJvbWlzZTxib29sZWFuPjtcbiAgICBzdXBwb3J0c1NlY3VyZVN0b3JhZ2U6ICgpID0+IGJvb2xlYW47XG59XG4iLCJpbXBvcnQgeyBWaWV3IH0gZnJvbSAnLi92aWV3JztcblxuaW1wb3J0IHsgRm9sZGVyIH0gZnJvbSAnLi4vZG9tYWluL2ZvbGRlcic7XG5pbXBvcnQgeyBJVHJlZU5vZGVPYmplY3QgfSBmcm9tICcuLi9kb21haW4vdHJlZU5vZGUnO1xuXG5leHBvcnQgY2xhc3MgRm9sZGVyVmlldyBpbXBsZW1lbnRzIFZpZXcsIElUcmVlTm9kZU9iamVjdCB7XG4gICAgaWQ6IHN0cmluZyA9IG51bGw7XG4gICAgbmFtZTogc3RyaW5nID0gbnVsbDtcbiAgICByZXZpc2lvbkRhdGU6IERhdGUgPSBudWxsO1xuXG4gICAgY29uc3RydWN0b3IoZj86IEZvbGRlcikge1xuICAgICAgICBpZiAoIWYpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuaWQgPSBmLmlkO1xuICAgICAgICB0aGlzLnJldmlzaW9uRGF0ZSA9IGYucmV2aXNpb25EYXRlO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IEZpZWxkVHlwZSB9IGZyb20gJy4uLy4uL2VudW1zL2ZpZWxkVHlwZSc7XG5cbmltcG9ydCB7IFZpZXcgfSBmcm9tICcuL3ZpZXcnO1xuXG5pbXBvcnQgeyBGaWVsZCB9IGZyb20gJy4uL2RvbWFpbi9maWVsZCc7XG5cbmV4cG9ydCBjbGFzcyBGaWVsZFZpZXcgaW1wbGVtZW50cyBWaWV3IHtcbiAgICBuYW1lOiBzdHJpbmcgPSBudWxsO1xuICAgIHZhbHVlOiBzdHJpbmcgPSBudWxsO1xuICAgIHR5cGU6IEZpZWxkVHlwZSA9IG51bGw7XG4gICAgbmV3RmllbGQ6IGJvb2xlYW4gPSBmYWxzZTsgLy8gTWFya3MgaWYgdGhlIGZpZWxkIGlzIG5ldyBhbmQgaGFzbid0IGJlZW4gc2F2ZWRcbiAgICBzaG93VmFsdWU6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIGNvbnN0cnVjdG9yKGY/OiBGaWVsZCkge1xuICAgICAgICBpZiAoIWYpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudHlwZSA9IGYudHlwZTtcbiAgICB9XG5cbiAgICBnZXQgbWFza2VkVmFsdWUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWUgIT0gbnVsbCA/ICfigKLigKLigKLigKLigKLigKLigKLigKInIDogbnVsbDtcbiAgICB9XG59XG4iLCJleHBvcnQgY2xhc3MgS2V5c1JlcXVlc3Qge1xuICAgIHB1YmxpY0tleTogc3RyaW5nO1xuICAgIGVuY3J5cHRlZFByaXZhdGVLZXk6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpY0tleTogc3RyaW5nLCBlbmNyeXB0ZWRQcml2YXRlS2V5OiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5wdWJsaWNLZXkgPSBwdWJsaWNLZXk7XG4gICAgICAgIHRoaXMuZW5jcnlwdGVkUHJpdmF0ZUtleSA9IGVuY3J5cHRlZFByaXZhdGVLZXk7XG4gICAgfVxufVxuIiwiZXhwb3J0IGVudW0gQ2lwaGVyVHlwZSB7XG4gICAgTG9naW4gPSAxLFxuICAgIFNlY3VyZU5vdGUgPSAyLFxuICAgIENhcmQgPSAzLFxuICAgIElkZW50aXR5ID0gNCxcbn1cbiIsImV4cG9ydCBjbGFzcyBBdHRhY2htZW50UmVxdWVzdCB7XG4gICAgZmlsZU5hbWU6IHN0cmluZztcbiAgICBrZXk6IHN0cmluZztcbn1cbiIsImltcG9ydCB7IENpcGhlclR5cGUgfSBmcm9tICcuLi8uLi9lbnVtcy9jaXBoZXJUeXBlJztcblxuaW1wb3J0IHsgQ2lwaGVyIH0gZnJvbSAnLi4vZG9tYWluL2NpcGhlcic7XG5cbmltcG9ydCB7IENhcmRBcGkgfSBmcm9tICcuLi9hcGkvY2FyZEFwaSc7XG5pbXBvcnQgeyBGaWVsZEFwaSB9IGZyb20gJy4uL2FwaS9maWVsZEFwaSc7XG5pbXBvcnQgeyBJZGVudGl0eUFwaSB9IGZyb20gJy4uL2FwaS9pZGVudGl0eUFwaSc7XG5pbXBvcnQgeyBMb2dpbkFwaSB9IGZyb20gJy4uL2FwaS9sb2dpbkFwaSc7XG5pbXBvcnQgeyBMb2dpblVyaUFwaSB9IGZyb20gJy4uL2FwaS9sb2dpblVyaUFwaSc7XG5pbXBvcnQgeyBTZWN1cmVOb3RlQXBpIH0gZnJvbSAnLi4vYXBpL3NlY3VyZU5vdGVBcGknO1xuXG5pbXBvcnQgeyBBdHRhY2htZW50UmVxdWVzdCB9IGZyb20gJy4vYXR0YWNobWVudFJlcXVlc3QnO1xuaW1wb3J0IHsgUGFzc3dvcmRIaXN0b3J5UmVxdWVzdCB9IGZyb20gJy4vcGFzc3dvcmRIaXN0b3J5UmVxdWVzdCc7XG5cbmV4cG9ydCBjbGFzcyBDaXBoZXJSZXF1ZXN0IHtcbiAgICB0eXBlOiBDaXBoZXJUeXBlO1xuICAgIGZvbGRlcklkOiBzdHJpbmc7XG4gICAgb3JnYW5pemF0aW9uSWQ6IHN0cmluZztcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgbm90ZXM6IHN0cmluZztcbiAgICBmYXZvcml0ZTogYm9vbGVhbjtcbiAgICBsb2dpbjogTG9naW5BcGk7XG4gICAgc2VjdXJlTm90ZTogU2VjdXJlTm90ZUFwaTtcbiAgICBjYXJkOiBDYXJkQXBpO1xuICAgIGlkZW50aXR5OiBJZGVudGl0eUFwaTtcbiAgICBmaWVsZHM6IEZpZWxkQXBpW107XG4gICAgcGFzc3dvcmRIaXN0b3J5OiBQYXNzd29yZEhpc3RvcnlSZXF1ZXN0W107XG4gICAgLy8gRGVwcmVjYXRlZCwgcmVtb3ZlIGF0IHNvbWUgcG9pbnQgYW5kIHJlbmFtZSBhdHRhY2htZW50czIgdG8gYXR0YWNobWVudHNcbiAgICBhdHRhY2htZW50czogeyBbaWQ6IHN0cmluZ106IHN0cmluZzsgfTtcbiAgICBhdHRhY2htZW50czI6IHsgW2lkOiBzdHJpbmddOiBBdHRhY2htZW50UmVxdWVzdDsgfTtcbiAgICBsYXN0S25vd25SZXZpc2lvbkRhdGU6IERhdGU7XG5cbiAgICBjb25zdHJ1Y3RvcihjaXBoZXI6IENpcGhlcikge1xuICAgICAgICB0aGlzLnR5cGUgPSBjaXBoZXIudHlwZTtcbiAgICAgICAgdGhpcy5mb2xkZXJJZCA9IGNpcGhlci5mb2xkZXJJZDtcbiAgICAgICAgdGhpcy5vcmdhbml6YXRpb25JZCA9IGNpcGhlci5vcmdhbml6YXRpb25JZDtcbiAgICAgICAgdGhpcy5uYW1lID0gY2lwaGVyLm5hbWUgPyBjaXBoZXIubmFtZS5lbmNyeXB0ZWRTdHJpbmcgOiBudWxsO1xuICAgICAgICB0aGlzLm5vdGVzID0gY2lwaGVyLm5vdGVzID8gY2lwaGVyLm5vdGVzLmVuY3J5cHRlZFN0cmluZyA6IG51bGw7XG4gICAgICAgIHRoaXMuZmF2b3JpdGUgPSBjaXBoZXIuZmF2b3JpdGU7XG4gICAgICAgIHRoaXMubGFzdEtub3duUmV2aXNpb25EYXRlID0gY2lwaGVyLnJldmlzaW9uRGF0ZTtcblxuICAgICAgICBzd2l0Y2ggKHRoaXMudHlwZSkge1xuICAgICAgICAgICAgY2FzZSBDaXBoZXJUeXBlLkxvZ2luOlxuICAgICAgICAgICAgICAgIHRoaXMubG9naW4gPSBuZXcgTG9naW5BcGkoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ2luLnVyaXMgPSBudWxsO1xuICAgICAgICAgICAgICAgIHRoaXMubG9naW4udXNlcm5hbWUgPSBjaXBoZXIubG9naW4udXNlcm5hbWUgPyBjaXBoZXIubG9naW4udXNlcm5hbWUuZW5jcnlwdGVkU3RyaW5nIDogbnVsbDtcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ2luLnBhc3N3b3JkID0gY2lwaGVyLmxvZ2luLnBhc3N3b3JkID8gY2lwaGVyLmxvZ2luLnBhc3N3b3JkLmVuY3J5cHRlZFN0cmluZyA6IG51bGw7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2dpbi5wYXNzd29yZFJldmlzaW9uRGF0ZSA9IGNpcGhlci5sb2dpbi5wYXNzd29yZFJldmlzaW9uRGF0ZSAhPSBudWxsID9cbiAgICAgICAgICAgICAgICAgICAgY2lwaGVyLmxvZ2luLnBhc3N3b3JkUmV2aXNpb25EYXRlLnRvSVNPU3RyaW5nKCkgOiBudWxsO1xuICAgICAgICAgICAgICAgIHRoaXMubG9naW4udG90cCA9IGNpcGhlci5sb2dpbi50b3RwID8gY2lwaGVyLmxvZ2luLnRvdHAuZW5jcnlwdGVkU3RyaW5nIDogbnVsbDtcblxuICAgICAgICAgICAgICAgIGlmIChjaXBoZXIubG9naW4udXJpcyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9naW4udXJpcyA9IGNpcGhlci5sb2dpbi51cmlzLm1hcCgodSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdXJpID0gbmV3IExvZ2luVXJpQXBpKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cmkudXJpID0gdS51cmkgIT0gbnVsbCA/IHUudXJpLmVuY3J5cHRlZFN0cmluZyA6IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cmkubWF0Y2ggPSB1Lm1hdGNoICE9IG51bGwgPyB1Lm1hdGNoIDogbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1cmk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgQ2lwaGVyVHlwZS5TZWN1cmVOb3RlOlxuICAgICAgICAgICAgICAgIHRoaXMuc2VjdXJlTm90ZSA9IG5ldyBTZWN1cmVOb3RlQXBpKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWN1cmVOb3RlLnR5cGUgPSBjaXBoZXIuc2VjdXJlTm90ZS50eXBlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBDaXBoZXJUeXBlLkNhcmQ6XG4gICAgICAgICAgICAgICAgdGhpcy5jYXJkID0gbmV3IENhcmRBcGkoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNhcmQuY2FyZGhvbGRlck5hbWUgPSBjaXBoZXIuY2FyZC5jYXJkaG9sZGVyTmFtZSAhPSBudWxsID9cbiAgICAgICAgICAgICAgICAgICAgY2lwaGVyLmNhcmQuY2FyZGhvbGRlck5hbWUuZW5jcnlwdGVkU3RyaW5nIDogbnVsbDtcbiAgICAgICAgICAgICAgICB0aGlzLmNhcmQuYnJhbmQgPSBjaXBoZXIuY2FyZC5icmFuZCAhPSBudWxsID8gY2lwaGVyLmNhcmQuYnJhbmQuZW5jcnlwdGVkU3RyaW5nIDogbnVsbDtcbiAgICAgICAgICAgICAgICB0aGlzLmNhcmQubnVtYmVyID0gY2lwaGVyLmNhcmQubnVtYmVyICE9IG51bGwgPyBjaXBoZXIuY2FyZC5udW1iZXIuZW5jcnlwdGVkU3RyaW5nIDogbnVsbDtcbiAgICAgICAgICAgICAgICB0aGlzLmNhcmQuZXhwTW9udGggPSBjaXBoZXIuY2FyZC5leHBNb250aCAhPSBudWxsID8gY2lwaGVyLmNhcmQuZXhwTW9udGguZW5jcnlwdGVkU3RyaW5nIDogbnVsbDtcbiAgICAgICAgICAgICAgICB0aGlzLmNhcmQuZXhwWWVhciA9IGNpcGhlci5jYXJkLmV4cFllYXIgIT0gbnVsbCA/IGNpcGhlci5jYXJkLmV4cFllYXIuZW5jcnlwdGVkU3RyaW5nIDogbnVsbDtcbiAgICAgICAgICAgICAgICB0aGlzLmNhcmQuY29kZSA9IGNpcGhlci5jYXJkLmNvZGUgIT0gbnVsbCA/IGNpcGhlci5jYXJkLmNvZGUuZW5jcnlwdGVkU3RyaW5nIDogbnVsbDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgQ2lwaGVyVHlwZS5JZGVudGl0eTpcbiAgICAgICAgICAgICAgICB0aGlzLmlkZW50aXR5ID0gbmV3IElkZW50aXR5QXBpKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5pZGVudGl0eS50aXRsZSA9IGNpcGhlci5pZGVudGl0eS50aXRsZSAhPSBudWxsID8gY2lwaGVyLmlkZW50aXR5LnRpdGxlLmVuY3J5cHRlZFN0cmluZyA6IG51bGw7XG4gICAgICAgICAgICAgICAgdGhpcy5pZGVudGl0eS5maXJzdE5hbWUgPSBjaXBoZXIuaWRlbnRpdHkuZmlyc3ROYW1lICE9IG51bGwgP1xuICAgICAgICAgICAgICAgICAgICBjaXBoZXIuaWRlbnRpdHkuZmlyc3ROYW1lLmVuY3J5cHRlZFN0cmluZyA6IG51bGw7XG4gICAgICAgICAgICAgICAgdGhpcy5pZGVudGl0eS5taWRkbGVOYW1lID0gY2lwaGVyLmlkZW50aXR5Lm1pZGRsZU5hbWUgIT0gbnVsbCA/XG4gICAgICAgICAgICAgICAgICAgIGNpcGhlci5pZGVudGl0eS5taWRkbGVOYW1lLmVuY3J5cHRlZFN0cmluZyA6IG51bGw7XG4gICAgICAgICAgICAgICAgdGhpcy5pZGVudGl0eS5sYXN0TmFtZSA9IGNpcGhlci5pZGVudGl0eS5sYXN0TmFtZSAhPSBudWxsID9cbiAgICAgICAgICAgICAgICAgICAgY2lwaGVyLmlkZW50aXR5Lmxhc3ROYW1lLmVuY3J5cHRlZFN0cmluZyA6IG51bGw7XG4gICAgICAgICAgICAgICAgdGhpcy5pZGVudGl0eS5hZGRyZXNzMSA9IGNpcGhlci5pZGVudGl0eS5hZGRyZXNzMSAhPSBudWxsID9cbiAgICAgICAgICAgICAgICAgICAgY2lwaGVyLmlkZW50aXR5LmFkZHJlc3MxLmVuY3J5cHRlZFN0cmluZyA6IG51bGw7XG4gICAgICAgICAgICAgICAgdGhpcy5pZGVudGl0eS5hZGRyZXNzMiA9IGNpcGhlci5pZGVudGl0eS5hZGRyZXNzMiAhPSBudWxsID9cbiAgICAgICAgICAgICAgICAgICAgY2lwaGVyLmlkZW50aXR5LmFkZHJlc3MyLmVuY3J5cHRlZFN0cmluZyA6IG51bGw7XG4gICAgICAgICAgICAgICAgdGhpcy5pZGVudGl0eS5hZGRyZXNzMyA9IGNpcGhlci5pZGVudGl0eS5hZGRyZXNzMyAhPSBudWxsID9cbiAgICAgICAgICAgICAgICAgICAgY2lwaGVyLmlkZW50aXR5LmFkZHJlc3MzLmVuY3J5cHRlZFN0cmluZyA6IG51bGw7XG4gICAgICAgICAgICAgICAgdGhpcy5pZGVudGl0eS5jaXR5ID0gY2lwaGVyLmlkZW50aXR5LmNpdHkgIT0gbnVsbCA/IGNpcGhlci5pZGVudGl0eS5jaXR5LmVuY3J5cHRlZFN0cmluZyA6IG51bGw7XG4gICAgICAgICAgICAgICAgdGhpcy5pZGVudGl0eS5zdGF0ZSA9IGNpcGhlci5pZGVudGl0eS5zdGF0ZSAhPSBudWxsID8gY2lwaGVyLmlkZW50aXR5LnN0YXRlLmVuY3J5cHRlZFN0cmluZyA6IG51bGw7XG4gICAgICAgICAgICAgICAgdGhpcy5pZGVudGl0eS5wb3N0YWxDb2RlID0gY2lwaGVyLmlkZW50aXR5LnBvc3RhbENvZGUgIT0gbnVsbCA/XG4gICAgICAgICAgICAgICAgICAgIGNpcGhlci5pZGVudGl0eS5wb3N0YWxDb2RlLmVuY3J5cHRlZFN0cmluZyA6IG51bGw7XG4gICAgICAgICAgICAgICAgdGhpcy5pZGVudGl0eS5jb3VudHJ5ID0gY2lwaGVyLmlkZW50aXR5LmNvdW50cnkgIT0gbnVsbCA/XG4gICAgICAgICAgICAgICAgICAgIGNpcGhlci5pZGVudGl0eS5jb3VudHJ5LmVuY3J5cHRlZFN0cmluZyA6IG51bGw7XG4gICAgICAgICAgICAgICAgdGhpcy5pZGVudGl0eS5jb21wYW55ID0gY2lwaGVyLmlkZW50aXR5LmNvbXBhbnkgIT0gbnVsbCA/XG4gICAgICAgICAgICAgICAgICAgIGNpcGhlci5pZGVudGl0eS5jb21wYW55LmVuY3J5cHRlZFN0cmluZyA6IG51bGw7XG4gICAgICAgICAgICAgICAgdGhpcy5pZGVudGl0eS5lbWFpbCA9IGNpcGhlci5pZGVudGl0eS5lbWFpbCAhPSBudWxsID8gY2lwaGVyLmlkZW50aXR5LmVtYWlsLmVuY3J5cHRlZFN0cmluZyA6IG51bGw7XG4gICAgICAgICAgICAgICAgdGhpcy5pZGVudGl0eS5waG9uZSA9IGNpcGhlci5pZGVudGl0eS5waG9uZSAhPSBudWxsID8gY2lwaGVyLmlkZW50aXR5LnBob25lLmVuY3J5cHRlZFN0cmluZyA6IG51bGw7XG4gICAgICAgICAgICAgICAgdGhpcy5pZGVudGl0eS5zc24gPSBjaXBoZXIuaWRlbnRpdHkuc3NuICE9IG51bGwgPyBjaXBoZXIuaWRlbnRpdHkuc3NuLmVuY3J5cHRlZFN0cmluZyA6IG51bGw7XG4gICAgICAgICAgICAgICAgdGhpcy5pZGVudGl0eS51c2VybmFtZSA9IGNpcGhlci5pZGVudGl0eS51c2VybmFtZSAhPSBudWxsID9cbiAgICAgICAgICAgICAgICAgICAgY2lwaGVyLmlkZW50aXR5LnVzZXJuYW1lLmVuY3J5cHRlZFN0cmluZyA6IG51bGw7XG4gICAgICAgICAgICAgICAgdGhpcy5pZGVudGl0eS5wYXNzcG9ydE51bWJlciA9IGNpcGhlci5pZGVudGl0eS5wYXNzcG9ydE51bWJlciAhPSBudWxsID9cbiAgICAgICAgICAgICAgICAgICAgY2lwaGVyLmlkZW50aXR5LnBhc3Nwb3J0TnVtYmVyLmVuY3J5cHRlZFN0cmluZyA6IG51bGw7XG4gICAgICAgICAgICAgICAgdGhpcy5pZGVudGl0eS5saWNlbnNlTnVtYmVyID0gY2lwaGVyLmlkZW50aXR5LmxpY2Vuc2VOdW1iZXIgIT0gbnVsbCA/XG4gICAgICAgICAgICAgICAgICAgIGNpcGhlci5pZGVudGl0eS5saWNlbnNlTnVtYmVyLmVuY3J5cHRlZFN0cmluZyA6IG51bGw7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNpcGhlci5maWVsZHMgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5maWVsZHMgPSBjaXBoZXIuZmllbGRzLm1hcCgoZikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZpZWxkID0gbmV3IEZpZWxkQXBpKCk7XG4gICAgICAgICAgICAgICAgZmllbGQudHlwZSA9IGYudHlwZTtcbiAgICAgICAgICAgICAgICBmaWVsZC5uYW1lID0gZi5uYW1lID8gZi5uYW1lLmVuY3J5cHRlZFN0cmluZyA6IG51bGw7XG4gICAgICAgICAgICAgICAgZmllbGQudmFsdWUgPSBmLnZhbHVlID8gZi52YWx1ZS5lbmNyeXB0ZWRTdHJpbmcgOiBudWxsO1xuICAgICAgICAgICAgICAgIHJldHVybiBmaWVsZDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNpcGhlci5wYXNzd29yZEhpc3RvcnkgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5wYXNzd29yZEhpc3RvcnkgPSBbXTtcbiAgICAgICAgICAgIGNpcGhlci5wYXNzd29yZEhpc3RvcnkuZm9yRWFjaCgocGgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnBhc3N3b3JkSGlzdG9yeS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgbGFzdFVzZWREYXRlOiBwaC5sYXN0VXNlZERhdGUsXG4gICAgICAgICAgICAgICAgICAgIHBhc3N3b3JkOiBwaC5wYXNzd29yZCA/IHBoLnBhc3N3b3JkLmVuY3J5cHRlZFN0cmluZyA6IG51bGwsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjaXBoZXIuYXR0YWNobWVudHMgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5hdHRhY2htZW50cyA9IHt9O1xuICAgICAgICAgICAgdGhpcy5hdHRhY2htZW50czIgPSB7fTtcbiAgICAgICAgICAgIGNpcGhlci5hdHRhY2htZW50cy5mb3JFYWNoKChhdHRhY2htZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZmlsZU5hbWUgPSBhdHRhY2htZW50LmZpbGVOYW1lID8gYXR0YWNobWVudC5maWxlTmFtZS5lbmNyeXB0ZWRTdHJpbmcgOiBudWxsO1xuICAgICAgICAgICAgICAgIHRoaXMuYXR0YWNobWVudHNbYXR0YWNobWVudC5pZF0gPSBmaWxlTmFtZTtcbiAgICAgICAgICAgICAgICBjb25zdCBhdHRhY2htZW50UmVxdWVzdCA9IG5ldyBBdHRhY2htZW50UmVxdWVzdCgpO1xuICAgICAgICAgICAgICAgIGF0dGFjaG1lbnRSZXF1ZXN0LmZpbGVOYW1lID0gZmlsZU5hbWU7XG4gICAgICAgICAgICAgICAgaWYgKGF0dGFjaG1lbnQua2V5ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgYXR0YWNobWVudFJlcXVlc3Qua2V5ID0gYXR0YWNobWVudC5rZXkuZW5jcnlwdGVkU3RyaW5nO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmF0dGFjaG1lbnRzMlthdHRhY2htZW50LmlkXSA9IGF0dGFjaG1lbnRSZXF1ZXN0O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJleHBvcnQgYWJzdHJhY3QgY2xhc3MgQmFzZVJlc3BvbnNlIHtcbiAgICBwcml2YXRlIHJlc3BvbnNlOiBhbnk7XG5cbiAgICBjb25zdHJ1Y3RvcihyZXNwb25zZTogYW55KSB7XG4gICAgICAgIHRoaXMucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0UmVzcG9uc2VQcm9wZXJ0eShwcm9wZXJ0eU5hbWU6IHN0cmluZywgcmVzcG9uc2U6IGFueSA9IG51bGwsIGV4YWN0TmFtZSA9IGZhbHNlKTogYW55IHtcbiAgICAgICAgaWYgKHByb3BlcnR5TmFtZSA9PSBudWxsIHx8IHByb3BlcnR5TmFtZSA9PT0gJycpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigncHJvcGVydHlOYW1lIG11c3Qgbm90IGJlIG51bGwvZW1wdHkuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlc3BvbnNlID09IG51bGwgJiYgdGhpcy5yZXNwb25zZSAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXNwb25zZSA9IHRoaXMucmVzcG9uc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlc3BvbnNlID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZXhhY3ROYW1lICYmIHJlc3BvbnNlW3Byb3BlcnR5TmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbGV0IG90aGVyQ2FzZVByb3BlcnR5TmFtZTogc3RyaW5nID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChwcm9wZXJ0eU5hbWUuY2hhckF0KDApID09PSBwcm9wZXJ0eU5hbWUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkpIHtcbiAgICAgICAgICAgICAgICBvdGhlckNhc2VQcm9wZXJ0eU5hbWUgPSBwcm9wZXJ0eU5hbWUuY2hhckF0KDApLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG90aGVyQ2FzZVByb3BlcnR5TmFtZSA9IHByb3BlcnR5TmFtZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwcm9wZXJ0eU5hbWUubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgIG90aGVyQ2FzZVByb3BlcnR5TmFtZSArPSBwcm9wZXJ0eU5hbWUuc2xpY2UoMSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHByb3BlcnR5TmFtZSA9IG90aGVyQ2FzZVByb3BlcnR5TmFtZTtcbiAgICAgICAgICAgIGlmIChyZXNwb25zZVtwcm9wZXJ0eU5hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eU5hbWUgPSBwcm9wZXJ0eU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyZXNwb25zZVtwcm9wZXJ0eU5hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eU5hbWUgPSBwcm9wZXJ0eU5hbWUudG9VcHBlckNhc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzcG9uc2VbcHJvcGVydHlOYW1lXTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBUd29GYWN0b3JQcm92aWRlclR5cGUgfSBmcm9tICcuLi8uLi9lbnVtcy90d29GYWN0b3JQcm92aWRlclR5cGUnO1xuXG5leHBvcnQgY2xhc3MgQXV0aFJlc3VsdCB7XG4gICAgdHdvRmFjdG9yOiBib29sZWFuID0gZmFsc2U7XG4gICAgcmVzZXRNYXN0ZXJQYXNzd29yZDogYm9vbGVhbiA9IGZhbHNlO1xuICAgIHR3b0ZhY3RvclByb3ZpZGVyczogTWFwPFR3b0ZhY3RvclByb3ZpZGVyVHlwZSwgeyBba2V5OiBzdHJpbmddOiBzdHJpbmc7IH0+ID0gbnVsbDtcbn1cbiIsImltcG9ydCB7IERldmljZVR5cGUgfSBmcm9tICcuLi8uLi9lbnVtcy9kZXZpY2VUeXBlJztcblxuaW1wb3J0IHsgUGxhdGZvcm1VdGlsc1NlcnZpY2UgfSBmcm9tICcuLi8uLi9hYnN0cmFjdGlvbnMvcGxhdGZvcm1VdGlscy5zZXJ2aWNlJztcblxuZXhwb3J0IGNsYXNzIERldmljZVJlcXVlc3Qge1xuICAgIHR5cGU6IERldmljZVR5cGU7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIGlkZW50aWZpZXI6IHN0cmluZztcbiAgICBwdXNoVG9rZW4/OiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihhcHBJZDogc3RyaW5nLCBwbGF0Zm9ybVV0aWxzU2VydmljZTogUGxhdGZvcm1VdGlsc1NlcnZpY2UpIHtcbiAgICAgICAgdGhpcy50eXBlID0gcGxhdGZvcm1VdGlsc1NlcnZpY2UuZ2V0RGV2aWNlKCk7XG4gICAgICAgIHRoaXMubmFtZSA9IHBsYXRmb3JtVXRpbHNTZXJ2aWNlLmdldERldmljZVN0cmluZygpO1xuICAgICAgICB0aGlzLmlkZW50aWZpZXIgPSBhcHBJZDtcbiAgICAgICAgdGhpcy5wdXNoVG9rZW4gPSBudWxsO1xuICAgIH1cbn1cbiIsImV4cG9ydCBjbGFzcyBQcmVsb2dpblJlcXVlc3Qge1xuICAgIGVtYWlsOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihlbWFpbDogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuZW1haWwgPSBlbWFpbDtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBUd29GYWN0b3JQcm92aWRlclR5cGUgfSBmcm9tICcuLi8uLi9lbnVtcy90d29GYWN0b3JQcm92aWRlclR5cGUnO1xuXG5pbXBvcnQgeyBEZXZpY2VSZXF1ZXN0IH0gZnJvbSAnLi9kZXZpY2VSZXF1ZXN0JztcblxuZXhwb3J0IGNsYXNzIFRva2VuUmVxdWVzdCB7XG4gICAgZW1haWw6IHN0cmluZztcbiAgICBtYXN0ZXJQYXNzd29yZEhhc2g6IHN0cmluZztcbiAgICBjb2RlOiBzdHJpbmc7XG4gICAgY29kZVZlcmlmaWVyOiBzdHJpbmc7XG4gICAgcmVkaXJlY3RVcmk6IHN0cmluZztcbiAgICBjbGllbnRJZDogc3RyaW5nO1xuICAgIGNsaWVudFNlY3JldDogc3RyaW5nO1xuICAgIHRva2VuOiBzdHJpbmc7XG4gICAgcHJvdmlkZXI6IFR3b0ZhY3RvclByb3ZpZGVyVHlwZTtcbiAgICByZW1lbWJlcjogYm9vbGVhbjtcbiAgICBkZXZpY2U/OiBEZXZpY2VSZXF1ZXN0O1xuXG4gICAgY29uc3RydWN0b3IoY3JlZGVudGlhbHM6IHN0cmluZ1tdLCBjb2Rlczogc3RyaW5nW10sIGNsaWVudElkQ2xpZW50U2VjcmV0OiBzdHJpbmdbXSwgcHJvdmlkZXI6IFR3b0ZhY3RvclByb3ZpZGVyVHlwZSxcbiAgICAgICAgdG9rZW46IHN0cmluZywgcmVtZW1iZXI6IGJvb2xlYW4sIGRldmljZT86IERldmljZVJlcXVlc3QpIHtcbiAgICAgICAgaWYgKGNyZWRlbnRpYWxzICE9IG51bGwgJiYgY3JlZGVudGlhbHMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgdGhpcy5lbWFpbCA9IGNyZWRlbnRpYWxzWzBdO1xuICAgICAgICAgICAgdGhpcy5tYXN0ZXJQYXNzd29yZEhhc2ggPSBjcmVkZW50aWFsc1sxXTtcbiAgICAgICAgfSBlbHNlIGlmIChjb2RlcyAhPSBudWxsICYmIGNvZGVzLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgICAgIHRoaXMuY29kZSA9IGNvZGVzWzBdO1xuICAgICAgICAgICAgdGhpcy5jb2RlVmVyaWZpZXIgPSBjb2Rlc1sxXTtcbiAgICAgICAgICAgIHRoaXMucmVkaXJlY3RVcmkgPSBjb2Rlc1syXTtcbiAgICAgICAgfSBlbHNlIGlmIChjbGllbnRJZENsaWVudFNlY3JldCAhPSBudWxsICYmIGNsaWVudElkQ2xpZW50U2VjcmV0Lmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIHRoaXMuY2xpZW50SWQgPSBjbGllbnRJZENsaWVudFNlY3JldFswXVxuICAgICAgICAgICAgdGhpcy5jbGllbnRTZWNyZXQgPSBjbGllbnRJZENsaWVudFNlY3JldFsxXVxuICAgICAgICB9XG4gICAgICAgIHRoaXMudG9rZW4gPSB0b2tlbjtcbiAgICAgICAgdGhpcy5wcm92aWRlciA9IHByb3ZpZGVyO1xuICAgICAgICB0aGlzLnJlbWVtYmVyID0gcmVtZW1iZXI7XG4gICAgICAgIHRoaXMuZGV2aWNlID0gZGV2aWNlICE9IG51bGwgPyBkZXZpY2UgOiBudWxsO1xuICAgIH1cblxuICAgIHRvSWRlbnRpdHlUb2tlbihjbGllbnRJZDogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IG9iajogYW55ID0ge1xuICAgICAgICAgICAgc2NvcGU6ICdhcGkgb2ZmbGluZV9hY2Nlc3MnLFxuICAgICAgICAgICAgY2xpZW50X2lkOiBjbGllbnRJZCxcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAodGhpcy5jbGllbnRTZWNyZXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgb2JqLnNjb3BlID0gJ2FwaSc7XG4gICAgICAgICAgICBvYmouZ3JhbnRfdHlwZSA9ICdjbGllbnRfY3JlZGVudGlhbHMnO1xuICAgICAgICAgICAgb2JqLmNsaWVudF9zZWNyZXQgPSB0aGlzLmNsaWVudFNlY3JldDtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLm1hc3RlclBhc3N3b3JkSGFzaCAhPSBudWxsICYmIHRoaXMuZW1haWwgIT0gbnVsbCkge1xuICAgICAgICAgICAgb2JqLmdyYW50X3R5cGUgPSAncGFzc3dvcmQnO1xuICAgICAgICAgICAgb2JqLnVzZXJuYW1lID0gdGhpcy5lbWFpbDtcbiAgICAgICAgICAgIG9iai5wYXNzd29yZCA9IHRoaXMubWFzdGVyUGFzc3dvcmRIYXNoO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuY29kZSAhPSBudWxsICYmIHRoaXMuY29kZVZlcmlmaWVyICE9IG51bGwgJiYgdGhpcy5yZWRpcmVjdFVyaSAhPSBudWxsKSB7XG4gICAgICAgICAgICBvYmouZ3JhbnRfdHlwZSA9ICdhdXRob3JpemF0aW9uX2NvZGUnO1xuICAgICAgICAgICAgb2JqLmNvZGUgPSB0aGlzLmNvZGU7XG4gICAgICAgICAgICBvYmouY29kZV92ZXJpZmllciA9IHRoaXMuY29kZVZlcmlmaWVyO1xuICAgICAgICAgICAgb2JqLnJlZGlyZWN0X3VyaSA9IHRoaXMucmVkaXJlY3RVcmk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ211c3QgcHJvdmlkZSBjcmVkZW50aWFscyBvciBjb2RlcycpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuZGV2aWNlKSB7XG4gICAgICAgICAgICBvYmouZGV2aWNlVHlwZSA9IHRoaXMuZGV2aWNlLnR5cGU7XG4gICAgICAgICAgICBvYmouZGV2aWNlSWRlbnRpZmllciA9IHRoaXMuZGV2aWNlLmlkZW50aWZpZXI7XG4gICAgICAgICAgICBvYmouZGV2aWNlTmFtZSA9IHRoaXMuZGV2aWNlLm5hbWU7XG4gICAgICAgICAgICAvLyBubyBwdXNoIHRva2VucyBmb3IgYnJvd3NlciBhcHBzIHlldFxuICAgICAgICAgICAgLy8gb2JqLmRldmljZVB1c2hUb2tlbiA9IHRoaXMuZGV2aWNlLnB1c2hUb2tlbjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnRva2VuICYmIHRoaXMucHJvdmlkZXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgb2JqLnR3b0ZhY3RvclRva2VuID0gdGhpcy50b2tlbjtcbiAgICAgICAgICAgIG9iai50d29GYWN0b3JQcm92aWRlciA9IHRoaXMucHJvdmlkZXI7XG4gICAgICAgICAgICBvYmoudHdvRmFjdG9yUmVtZW1iZXIgPSB0aGlzLnJlbWVtYmVyID8gJzEnIDogJzAnO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBLZGZUeXBlIH0gZnJvbSAnLi4vZW51bXMva2RmVHlwZSc7XG5pbXBvcnQgeyBUd29GYWN0b3JQcm92aWRlclR5cGUgfSBmcm9tICcuLi9lbnVtcy90d29GYWN0b3JQcm92aWRlclR5cGUnO1xuXG5pbXBvcnQgeyBBdXRoUmVzdWx0IH0gZnJvbSAnLi4vbW9kZWxzL2RvbWFpbi9hdXRoUmVzdWx0JztcbmltcG9ydCB7IFN5bW1ldHJpY0NyeXB0b0tleSB9IGZyb20gJy4uL21vZGVscy9kb21haW4vc3ltbWV0cmljQ3J5cHRvS2V5JztcblxuaW1wb3J0IHsgRGV2aWNlUmVxdWVzdCB9IGZyb20gJy4uL21vZGVscy9yZXF1ZXN0L2RldmljZVJlcXVlc3QnO1xuaW1wb3J0IHsgS2V5c1JlcXVlc3QgfSBmcm9tICcuLi9tb2RlbHMvcmVxdWVzdC9rZXlzUmVxdWVzdCc7XG5pbXBvcnQgeyBQcmVsb2dpblJlcXVlc3QgfSBmcm9tICcuLi9tb2RlbHMvcmVxdWVzdC9wcmVsb2dpblJlcXVlc3QnO1xuaW1wb3J0IHsgVG9rZW5SZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWxzL3JlcXVlc3QvdG9rZW5SZXF1ZXN0JztcblxuaW1wb3J0IHsgSWRlbnRpdHlUb2tlblJlc3BvbnNlIH0gZnJvbSAnLi4vbW9kZWxzL3Jlc3BvbnNlL2lkZW50aXR5VG9rZW5SZXNwb25zZSc7XG5pbXBvcnQgeyBJZGVudGl0eVR3b0ZhY3RvclJlc3BvbnNlIH0gZnJvbSAnLi4vbW9kZWxzL3Jlc3BvbnNlL2lkZW50aXR5VHdvRmFjdG9yUmVzcG9uc2UnO1xuXG5pbXBvcnQgeyBBcGlTZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL2FwaS5zZXJ2aWNlJztcbmltcG9ydCB7IEFwcElkU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9hcHBJZC5zZXJ2aWNlJztcbmltcG9ydCB7IEF1dGhTZXJ2aWNlIGFzIEF1dGhTZXJ2aWNlQWJzdHJhY3Rpb24gfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvYXV0aC5zZXJ2aWNlJztcbmltcG9ydCB7IENyeXB0b1NlcnZpY2UgfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvY3J5cHRvLnNlcnZpY2UnO1xuaW1wb3J0IHsgSTE4blNlcnZpY2UgfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvaTE4bi5zZXJ2aWNlJztcbmltcG9ydCB7IE1lc3NhZ2luZ1NlcnZpY2UgfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvbWVzc2FnaW5nLnNlcnZpY2UnO1xuaW1wb3J0IHsgUGxhdGZvcm1VdGlsc1NlcnZpY2UgfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvcGxhdGZvcm1VdGlscy5zZXJ2aWNlJztcbmltcG9ydCB7IFRva2VuU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy90b2tlbi5zZXJ2aWNlJztcbmltcG9ydCB7IFVzZXJTZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL3VzZXIuc2VydmljZSc7XG5pbXBvcnQgeyBWYXVsdFRpbWVvdXRTZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL3ZhdWx0VGltZW91dC5zZXJ2aWNlJztcblxuZXhwb3J0IGNvbnN0IFR3b0ZhY3RvclByb3ZpZGVycyA9IHtcbiAgICBbVHdvRmFjdG9yUHJvdmlkZXJUeXBlLkF1dGhlbnRpY2F0b3JdOiB7XG4gICAgICAgIHR5cGU6IFR3b0ZhY3RvclByb3ZpZGVyVHlwZS5BdXRoZW50aWNhdG9yLFxuICAgICAgICBuYW1lOiBudWxsIGFzIHN0cmluZyxcbiAgICAgICAgZGVzY3JpcHRpb246IG51bGwgYXMgc3RyaW5nLFxuICAgICAgICBwcmlvcml0eTogMSxcbiAgICAgICAgc29ydDogMSxcbiAgICAgICAgcHJlbWl1bTogZmFsc2UsXG4gICAgfSxcbiAgICBbVHdvRmFjdG9yUHJvdmlkZXJUeXBlLll1YmlrZXldOiB7XG4gICAgICAgIHR5cGU6IFR3b0ZhY3RvclByb3ZpZGVyVHlwZS5ZdWJpa2V5LFxuICAgICAgICBuYW1lOiBudWxsIGFzIHN0cmluZyxcbiAgICAgICAgZGVzY3JpcHRpb246IG51bGwgYXMgc3RyaW5nLFxuICAgICAgICBwcmlvcml0eTogMyxcbiAgICAgICAgc29ydDogMixcbiAgICAgICAgcHJlbWl1bTogdHJ1ZSxcbiAgICB9LFxuICAgIFtUd29GYWN0b3JQcm92aWRlclR5cGUuRHVvXToge1xuICAgICAgICB0eXBlOiBUd29GYWN0b3JQcm92aWRlclR5cGUuRHVvLFxuICAgICAgICBuYW1lOiAnRHVvJyxcbiAgICAgICAgZGVzY3JpcHRpb246IG51bGwgYXMgc3RyaW5nLFxuICAgICAgICBwcmlvcml0eTogMixcbiAgICAgICAgc29ydDogMyxcbiAgICAgICAgcHJlbWl1bTogdHJ1ZSxcbiAgICB9LFxuICAgIFtUd29GYWN0b3JQcm92aWRlclR5cGUuT3JnYW5pemF0aW9uRHVvXToge1xuICAgICAgICB0eXBlOiBUd29GYWN0b3JQcm92aWRlclR5cGUuT3JnYW5pemF0aW9uRHVvLFxuICAgICAgICBuYW1lOiAnRHVvIChPcmdhbml6YXRpb24pJyxcbiAgICAgICAgZGVzY3JpcHRpb246IG51bGwgYXMgc3RyaW5nLFxuICAgICAgICBwcmlvcml0eTogMTAsXG4gICAgICAgIHNvcnQ6IDQsXG4gICAgICAgIHByZW1pdW06IGZhbHNlLFxuICAgIH0sXG4gICAgW1R3b0ZhY3RvclByb3ZpZGVyVHlwZS5VMmZdOiB7XG4gICAgICAgIHR5cGU6IFR3b0ZhY3RvclByb3ZpZGVyVHlwZS5VMmYsXG4gICAgICAgIG5hbWU6IG51bGwgYXMgc3RyaW5nLFxuICAgICAgICBkZXNjcmlwdGlvbjogbnVsbCBhcyBzdHJpbmcsXG4gICAgICAgIHByaW9yaXR5OiA0LFxuICAgICAgICBzb3J0OiA1LFxuICAgICAgICBwcmVtaXVtOiB0cnVlLFxuICAgIH0sXG4gICAgW1R3b0ZhY3RvclByb3ZpZGVyVHlwZS5FbWFpbF06IHtcbiAgICAgICAgdHlwZTogVHdvRmFjdG9yUHJvdmlkZXJUeXBlLkVtYWlsLFxuICAgICAgICBuYW1lOiBudWxsIGFzIHN0cmluZyxcbiAgICAgICAgZGVzY3JpcHRpb246IG51bGwgYXMgc3RyaW5nLFxuICAgICAgICBwcmlvcml0eTogMCxcbiAgICAgICAgc29ydDogNixcbiAgICAgICAgcHJlbWl1bTogZmFsc2UsXG4gICAgfSxcbn07XG5cbmV4cG9ydCBjbGFzcyBBdXRoU2VydmljZSBpbXBsZW1lbnRzIEF1dGhTZXJ2aWNlQWJzdHJhY3Rpb24ge1xuICAgIGVtYWlsOiBzdHJpbmc7XG4gICAgbWFzdGVyUGFzc3dvcmRIYXNoOiBzdHJpbmc7XG4gICAgY29kZTogc3RyaW5nO1xuICAgIGNvZGVWZXJpZmllcjogc3RyaW5nO1xuICAgIHNzb1JlZGlyZWN0VXJsOiBzdHJpbmc7XG4gICAgY2xpZW50SWQ6IHN0cmluZztcbiAgICBjbGllbnRTZWNyZXQ6IHN0cmluZztcbiAgICB0d29GYWN0b3JQcm92aWRlcnNEYXRhOiBNYXA8VHdvRmFjdG9yUHJvdmlkZXJUeXBlLCB7IFtrZXk6IHN0cmluZ106IHN0cmluZzsgfT47XG4gICAgc2VsZWN0ZWRUd29GYWN0b3JQcm92aWRlclR5cGU6IFR3b0ZhY3RvclByb3ZpZGVyVHlwZSA9IG51bGw7XG5cbiAgICBwcml2YXRlIGtleTogU3ltbWV0cmljQ3J5cHRvS2V5O1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBjcnlwdG9TZXJ2aWNlOiBDcnlwdG9TZXJ2aWNlLCBwcml2YXRlIGFwaVNlcnZpY2U6IEFwaVNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgdXNlclNlcnZpY2U6IFVzZXJTZXJ2aWNlLCBwcml2YXRlIHRva2VuU2VydmljZTogVG9rZW5TZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIGFwcElkU2VydmljZTogQXBwSWRTZXJ2aWNlLCBwcml2YXRlIGkxOG5TZXJ2aWNlOiBJMThuU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBwbGF0Zm9ybVV0aWxzU2VydmljZTogUGxhdGZvcm1VdGlsc1NlcnZpY2UsIHByaXZhdGUgbWVzc2FnaW5nU2VydmljZTogTWVzc2FnaW5nU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSB2YXVsdFRpbWVvdXRTZXJ2aWNlOiBWYXVsdFRpbWVvdXRTZXJ2aWNlLCBwcml2YXRlIHNldENyeXB0b0tleXMgPSB0cnVlKSB7IH1cblxuICAgIGluaXQoKSB7XG4gICAgICAgIFR3b0ZhY3RvclByb3ZpZGVyc1tUd29GYWN0b3JQcm92aWRlclR5cGUuRW1haWxdLm5hbWUgPSB0aGlzLmkxOG5TZXJ2aWNlLnQoJ2VtYWlsVGl0bGUnKTtcbiAgICAgICAgVHdvRmFjdG9yUHJvdmlkZXJzW1R3b0ZhY3RvclByb3ZpZGVyVHlwZS5FbWFpbF0uZGVzY3JpcHRpb24gPSB0aGlzLmkxOG5TZXJ2aWNlLnQoJ2VtYWlsRGVzYycpO1xuXG4gICAgICAgIFR3b0ZhY3RvclByb3ZpZGVyc1tUd29GYWN0b3JQcm92aWRlclR5cGUuQXV0aGVudGljYXRvcl0ubmFtZSA9IHRoaXMuaTE4blNlcnZpY2UudCgnYXV0aGVudGljYXRvckFwcFRpdGxlJyk7XG4gICAgICAgIFR3b0ZhY3RvclByb3ZpZGVyc1tUd29GYWN0b3JQcm92aWRlclR5cGUuQXV0aGVudGljYXRvcl0uZGVzY3JpcHRpb24gPVxuICAgICAgICAgICAgdGhpcy5pMThuU2VydmljZS50KCdhdXRoZW50aWNhdG9yQXBwRGVzYycpO1xuXG4gICAgICAgIFR3b0ZhY3RvclByb3ZpZGVyc1tUd29GYWN0b3JQcm92aWRlclR5cGUuRHVvXS5kZXNjcmlwdGlvbiA9IHRoaXMuaTE4blNlcnZpY2UudCgnZHVvRGVzYycpO1xuXG4gICAgICAgIFR3b0ZhY3RvclByb3ZpZGVyc1tUd29GYWN0b3JQcm92aWRlclR5cGUuT3JnYW5pemF0aW9uRHVvXS5uYW1lID1cbiAgICAgICAgICAgICdEdW8gKCcgKyB0aGlzLmkxOG5TZXJ2aWNlLnQoJ29yZ2FuaXphdGlvbicpICsgJyknO1xuICAgICAgICBUd29GYWN0b3JQcm92aWRlcnNbVHdvRmFjdG9yUHJvdmlkZXJUeXBlLk9yZ2FuaXphdGlvbkR1b10uZGVzY3JpcHRpb24gPVxuICAgICAgICAgICAgdGhpcy5pMThuU2VydmljZS50KCdkdW9Pcmdhbml6YXRpb25EZXNjJyk7XG5cbiAgICAgICAgVHdvRmFjdG9yUHJvdmlkZXJzW1R3b0ZhY3RvclByb3ZpZGVyVHlwZS5VMmZdLm5hbWUgPSB0aGlzLmkxOG5TZXJ2aWNlLnQoJ3UyZlRpdGxlJyk7XG4gICAgICAgIFR3b0ZhY3RvclByb3ZpZGVyc1tUd29GYWN0b3JQcm92aWRlclR5cGUuVTJmXS5kZXNjcmlwdGlvbiA9IHRoaXMuaTE4blNlcnZpY2UudCgndTJmRGVzYycpO1xuXG4gICAgICAgIFR3b0ZhY3RvclByb3ZpZGVyc1tUd29GYWN0b3JQcm92aWRlclR5cGUuWXViaWtleV0ubmFtZSA9IHRoaXMuaTE4blNlcnZpY2UudCgneXViaUtleVRpdGxlJyk7XG4gICAgICAgIFR3b0ZhY3RvclByb3ZpZGVyc1tUd29GYWN0b3JQcm92aWRlclR5cGUuWXViaWtleV0uZGVzY3JpcHRpb24gPSB0aGlzLmkxOG5TZXJ2aWNlLnQoJ3l1YmlLZXlEZXNjJyk7XG4gICAgfVxuXG4gICAgYXN5bmMgbG9nSW4oZW1haWw6IHN0cmluZywgbWFzdGVyUGFzc3dvcmQ6IHN0cmluZyk6IFByb21pc2U8QXV0aFJlc3VsdD4ge1xuICAgICAgICB0aGlzLnNlbGVjdGVkVHdvRmFjdG9yUHJvdmlkZXJUeXBlID0gbnVsbDtcbiAgICAgICAgY29uc3Qga2V5ID0gYXdhaXQgdGhpcy5tYWtlUHJlbG9naW5LZXkobWFzdGVyUGFzc3dvcmQsIGVtYWlsKTtcbiAgICAgICAgY29uc3QgaGFzaGVkUGFzc3dvcmQgPSBhd2FpdCB0aGlzLmNyeXB0b1NlcnZpY2UuaGFzaFBhc3N3b3JkKG1hc3RlclBhc3N3b3JkLCBrZXkpO1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5sb2dJbkhlbHBlcihlbWFpbCwgaGFzaGVkUGFzc3dvcmQsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsXG4gICAgICAgICAgICBrZXksIG51bGwsIG51bGwsIG51bGwpO1xuICAgIH1cblxuICAgIGFzeW5jIGxvZ0luU3NvKGNvZGU6IHN0cmluZywgY29kZVZlcmlmaWVyOiBzdHJpbmcsIHJlZGlyZWN0VXJsOiBzdHJpbmcpOiBQcm9taXNlPEF1dGhSZXN1bHQ+IHtcbiAgICAgICAgdGhpcy5zZWxlY3RlZFR3b0ZhY3RvclByb3ZpZGVyVHlwZSA9IG51bGw7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmxvZ0luSGVscGVyKG51bGwsIG51bGwsIGNvZGUsIGNvZGVWZXJpZmllciwgcmVkaXJlY3RVcmwsIG51bGwsIG51bGwsXG4gICAgICAgICAgICBudWxsLCBudWxsLCBudWxsLCBudWxsKTtcbiAgICB9XG5cbiAgICBhc3luYyBsb2dJbkFwaUtleShjbGllbnRJZDogc3RyaW5nLCBjbGllbnRTZWNyZXQ6IHN0cmluZyk6IFByb21pc2U8QXV0aFJlc3VsdD4ge1xuICAgICAgICB0aGlzLnNlbGVjdGVkVHdvRmFjdG9yUHJvdmlkZXJUeXBlID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMubG9nSW5IZWxwZXIobnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgY2xpZW50SWQsIGNsaWVudFNlY3JldCxcbiAgICAgICAgICAgIG51bGwsIG51bGwsIG51bGwsIG51bGwpO1xuICAgIH1cblxuICAgIGFzeW5jIGxvZ0luVHdvRmFjdG9yKHR3b0ZhY3RvclByb3ZpZGVyOiBUd29GYWN0b3JQcm92aWRlclR5cGUsIHR3b0ZhY3RvclRva2VuOiBzdHJpbmcsXG4gICAgICAgIHJlbWVtYmVyPzogYm9vbGVhbik6IFByb21pc2U8QXV0aFJlc3VsdD4ge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5sb2dJbkhlbHBlcih0aGlzLmVtYWlsLCB0aGlzLm1hc3RlclBhc3N3b3JkSGFzaCwgdGhpcy5jb2RlLCB0aGlzLmNvZGVWZXJpZmllcixcbiAgICAgICAgICAgIHRoaXMuc3NvUmVkaXJlY3RVcmwsIHRoaXMuY2xpZW50SWQsIHRoaXMuY2xpZW50U2VjcmV0LCB0aGlzLmtleSwgdHdvRmFjdG9yUHJvdmlkZXIsXG4gICAgICAgICAgICB0d29GYWN0b3JUb2tlbiwgcmVtZW1iZXIpO1xuICAgIH1cblxuICAgIGFzeW5jIGxvZ0luQ29tcGxldGUoZW1haWw6IHN0cmluZywgbWFzdGVyUGFzc3dvcmQ6IHN0cmluZywgdHdvRmFjdG9yUHJvdmlkZXI6IFR3b0ZhY3RvclByb3ZpZGVyVHlwZSxcbiAgICAgICAgdHdvRmFjdG9yVG9rZW46IHN0cmluZywgcmVtZW1iZXI/OiBib29sZWFuKTogUHJvbWlzZTxBdXRoUmVzdWx0PiB7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRUd29GYWN0b3JQcm92aWRlclR5cGUgPSBudWxsO1xuICAgICAgICBjb25zdCBrZXkgPSBhd2FpdCB0aGlzLm1ha2VQcmVsb2dpbktleShtYXN0ZXJQYXNzd29yZCwgZW1haWwpO1xuICAgICAgICBjb25zdCBoYXNoZWRQYXNzd29yZCA9IGF3YWl0IHRoaXMuY3J5cHRvU2VydmljZS5oYXNoUGFzc3dvcmQobWFzdGVyUGFzc3dvcmQsIGtleSk7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmxvZ0luSGVscGVyKGVtYWlsLCBoYXNoZWRQYXNzd29yZCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwga2V5LFxuICAgICAgICAgICAgdHdvRmFjdG9yUHJvdmlkZXIsIHR3b0ZhY3RvclRva2VuLCByZW1lbWJlcik7XG4gICAgfVxuXG4gICAgYXN5bmMgbG9nSW5Tc29Db21wbGV0ZShjb2RlOiBzdHJpbmcsIGNvZGVWZXJpZmllcjogc3RyaW5nLCByZWRpcmVjdFVybDogc3RyaW5nLFxuICAgICAgICB0d29GYWN0b3JQcm92aWRlcjogVHdvRmFjdG9yUHJvdmlkZXJUeXBlLCB0d29GYWN0b3JUb2tlbjogc3RyaW5nLCByZW1lbWJlcj86IGJvb2xlYW4pOiBQcm9taXNlPEF1dGhSZXN1bHQ+IHtcbiAgICAgICAgdGhpcy5zZWxlY3RlZFR3b0ZhY3RvclByb3ZpZGVyVHlwZSA9IG51bGw7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmxvZ0luSGVscGVyKG51bGwsIG51bGwsIGNvZGUsIGNvZGVWZXJpZmllciwgcmVkaXJlY3RVcmwsIG51bGwsXG4gICAgICAgICAgICBudWxsLCBudWxsLCB0d29GYWN0b3JQcm92aWRlciwgdHdvRmFjdG9yVG9rZW4sIHJlbWVtYmVyKTtcbiAgICB9XG5cbiAgICBhc3luYyBsb2dJbkFwaUtleUNvbXBsZXRlKGNsaWVudElkOiBzdHJpbmcsIGNsaWVudFNlY3JldDogc3RyaW5nLCB0d29GYWN0b3JQcm92aWRlcjogVHdvRmFjdG9yUHJvdmlkZXJUeXBlLFxuICAgICAgICB0d29GYWN0b3JUb2tlbjogc3RyaW5nLCByZW1lbWJlcj86IGJvb2xlYW4pOiBQcm9taXNlPEF1dGhSZXN1bHQ+IHtcbiAgICAgICAgdGhpcy5zZWxlY3RlZFR3b0ZhY3RvclByb3ZpZGVyVHlwZSA9IG51bGw7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmxvZ0luSGVscGVyKG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIGNsaWVudElkLCBjbGllbnRTZWNyZXQsIG51bGwsXG4gICAgICAgICAgICB0d29GYWN0b3JQcm92aWRlciwgdHdvRmFjdG9yVG9rZW4sIHJlbWVtYmVyKTtcbiAgICB9XG5cbiAgICBsb2dPdXQoY2FsbGJhY2s6IEZ1bmN0aW9uKSB7XG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgIHRoaXMubWVzc2FnaW5nU2VydmljZS5zZW5kKCdsb2dnZWRPdXQnKTtcbiAgICB9XG5cbiAgICBnZXRTdXBwb3J0ZWRUd29GYWN0b3JQcm92aWRlcnMod2luOiBXaW5kb3cpOiBhbnlbXSB7XG4gICAgICAgIGNvbnN0IHByb3ZpZGVyczogYW55W10gPSBbXTtcbiAgICAgICAgaWYgKHRoaXMudHdvRmFjdG9yUHJvdmlkZXJzRGF0YSA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gcHJvdmlkZXJzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMudHdvRmFjdG9yUHJvdmlkZXJzRGF0YS5oYXMoVHdvRmFjdG9yUHJvdmlkZXJUeXBlLk9yZ2FuaXphdGlvbkR1bykgJiZcbiAgICAgICAgICAgIHRoaXMucGxhdGZvcm1VdGlsc1NlcnZpY2Uuc3VwcG9ydHNEdW8oKSkge1xuICAgICAgICAgICAgcHJvdmlkZXJzLnB1c2goVHdvRmFjdG9yUHJvdmlkZXJzW1R3b0ZhY3RvclByb3ZpZGVyVHlwZS5Pcmdhbml6YXRpb25EdW9dKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnR3b0ZhY3RvclByb3ZpZGVyc0RhdGEuaGFzKFR3b0ZhY3RvclByb3ZpZGVyVHlwZS5BdXRoZW50aWNhdG9yKSkge1xuICAgICAgICAgICAgcHJvdmlkZXJzLnB1c2goVHdvRmFjdG9yUHJvdmlkZXJzW1R3b0ZhY3RvclByb3ZpZGVyVHlwZS5BdXRoZW50aWNhdG9yXSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy50d29GYWN0b3JQcm92aWRlcnNEYXRhLmhhcyhUd29GYWN0b3JQcm92aWRlclR5cGUuWXViaWtleSkpIHtcbiAgICAgICAgICAgIHByb3ZpZGVycy5wdXNoKFR3b0ZhY3RvclByb3ZpZGVyc1tUd29GYWN0b3JQcm92aWRlclR5cGUuWXViaWtleV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMudHdvRmFjdG9yUHJvdmlkZXJzRGF0YS5oYXMoVHdvRmFjdG9yUHJvdmlkZXJUeXBlLkR1bykgJiYgdGhpcy5wbGF0Zm9ybVV0aWxzU2VydmljZS5zdXBwb3J0c0R1bygpKSB7XG4gICAgICAgICAgICBwcm92aWRlcnMucHVzaChUd29GYWN0b3JQcm92aWRlcnNbVHdvRmFjdG9yUHJvdmlkZXJUeXBlLkR1b10pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMudHdvRmFjdG9yUHJvdmlkZXJzRGF0YS5oYXMoVHdvRmFjdG9yUHJvdmlkZXJUeXBlLlUyZikgJiYgdGhpcy5wbGF0Zm9ybVV0aWxzU2VydmljZS5zdXBwb3J0c1UyZih3aW4pKSB7XG4gICAgICAgICAgICBwcm92aWRlcnMucHVzaChUd29GYWN0b3JQcm92aWRlcnNbVHdvRmFjdG9yUHJvdmlkZXJUeXBlLlUyZl0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMudHdvRmFjdG9yUHJvdmlkZXJzRGF0YS5oYXMoVHdvRmFjdG9yUHJvdmlkZXJUeXBlLkVtYWlsKSkge1xuICAgICAgICAgICAgcHJvdmlkZXJzLnB1c2goVHdvRmFjdG9yUHJvdmlkZXJzW1R3b0ZhY3RvclByb3ZpZGVyVHlwZS5FbWFpbF0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHByb3ZpZGVycztcbiAgICB9XG5cbiAgICBnZXREZWZhdWx0VHdvRmFjdG9yUHJvdmlkZXIodTJmU3VwcG9ydGVkOiBib29sZWFuKTogVHdvRmFjdG9yUHJvdmlkZXJUeXBlIHtcbiAgICAgICAgaWYgKHRoaXMudHdvRmFjdG9yUHJvdmlkZXJzRGF0YSA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnNlbGVjdGVkVHdvRmFjdG9yUHJvdmlkZXJUeXBlICE9IG51bGwgJiZcbiAgICAgICAgICAgIHRoaXMudHdvRmFjdG9yUHJvdmlkZXJzRGF0YS5oYXModGhpcy5zZWxlY3RlZFR3b0ZhY3RvclByb3ZpZGVyVHlwZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNlbGVjdGVkVHdvRmFjdG9yUHJvdmlkZXJUeXBlO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHByb3ZpZGVyVHlwZTogVHdvRmFjdG9yUHJvdmlkZXJUeXBlID0gbnVsbDtcbiAgICAgICAgbGV0IHByb3ZpZGVyUHJpb3JpdHkgPSAtMTtcbiAgICAgICAgdGhpcy50d29GYWN0b3JQcm92aWRlcnNEYXRhLmZvckVhY2goKHZhbHVlLCB0eXBlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBwcm92aWRlciA9IChUd29GYWN0b3JQcm92aWRlcnMgYXMgYW55KVt0eXBlXTtcbiAgICAgICAgICAgIGlmIChwcm92aWRlciAhPSBudWxsICYmIHByb3ZpZGVyLnByaW9yaXR5ID4gcHJvdmlkZXJQcmlvcml0eSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSBUd29GYWN0b3JQcm92aWRlclR5cGUuVTJmICYmICF1MmZTdXBwb3J0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHByb3ZpZGVyVHlwZSA9IHR5cGU7XG4gICAgICAgICAgICAgICAgcHJvdmlkZXJQcmlvcml0eSA9IHByb3ZpZGVyLnByaW9yaXR5O1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gcHJvdmlkZXJUeXBlO1xuICAgIH1cblxuICAgIGFzeW5jIG1ha2VQcmVsb2dpbktleShtYXN0ZXJQYXNzd29yZDogc3RyaW5nLCBlbWFpbDogc3RyaW5nKTogUHJvbWlzZTxTeW1tZXRyaWNDcnlwdG9LZXk+IHtcbiAgICAgICAgZW1haWwgPSBlbWFpbC50cmltKCkudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgbGV0IGtkZjogS2RmVHlwZSA9IG51bGw7XG4gICAgICAgIGxldCBrZGZJdGVyYXRpb25zOiBudW1iZXIgPSBudWxsO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcHJlbG9naW5SZXNwb25zZSA9IGF3YWl0IHRoaXMuYXBpU2VydmljZS5wb3N0UHJlbG9naW4obmV3IFByZWxvZ2luUmVxdWVzdChlbWFpbCkpO1xuICAgICAgICAgICAgaWYgKHByZWxvZ2luUmVzcG9uc2UgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGtkZiA9IHByZWxvZ2luUmVzcG9uc2Uua2RmO1xuICAgICAgICAgICAgICAgIGtkZkl0ZXJhdGlvbnMgPSBwcmVsb2dpblJlc3BvbnNlLmtkZkl0ZXJhdGlvbnM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGlmIChlID09IG51bGwgfHwgZS5zdGF0dXNDb2RlICE9PSA0MDQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmNyeXB0b1NlcnZpY2UubWFrZUtleShtYXN0ZXJQYXNzd29yZCwgZW1haWwsIGtkZiwga2RmSXRlcmF0aW9ucyk7XG4gICAgfVxuXG4gICAgYXV0aGluZ1dpdGhBcGlLZXkoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNsaWVudElkICE9IG51bGwgJiYgdGhpcy5jbGllbnRTZWNyZXQgIT0gbnVsbDtcbiAgICB9XG5cbiAgICBhdXRoaW5nV2l0aFNzbygpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29kZSAhPSBudWxsICYmIHRoaXMuY29kZVZlcmlmaWVyICE9IG51bGwgJiYgdGhpcy5zc29SZWRpcmVjdFVybCAhPSBudWxsO1xuICAgIH1cblxuICAgIGF1dGhpbmdXaXRoUGFzc3dvcmQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmVtYWlsICE9IG51bGwgJiYgdGhpcy5tYXN0ZXJQYXNzd29yZEhhc2ggIT0gbnVsbDtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIGxvZ0luSGVscGVyKGVtYWlsOiBzdHJpbmcsIGhhc2hlZFBhc3N3b3JkOiBzdHJpbmcsIGNvZGU6IHN0cmluZywgY29kZVZlcmlmaWVyOiBzdHJpbmcsXG4gICAgICAgIHJlZGlyZWN0VXJsOiBzdHJpbmcsIGNsaWVudElkOiBzdHJpbmcsIGNsaWVudFNlY3JldDogc3RyaW5nLCBrZXk6IFN5bW1ldHJpY0NyeXB0b0tleSxcbiAgICAgICAgdHdvRmFjdG9yUHJvdmlkZXI/OiBUd29GYWN0b3JQcm92aWRlclR5cGUsIHR3b0ZhY3RvclRva2VuPzogc3RyaW5nLCByZW1lbWJlcj86IGJvb2xlYW4pOiBQcm9taXNlPEF1dGhSZXN1bHQ+IHtcbiAgICAgICAgY29uc3Qgc3RvcmVkVHdvRmFjdG9yVG9rZW4gPSBhd2FpdCB0aGlzLnRva2VuU2VydmljZS5nZXRUd29GYWN0b3JUb2tlbihlbWFpbCk7XG4gICAgICAgIGNvbnN0IGFwcElkID0gYXdhaXQgdGhpcy5hcHBJZFNlcnZpY2UuZ2V0QXBwSWQoKTtcbiAgICAgICAgY29uc3QgZGV2aWNlUmVxdWVzdCA9IG5ldyBEZXZpY2VSZXF1ZXN0KGFwcElkLCB0aGlzLnBsYXRmb3JtVXRpbHNTZXJ2aWNlKTtcblxuICAgICAgICBsZXQgZW1haWxQYXNzd29yZDogc3RyaW5nW10gPSBbXTtcbiAgICAgICAgbGV0IGNvZGVDb2RlVmVyaWZpZXI6IHN0cmluZ1tdID0gW107XG4gICAgICAgIGxldCBjbGllbnRJZENsaWVudFNlY3JldDogc3RyaW5nW10gPSBbXTtcblxuICAgICAgICBpZiAoZW1haWwgIT0gbnVsbCAmJiBoYXNoZWRQYXNzd29yZCAhPSBudWxsKSB7XG4gICAgICAgICAgICBlbWFpbFBhc3N3b3JkID0gW2VtYWlsLCBoYXNoZWRQYXNzd29yZF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlbWFpbFBhc3N3b3JkID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29kZSAhPSBudWxsICYmIGNvZGVWZXJpZmllciAhPSBudWxsICYmIHJlZGlyZWN0VXJsICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNvZGVDb2RlVmVyaWZpZXIgPSBbY29kZSwgY29kZVZlcmlmaWVyLCByZWRpcmVjdFVybF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb2RlQ29kZVZlcmlmaWVyID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2xpZW50SWQgIT0gbnVsbCAmJiBjbGllbnRTZWNyZXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgY2xpZW50SWRDbGllbnRTZWNyZXQgPSBbY2xpZW50SWQsIGNsaWVudFNlY3JldF1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNsaWVudElkQ2xpZW50U2VjcmV0ID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCByZXF1ZXN0OiBUb2tlblJlcXVlc3Q7XG4gICAgICAgIGlmICh0d29GYWN0b3JUb2tlbiAhPSBudWxsICYmIHR3b0ZhY3RvclByb3ZpZGVyICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJlcXVlc3QgPSBuZXcgVG9rZW5SZXF1ZXN0KGVtYWlsUGFzc3dvcmQsIGNvZGVDb2RlVmVyaWZpZXIsIGNsaWVudElkQ2xpZW50U2VjcmV0LCB0d29GYWN0b3JQcm92aWRlcixcbiAgICAgICAgICAgICAgICB0d29GYWN0b3JUb2tlbiwgcmVtZW1iZXIsIGRldmljZVJlcXVlc3QpO1xuICAgICAgICB9IGVsc2UgaWYgKHN0b3JlZFR3b0ZhY3RvclRva2VuICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJlcXVlc3QgPSBuZXcgVG9rZW5SZXF1ZXN0KGVtYWlsUGFzc3dvcmQsIGNvZGVDb2RlVmVyaWZpZXIsIGNsaWVudElkQ2xpZW50U2VjcmV0LCBUd29GYWN0b3JQcm92aWRlclR5cGUuUmVtZW1iZXIsXG4gICAgICAgICAgICAgICAgc3RvcmVkVHdvRmFjdG9yVG9rZW4sIGZhbHNlLCBkZXZpY2VSZXF1ZXN0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlcXVlc3QgPSBuZXcgVG9rZW5SZXF1ZXN0KGVtYWlsUGFzc3dvcmQsIGNvZGVDb2RlVmVyaWZpZXIsIGNsaWVudElkQ2xpZW50U2VjcmV0LCBudWxsLFxuICAgICAgICAgICAgICAgIG51bGwsIGZhbHNlLCBkZXZpY2VSZXF1ZXN0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5hcGlTZXJ2aWNlLnBvc3RJZGVudGl0eVRva2VuKHJlcXVlc3QpO1xuXG4gICAgICAgIHRoaXMuY2xlYXJTdGF0ZSgpO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgQXV0aFJlc3VsdCgpO1xuICAgICAgICByZXN1bHQudHdvRmFjdG9yID0gIShyZXNwb25zZSBhcyBhbnkpLmFjY2Vzc1Rva2VuO1xuXG4gICAgICAgIGlmIChyZXN1bHQudHdvRmFjdG9yKSB7XG4gICAgICAgICAgICAvLyB0d28gZmFjdG9yIHJlcXVpcmVkXG4gICAgICAgICAgICBjb25zdCB0d29GYWN0b3JSZXNwb25zZSA9IHJlc3BvbnNlIGFzIElkZW50aXR5VHdvRmFjdG9yUmVzcG9uc2U7XG4gICAgICAgICAgICB0aGlzLmVtYWlsID0gZW1haWw7XG4gICAgICAgICAgICB0aGlzLm1hc3RlclBhc3N3b3JkSGFzaCA9IGhhc2hlZFBhc3N3b3JkO1xuICAgICAgICAgICAgdGhpcy5jb2RlID0gY29kZTtcbiAgICAgICAgICAgIHRoaXMuY29kZVZlcmlmaWVyID0gY29kZVZlcmlmaWVyO1xuICAgICAgICAgICAgdGhpcy5zc29SZWRpcmVjdFVybCA9IHJlZGlyZWN0VXJsO1xuICAgICAgICAgICAgdGhpcy5jbGllbnRJZCA9IGNsaWVudElkO1xuICAgICAgICAgICAgdGhpcy5jbGllbnRTZWNyZXQgPSBjbGllbnRTZWNyZXQ7XG4gICAgICAgICAgICB0aGlzLmtleSA9IHRoaXMuc2V0Q3J5cHRvS2V5cyA/IGtleSA6IG51bGw7XG4gICAgICAgICAgICB0aGlzLnR3b0ZhY3RvclByb3ZpZGVyc0RhdGEgPSB0d29GYWN0b3JSZXNwb25zZS50d29GYWN0b3JQcm92aWRlcnMyO1xuICAgICAgICAgICAgcmVzdWx0LnR3b0ZhY3RvclByb3ZpZGVycyA9IHR3b0ZhY3RvclJlc3BvbnNlLnR3b0ZhY3RvclByb3ZpZGVyczI7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdG9rZW5SZXNwb25zZSA9IHJlc3BvbnNlIGFzIElkZW50aXR5VG9rZW5SZXNwb25zZTtcbiAgICAgICAgcmVzdWx0LnJlc2V0TWFzdGVyUGFzc3dvcmQgPSB0b2tlblJlc3BvbnNlLnJlc2V0TWFzdGVyUGFzc3dvcmQ7XG4gICAgICAgIGlmICh0b2tlblJlc3BvbnNlLnR3b0ZhY3RvclRva2VuICE9IG51bGwpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMudG9rZW5TZXJ2aWNlLnNldFR3b0ZhY3RvclRva2VuKHRva2VuUmVzcG9uc2UudHdvRmFjdG9yVG9rZW4sIGVtYWlsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGF3YWl0IHRoaXMudG9rZW5TZXJ2aWNlLnNldFRva2Vucyh0b2tlblJlc3BvbnNlLmFjY2Vzc1Rva2VuLCB0b2tlblJlc3BvbnNlLnJlZnJlc2hUb2tlbik7XG4gICAgICAgIGF3YWl0IHRoaXMudXNlclNlcnZpY2Uuc2V0SW5mb3JtYXRpb24odGhpcy50b2tlblNlcnZpY2UuZ2V0VXNlcklkKCksIHRoaXMudG9rZW5TZXJ2aWNlLmdldEVtYWlsKCksXG4gICAgICAgICAgICB0b2tlblJlc3BvbnNlLmtkZiwgdG9rZW5SZXNwb25zZS5rZGZJdGVyYXRpb25zKTtcbiAgICAgICAgaWYgKHRoaXMuc2V0Q3J5cHRvS2V5cykge1xuICAgICAgICAgICAgaWYgKGtleSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5jcnlwdG9TZXJ2aWNlLnNldEtleShrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGhhc2hlZFBhc3N3b3JkICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmNyeXB0b1NlcnZpY2Uuc2V0S2V5SGFzaChoYXNoZWRQYXNzd29yZCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFNraXAgdGhpcyBzdGVwIGR1cmluZyBTU08gbmV3IHVzZXIgZmxvdy4gTm8ga2V5IGlzIHJldHVybmVkIGZyb20gc2VydmVyLlxuICAgICAgICAgICAgaWYgKGNvZGUgPT0gbnVsbCB8fCB0b2tlblJlc3BvbnNlLmtleSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5jcnlwdG9TZXJ2aWNlLnNldEVuY0tleSh0b2tlblJlc3BvbnNlLmtleSk7XG5cbiAgICAgICAgICAgICAgICAvLyBVc2VyIGRvZXNuJ3QgaGF2ZSBhIGtleSBwYWlyIHlldCAob2xkIGFjY291bnQpLCBsZXQncyBnZW5lcmF0ZSBvbmUgZm9yIHRoZW1cbiAgICAgICAgICAgICAgICBpZiAodG9rZW5SZXNwb25zZS5wcml2YXRlS2V5ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGtleVBhaXIgPSBhd2FpdCB0aGlzLmNyeXB0b1NlcnZpY2UubWFrZUtleVBhaXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuYXBpU2VydmljZS5wb3N0QWNjb3VudEtleXMobmV3IEtleXNSZXF1ZXN0KGtleVBhaXJbMF0sIGtleVBhaXJbMV0uZW5jcnlwdGVkU3RyaW5nKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b2tlblJlc3BvbnNlLnByaXZhdGVLZXkgPSBrZXlQYWlyWzFdLmVuY3J5cHRlZFN0cmluZztcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5jcnlwdG9TZXJ2aWNlLnNldEVuY1ByaXZhdGVLZXkodG9rZW5SZXNwb25zZS5wcml2YXRlS2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnZhdWx0VGltZW91dFNlcnZpY2UgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy52YXVsdFRpbWVvdXRTZXJ2aWNlLmJpb21ldHJpY0xvY2tlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubWVzc2FnaW5nU2VydmljZS5zZW5kKCdsb2dnZWRJbicpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHByaXZhdGUgY2xlYXJTdGF0ZSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5rZXkgPSBudWxsO1xuICAgICAgICB0aGlzLmVtYWlsID0gbnVsbDtcbiAgICAgICAgdGhpcy5tYXN0ZXJQYXNzd29yZEhhc2ggPSBudWxsO1xuICAgICAgICB0aGlzLmNvZGUgPSBudWxsO1xuICAgICAgICB0aGlzLmNvZGVWZXJpZmllciA9IG51bGw7XG4gICAgICAgIHRoaXMuc3NvUmVkaXJlY3RVcmwgPSBudWxsO1xuICAgICAgICB0aGlzLmNsaWVudElkID0gbnVsbDtcbiAgICAgICAgdGhpcy5jbGllbnRTZWNyZXQgPSBudWxsO1xuICAgICAgICB0aGlzLnR3b0ZhY3RvclByb3ZpZGVyc0RhdGEgPSBudWxsO1xuICAgICAgICB0aGlzLnNlbGVjdGVkVHdvRmFjdG9yUHJvdmlkZXJUeXBlID0gbnVsbDtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBDaXBoZXJUeXBlIH0gZnJvbSAnLi4vLi4vZW51bXMvY2lwaGVyVHlwZSc7XG5cbmltcG9ydCB7IENpcGhlckRhdGEgfSBmcm9tICcuLi9kYXRhL2NpcGhlckRhdGEnO1xuXG5pbXBvcnQgeyBDaXBoZXJWaWV3IH0gZnJvbSAnLi4vdmlldy9jaXBoZXJWaWV3JztcblxuaW1wb3J0IHsgQXR0YWNobWVudCB9IGZyb20gJy4vYXR0YWNobWVudCc7XG5pbXBvcnQgeyBDYXJkIH0gZnJvbSAnLi9jYXJkJztcbmltcG9ydCB7IENpcGhlclN0cmluZyB9IGZyb20gJy4vY2lwaGVyU3RyaW5nJztcbmltcG9ydCBEb21haW4gZnJvbSAnLi9kb21haW5CYXNlJztcbmltcG9ydCB7IEZpZWxkIH0gZnJvbSAnLi9maWVsZCc7XG5pbXBvcnQgeyBJZGVudGl0eSB9IGZyb20gJy4vaWRlbnRpdHknO1xuaW1wb3J0IHsgTG9naW4gfSBmcm9tICcuL2xvZ2luJztcbmltcG9ydCB7IFBhc3N3b3JkIH0gZnJvbSAnLi9wYXNzd29yZCc7XG5pbXBvcnQgeyBTZWN1cmVOb3RlIH0gZnJvbSAnLi9zZWN1cmVOb3RlJztcblxuZXhwb3J0IGNsYXNzIENpcGhlciBleHRlbmRzIERvbWFpbiB7XG4gICAgaWQ6IHN0cmluZztcbiAgICBvcmdhbml6YXRpb25JZDogc3RyaW5nO1xuICAgIGZvbGRlcklkOiBzdHJpbmc7XG4gICAgbmFtZTogQ2lwaGVyU3RyaW5nO1xuICAgIG5vdGVzOiBDaXBoZXJTdHJpbmc7XG4gICAgdHlwZTogQ2lwaGVyVHlwZTtcbiAgICBmYXZvcml0ZTogYm9vbGVhbjtcbiAgICBvcmdhbml6YXRpb25Vc2VUb3RwOiBib29sZWFuO1xuICAgIGVkaXQ6IGJvb2xlYW47XG4gICAgdmlld1Bhc3N3b3JkOiBib29sZWFuO1xuICAgIHJldmlzaW9uRGF0ZTogRGF0ZTtcbiAgICBsb2NhbERhdGE6IGFueTtcbiAgICBsb2dpbjogTG9naW47XG4gICAgaWRlbnRpdHk6IElkZW50aXR5O1xuICAgIGNhcmQ6IENhcmQ7XG4gICAgc2VjdXJlTm90ZTogU2VjdXJlTm90ZTtcbiAgICBhdHRhY2htZW50czogQXR0YWNobWVudFtdO1xuICAgIGZpZWxkczogRmllbGRbXTtcbiAgICBwYXNzd29yZEhpc3Rvcnk6IFBhc3N3b3JkW107XG4gICAgY29sbGVjdGlvbklkczogc3RyaW5nW107XG4gICAgZGVsZXRlZERhdGU6IERhdGU7XG5cbiAgICBjb25zdHJ1Y3RvcihvYmo/OiBDaXBoZXJEYXRhLCBhbHJlYWR5RW5jcnlwdGVkOiBib29sZWFuID0gZmFsc2UsIGxvY2FsRGF0YTogYW55ID0gbnVsbCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBpZiAob2JqID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuYnVpbGREb21haW5Nb2RlbCh0aGlzLCBvYmosIHtcbiAgICAgICAgICAgIGlkOiBudWxsLFxuICAgICAgICAgICAgdXNlcklkOiBudWxsLFxuICAgICAgICAgICAgb3JnYW5pemF0aW9uSWQ6IG51bGwsXG4gICAgICAgICAgICBmb2xkZXJJZDogbnVsbCxcbiAgICAgICAgICAgIG5hbWU6IG51bGwsXG4gICAgICAgICAgICBub3RlczogbnVsbCxcbiAgICAgICAgfSwgYWxyZWFkeUVuY3J5cHRlZCwgWydpZCcsICd1c2VySWQnLCAnb3JnYW5pemF0aW9uSWQnLCAnZm9sZGVySWQnXSk7XG5cbiAgICAgICAgdGhpcy50eXBlID0gb2JqLnR5cGU7XG4gICAgICAgIHRoaXMuZmF2b3JpdGUgPSBvYmouZmF2b3JpdGU7XG4gICAgICAgIHRoaXMub3JnYW5pemF0aW9uVXNlVG90cCA9IG9iai5vcmdhbml6YXRpb25Vc2VUb3RwO1xuICAgICAgICB0aGlzLmVkaXQgPSBvYmouZWRpdDtcbiAgICAgICAgaWYgKG9iai52aWV3UGFzc3dvcmQgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy52aWV3UGFzc3dvcmQgPSBvYmoudmlld1Bhc3N3b3JkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy52aWV3UGFzc3dvcmQgPSB0cnVlOyAvLyBEZWZhdWx0IGZvciBhbHJlYWR5IHN5bmNlZCBDaXBoZXJzIHdpdGhvdXQgdmlld1Bhc3N3b3JkXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZXZpc2lvbkRhdGUgPSBvYmoucmV2aXNpb25EYXRlICE9IG51bGwgPyBuZXcgRGF0ZShvYmoucmV2aXNpb25EYXRlKSA6IG51bGw7XG4gICAgICAgIHRoaXMuY29sbGVjdGlvbklkcyA9IG9iai5jb2xsZWN0aW9uSWRzO1xuICAgICAgICB0aGlzLmxvY2FsRGF0YSA9IGxvY2FsRGF0YTtcbiAgICAgICAgdGhpcy5kZWxldGVkRGF0ZSA9IG9iai5kZWxldGVkRGF0ZSAhPSBudWxsID8gbmV3IERhdGUob2JqLmRlbGV0ZWREYXRlKSA6IG51bGw7XG5cbiAgICAgICAgc3dpdGNoICh0aGlzLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgQ2lwaGVyVHlwZS5Mb2dpbjpcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ2luID0gbmV3IExvZ2luKG9iai5sb2dpbiwgYWxyZWFkeUVuY3J5cHRlZCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIENpcGhlclR5cGUuU2VjdXJlTm90ZTpcbiAgICAgICAgICAgICAgICB0aGlzLnNlY3VyZU5vdGUgPSBuZXcgU2VjdXJlTm90ZShvYmouc2VjdXJlTm90ZSwgYWxyZWFkeUVuY3J5cHRlZCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIENpcGhlclR5cGUuQ2FyZDpcbiAgICAgICAgICAgICAgICB0aGlzLmNhcmQgPSBuZXcgQ2FyZChvYmouY2FyZCwgYWxyZWFkeUVuY3J5cHRlZCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIENpcGhlclR5cGUuSWRlbnRpdHk6XG4gICAgICAgICAgICAgICAgdGhpcy5pZGVudGl0eSA9IG5ldyBJZGVudGl0eShvYmouaWRlbnRpdHksIGFscmVhZHlFbmNyeXB0ZWQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvYmouYXR0YWNobWVudHMgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5hdHRhY2htZW50cyA9IG9iai5hdHRhY2htZW50cy5tYXAoKGEpID0+IG5ldyBBdHRhY2htZW50KGEsIGFscmVhZHlFbmNyeXB0ZWQpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYXR0YWNobWVudHMgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9iai5maWVsZHMgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5maWVsZHMgPSBvYmouZmllbGRzLm1hcCgoZikgPT4gbmV3IEZpZWxkKGYsIGFscmVhZHlFbmNyeXB0ZWQpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZmllbGRzID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvYmoucGFzc3dvcmRIaXN0b3J5ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMucGFzc3dvcmRIaXN0b3J5ID0gb2JqLnBhc3N3b3JkSGlzdG9yeS5tYXAoKHBoKSA9PiBuZXcgUGFzc3dvcmQocGgsIGFscmVhZHlFbmNyeXB0ZWQpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucGFzc3dvcmRIaXN0b3J5ID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIGRlY3J5cHQoKTogUHJvbWlzZTxDaXBoZXJWaWV3PiB7XG4gICAgICAgIGNvbnN0IG1vZGVsID0gbmV3IENpcGhlclZpZXcodGhpcyk7XG5cbiAgICAgICAgYXdhaXQgdGhpcy5kZWNyeXB0T2JqKG1vZGVsLCB7XG4gICAgICAgICAgICBuYW1lOiBudWxsLFxuICAgICAgICAgICAgbm90ZXM6IG51bGwsXG4gICAgICAgIH0sIHRoaXMub3JnYW5pemF0aW9uSWQpO1xuXG4gICAgICAgIHN3aXRjaCAodGhpcy50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIENpcGhlclR5cGUuTG9naW46XG4gICAgICAgICAgICAgICAgbW9kZWwubG9naW4gPSBhd2FpdCB0aGlzLmxvZ2luLmRlY3J5cHQodGhpcy5vcmdhbml6YXRpb25JZCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIENpcGhlclR5cGUuU2VjdXJlTm90ZTpcbiAgICAgICAgICAgICAgICBtb2RlbC5zZWN1cmVOb3RlID0gYXdhaXQgdGhpcy5zZWN1cmVOb3RlLmRlY3J5cHQodGhpcy5vcmdhbml6YXRpb25JZCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIENpcGhlclR5cGUuQ2FyZDpcbiAgICAgICAgICAgICAgICBtb2RlbC5jYXJkID0gYXdhaXQgdGhpcy5jYXJkLmRlY3J5cHQodGhpcy5vcmdhbml6YXRpb25JZCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIENpcGhlclR5cGUuSWRlbnRpdHk6XG4gICAgICAgICAgICAgICAgbW9kZWwuaWRlbnRpdHkgPSBhd2FpdCB0aGlzLmlkZW50aXR5LmRlY3J5cHQodGhpcy5vcmdhbml6YXRpb25JZCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgb3JnSWQgPSB0aGlzLm9yZ2FuaXphdGlvbklkO1xuXG4gICAgICAgIGlmICh0aGlzLmF0dGFjaG1lbnRzICE9IG51bGwgJiYgdGhpcy5hdHRhY2htZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBhdHRhY2htZW50czogYW55W10gPSBbXTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuYXR0YWNobWVudHMucmVkdWNlKChwcm9taXNlLCBhdHRhY2htZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb21pc2UudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhdHRhY2htZW50LmRlY3J5cHQob3JnSWQpO1xuICAgICAgICAgICAgICAgIH0pLnRoZW4oKGRlY0F0dGFjaG1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgYXR0YWNobWVudHMucHVzaChkZWNBdHRhY2htZW50KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sIFByb21pc2UucmVzb2x2ZSgpKTtcbiAgICAgICAgICAgIG1vZGVsLmF0dGFjaG1lbnRzID0gYXR0YWNobWVudHM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5maWVsZHMgIT0gbnVsbCAmJiB0aGlzLmZpZWxkcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBmaWVsZHM6IGFueVtdID0gW107XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmZpZWxkcy5yZWR1Y2UoKHByb21pc2UsIGZpZWxkKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb21pc2UudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmaWVsZC5kZWNyeXB0KG9yZ0lkKTtcbiAgICAgICAgICAgICAgICB9KS50aGVuKChkZWNGaWVsZCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBmaWVsZHMucHVzaChkZWNGaWVsZCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LCBQcm9taXNlLnJlc29sdmUoKSk7XG4gICAgICAgICAgICBtb2RlbC5maWVsZHMgPSBmaWVsZHM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5wYXNzd29yZEhpc3RvcnkgIT0gbnVsbCAmJiB0aGlzLnBhc3N3b3JkSGlzdG9yeS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBwYXNzd29yZEhpc3Rvcnk6IGFueVtdID0gW107XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBhc3N3b3JkSGlzdG9yeS5yZWR1Y2UoKHByb21pc2UsIHBoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb21pc2UudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwaC5kZWNyeXB0KG9yZ0lkKTtcbiAgICAgICAgICAgICAgICB9KS50aGVuKChkZWNQaCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBwYXNzd29yZEhpc3RvcnkucHVzaChkZWNQaCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LCBQcm9taXNlLnJlc29sdmUoKSk7XG4gICAgICAgICAgICBtb2RlbC5wYXNzd29yZEhpc3RvcnkgPSBwYXNzd29yZEhpc3Rvcnk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbW9kZWw7XG4gICAgfVxuXG4gICAgdG9DaXBoZXJEYXRhKHVzZXJJZDogc3RyaW5nKTogQ2lwaGVyRGF0YSB7XG4gICAgICAgIGNvbnN0IGMgPSBuZXcgQ2lwaGVyRGF0YSgpO1xuICAgICAgICBjLmlkID0gdGhpcy5pZDtcbiAgICAgICAgYy5vcmdhbml6YXRpb25JZCA9IHRoaXMub3JnYW5pemF0aW9uSWQ7XG4gICAgICAgIGMuZm9sZGVySWQgPSB0aGlzLmZvbGRlcklkO1xuICAgICAgICBjLnVzZXJJZCA9IHRoaXMub3JnYW5pemF0aW9uSWQgIT0gbnVsbCA/IHVzZXJJZCA6IG51bGw7XG4gICAgICAgIGMuZWRpdCA9IHRoaXMuZWRpdDtcbiAgICAgICAgYy52aWV3UGFzc3dvcmQgPSB0aGlzLnZpZXdQYXNzd29yZDtcbiAgICAgICAgYy5vcmdhbml6YXRpb25Vc2VUb3RwID0gdGhpcy5vcmdhbml6YXRpb25Vc2VUb3RwO1xuICAgICAgICBjLmZhdm9yaXRlID0gdGhpcy5mYXZvcml0ZTtcbiAgICAgICAgYy5yZXZpc2lvbkRhdGUgPSB0aGlzLnJldmlzaW9uRGF0ZSAhPSBudWxsID8gdGhpcy5yZXZpc2lvbkRhdGUudG9JU09TdHJpbmcoKSA6IG51bGw7XG4gICAgICAgIGMudHlwZSA9IHRoaXMudHlwZTtcbiAgICAgICAgYy5jb2xsZWN0aW9uSWRzID0gdGhpcy5jb2xsZWN0aW9uSWRzO1xuICAgICAgICBjLmRlbGV0ZWREYXRlID0gdGhpcy5kZWxldGVkRGF0ZSAhPSBudWxsID8gdGhpcy5kZWxldGVkRGF0ZS50b0lTT1N0cmluZygpIDogbnVsbDtcblxuICAgICAgICB0aGlzLmJ1aWxkRGF0YU1vZGVsKHRoaXMsIGMsIHtcbiAgICAgICAgICAgIG5hbWU6IG51bGwsXG4gICAgICAgICAgICBub3RlczogbnVsbCxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgc3dpdGNoIChjLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgQ2lwaGVyVHlwZS5Mb2dpbjpcbiAgICAgICAgICAgICAgICBjLmxvZ2luID0gdGhpcy5sb2dpbi50b0xvZ2luRGF0YSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBDaXBoZXJUeXBlLlNlY3VyZU5vdGU6XG4gICAgICAgICAgICAgICAgYy5zZWN1cmVOb3RlID0gdGhpcy5zZWN1cmVOb3RlLnRvU2VjdXJlTm90ZURhdGEoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgQ2lwaGVyVHlwZS5DYXJkOlxuICAgICAgICAgICAgICAgIGMuY2FyZCA9IHRoaXMuY2FyZC50b0NhcmREYXRhKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIENpcGhlclR5cGUuSWRlbnRpdHk6XG4gICAgICAgICAgICAgICAgYy5pZGVudGl0eSA9IHRoaXMuaWRlbnRpdHkudG9JZGVudGl0eURhdGEoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5maWVsZHMgIT0gbnVsbCkge1xuICAgICAgICAgICAgYy5maWVsZHMgPSB0aGlzLmZpZWxkcy5tYXAoKGYpID0+IGYudG9GaWVsZERhdGEoKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuYXR0YWNobWVudHMgIT0gbnVsbCkge1xuICAgICAgICAgICAgYy5hdHRhY2htZW50cyA9IHRoaXMuYXR0YWNobWVudHMubWFwKChhKSA9PiBhLnRvQXR0YWNobWVudERhdGEoKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMucGFzc3dvcmRIaXN0b3J5ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGMucGFzc3dvcmRIaXN0b3J5ID0gdGhpcy5wYXNzd29yZEhpc3RvcnkubWFwKChwaCkgPT4gcGgudG9QYXNzd29yZEhpc3RvcnlEYXRhKCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IFNhZmFyaUFwcCB9IGZyb20gJy4vc2FmYXJpQXBwJztcblxuaW1wb3J0IHsgVXRpbHMgfSBmcm9tICdqc2xpYi9taXNjL3V0aWxzJztcblxuZXhwb3J0IGNsYXNzIEJyb3dzZXJBcGkge1xuICAgIHN0YXRpYyBpc1dlYkV4dGVuc2lvbnNBcGk6IGJvb2xlYW4gPSAodHlwZW9mIGJyb3dzZXIgIT09ICd1bmRlZmluZWQnKTtcbiAgICBzdGF0aWMgaXNTYWZhcmlBcGk6IGJvb2xlYW4gPSAod2luZG93IGFzIGFueSkuc2FmYXJpQXBwRXh0ZW5zaW9uID09PSB0cnVlO1xuICAgIHN0YXRpYyBpc0Nocm9tZUFwaTogYm9vbGVhbiA9ICFCcm93c2VyQXBpLmlzU2FmYXJpQXBpICYmICh0eXBlb2YgY2hyb21lICE9PSAndW5kZWZpbmVkJyk7XG4gICAgc3RhdGljIGlzRmlyZWZveE9uQW5kcm9pZDogYm9vbGVhbiA9IG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignRmlyZWZveC8nKSAhPT0gLTEgJiZcbiAgICAgICAgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdBbmRyb2lkJykgIT09IC0xO1xuXG4gICAgc3RhdGljIGFzeW5jIGdldFRhYkZyb21DdXJyZW50V2luZG93SWQoKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgaWYgKEJyb3dzZXJBcGkuaXNDaHJvbWVBcGkpIHtcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBCcm93c2VyQXBpLnRhYnNRdWVyeUZpcnN0KHtcbiAgICAgICAgICAgICAgICBhY3RpdmU6IHRydWUsXG4gICAgICAgICAgICAgICAgd2luZG93SWQ6IGNocm9tZS53aW5kb3dzLldJTkRPV19JRF9DVVJSRU5ULFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAoQnJvd3NlckFwaS5pc1NhZmFyaUFwaSkge1xuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IEJyb3dzZXJBcGkuZ2V0VGFiRnJvbUN1cnJlbnRXaW5kb3coKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyBhc3luYyBnZXRUYWJGcm9tQ3VycmVudFdpbmRvdygpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICByZXR1cm4gYXdhaXQgQnJvd3NlckFwaS50YWJzUXVlcnlGaXJzdCh7XG4gICAgICAgICAgICBhY3RpdmU6IHRydWUsXG4gICAgICAgICAgICBjdXJyZW50V2luZG93OiB0cnVlLFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzdGF0aWMgYXN5bmMgZ2V0QWN0aXZlVGFicygpOiBQcm9taXNlPGFueVtdPiB7XG4gICAgICAgIHJldHVybiBhd2FpdCBCcm93c2VyQXBpLnRhYnNRdWVyeSh7XG4gICAgICAgICAgICBhY3RpdmU6IHRydWUsXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHN0YXRpYyBhc3luYyB0YWJzUXVlcnkob3B0aW9uczogYW55KTogUHJvbWlzZTxhbnlbXT4ge1xuICAgICAgICBpZiAoQnJvd3NlckFwaS5pc0Nocm9tZUFwaSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICAgICAgY2hyb21lLnRhYnMucXVlcnkob3B0aW9ucywgKHRhYnM6IGFueVtdKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUodGFicyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmIChCcm93c2VyQXBpLmlzU2FmYXJpQXBpKSB7XG4gICAgICAgICAgICBjb25zdCB0YWJzID0gYXdhaXQgU2FmYXJpQXBwLnNlbmRNZXNzYWdlVG9BcHAoJ3RhYnNfcXVlcnknLCBKU09OLnN0cmluZ2lmeShvcHRpb25zKSk7XG4gICAgICAgICAgICByZXR1cm4gdGFicyAhPSBudWxsID8gSlNPTi5wYXJzZSh0YWJzKSA6IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdGF0aWMgYXN5bmMgdGFic1F1ZXJ5Rmlyc3Qob3B0aW9uczogYW55KTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgY29uc3QgdGFicyA9IGF3YWl0IEJyb3dzZXJBcGkudGFic1F1ZXJ5KG9wdGlvbnMpO1xuICAgICAgICBpZiAodGFicy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdGFic1swXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHN0YXRpYyB0YWJTZW5kTWVzc2FnZURhdGEodGFiOiBhbnksIGNvbW1hbmQ6IHN0cmluZywgZGF0YTogYW55ID0gbnVsbCk6IFByb21pc2U8YW55W10+IHtcbiAgICAgICAgY29uc3Qgb2JqOiBhbnkgPSB7XG4gICAgICAgICAgICBjb21tYW5kOiBjb21tYW5kLFxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChkYXRhICE9IG51bGwpIHtcbiAgICAgICAgICAgIG9iai5kYXRhID0gZGF0YTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBCcm93c2VyQXBpLnRhYlNlbmRNZXNzYWdlKHRhYiwgb2JqKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgYXN5bmMgdGFiU2VuZE1lc3NhZ2UodGFiOiBhbnksIG9iajogYW55LCBvcHRpb25zOiBhbnkgPSBudWxsKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgaWYgKCF0YWIgfHwgIXRhYi5pZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKEJyb3dzZXJBcGkuaXNDaHJvbWVBcGkpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICAgICAgICAgIGNocm9tZS50YWJzLnNlbmRNZXNzYWdlKHRhYi5pZCwgb2JqLCBvcHRpb25zLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjaHJvbWUucnVudGltZS5sYXN0RXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNvbWUgZXJyb3IgaGFwcGVuZWRcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmIChCcm93c2VyQXBpLmlzU2FmYXJpQXBpKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucyAhPSBudWxsICYmIG9wdGlvbnMuZnJhbWVJZCAhPSBudWxsICYmIG9iai5iaXR3YXJkZW5GcmFtZUlkID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBvYmouYml0d2FyZGVuRnJhbWVJZCA9IG9wdGlvbnMuZnJhbWVJZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGF3YWl0IFNhZmFyaUFwcC5zZW5kTWVzc2FnZVRvQXBwKCd0YWJzX21lc3NhZ2UnLCBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgdGFiOiB0YWIsXG4gICAgICAgICAgICAgICAgb2JqOiBKU09OLnN0cmluZ2lmeShvYmopLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IG9wdGlvbnMsXG4gICAgICAgICAgICB9KSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0QmFja2dyb3VuZFBhZ2UoKTogYW55IHtcbiAgICAgICAgaWYgKEJyb3dzZXJBcGkuaXNDaHJvbWVBcGkpIHtcbiAgICAgICAgICAgIHJldHVybiBjaHJvbWUuZXh0ZW5zaW9uLmdldEJhY2tncm91bmRQYWdlKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoQnJvd3NlckFwaS5pc1NhZmFyaUFwaSkge1xuICAgICAgICAgICAgcmV0dXJuIHdpbmRvdztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGljIGdldEFwcGxpY2F0aW9uVmVyc2lvbigpOiBzdHJpbmcge1xuICAgICAgICBpZiAoQnJvd3NlckFwaS5pc0Nocm9tZUFwaSkge1xuICAgICAgICAgICAgcmV0dXJuIGNocm9tZS5ydW50aW1lLmdldE1hbmlmZXN0KCkudmVyc2lvbjtcbiAgICAgICAgfSBlbHNlIGlmIChCcm93c2VyQXBpLmlzU2FmYXJpQXBpKSB7XG4gICAgICAgICAgICByZXR1cm4gKHdpbmRvdyBhcyBhbnkpLmJpdHdhcmRlbkFwcGxpY2F0aW9uVmVyc2lvbjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGljIGFzeW5jIGlzUG9wdXBPcGVuKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgICAgICBpZiAoQnJvd3NlckFwaS5pc0Nocm9tZUFwaSkge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShjaHJvbWUuZXh0ZW5zaW9uLmdldFZpZXdzKHsgdHlwZTogJ3BvcHVwJyB9KS5sZW5ndGggPiAwKTtcbiAgICAgICAgfSBlbHNlIGlmIChCcm93c2VyQXBpLmlzU2FmYXJpQXBpKSB7XG4gICAgICAgICAgICBjb25zdCBvcGVuID0gYXdhaXQgU2FmYXJpQXBwLnNlbmRNZXNzYWdlVG9BcHAoJ2lzUG9wb3Zlck9wZW4nKTtcbiAgICAgICAgICAgIHJldHVybiBvcGVuID09PSAndHJ1ZSc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGZhbHNlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyBjcmVhdGVOZXdUYWIodXJsOiBzdHJpbmcsIGV4dGVuc2lvblBhZ2U6IGJvb2xlYW4gPSBmYWxzZSkge1xuICAgICAgICBpZiAoQnJvd3NlckFwaS5pc0Nocm9tZUFwaSkge1xuICAgICAgICAgICAgY2hyb21lLnRhYnMuY3JlYXRlKHsgdXJsOiB1cmwgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAoQnJvd3NlckFwaS5pc1NhZmFyaUFwaSkge1xuICAgICAgICAgICAgU2FmYXJpQXBwLnNlbmRNZXNzYWdlVG9BcHAoJ2NyZWF0ZU5ld1RhYicsIHVybCwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdGF0aWMgbWVzc2FnZUxpc3RlbmVyKG5hbWU6IHN0cmluZywgY2FsbGJhY2s6IChtZXNzYWdlOiBhbnksIHNlbmRlcjogYW55LCByZXNwb25zZTogYW55KSA9PiB2b2lkKSB7XG4gICAgICAgIGlmIChCcm93c2VyQXBpLmlzQ2hyb21lQXBpKSB7XG4gICAgICAgICAgICBjaHJvbWUucnVudGltZS5vbk1lc3NhZ2UuYWRkTGlzdGVuZXIoKG1zZzogYW55LCBzZW5kZXI6IGFueSwgcmVzcG9uc2U6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKG1zZywgc2VuZGVyLCByZXNwb25zZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmIChCcm93c2VyQXBpLmlzU2FmYXJpQXBpKSB7XG4gICAgICAgICAgICBTYWZhcmlBcHAuYWRkTWVzc2FnZUxpc3RlbmVyKG5hbWUsIChtZXNzYWdlOiBhbnksIHNlbmRlcjogYW55LCByZXNwb25zZTogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UuYml0d2FyZGVuRnJhbWVJZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZW5kZXIgIT0gbnVsbCAmJiB0eXBlb2YgKHNlbmRlcikgPT09ICdvYmplY3QnICYmIHNlbmRlci5mcmFtZUlkID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbmRlci5mcmFtZUlkID0gbWVzc2FnZS5iaXR3YXJkZW5GcmFtZUlkO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKG1lc3NhZ2UsIHNlbmRlciwgcmVzcG9uc2UpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdGF0aWMgY2xvc2VQb3B1cCh3aW46IFdpbmRvdykge1xuICAgICAgICBpZiAoQnJvd3NlckFwaS5pc1dlYkV4dGVuc2lvbnNBcGkgJiYgQnJvd3NlckFwaS5pc0ZpcmVmb3hPbkFuZHJvaWQpIHtcbiAgICAgICAgICAgIC8vIFJlYWN0aXZhdGluZyB0aGUgYWN0aXZlIHRhYiBkaXNtaXNzZXMgdGhlIHBvcHVwIHRhYi4gVGhlIHByb21pc2UgZmluYWxcbiAgICAgICAgICAgIC8vIGNvbmRpdGlvbiBpcyBvbmx5IGNhbGxlZCBpZiB0aGUgcG9wdXAgd2Fzbid0IGFscmVhZHkgZGlzbWlzc2VkIChmdXR1cmUgcHJvb2ZpbmcpLlxuICAgICAgICAgICAgLy8gcmVmOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0xNDMzNjA0XG4gICAgICAgICAgICBicm93c2VyLnRhYnMudXBkYXRlKHsgYWN0aXZlOiB0cnVlIH0pLmZpbmFsbHkod2luLmNsb3NlKTtcbiAgICAgICAgfSBlbHNlIGlmIChCcm93c2VyQXBpLmlzV2ViRXh0ZW5zaW9uc0FwaSB8fCBCcm93c2VyQXBpLmlzQ2hyb21lQXBpKSB7XG4gICAgICAgICAgICB3aW4uY2xvc2UoKTtcbiAgICAgICAgfSBlbHNlIGlmIChCcm93c2VyQXBpLmlzU2FmYXJpQXBpKSB7XG4gICAgICAgICAgICBTYWZhcmlBcHAuc2VuZE1lc3NhZ2VUb0FwcCgnaGlkZVBvcG92ZXInKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyBkb3dubG9hZEZpbGUod2luOiBXaW5kb3csIGJsb2JEYXRhOiBhbnksIGJsb2JPcHRpb25zOiBhbnksIGZpbGVOYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKEJyb3dzZXJBcGkuaXNTYWZhcmlBcGkpIHtcbiAgICAgICAgICAgIGNvbnN0IHR5cGUgPSBibG9iT3B0aW9ucyAhPSBudWxsID8gYmxvYk9wdGlvbnMudHlwZSA6IG51bGw7XG4gICAgICAgICAgICBsZXQgZGF0YTogc3RyaW5nID0gbnVsbDtcbiAgICAgICAgICAgIGlmICh0eXBlID09PSAndGV4dC9wbGFpbicgJiYgdHlwZW9mIChibG9iRGF0YSkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgZGF0YSA9IGJsb2JEYXRhO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkYXRhID0gVXRpbHMuZnJvbUJ1ZmZlclRvQjY0KGJsb2JEYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFNhZmFyaUFwcC5zZW5kTWVzc2FnZVRvQXBwKCdkb3dubG9hZEZpbGUnLCBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgYmxvYkRhdGE6IGRhdGEsXG4gICAgICAgICAgICAgICAgYmxvYk9wdGlvbnM6IGJsb2JPcHRpb25zLFxuICAgICAgICAgICAgICAgIGZpbGVOYW1lOiBmaWxlTmFtZSxcbiAgICAgICAgICAgIH0pLCB0cnVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGJsb2IgPSBuZXcgQmxvYihbYmxvYkRhdGFdLCBibG9iT3B0aW9ucyk7XG4gICAgICAgICAgICBpZiAobmF2aWdhdG9yLm1zU2F2ZU9yT3BlbkJsb2IpIHtcbiAgICAgICAgICAgICAgICBuYXZpZ2F0b3IubXNTYXZlQmxvYihibG9iLCBmaWxlTmFtZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IGEgPSB3aW4uZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgICAgICAgICAgIGEuaHJlZiA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG4gICAgICAgICAgICAgICAgYS5kb3dubG9hZCA9IGZpbGVOYW1lO1xuICAgICAgICAgICAgICAgIHdpbi5kb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGEpO1xuICAgICAgICAgICAgICAgIGEuY2xpY2soKTtcbiAgICAgICAgICAgICAgICB3aW4uZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyBnYUZpbHRlcigpIHtcbiAgICAgICAgcmV0dXJuIHByb2Nlc3MuZW52LkVOViAhPT0gJ3Byb2R1Y3Rpb24nO1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXRVSUxhbmd1YWdlKHdpbjogV2luZG93KSB7XG4gICAgICAgIGlmIChCcm93c2VyQXBpLmlzU2FmYXJpQXBpKSB7XG4gICAgICAgICAgICByZXR1cm4gd2luLm5hdmlnYXRvci5sYW5ndWFnZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBjaHJvbWUuaTE4bi5nZXRVSUxhbmd1YWdlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdGF0aWMgcmVsb2FkRXh0ZW5zaW9uKHdpbjogV2luZG93KSB7XG4gICAgICAgIGlmICh3aW4gIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHdpbi5sb2NhdGlvbi5yZWxvYWQodHJ1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoQnJvd3NlckFwaS5pc1NhZmFyaUFwaSkge1xuICAgICAgICAgICAgU2FmYXJpQXBwLnNlbmRNZXNzYWdlVG9BcHAoJ3JlbG9hZEV4dGVuc2lvbicpO1xuICAgICAgICB9IGVsc2UgaWYgKCFCcm93c2VyQXBpLmlzU2FmYXJpQXBpKSB7XG4gICAgICAgICAgICByZXR1cm4gY2hyb21lLnJ1bnRpbWUucmVsb2FkKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdGF0aWMgcmVsb2FkT3BlbldpbmRvd3MoKSB7XG4gICAgICAgIGlmICghQnJvd3NlckFwaS5pc1NhZmFyaUFwaSkge1xuICAgICAgICAgICAgY29uc3Qgdmlld3MgPSBjaHJvbWUuZXh0ZW5zaW9uLmdldFZpZXdzKCkgYXMgV2luZG93W107XG4gICAgICAgICAgICB2aWV3cy5maWx0ZXIoKHcpID0+IHcubG9jYXRpb24uaHJlZiAhPSBudWxsKS5mb3JFYWNoKCh3KSA9PiB7XG4gICAgICAgICAgICAgICAgdy5sb2NhdGlvbi5yZWxvYWQoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiZXhwb3J0IGVudW0gVHdvRmFjdG9yUHJvdmlkZXJUeXBlIHtcbiAgICBBdXRoZW50aWNhdG9yID0gMCxcbiAgICBFbWFpbCA9IDEsXG4gICAgRHVvID0gMixcbiAgICBZdWJpa2V5ID0gMyxcbiAgICBVMmYgPSA0LFxuICAgIFJlbWVtYmVyID0gNSxcbiAgICBPcmdhbml6YXRpb25EdW8gPSA2LFxufVxuIiwiZXhwb3J0IGVudW0gU2VjdXJlTm90ZVR5cGUge1xuICAgIEdlbmVyaWMgPSAwLFxufVxuIiwiaW1wb3J0IHsgQXBwSWRTZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL2FwcElkLnNlcnZpY2UnO1xuaW1wb3J0IHsgUGxhdGZvcm1VdGlsc1NlcnZpY2UgfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvcGxhdGZvcm1VdGlscy5zZXJ2aWNlJztcbmltcG9ydCB7IFN0b3JhZ2VTZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL3N0b3JhZ2Uuc2VydmljZSc7XG5cbmltcG9ydCB7IENvbnN0YW50c1NlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9jb25zdGFudHMuc2VydmljZSc7XG5cbmltcG9ydCB7IERldmljZVR5cGUgfSBmcm9tICcuLi9lbnVtcy9kZXZpY2VUeXBlJztcblxuY29uc3QgR2FPYmogPSAnZ2EnO1xuXG5leHBvcnQgY29uc3QgQW5hbHl0aWNzSWRzID0ge1xuICAgIFtEZXZpY2VUeXBlLkNocm9tZUV4dGVuc2lvbl06ICdVQS04MTkxNTYwNi02JyxcbiAgICBbRGV2aWNlVHlwZS5GaXJlZm94RXh0ZW5zaW9uXTogJ1VBLTgxOTE1NjA2LTcnLFxuICAgIFtEZXZpY2VUeXBlLk9wZXJhRXh0ZW5zaW9uXTogJ1VBLTgxOTE1NjA2LTgnLFxuICAgIFtEZXZpY2VUeXBlLkVkZ2VFeHRlbnNpb25dOiAnVUEtODE5MTU2MDYtOScsXG4gICAgW0RldmljZVR5cGUuVml2YWxkaUV4dGVuc2lvbl06ICdVQS04MTkxNTYwNi0xNScsXG4gICAgW0RldmljZVR5cGUuU2FmYXJpRXh0ZW5zaW9uXTogJ1VBLTgxOTE1NjA2LTE2JyxcbiAgICBbRGV2aWNlVHlwZS5XaW5kb3dzRGVza3RvcF06ICdVQS04MTkxNTYwNi0xNycsXG4gICAgW0RldmljZVR5cGUuTGludXhEZXNrdG9wXTogJ1VBLTgxOTE1NjA2LTE5JyxcbiAgICBbRGV2aWNlVHlwZS5NYWNPc0Rlc2t0b3BdOiAnVUEtODE5MTU2MDYtMTgnLFxufTtcblxuZXhwb3J0IGNsYXNzIEFuYWx5dGljcyB7XG4gICAgcHJpdmF0ZSBnYVRyYWNraW5nSWQ6IHN0cmluZyA9IG51bGw7XG4gICAgcHJpdmF0ZSBkZWZhdWx0RGlzYWJsZWQgPSBmYWxzZTtcbiAgICBwcml2YXRlIGFwcFZlcnNpb246IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKHdpbjogV2luZG93LCBwcml2YXRlIGdhRmlsdGVyPzogKCkgPT4gYm9vbGVhbixcbiAgICAgICAgcHJpdmF0ZSBwbGF0Zm9ybVV0aWxzU2VydmljZT86IFBsYXRmb3JtVXRpbHNTZXJ2aWNlLCBwcml2YXRlIHN0b3JhZ2VTZXJ2aWNlPzogU3RvcmFnZVNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgYXBwSWRTZXJ2aWNlPzogQXBwSWRTZXJ2aWNlLCBwcml2YXRlIGRlcGVuZGVuY3lSZXNvbHZlcj86ICgpID0+IGFueSkge1xuICAgICAgICBpZiAoZGVwZW5kZW5jeVJlc29sdmVyICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IGRlcHMgPSBkZXBlbmRlbmN5UmVzb2x2ZXIoKTtcbiAgICAgICAgICAgIGlmIChwbGF0Zm9ybVV0aWxzU2VydmljZSA9PSBudWxsICYmIGRlcHMucGxhdGZvcm1VdGlsc1NlcnZpY2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBsYXRmb3JtVXRpbHNTZXJ2aWNlID0gZGVwcy5wbGF0Zm9ybVV0aWxzU2VydmljZSBhcyBQbGF0Zm9ybVV0aWxzU2VydmljZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzdG9yYWdlU2VydmljZSA9PSBudWxsICYmIGRlcHMuc3RvcmFnZVNlcnZpY2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0b3JhZ2VTZXJ2aWNlID0gZGVwcy5zdG9yYWdlU2VydmljZSBhcyBTdG9yYWdlU2VydmljZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhcHBJZFNlcnZpY2UgPT0gbnVsbCAmJiBkZXBzLmFwcElkU2VydmljZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYXBwSWRTZXJ2aWNlID0gZGVwcy5hcHBJZFNlcnZpY2UgYXMgQXBwSWRTZXJ2aWNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5hcHBWZXJzaW9uID0gdGhpcy5wbGF0Zm9ybVV0aWxzU2VydmljZS5nZXRBcHBsaWNhdGlvblZlcnNpb24oKTtcbiAgICAgICAgdGhpcy5kZWZhdWx0RGlzYWJsZWQgPSB0aGlzLnBsYXRmb3JtVXRpbHNTZXJ2aWNlLmdldERldmljZSgpID09PSBEZXZpY2VUeXBlLkZpcmVmb3hFeHRlbnNpb24gfHxcbiAgICAgICAgICAgIHRoaXMucGxhdGZvcm1VdGlsc1NlcnZpY2UuaXNNYWNBcHBTdG9yZSgpO1xuICAgICAgICB0aGlzLmdhVHJhY2tpbmdJZCA9IHRoaXMucGxhdGZvcm1VdGlsc1NlcnZpY2UuYW5hbHl0aWNzSWQoKTtcblxuICAgICAgICAod2luIGFzIGFueSkuR29vZ2xlQW5hbHl0aWNzT2JqZWN0ID0gR2FPYmo7XG4gICAgICAgICh3aW4gYXMgYW55KVtHYU9ial0gPSBhc3luYyAoYWN0aW9uOiBzdHJpbmcsIHBhcmFtMTogYW55LCBwYXJhbTI/OiBhbnkpID0+IHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuZ2EoYWN0aW9uLCBwYXJhbTEsIHBhcmFtMik7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgYXN5bmMgZ2EoYWN0aW9uOiBzdHJpbmcsIHBhcmFtMTogYW55LCBwYXJhbTI/OiBhbnkpIHtcbiAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIGlmICh0aGlzLmdhRmlsdGVyICE9IG51bGwgJiYgdGhpcy5nYUZpbHRlcigpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBkaXNhYmxlZCA9IGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2UuZ2V0PGJvb2xlYW4+KENvbnN0YW50c1NlcnZpY2UuZGlzYWJsZUdhS2V5KTtcbiAgICAgICAgaWYgKCh0aGlzLmRlZmF1bHREaXNhYmxlZCAmJiBkaXNhYmxlZCA9PSBudWxsKSB8fCBkaXNhYmxlZCAhPSBudWxsICYmIGRpc2FibGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYWN0aW9uICE9PSAnc2VuZCcgfHwgIXBhcmFtMSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZ2FBbm9uQXBwSWQgPSBhd2FpdCB0aGlzLmFwcElkU2VydmljZS5nZXRBbm9ueW1vdXNBcHBJZCgpO1xuICAgICAgICBjb25zdCB2ZXJzaW9uID0gZW5jb2RlVVJJQ29tcG9uZW50KHRoaXMuYXBwVmVyc2lvbik7XG4gICAgICAgIGxldCBtZXNzYWdlID0gJ3Y9MSZ0aWQ9JyArIHRoaXMuZ2FUcmFja2luZ0lkICsgJyZjaWQ9JyArIGdhQW5vbkFwcElkICsgJyZjZDE9JyArIHZlcnNpb247XG5cbiAgICAgICAgaWYgKHBhcmFtMSA9PT0gJ3BhZ2V2aWV3JyAmJiBwYXJhbTIpIHtcbiAgICAgICAgICAgIG1lc3NhZ2UgKz0gdGhpcy5nYVRyYWNrUGFnZVZpZXcocGFyYW0yKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgcGFyYW0xID09PSAnb2JqZWN0JyAmJiBwYXJhbTEuaGl0VHlwZSA9PT0gJ3BhZ2V2aWV3Jykge1xuICAgICAgICAgICAgbWVzc2FnZSArPSB0aGlzLmdhVHJhY2tQYWdlVmlldyhwYXJhbTEucGFnZSk7XG4gICAgICAgIH0gZWxzZSBpZiAocGFyYW0xID09PSAnZXZlbnQnICYmIHBhcmFtMikge1xuICAgICAgICAgICAgbWVzc2FnZSArPSB0aGlzLmdhVHJhY2tFdmVudChwYXJhbTIpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBwYXJhbTEgPT09ICdvYmplY3QnICYmIHBhcmFtMS5oaXRUeXBlID09PSAnZXZlbnQnKSB7XG4gICAgICAgICAgICBtZXNzYWdlICs9IHRoaXMuZ2FUcmFja0V2ZW50KHBhcmFtMSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgIHJlcXVlc3Qub3BlbignUE9TVCcsICdodHRwczovL3d3dy5nb29nbGUtYW5hbHl0aWNzLmNvbS9jb2xsZWN0JywgdHJ1ZSk7XG4gICAgICAgIHJlcXVlc3Quc2VuZChtZXNzYWdlKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdhVHJhY2tFdmVudChvcHRpb25zOiBhbnkpIHtcbiAgICAgICAgcmV0dXJuICcmdD1ldmVudCZlYz0nICsgKG9wdGlvbnMuZXZlbnRDYXRlZ29yeSA/IGVuY29kZVVSSUNvbXBvbmVudChvcHRpb25zLmV2ZW50Q2F0ZWdvcnkpIDogJ0V2ZW50JykgK1xuICAgICAgICAgICAgJyZlYT0nICsgZW5jb2RlVVJJQ29tcG9uZW50KG9wdGlvbnMuZXZlbnRBY3Rpb24pICtcbiAgICAgICAgICAgIChvcHRpb25zLmV2ZW50TGFiZWwgPyAnJmVsPScgKyBlbmNvZGVVUklDb21wb25lbnQob3B0aW9ucy5ldmVudExhYmVsKSA6ICcnKSArXG4gICAgICAgICAgICAob3B0aW9ucy5ldmVudFZhbHVlID8gJyZldj0nICsgZW5jb2RlVVJJQ29tcG9uZW50KG9wdGlvbnMuZXZlbnRWYWx1ZSkgOiAnJykgK1xuICAgICAgICAgICAgKG9wdGlvbnMucGFnZSA/ICcmZHA9JyArIHRoaXMuY2xlYW5QYWdlUGF0aChvcHRpb25zLnBhZ2UpIDogJycpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2FUcmFja1BhZ2VWaWV3KHBhZ2VQYXRoOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuICcmdD1wYWdldmlldyZkcD0nICsgdGhpcy5jbGVhblBhZ2VQYXRoKHBhZ2VQYXRoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNsZWFuUGFnZVBhdGgocGFnZVBhdGg6IHN0cmluZykge1xuICAgICAgICBjb25zdCBwYXJhbUluZGV4ID0gcGFnZVBhdGguaW5kZXhPZignPycpO1xuICAgICAgICBpZiAocGFyYW1JbmRleCA+IC0xKSB7XG4gICAgICAgICAgICBwYWdlUGF0aCA9IHBhZ2VQYXRoLnN1YnN0cmluZygwLCBwYXJhbUluZGV4KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFnZVBhdGguaW5kZXhPZignIS8nKSA9PT0gMCB8fCBwYWdlUGF0aC5pbmRleE9mKCcjLycpID09PSAwKSB7XG4gICAgICAgICAgICBwYWdlUGF0aCA9IHBhZ2VQYXRoLnN1YnN0cmluZygxKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYXRoUGFydHMgPSBwYWdlUGF0aC5zcGxpdCgnLycpO1xuICAgICAgICBjb25zdCBuZXdQYXRoUGFydHM6IHN0cmluZ1tdID0gW107XG4gICAgICAgIHBhdGhQYXJ0cy5mb3JFYWNoKChwKSA9PiB7XG4gICAgICAgICAgICBpZiAocC5tYXRjaCgvXlswLTlhLWZdezh9LVswLTlhLWZdezR9LVsxLTVdWzAtOWEtZl17M30tWzg5YWJdWzAtOWEtZl17M30tWzAtOWEtZl17MTJ9JC9pKSkge1xuICAgICAgICAgICAgICAgIG5ld1BhdGhQYXJ0cy5wdXNoKCdfX2d1aWRfXycpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBuZXdQYXRoUGFydHMucHVzaChwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQobmV3UGF0aFBhcnRzLmpvaW4oJy8nKSk7XG4gICAgfVxufVxuIiwiZXhwb3J0IGVudW0gS2RmVHlwZSB7XG4gICAgUEJLREYyX1NIQTI1NiA9IDAsXG59XG4iLCJleHBvcnQgZW51bSBPcmdhbml6YXRpb25Vc2VyU3RhdHVzVHlwZSB7XG4gICAgSW52aXRlZCA9IDAsXG4gICAgQWNjZXB0ZWQgPSAxLFxuICAgIENvbmZpcm1lZCA9IDIsXG59XG4iLCJleHBvcnQgZW51bSBEZXZpY2VUeXBlIHtcbiAgICBBbmRyb2lkID0gMCxcbiAgICBpT1MgPSAxLFxuICAgIENocm9tZUV4dGVuc2lvbiA9IDIsXG4gICAgRmlyZWZveEV4dGVuc2lvbiA9IDMsXG4gICAgT3BlcmFFeHRlbnNpb24gPSA0LFxuICAgIEVkZ2VFeHRlbnNpb24gPSA1LFxuICAgIFdpbmRvd3NEZXNrdG9wID0gNixcbiAgICBNYWNPc0Rlc2t0b3AgPSA3LFxuICAgIExpbnV4RGVza3RvcCA9IDgsXG4gICAgQ2hyb21lQnJvd3NlciA9IDksXG4gICAgRmlyZWZveEJyb3dzZXIgPSAxMCxcbiAgICBPcGVyYUJyb3dzZXIgPSAxMSxcbiAgICBFZGdlQnJvd3NlciA9IDEyLFxuICAgIElFQnJvd3NlciA9IDEzLFxuICAgIFVua25vd25Ccm93c2VyID0gMTQsXG4gICAgQW5kcm9pZEFtYXpvbiA9IDE1LFxuICAgIFVXUCA9IDE2LFxuICAgIFNhZmFyaUJyb3dzZXIgPSAxNyxcbiAgICBWaXZhbGRpQnJvd3NlciA9IDE4LFxuICAgIFZpdmFsZGlFeHRlbnNpb24gPSAxOSxcbiAgICBTYWZhcmlFeHRlbnNpb24gPSAyMCxcbn1cbiIsImltcG9ydCB7IFNlbmRUeXBlIH0gZnJvbSAnLi4vLi4vZW51bXMvc2VuZFR5cGUnO1xuXG5pbXBvcnQgeyBTZW5kRmlsZURhdGEgfSBmcm9tICcuL3NlbmRGaWxlRGF0YSc7XG5pbXBvcnQgeyBTZW5kVGV4dERhdGEgfSBmcm9tICcuL3NlbmRUZXh0RGF0YSc7XG5cbmltcG9ydCB7IFNlbmRSZXNwb25zZSB9IGZyb20gJy4uL3Jlc3BvbnNlL3NlbmRSZXNwb25zZSc7XG5cbmV4cG9ydCBjbGFzcyBTZW5kRGF0YSB7XG4gICAgaWQ6IHN0cmluZztcbiAgICBhY2Nlc3NJZDogc3RyaW5nO1xuICAgIHVzZXJJZDogc3RyaW5nO1xuICAgIHR5cGU6IFNlbmRUeXBlO1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBub3Rlczogc3RyaW5nO1xuICAgIGZpbGU6IFNlbmRGaWxlRGF0YTtcbiAgICB0ZXh0OiBTZW5kVGV4dERhdGE7XG4gICAga2V5OiBzdHJpbmc7XG4gICAgbWF4QWNjZXNzQ291bnQ/OiBudW1iZXI7XG4gICAgYWNjZXNzQ291bnQ6IG51bWJlcjtcbiAgICByZXZpc2lvbkRhdGU6IHN0cmluZztcbiAgICBleHBpcmF0aW9uRGF0ZTogc3RyaW5nO1xuICAgIGRlbGV0aW9uRGF0ZTogc3RyaW5nO1xuICAgIHBhc3N3b3JkOiBzdHJpbmc7XG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XG5cbiAgICBjb25zdHJ1Y3RvcihyZXNwb25zZT86IFNlbmRSZXNwb25zZSwgdXNlcklkPzogc3RyaW5nKSB7XG4gICAgICAgIGlmIChyZXNwb25zZSA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmlkID0gcmVzcG9uc2UuaWQ7XG4gICAgICAgIHRoaXMuYWNjZXNzSWQgPSByZXNwb25zZS5hY2Nlc3NJZDtcbiAgICAgICAgdGhpcy51c2VySWQgPSB1c2VySWQ7XG4gICAgICAgIHRoaXMudHlwZSA9IHJlc3BvbnNlLnR5cGU7XG4gICAgICAgIHRoaXMubmFtZSA9IHJlc3BvbnNlLm5hbWU7XG4gICAgICAgIHRoaXMubm90ZXMgPSByZXNwb25zZS5ub3RlcztcbiAgICAgICAgdGhpcy5rZXkgPSByZXNwb25zZS5rZXk7XG4gICAgICAgIHRoaXMubWF4QWNjZXNzQ291bnQgPSByZXNwb25zZS5tYXhBY2Nlc3NDb3VudDtcbiAgICAgICAgdGhpcy5hY2Nlc3NDb3VudCA9IHJlc3BvbnNlLmFjY2Vzc0NvdW50O1xuICAgICAgICB0aGlzLnJldmlzaW9uRGF0ZSA9IHJlc3BvbnNlLnJldmlzaW9uRGF0ZTtcbiAgICAgICAgdGhpcy5leHBpcmF0aW9uRGF0ZSA9IHJlc3BvbnNlLmV4cGlyYXRpb25EYXRlO1xuICAgICAgICB0aGlzLmRlbGV0aW9uRGF0ZSA9IHJlc3BvbnNlLmRlbGV0aW9uRGF0ZTtcbiAgICAgICAgdGhpcy5wYXNzd29yZCA9IHJlc3BvbnNlLnBhc3N3b3JkO1xuICAgICAgICB0aGlzLmRpc2FibGVkID0gcmVzcG9uc2UuZGlzYWJsZTtcblxuICAgICAgICBzd2l0Y2ggKHRoaXMudHlwZSkge1xuICAgICAgICAgICAgY2FzZSBTZW5kVHlwZS5UZXh0OlxuICAgICAgICAgICAgICAgIHRoaXMudGV4dCA9IG5ldyBTZW5kVGV4dERhdGEocmVzcG9uc2UudGV4dCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFNlbmRUeXBlLkZpbGU6XG4gICAgICAgICAgICAgICAgdGhpcy5maWxlID0gbmV3IFNlbmRGaWxlRGF0YShyZXNwb25zZS5maWxlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQgeyBCYXNlUmVzcG9uc2UgfSBmcm9tICcuLi9yZXNwb25zZS9iYXNlUmVzcG9uc2UnO1xuXG5leHBvcnQgY2xhc3MgU2VuZEZpbGVBcGkgZXh0ZW5kcyBCYXNlUmVzcG9uc2Uge1xuICAgIGlkOiBzdHJpbmc7XG4gICAgdXJsOiBzdHJpbmc7XG4gICAgZmlsZU5hbWU6IHN0cmluZztcbiAgICBrZXk6IHN0cmluZztcbiAgICBzaXplOiBzdHJpbmc7XG4gICAgc2l6ZU5hbWU6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKGRhdGE6IGFueSA9IG51bGwpIHtcbiAgICAgICAgc3VwZXIoZGF0YSk7XG4gICAgICAgIGlmIChkYXRhID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmlkID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdJZCcpO1xuICAgICAgICB0aGlzLnVybCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnVXJsJyk7XG4gICAgICAgIHRoaXMuZmlsZU5hbWUgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0ZpbGVOYW1lJyk7XG4gICAgICAgIHRoaXMua2V5ID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdLZXknKTtcbiAgICAgICAgdGhpcy5zaXplID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdTaXplJyk7XG4gICAgICAgIHRoaXMuc2l6ZU5hbWUgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1NpemVOYW1lJyk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQmFzZVJlc3BvbnNlIH0gZnJvbSAnLi4vcmVzcG9uc2UvYmFzZVJlc3BvbnNlJztcblxuZXhwb3J0IGNsYXNzIFNlbmRUZXh0QXBpIGV4dGVuZHMgQmFzZVJlc3BvbnNlIHtcbiAgICB0ZXh0OiBzdHJpbmc7XG4gICAgaGlkZGVuOiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YTogYW55ID0gbnVsbCkge1xuICAgICAgICBzdXBlcihkYXRhKTtcbiAgICAgICAgaWYgKGRhdGEgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudGV4dCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnVGV4dCcpO1xuICAgICAgICB0aGlzLmhpZGRlbiA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnSGlkZGVuJykgfHwgZmFsc2U7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgVmlldyB9IGZyb20gJy4vdmlldyc7XG5cbmltcG9ydCB7IEF0dGFjaG1lbnQgfSBmcm9tICcuLi9kb21haW4vYXR0YWNobWVudCc7XG5pbXBvcnQgeyBTeW1tZXRyaWNDcnlwdG9LZXkgfSBmcm9tICcuLi9kb21haW4vc3ltbWV0cmljQ3J5cHRvS2V5JztcblxuZXhwb3J0IGNsYXNzIEF0dGFjaG1lbnRWaWV3IGltcGxlbWVudHMgVmlldyB7XG4gICAgaWQ6IHN0cmluZyA9IG51bGw7XG4gICAgdXJsOiBzdHJpbmcgPSBudWxsO1xuICAgIHNpemU6IHN0cmluZyA9IG51bGw7XG4gICAgc2l6ZU5hbWU6IHN0cmluZyA9IG51bGw7XG4gICAgZmlsZU5hbWU6IHN0cmluZyA9IG51bGw7XG4gICAga2V5OiBTeW1tZXRyaWNDcnlwdG9LZXkgPSBudWxsO1xuXG4gICAgY29uc3RydWN0b3IoYT86IEF0dGFjaG1lbnQpIHtcbiAgICAgICAgaWYgKCFhKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmlkID0gYS5pZDtcbiAgICAgICAgdGhpcy51cmwgPSBhLnVybDtcbiAgICAgICAgdGhpcy5zaXplID0gYS5zaXplO1xuICAgICAgICB0aGlzLnNpemVOYW1lID0gYS5zaXplTmFtZTtcbiAgICB9XG5cbiAgICBnZXQgZmlsZVNpemUoKTogbnVtYmVyIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICh0aGlzLnNpemUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUludCh0aGlzLnNpemUsIG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIHsgfVxuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBTdGF0ZVNlcnZpY2UgYXMgU3RhdGVTZXJ2aWNlQWJzdHJhY3Rpb24gfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvc3RhdGUuc2VydmljZSc7XG5cbmV4cG9ydCBjbGFzcyBTdGF0ZVNlcnZpY2UgaW1wbGVtZW50cyBTdGF0ZVNlcnZpY2VBYnN0cmFjdGlvbiB7XG4gICAgcHJpdmF0ZSBzdGF0ZTogYW55ID0ge307XG5cbiAgICBnZXQ8VD4oa2V5OiBzdHJpbmcpOiBQcm9taXNlPFQ+IHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLnN0YXRlW2tleV0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobnVsbCk7XG4gICAgfVxuXG4gICAgc2F2ZShrZXk6IHN0cmluZywgb2JqOiBhbnkpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICB0aGlzLnN0YXRlW2tleV0gPSBvYmo7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG5cbiAgICByZW1vdmUoa2V5OiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICBkZWxldGUgdGhpcy5zdGF0ZVtrZXldO1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuXG4gICAgcHVyZ2UoKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHt9O1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQnJvd3NlckFwaSB9IGZyb20gJy4uL2Jyb3dzZXIvYnJvd3NlckFwaSc7XG5pbXBvcnQgeyBTYWZhcmlBcHAgfSBmcm9tICcuLi9icm93c2VyL3NhZmFyaUFwcCc7XG5cbmltcG9ydCB7IE1lc3NhZ2luZ1NlcnZpY2UgfSBmcm9tICdqc2xpYi9hYnN0cmFjdGlvbnMvbWVzc2FnaW5nLnNlcnZpY2UnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCcm93c2VyTWVzc2FnaW5nU2VydmljZSBpbXBsZW1lbnRzIE1lc3NhZ2luZ1NlcnZpY2Uge1xuICAgIHNlbmQoc3Vic2NyaWJlcjogc3RyaW5nLCBhcmc6IGFueSA9IHt9KSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBPYmplY3QuYXNzaWduKHt9LCB7IGNvbW1hbmQ6IHN1YnNjcmliZXIgfSwgYXJnKTtcbiAgICAgICAgaWYgKEJyb3dzZXJBcGkuaXNTYWZhcmlBcGkpIHtcbiAgICAgICAgICAgIFNhZmFyaUFwcC5zZW5kTWVzc2FnZVRvQXBwKHN1YnNjcmliZXIsIGFyZyk7XG4gICAgICAgICAgICBTYWZhcmlBcHAuc2VuZE1lc3NhZ2VUb0xpc3RlbmVycyhtZXNzYWdlLCAnQnJvd3Nlck1lc3NhZ2luZ1NlcnZpY2UnLCBudWxsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNocm9tZS5ydW50aW1lLnNlbmRNZXNzYWdlKG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0ICogYXMgbHVuciBmcm9tICdsdW5yJztcblxuaW1wb3J0IHsgQ2lwaGVyVmlldyB9IGZyb20gJy4uL21vZGVscy92aWV3L2NpcGhlclZpZXcnO1xuXG5pbXBvcnQgeyBDaXBoZXJTZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL2NpcGhlci5zZXJ2aWNlJztcbmltcG9ydCB7IFNlYXJjaFNlcnZpY2UgYXMgU2VhcmNoU2VydmljZUFic3RyYWN0aW9uIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL3NlYXJjaC5zZXJ2aWNlJztcblxuaW1wb3J0IHsgQ2lwaGVyVHlwZSB9IGZyb20gJy4uL2VudW1zL2NpcGhlclR5cGUnO1xuaW1wb3J0IHsgRmllbGRUeXBlIH0gZnJvbSAnLi4vZW51bXMvZmllbGRUeXBlJztcbmltcG9ydCB7IFVyaU1hdGNoVHlwZSB9IGZyb20gJy4uL2VudW1zL3VyaU1hdGNoVHlwZSc7XG5cbmV4cG9ydCBjbGFzcyBTZWFyY2hTZXJ2aWNlIGltcGxlbWVudHMgU2VhcmNoU2VydmljZUFic3RyYWN0aW9uIHtcbiAgICBwcml2YXRlIGluZGV4aW5nID0gZmFsc2U7XG4gICAgcHJpdmF0ZSBpbmRleDogbHVuci5JbmRleCA9IG51bGw7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNpcGhlclNlcnZpY2U6IENpcGhlclNlcnZpY2UpIHtcbiAgICB9XG5cbiAgICBjbGVhckluZGV4KCk6IHZvaWQge1xuICAgICAgICB0aGlzLmluZGV4ID0gbnVsbDtcbiAgICB9XG5cbiAgICBpc1NlYXJjaGFibGUocXVlcnk6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICBjb25zdCBub3RTZWFyY2hhYmxlID0gcXVlcnkgPT0gbnVsbCB8fCAodGhpcy5pbmRleCA9PSBudWxsICYmIHF1ZXJ5Lmxlbmd0aCA8IDIpIHx8XG4gICAgICAgICAgICAodGhpcy5pbmRleCAhPSBudWxsICYmIHF1ZXJ5Lmxlbmd0aCA8IDIgJiYgcXVlcnkuaW5kZXhPZignPicpICE9PSAwKTtcbiAgICAgICAgcmV0dXJuICFub3RTZWFyY2hhYmxlO1xuICAgIH1cblxuICAgIGFzeW5jIGluZGV4Q2lwaGVycygpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgaWYgKHRoaXMuaW5kZXhpbmcpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgY29uc29sZS50aW1lKCdzZWFyY2ggaW5kZXhpbmcnKTtcbiAgICAgICAgdGhpcy5pbmRleGluZyA9IHRydWU7XG4gICAgICAgIHRoaXMuaW5kZXggPSBudWxsO1xuICAgICAgICBjb25zdCBidWlsZGVyID0gbmV3IGx1bnIuQnVpbGRlcigpO1xuICAgICAgICBidWlsZGVyLnJlZignaWQnKTtcbiAgICAgICAgYnVpbGRlci5maWVsZCgnc2hvcnRpZCcsIHsgYm9vc3Q6IDEwMCwgZXh0cmFjdG9yOiAoYzogQ2lwaGVyVmlldykgPT4gYy5pZC5zdWJzdHIoMCwgOCkgfSk7XG4gICAgICAgIGJ1aWxkZXIuZmllbGQoJ25hbWUnLCB7IGJvb3N0OiAxMCB9KTtcbiAgICAgICAgYnVpbGRlci5maWVsZCgnc3VidGl0bGUnLCB7XG4gICAgICAgICAgICBib29zdDogNSxcbiAgICAgICAgICAgIGV4dHJhY3RvcjogKGM6IENpcGhlclZpZXcpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoYy5zdWJUaXRsZSAhPSBudWxsICYmIGMudHlwZSA9PT0gQ2lwaGVyVHlwZS5DYXJkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjLnN1YlRpdGxlLnJlcGxhY2UoL1xcKi9nLCAnJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBjLnN1YlRpdGxlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIGJ1aWxkZXIuZmllbGQoJ25vdGVzJyk7XG4gICAgICAgIGJ1aWxkZXIuZmllbGQoJ2xvZ2luLnVzZXJuYW1lJywge1xuICAgICAgICAgICAgZXh0cmFjdG9yOiAoYzogQ2lwaGVyVmlldykgPT4gYy50eXBlID09PSBDaXBoZXJUeXBlLkxvZ2luICYmIGMubG9naW4gIT0gbnVsbCA/IGMubG9naW4udXNlcm5hbWUgOiBudWxsLFxuICAgICAgICB9KTtcbiAgICAgICAgYnVpbGRlci5maWVsZCgnbG9naW4udXJpcycsIHsgYm9vc3Q6IDIsIGV4dHJhY3RvcjogKGM6IENpcGhlclZpZXcpID0+IHRoaXMudXJpRXh0cmFjdG9yKGMpIH0pO1xuICAgICAgICBidWlsZGVyLmZpZWxkKCdmaWVsZHMnLCB7IGV4dHJhY3RvcjogKGM6IENpcGhlclZpZXcpID0+IHRoaXMuZmllbGRFeHRyYWN0b3IoYywgZmFsc2UpIH0pO1xuICAgICAgICBidWlsZGVyLmZpZWxkKCdmaWVsZHNfam9pbmVkJywgeyBleHRyYWN0b3I6IChjOiBDaXBoZXJWaWV3KSA9PiB0aGlzLmZpZWxkRXh0cmFjdG9yKGMsIHRydWUpIH0pO1xuICAgICAgICBidWlsZGVyLmZpZWxkKCdhdHRhY2htZW50cycsIHsgZXh0cmFjdG9yOiAoYzogQ2lwaGVyVmlldykgPT4gdGhpcy5hdHRhY2htZW50RXh0cmFjdG9yKGMsIGZhbHNlKSB9KTtcbiAgICAgICAgYnVpbGRlci5maWVsZCgnYXR0YWNobWVudHNfam9pbmVkJyxcbiAgICAgICAgICAgIHsgZXh0cmFjdG9yOiAoYzogQ2lwaGVyVmlldykgPT4gdGhpcy5hdHRhY2htZW50RXh0cmFjdG9yKGMsIHRydWUpIH0pO1xuICAgICAgICBidWlsZGVyLmZpZWxkKCdvcmdhbml6YXRpb25pZCcsIHsgZXh0cmFjdG9yOiAoYzogQ2lwaGVyVmlldykgPT4gYy5vcmdhbml6YXRpb25JZCB9KTtcbiAgICAgICAgY29uc3QgY2lwaGVycyA9IGF3YWl0IHRoaXMuY2lwaGVyU2VydmljZS5nZXRBbGxEZWNyeXB0ZWQoKTtcbiAgICAgICAgY2lwaGVycy5mb3JFYWNoKChjKSA9PiBidWlsZGVyLmFkZChjKSk7XG4gICAgICAgIHRoaXMuaW5kZXggPSBidWlsZGVyLmJ1aWxkKCk7XG4gICAgICAgIHRoaXMuaW5kZXhpbmcgPSBmYWxzZTtcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgIGNvbnNvbGUudGltZUVuZCgnc2VhcmNoIGluZGV4aW5nJyk7XG4gICAgfVxuXG4gICAgYXN5bmMgc2VhcmNoQ2lwaGVycyhxdWVyeTogc3RyaW5nLFxuICAgICAgICBmaWx0ZXI6ICgoKGNpcGhlcjogQ2lwaGVyVmlldykgPT4gYm9vbGVhbikgfCAoKChjaXBoZXI6IENpcGhlclZpZXcpID0+IGJvb2xlYW4pW10pKSA9IG51bGwsXG4gICAgICAgIGNpcGhlcnM6IENpcGhlclZpZXdbXSA9IG51bGwpOlxuICAgICAgICBQcm9taXNlPENpcGhlclZpZXdbXT4ge1xuICAgICAgICBjb25zdCByZXN1bHRzOiBDaXBoZXJWaWV3W10gPSBbXTtcbiAgICAgICAgaWYgKHF1ZXJ5ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHF1ZXJ5ID0gcXVlcnkudHJpbSgpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHF1ZXJ5ID09PSAnJykge1xuICAgICAgICAgICAgcXVlcnkgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNpcGhlcnMgPT0gbnVsbCkge1xuICAgICAgICAgICAgY2lwaGVycyA9IGF3YWl0IHRoaXMuY2lwaGVyU2VydmljZS5nZXRBbGxEZWNyeXB0ZWQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChmaWx0ZXIgIT0gbnVsbCAmJiBBcnJheS5pc0FycmF5KGZpbHRlcikgJiYgZmlsdGVyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNpcGhlcnMgPSBjaXBoZXJzLmZpbHRlcigoYykgPT4gZmlsdGVyLmV2ZXJ5KChmKSA9PiBmID09IG51bGwgfHwgZihjKSkpO1xuICAgICAgICB9IGVsc2UgaWYgKGZpbHRlciAhPSBudWxsKSB7XG4gICAgICAgICAgICBjaXBoZXJzID0gY2lwaGVycy5maWx0ZXIoZmlsdGVyIGFzIChjaXBoZXI6IENpcGhlclZpZXcpID0+IGJvb2xlYW4pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLmlzU2VhcmNoYWJsZShxdWVyeSkpIHtcbiAgICAgICAgICAgIHJldHVybiBjaXBoZXJzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuaW5kZXhpbmcpIHtcbiAgICAgICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKChyKSA9PiBzZXRUaW1lb3V0KHIsIDI1MCkpO1xuICAgICAgICAgICAgaWYgKHRoaXMuaW5kZXhpbmcpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZSgocikgPT4gc2V0VGltZW91dChyLCA1MDApKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5nZXRJbmRleEZvclNlYXJjaCgpO1xuICAgICAgICBpZiAoaW5kZXggPT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gRmFsbCBiYWNrIHRvIGJhc2ljIHNlYXJjaCBpZiBpbmRleCBpcyBub3QgYXZhaWxhYmxlXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZWFyY2hDaXBoZXJzQmFzaWMoY2lwaGVycywgcXVlcnkpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgY2lwaGVyc01hcCA9IG5ldyBNYXA8c3RyaW5nLCBDaXBoZXJWaWV3PigpO1xuICAgICAgICBjaXBoZXJzLmZvckVhY2goKGMpID0+IGNpcGhlcnNNYXAuc2V0KGMuaWQsIGMpKTtcblxuICAgICAgICBsZXQgc2VhcmNoUmVzdWx0czogbHVuci5JbmRleC5SZXN1bHRbXSA9IG51bGw7XG4gICAgICAgIGNvbnN0IGlzUXVlcnlTdHJpbmcgPSBxdWVyeSAhPSBudWxsICYmIHF1ZXJ5Lmxlbmd0aCA+IDEgJiYgcXVlcnkuaW5kZXhPZignPicpID09PSAwO1xuICAgICAgICBpZiAoaXNRdWVyeVN0cmluZykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBzZWFyY2hSZXN1bHRzID0gaW5kZXguc2VhcmNoKHF1ZXJ5LnN1YnN0cigxKS50cmltKCkpO1xuICAgICAgICAgICAgfSBjYXRjaCB7IH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZVxuICAgICAgICAgICAgY29uc3Qgc29XaWxkID0gbHVuci5RdWVyeS53aWxkY2FyZC5MRUFESU5HIHwgbHVuci5RdWVyeS53aWxkY2FyZC5UUkFJTElORztcbiAgICAgICAgICAgIHNlYXJjaFJlc3VsdHMgPSBpbmRleC5xdWVyeSgocSkgPT4ge1xuICAgICAgICAgICAgICAgIGx1bnIudG9rZW5pemVyKHF1ZXJ5KS5mb3JFYWNoKCh0b2tlbikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0ID0gdG9rZW4udG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgcS50ZXJtKHQsIHsgZmllbGRzOiBbJ25hbWUnXSwgd2lsZGNhcmQ6IHNvV2lsZCB9KTtcbiAgICAgICAgICAgICAgICAgICAgcS50ZXJtKHQsIHsgZmllbGRzOiBbJ3N1YnRpdGxlJ10sIHdpbGRjYXJkOiBzb1dpbGQgfSk7XG4gICAgICAgICAgICAgICAgICAgIHEudGVybSh0LCB7IGZpZWxkczogWydsb2dpbi51cmlzJ10sIHdpbGRjYXJkOiBzb1dpbGQgfSk7XG4gICAgICAgICAgICAgICAgICAgIHEudGVybSh0LCB7fSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzZWFyY2hSZXN1bHRzICE9IG51bGwpIHtcbiAgICAgICAgICAgIHNlYXJjaFJlc3VsdHMuZm9yRWFjaCgocikgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChjaXBoZXJzTWFwLmhhcyhyLnJlZikpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0cy5wdXNoKGNpcGhlcnNNYXAuZ2V0KHIucmVmKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgfVxuXG4gICAgc2VhcmNoQ2lwaGVyc0Jhc2ljKGNpcGhlcnM6IENpcGhlclZpZXdbXSwgcXVlcnk6IHN0cmluZywgZGVsZXRlZDogYm9vbGVhbiA9IGZhbHNlKSB7XG4gICAgICAgIHF1ZXJ5ID0gcXVlcnkudHJpbSgpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIHJldHVybiBjaXBoZXJzLmZpbHRlcigoYykgPT4ge1xuICAgICAgICAgICAgaWYgKGRlbGV0ZWQgIT09IGMuaXNEZWxldGVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGMubmFtZSAhPSBudWxsICYmIGMubmFtZS50b0xvd2VyQ2FzZSgpLmluZGV4T2YocXVlcnkpID4gLTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChxdWVyeS5sZW5ndGggPj0gOCAmJiBjLmlkLnN0YXJ0c1dpdGgocXVlcnkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYy5zdWJUaXRsZSAhPSBudWxsICYmIGMuc3ViVGl0bGUudG9Mb3dlckNhc2UoKS5pbmRleE9mKHF1ZXJ5KSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYy5sb2dpbiAmJiBjLmxvZ2luLnVyaSAhPSBudWxsICYmIGMubG9naW4udXJpLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihxdWVyeSkgPiAtMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBnZXRJbmRleEZvclNlYXJjaCgpOiBsdW5yLkluZGV4IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5kZXg7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBmaWVsZEV4dHJhY3RvcihjOiBDaXBoZXJWaWV3LCBqb2luZWQ6IGJvb2xlYW4pIHtcbiAgICAgICAgaWYgKCFjLmhhc0ZpZWxkcykge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGZpZWxkczogc3RyaW5nW10gPSBbXTtcbiAgICAgICAgYy5maWVsZHMuZm9yRWFjaCgoZikgPT4ge1xuICAgICAgICAgICAgaWYgKGYubmFtZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgZmllbGRzLnB1c2goZi5uYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChmLnR5cGUgPT09IEZpZWxkVHlwZS5UZXh0ICYmIGYudmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGZpZWxkcy5wdXNoKGYudmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgZmllbGRzID0gZmllbGRzLmZpbHRlcigoZikgPT4gZi50cmltKCkgIT09ICcnKTtcbiAgICAgICAgaWYgKGZpZWxkcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBqb2luZWQgPyBmaWVsZHMuam9pbignICcpIDogZmllbGRzO1xuICAgIH1cblxuICAgIHByaXZhdGUgYXR0YWNobWVudEV4dHJhY3RvcihjOiBDaXBoZXJWaWV3LCBqb2luZWQ6IGJvb2xlYW4pIHtcbiAgICAgICAgaWYgKCFjLmhhc0F0dGFjaG1lbnRzKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgYXR0YWNobWVudHM6IHN0cmluZ1tdID0gW107XG4gICAgICAgIGMuYXR0YWNobWVudHMuZm9yRWFjaCgoYSkgPT4ge1xuICAgICAgICAgICAgaWYgKGEgIT0gbnVsbCAmJiBhLmZpbGVOYW1lICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAoam9pbmVkICYmIGEuZmlsZU5hbWUuaW5kZXhPZignLicpID4gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgYXR0YWNobWVudHMucHVzaChhLmZpbGVOYW1lLnN1YnN0cigwLCBhLmZpbGVOYW1lLmxhc3RJbmRleE9mKCcuJykpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhdHRhY2htZW50cy5wdXNoKGEuZmlsZU5hbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGF0dGFjaG1lbnRzID0gYXR0YWNobWVudHMuZmlsdGVyKChmKSA9PiBmLnRyaW0oKSAhPT0gJycpO1xuICAgICAgICBpZiAoYXR0YWNobWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gam9pbmVkID8gYXR0YWNobWVudHMuam9pbignICcpIDogYXR0YWNobWVudHM7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB1cmlFeHRyYWN0b3IoYzogQ2lwaGVyVmlldykge1xuICAgICAgICBpZiAoYy50eXBlICE9PSBDaXBoZXJUeXBlLkxvZ2luIHx8IGMubG9naW4gPT0gbnVsbCB8fCAhYy5sb2dpbi5oYXNVcmlzKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB1cmlzOiBzdHJpbmdbXSA9IFtdO1xuICAgICAgICBjLmxvZ2luLnVyaXMuZm9yRWFjaCgodSkgPT4ge1xuICAgICAgICAgICAgaWYgKHUudXJpID09IG51bGwgfHwgdS51cmkgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHUuaG9zdG5hbWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHVyaXMucHVzaCh1Lmhvc3RuYW1lKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgdXJpID0gdS51cmk7XG4gICAgICAgICAgICBpZiAodS5tYXRjaCAhPT0gVXJpTWF0Y2hUeXBlLlJlZ3VsYXJFeHByZXNzaW9uKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJvdG9jb2xJbmRleCA9IHVyaS5pbmRleE9mKCc6Ly8nKTtcbiAgICAgICAgICAgICAgICBpZiAocHJvdG9jb2xJbmRleCA+IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHVyaSA9IHVyaS5zdWJzdHIocHJvdG9jb2xJbmRleCArIDMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBxdWVyeUluZGV4ID0gdXJpLnNlYXJjaCgvXFw/fCZ8Iy8pO1xuICAgICAgICAgICAgICAgIGlmIChxdWVyeUluZGV4ID4gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgdXJpID0gdXJpLnN1YnN0cmluZygwLCBxdWVyeUluZGV4KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB1cmlzLnB1c2godXJpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB1cmlzLmxlbmd0aCA+IDAgPyB1cmlzIDogbnVsbDtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBWaWV3IH0gZnJvbSAnLi92aWV3JztcblxuaW1wb3J0IHsgUGFzc3dvcmQgfSBmcm9tICcuLi9kb21haW4vcGFzc3dvcmQnO1xuXG5leHBvcnQgY2xhc3MgUGFzc3dvcmRIaXN0b3J5VmlldyBpbXBsZW1lbnRzIFZpZXcge1xuICAgIHBhc3N3b3JkOiBzdHJpbmcgPSBudWxsO1xuICAgIGxhc3RVc2VkRGF0ZTogRGF0ZSA9IG51bGw7XG5cbiAgICBjb25zdHJ1Y3RvcihwaD86IFBhc3N3b3JkKSB7XG4gICAgICAgIGlmICghcGgpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubGFzdFVzZWREYXRlID0gcGgubGFzdFVzZWREYXRlO1xuICAgIH1cbn1cbiIsIi8qKlxuICogVXNlIGFzIGEgRGVjb3JhdG9yIG9uIGFzeW5jIGZ1bmN0aW9ucywgaXQgd2lsbCBwcmV2ZW50IG11bHRpcGxlICdhY3RpdmUnIGNhbGxzIGFzIHRoZSBzYW1lIHRpbWVcbiAqXG4gKiBJZiBhIHByb21pc2Ugd2FzIHJldHVybmVkIGZyb20gYSBwcmV2aW91cyBjYWxsIHRvIHRoaXMgZnVuY3Rpb24sIHRoYXQgaGFzbid0IHlldCByZXNvbHZlZCBpdCB3aWxsXG4gKiBiZSByZXR1cm5lZCwgaW5zdGVhZCBvZiBjYWxsaW5nIHRoZSBvcmlnaW5hbCBmdW5jdGlvbiBhZ2FpblxuICpcbiAqIFJlc3VsdHMgYXJlIG5vdCBjYWNoZWQsIG9uY2UgdGhlIHByb21pc2UgaGFzIHJldHVybmVkLCB0aGUgbmV4dCBjYWxsIHdpbGwgcmVzdWx0IGluIGEgZnJlc2ggY2FsbFxuICpcbiAqIFJlYWQgbW9yZSBhdCBodHRwczovL2dpdGh1Yi5jb20vYml0d2FyZGVuL2pzbGliL3B1bGwvN1xuICovXG5leHBvcnQgZnVuY3Rpb24gc2VxdWVudGlhbGl6ZShjYWNoZUtleTogKGFyZ3M6IGFueVtdKSA9PiBzdHJpbmcpIHtcbiAgICByZXR1cm4gKHRhcmdldDogYW55LCBwcm9wZXJ0eUtleTogc3RyaW5nIHwgc3ltYm9sLCBkZXNjcmlwdG9yOiBQcm9wZXJ0eURlc2NyaXB0b3IpID0+IHtcbiAgICAgICAgY29uc3Qgb3JpZ2luYWxNZXRob2Q6ICgpID0+IFByb21pc2U8YW55PiA9IGRlc2NyaXB0b3IudmFsdWU7XG4gICAgICAgIGNvbnN0IGNhY2hlcyA9IG5ldyBNYXA8YW55LCBNYXA8c3RyaW5nLCBQcm9taXNlPGFueT4+PigpO1xuXG4gICAgICAgIGNvbnN0IGdldENhY2hlID0gKG9iajogYW55KSA9PiB7XG4gICAgICAgICAgICBsZXQgY2FjaGUgPSBjYWNoZXMuZ2V0KG9iaik7XG4gICAgICAgICAgICBpZiAoY2FjaGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjYWNoZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhY2hlID0gbmV3IE1hcDxzdHJpbmcsIFByb21pc2U8YW55Pj4oKTtcbiAgICAgICAgICAgIGNhY2hlcy5zZXQob2JqLCBjYWNoZSk7XG4gICAgICAgICAgICByZXR1cm4gY2FjaGU7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiguLi5hcmdzOiBhbnlbXSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNhY2hlID0gZ2V0Q2FjaGUodGhpcyk7XG4gICAgICAgICAgICAgICAgY29uc3QgYXJnc0NhY2hlS2V5ID0gY2FjaGVLZXkoYXJncyk7XG4gICAgICAgICAgICAgICAgbGV0IHJlc3BvbnNlID0gY2FjaGUuZ2V0KGFyZ3NDYWNoZUtleSk7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnN0IG9uRmluYWxseSA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY2FjaGUuZGVsZXRlKGFyZ3NDYWNoZUtleSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjYWNoZS5zaXplID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWNoZXMuZGVsZXRlKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXNwb25zZSA9IG9yaWdpbmFsTWV0aG9kLmFwcGx5KHRoaXMsIGFyZ3MpLnRoZW4oKHZhbDogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIG9uRmluYWxseSgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgICAgICAgICAgIH0pLmNhdGNoKChlcnI6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBvbkZpbmFsbHkoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgY2FjaGUuc2V0KGFyZ3NDYWNoZUtleSwgcmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfTtcbn1cbiIsImV4cG9ydCBlbnVtIEVuY3J5cHRpb25UeXBlIHtcbiAgICBBZXNDYmMyNTZfQjY0ID0gMCxcbiAgICBBZXNDYmMxMjhfSG1hY1NoYTI1Nl9CNjQgPSAxLFxuICAgIEFlc0NiYzI1Nl9IbWFjU2hhMjU2X0I2NCA9IDIsXG4gICAgUnNhMjA0OF9PYWVwU2hhMjU2X0I2NCA9IDMsXG4gICAgUnNhMjA0OF9PYWVwU2hhMV9CNjQgPSA0LFxuICAgIFJzYTIwNDhfT2FlcFNoYTI1Nl9IbWFjU2hhMjU2X0I2NCA9IDUsXG4gICAgUnNhMjA0OF9PYWVwU2hhMV9IbWFjU2hhMjU2X0I2NCA9IDYsXG59XG4iLCJpbXBvcnQgeyBCYXNlUmVzcG9uc2UgfSBmcm9tICcuLi9yZXNwb25zZS9iYXNlUmVzcG9uc2UnO1xuXG5leHBvcnQgY2xhc3MgQ2FyZEFwaSBleHRlbmRzIEJhc2VSZXNwb25zZSB7XG4gICAgY2FyZGhvbGRlck5hbWU6IHN0cmluZztcbiAgICBicmFuZDogc3RyaW5nO1xuICAgIG51bWJlcjogc3RyaW5nO1xuICAgIGV4cE1vbnRoOiBzdHJpbmc7XG4gICAgZXhwWWVhcjogc3RyaW5nO1xuICAgIGNvZGU6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKGRhdGE6IGFueSA9IG51bGwpIHtcbiAgICAgICAgc3VwZXIoZGF0YSk7XG4gICAgICAgIGlmIChkYXRhID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNhcmRob2xkZXJOYW1lID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdDYXJkaG9sZGVyTmFtZScpO1xuICAgICAgICB0aGlzLmJyYW5kID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdCcmFuZCcpO1xuICAgICAgICB0aGlzLm51bWJlciA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnTnVtYmVyJyk7XG4gICAgICAgIHRoaXMuZXhwTW9udGggPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0V4cE1vbnRoJyk7XG4gICAgICAgIHRoaXMuZXhwWWVhciA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnRXhwWWVhcicpO1xuICAgICAgICB0aGlzLmNvZGUgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0NvZGUnKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBCYXNlUmVzcG9uc2UgfSBmcm9tICcuLi9yZXNwb25zZS9iYXNlUmVzcG9uc2UnO1xuXG5pbXBvcnQgeyBGaWVsZFR5cGUgfSBmcm9tICcuLi8uLi9lbnVtcy9maWVsZFR5cGUnO1xuXG5leHBvcnQgY2xhc3MgRmllbGRBcGkgZXh0ZW5kcyBCYXNlUmVzcG9uc2Uge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICB2YWx1ZTogc3RyaW5nO1xuICAgIHR5cGU6IEZpZWxkVHlwZTtcblxuICAgIGNvbnN0cnVjdG9yKGRhdGE6IGFueSA9IG51bGwpIHtcbiAgICAgICAgc3VwZXIoZGF0YSk7XG4gICAgICAgIGlmIChkYXRhID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnR5cGUgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1R5cGUnKTtcbiAgICAgICAgdGhpcy5uYW1lID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdOYW1lJyk7XG4gICAgICAgIHRoaXMudmFsdWUgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1ZhbHVlJyk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQmFzZVJlc3BvbnNlIH0gZnJvbSAnLi4vcmVzcG9uc2UvYmFzZVJlc3BvbnNlJztcblxuZXhwb3J0IGNsYXNzIElkZW50aXR5QXBpIGV4dGVuZHMgQmFzZVJlc3BvbnNlIHtcbiAgICB0aXRsZTogc3RyaW5nO1xuICAgIGZpcnN0TmFtZTogc3RyaW5nO1xuICAgIG1pZGRsZU5hbWU6IHN0cmluZztcbiAgICBsYXN0TmFtZTogc3RyaW5nO1xuICAgIGFkZHJlc3MxOiBzdHJpbmc7XG4gICAgYWRkcmVzczI6IHN0cmluZztcbiAgICBhZGRyZXNzMzogc3RyaW5nO1xuICAgIGNpdHk6IHN0cmluZztcbiAgICBzdGF0ZTogc3RyaW5nO1xuICAgIHBvc3RhbENvZGU6IHN0cmluZztcbiAgICBjb3VudHJ5OiBzdHJpbmc7XG4gICAgY29tcGFueTogc3RyaW5nO1xuICAgIGVtYWlsOiBzdHJpbmc7XG4gICAgcGhvbmU6IHN0cmluZztcbiAgICBzc246IHN0cmluZztcbiAgICB1c2VybmFtZTogc3RyaW5nO1xuICAgIHBhc3Nwb3J0TnVtYmVyOiBzdHJpbmc7XG4gICAgbGljZW5zZU51bWJlcjogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YTogYW55ID0gbnVsbCkge1xuICAgICAgICBzdXBlcihkYXRhKTtcbiAgICAgICAgaWYgKGRhdGEgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudGl0bGUgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1RpdGxlJyk7XG4gICAgICAgIHRoaXMuZmlyc3ROYW1lID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdGaXJzdE5hbWUnKTtcbiAgICAgICAgdGhpcy5taWRkbGVOYW1lID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdNaWRkbGVOYW1lJyk7XG4gICAgICAgIHRoaXMubGFzdE5hbWUgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0xhc3ROYW1lJyk7XG4gICAgICAgIHRoaXMuYWRkcmVzczEgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0FkZHJlc3MxJyk7XG4gICAgICAgIHRoaXMuYWRkcmVzczIgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0FkZHJlc3MyJyk7XG4gICAgICAgIHRoaXMuYWRkcmVzczMgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0FkZHJlc3MzJyk7XG4gICAgICAgIHRoaXMuY2l0eSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnQ2l0eScpO1xuICAgICAgICB0aGlzLnN0YXRlID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdTdGF0ZScpO1xuICAgICAgICB0aGlzLnBvc3RhbENvZGUgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1Bvc3RhbENvZGUnKTtcbiAgICAgICAgdGhpcy5jb3VudHJ5ID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdDb3VudHJ5Jyk7XG4gICAgICAgIHRoaXMuY29tcGFueSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnQ29tcGFueScpO1xuICAgICAgICB0aGlzLmVtYWlsID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdFbWFpbCcpO1xuICAgICAgICB0aGlzLnBob25lID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdQaG9uZScpO1xuICAgICAgICB0aGlzLnNzbiA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnU1NOJyk7XG4gICAgICAgIHRoaXMudXNlcm5hbWUgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1VzZXJuYW1lJyk7XG4gICAgICAgIHRoaXMucGFzc3BvcnROdW1iZXIgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1Bhc3Nwb3J0TnVtYmVyJyk7XG4gICAgICAgIHRoaXMubGljZW5zZU51bWJlciA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnTGljZW5zZU51bWJlcicpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IEJhc2VSZXNwb25zZSB9IGZyb20gJy4uL3Jlc3BvbnNlL2Jhc2VSZXNwb25zZSc7XG5cbmltcG9ydCB7IExvZ2luVXJpQXBpIH0gZnJvbSAnLi9sb2dpblVyaUFwaSc7XG5cbmV4cG9ydCBjbGFzcyBMb2dpbkFwaSBleHRlbmRzIEJhc2VSZXNwb25zZSB7XG4gICAgdXJpczogTG9naW5VcmlBcGlbXTtcbiAgICB1c2VybmFtZTogc3RyaW5nO1xuICAgIHBhc3N3b3JkOiBzdHJpbmc7XG4gICAgcGFzc3dvcmRSZXZpc2lvbkRhdGU6IHN0cmluZztcbiAgICB0b3RwOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihkYXRhOiBhbnkgPSBudWxsKSB7XG4gICAgICAgIHN1cGVyKGRhdGEpO1xuICAgICAgICBpZiAoZGF0YSA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy51c2VybmFtZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnVXNlcm5hbWUnKTtcbiAgICAgICAgdGhpcy5wYXNzd29yZCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnUGFzc3dvcmQnKTtcbiAgICAgICAgdGhpcy5wYXNzd29yZFJldmlzaW9uRGF0ZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnUGFzc3dvcmRSZXZpc2lvbkRhdGUnKTtcbiAgICAgICAgdGhpcy50b3RwID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdUb3RwJyk7XG5cbiAgICAgICAgY29uc3QgdXJpcyA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnVXJpcycpO1xuICAgICAgICBpZiAodXJpcyAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnVyaXMgPSB1cmlzLm1hcCgodTogYW55KSA9PiBuZXcgTG9naW5VcmlBcGkodSkpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQmFzZVJlc3BvbnNlIH0gZnJvbSAnLi4vcmVzcG9uc2UvYmFzZVJlc3BvbnNlJztcblxuaW1wb3J0IHsgVXJpTWF0Y2hUeXBlIH0gZnJvbSAnLi4vLi4vZW51bXMvdXJpTWF0Y2hUeXBlJztcblxuZXhwb3J0IGNsYXNzIExvZ2luVXJpQXBpIGV4dGVuZHMgQmFzZVJlc3BvbnNlIHtcbiAgICB1cmk6IHN0cmluZztcbiAgICBtYXRjaDogVXJpTWF0Y2hUeXBlID0gbnVsbDtcblxuICAgIGNvbnN0cnVjdG9yKGRhdGE6IGFueSA9IG51bGwpIHtcbiAgICAgICAgc3VwZXIoZGF0YSk7XG4gICAgICAgIGlmIChkYXRhID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVyaSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnVXJpJyk7XG4gICAgICAgIGNvbnN0IG1hdGNoID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdNYXRjaCcpO1xuICAgICAgICB0aGlzLm1hdGNoID0gbWF0Y2ggIT0gbnVsbCA/IG1hdGNoIDogbnVsbDtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBCYXNlUmVzcG9uc2UgfSBmcm9tICcuLi9yZXNwb25zZS9iYXNlUmVzcG9uc2UnO1xuXG5pbXBvcnQgeyBTZWN1cmVOb3RlVHlwZSB9IGZyb20gJy4uLy4uL2VudW1zL3NlY3VyZU5vdGVUeXBlJztcblxuZXhwb3J0IGNsYXNzIFNlY3VyZU5vdGVBcGkgZXh0ZW5kcyBCYXNlUmVzcG9uc2Uge1xuICAgIHR5cGU6IFNlY3VyZU5vdGVUeXBlO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YTogYW55ID0gbnVsbCkge1xuICAgICAgICBzdXBlcihkYXRhKTtcbiAgICAgICAgaWYgKGRhdGEgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudHlwZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnVHlwZScpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IEF0dGFjaG1lbnRSZXNwb25zZSB9IGZyb20gJy4uL3Jlc3BvbnNlL2F0dGFjaG1lbnRSZXNwb25zZSc7XG5cbmV4cG9ydCBjbGFzcyBBdHRhY2htZW50RGF0YSB7XG4gICAgaWQ6IHN0cmluZztcbiAgICB1cmw6IHN0cmluZztcbiAgICBmaWxlTmFtZTogc3RyaW5nO1xuICAgIGtleTogc3RyaW5nO1xuICAgIHNpemU6IHN0cmluZztcbiAgICBzaXplTmFtZTogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IocmVzcG9uc2U/OiBBdHRhY2htZW50UmVzcG9uc2UpIHtcbiAgICAgICAgaWYgKHJlc3BvbnNlID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmlkID0gcmVzcG9uc2UuaWQ7XG4gICAgICAgIHRoaXMudXJsID0gcmVzcG9uc2UudXJsO1xuICAgICAgICB0aGlzLmZpbGVOYW1lID0gcmVzcG9uc2UuZmlsZU5hbWU7XG4gICAgICAgIHRoaXMua2V5ID0gcmVzcG9uc2Uua2V5O1xuICAgICAgICB0aGlzLnNpemUgPSByZXNwb25zZS5zaXplO1xuICAgICAgICB0aGlzLnNpemVOYW1lID0gcmVzcG9uc2Uuc2l6ZU5hbWU7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQ2FyZEFwaSB9IGZyb20gJy4uL2FwaS9jYXJkQXBpJztcblxuZXhwb3J0IGNsYXNzIENhcmREYXRhIHtcbiAgICBjYXJkaG9sZGVyTmFtZTogc3RyaW5nO1xuICAgIGJyYW5kOiBzdHJpbmc7XG4gICAgbnVtYmVyOiBzdHJpbmc7XG4gICAgZXhwTW9udGg6IHN0cmluZztcbiAgICBleHBZZWFyOiBzdHJpbmc7XG4gICAgY29kZTogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YT86IENhcmRBcGkpIHtcbiAgICAgICAgaWYgKGRhdGEgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jYXJkaG9sZGVyTmFtZSA9IGRhdGEuY2FyZGhvbGRlck5hbWU7XG4gICAgICAgIHRoaXMuYnJhbmQgPSBkYXRhLmJyYW5kO1xuICAgICAgICB0aGlzLm51bWJlciA9IGRhdGEubnVtYmVyO1xuICAgICAgICB0aGlzLmV4cE1vbnRoID0gZGF0YS5leHBNb250aDtcbiAgICAgICAgdGhpcy5leHBZZWFyID0gZGF0YS5leHBZZWFyO1xuICAgICAgICB0aGlzLmNvZGUgPSBkYXRhLmNvZGU7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgRmllbGRUeXBlIH0gZnJvbSAnLi4vLi4vZW51bXMvZmllbGRUeXBlJztcblxuaW1wb3J0IHsgRmllbGRBcGkgfSBmcm9tICcuLi9hcGkvZmllbGRBcGknO1xuXG5leHBvcnQgY2xhc3MgRmllbGREYXRhIHtcbiAgICB0eXBlOiBGaWVsZFR5cGU7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIHZhbHVlOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihyZXNwb25zZT86IEZpZWxkQXBpKSB7XG4gICAgICAgIGlmIChyZXNwb25zZSA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50eXBlID0gcmVzcG9uc2UudHlwZTtcbiAgICAgICAgdGhpcy5uYW1lID0gcmVzcG9uc2UubmFtZTtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHJlc3BvbnNlLnZhbHVlO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IElkZW50aXR5QXBpIH0gZnJvbSAnLi4vYXBpL2lkZW50aXR5QXBpJztcblxuZXhwb3J0IGNsYXNzIElkZW50aXR5RGF0YSB7XG4gICAgdGl0bGU6IHN0cmluZztcbiAgICBmaXJzdE5hbWU6IHN0cmluZztcbiAgICBtaWRkbGVOYW1lOiBzdHJpbmc7XG4gICAgbGFzdE5hbWU6IHN0cmluZztcbiAgICBhZGRyZXNzMTogc3RyaW5nO1xuICAgIGFkZHJlc3MyOiBzdHJpbmc7XG4gICAgYWRkcmVzczM6IHN0cmluZztcbiAgICBjaXR5OiBzdHJpbmc7XG4gICAgc3RhdGU6IHN0cmluZztcbiAgICBwb3N0YWxDb2RlOiBzdHJpbmc7XG4gICAgY291bnRyeTogc3RyaW5nO1xuICAgIGNvbXBhbnk6IHN0cmluZztcbiAgICBlbWFpbDogc3RyaW5nO1xuICAgIHBob25lOiBzdHJpbmc7XG4gICAgc3NuOiBzdHJpbmc7XG4gICAgdXNlcm5hbWU6IHN0cmluZztcbiAgICBwYXNzcG9ydE51bWJlcjogc3RyaW5nO1xuICAgIGxpY2Vuc2VOdW1iZXI6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKGRhdGE/OiBJZGVudGl0eUFwaSkge1xuICAgICAgICBpZiAoZGF0YSA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnRpdGxlID0gZGF0YS50aXRsZTtcbiAgICAgICAgdGhpcy5maXJzdE5hbWUgPSBkYXRhLmZpcnN0TmFtZTtcbiAgICAgICAgdGhpcy5taWRkbGVOYW1lID0gZGF0YS5taWRkbGVOYW1lO1xuICAgICAgICB0aGlzLmxhc3ROYW1lID0gZGF0YS5sYXN0TmFtZTtcbiAgICAgICAgdGhpcy5hZGRyZXNzMSA9IGRhdGEuYWRkcmVzczE7XG4gICAgICAgIHRoaXMuYWRkcmVzczIgPSBkYXRhLmFkZHJlc3MyO1xuICAgICAgICB0aGlzLmFkZHJlc3MzID0gZGF0YS5hZGRyZXNzMztcbiAgICAgICAgdGhpcy5jaXR5ID0gZGF0YS5jaXR5O1xuICAgICAgICB0aGlzLnN0YXRlID0gZGF0YS5zdGF0ZTtcbiAgICAgICAgdGhpcy5wb3N0YWxDb2RlID0gZGF0YS5wb3N0YWxDb2RlO1xuICAgICAgICB0aGlzLmNvdW50cnkgPSBkYXRhLmNvdW50cnk7XG4gICAgICAgIHRoaXMuY29tcGFueSA9IGRhdGEuY29tcGFueTtcbiAgICAgICAgdGhpcy5lbWFpbCA9IGRhdGEuZW1haWw7XG4gICAgICAgIHRoaXMucGhvbmUgPSBkYXRhLnBob25lO1xuICAgICAgICB0aGlzLnNzbiA9IGRhdGEuc3NuO1xuICAgICAgICB0aGlzLnVzZXJuYW1lID0gZGF0YS51c2VybmFtZTtcbiAgICAgICAgdGhpcy5wYXNzcG9ydE51bWJlciA9IGRhdGEucGFzc3BvcnROdW1iZXI7XG4gICAgICAgIHRoaXMubGljZW5zZU51bWJlciA9IGRhdGEubGljZW5zZU51bWJlcjtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBMb2dpbkFwaSB9IGZyb20gJy4uL2FwaS9sb2dpbkFwaSc7XG5cbmltcG9ydCB7IExvZ2luVXJpRGF0YSB9IGZyb20gJy4vbG9naW5VcmlEYXRhJztcblxuZXhwb3J0IGNsYXNzIExvZ2luRGF0YSB7XG4gICAgdXJpczogTG9naW5VcmlEYXRhW107XG4gICAgdXNlcm5hbWU6IHN0cmluZztcbiAgICBwYXNzd29yZDogc3RyaW5nO1xuICAgIHBhc3N3b3JkUmV2aXNpb25EYXRlOiBzdHJpbmc7XG4gICAgdG90cDogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YT86IExvZ2luQXBpKSB7XG4gICAgICAgIGlmIChkYXRhID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudXNlcm5hbWUgPSBkYXRhLnVzZXJuYW1lO1xuICAgICAgICB0aGlzLnBhc3N3b3JkID0gZGF0YS5wYXNzd29yZDtcbiAgICAgICAgdGhpcy5wYXNzd29yZFJldmlzaW9uRGF0ZSA9IGRhdGEucGFzc3dvcmRSZXZpc2lvbkRhdGU7XG4gICAgICAgIHRoaXMudG90cCA9IGRhdGEudG90cDtcblxuICAgICAgICBpZiAoZGF0YS51cmlzKSB7XG4gICAgICAgICAgICB0aGlzLnVyaXMgPSBkYXRhLnVyaXMubWFwKCh1KSA9PiBuZXcgTG9naW5VcmlEYXRhKHUpKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7IFVyaU1hdGNoVHlwZSB9IGZyb20gJy4uLy4uL2VudW1zL3VyaU1hdGNoVHlwZSc7XG5cbmltcG9ydCB7IExvZ2luVXJpQXBpIH0gZnJvbSAnLi4vYXBpL2xvZ2luVXJpQXBpJztcblxuZXhwb3J0IGNsYXNzIExvZ2luVXJpRGF0YSB7XG4gICAgdXJpOiBzdHJpbmc7XG4gICAgbWF0Y2g6IFVyaU1hdGNoVHlwZSA9IG51bGw7XG5cbiAgICBjb25zdHJ1Y3RvcihkYXRhPzogTG9naW5VcmlBcGkpIHtcbiAgICAgICAgaWYgKGRhdGEgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudXJpID0gZGF0YS51cmk7XG4gICAgICAgIHRoaXMubWF0Y2ggPSBkYXRhLm1hdGNoO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgQnJvd3NlckFwaSB9IGZyb20gJy4uLy4uL2Jyb3dzZXIvYnJvd3NlckFwaSc7XG5cbmltcG9ydCB7IFBsYXRmb3JtVXRpbHNTZXJ2aWNlIH0gZnJvbSAnanNsaWIvYWJzdHJhY3Rpb25zL3BsYXRmb3JtVXRpbHMuc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBQb3B1cFV0aWxzU2VydmljZSB7XG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBwbGF0Zm9ybVV0aWxzU2VydmljZTogUGxhdGZvcm1VdGlsc1NlcnZpY2UpIHt9XG5cbiAgICBpblNpZGViYXIod2luOiBXaW5kb3cpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHdpbi5sb2NhdGlvbi5zZWFyY2ggIT09ICcnICYmIHdpbi5sb2NhdGlvbi5zZWFyY2guaW5kZXhPZigndWlsb2NhdGlvbj1zaWRlYmFyJykgPiAtMTtcbiAgICB9XG5cbiAgICBpblRhYih3aW46IFdpbmRvdyk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gd2luLmxvY2F0aW9uLnNlYXJjaCAhPT0gJycgJiYgd2luLmxvY2F0aW9uLnNlYXJjaC5pbmRleE9mKCd1aWxvY2F0aW9uPXRhYicpID4gLTE7XG4gICAgfVxuXG4gICAgaW5Qb3BvdXQod2luOiBXaW5kb3cpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHdpbi5sb2NhdGlvbi5zZWFyY2ggIT09ICcnICYmIHdpbi5sb2NhdGlvbi5zZWFyY2guaW5kZXhPZigndWlsb2NhdGlvbj1wb3BvdXQnKSA+IC0xO1xuICAgIH1cblxuICAgIGluUG9wdXAod2luOiBXaW5kb3cpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHdpbi5sb2NhdGlvbi5zZWFyY2ggPT09ICcnIHx8IHdpbi5sb2NhdGlvbi5zZWFyY2guaW5kZXhPZigndWlsb2NhdGlvbj0nKSA9PT0gLTEgfHxcbiAgICAgICAgICAgIHdpbi5sb2NhdGlvbi5zZWFyY2guaW5kZXhPZigndWlsb2NhdGlvbj1wb3B1cCcpID4gLTE7XG4gICAgfVxuXG4gICAgZ2V0Q29udGVudFNjcm9sbFkod2luOiBXaW5kb3cpOiBudW1iZXIge1xuICAgICAgICBjb25zdCBjb250ZW50ID0gd2luLmRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdjb250ZW50JylbMF07XG4gICAgICAgIHJldHVybiBjb250ZW50LnNjcm9sbFRvcDtcbiAgICB9XG5cbiAgICBzZXRDb250ZW50U2Nyb2xsWSh3aW46IFdpbmRvdywgc2Nyb2xsWTogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIGlmIChzY3JvbGxZICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbnRlbnQgPSB3aW4uZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2NvbnRlbnQnKVswXTtcbiAgICAgICAgICAgIGNvbnRlbnQuc2Nyb2xsVG9wID0gc2Nyb2xsWTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHBvcE91dCh3aW46IFdpbmRvdyk6IHZvaWQge1xuICAgICAgICBsZXQgaHJlZiA9IHdpbi5sb2NhdGlvbi5ocmVmO1xuXG4gICAgICAgIGlmICgodHlwZW9mIGNocm9tZSAhPT0gJ3VuZGVmaW5lZCcpICYmIGNocm9tZS53aW5kb3dzICYmIGNocm9tZS53aW5kb3dzLmNyZWF0ZSkge1xuICAgICAgICAgICAgaWYgKGhyZWYuaW5kZXhPZignP3VpbG9jYXRpb249JykgPiAtMSkge1xuICAgICAgICAgICAgICAgIGhyZWYgPSBocmVmLnJlcGxhY2UoJ3VpbG9jYXRpb249cG9wdXAnLCAndWlsb2NhdGlvbj1wb3BvdXQnKVxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgndWlsb2NhdGlvbj10YWInLCAndWlsb2NhdGlvbj1wb3BvdXQnKVxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgndWlsb2NhdGlvbj1zaWRlYmFyJywgJ3VpbG9jYXRpb249cG9wb3V0Jyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IGhyZWZQYXJ0cyA9IGhyZWYuc3BsaXQoJyMnKTtcbiAgICAgICAgICAgICAgICBocmVmID0gaHJlZlBhcnRzWzBdICsgJz91aWxvY2F0aW9uPXBvcG91dCcgKyAoaHJlZlBhcnRzLmxlbmd0aCA+IDAgPyAnIycgKyBocmVmUGFydHNbMV0gOiAnJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGJvZHlSZWN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYm9keScpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgY2hyb21lLndpbmRvd3MuY3JlYXRlKHtcbiAgICAgICAgICAgICAgICB1cmw6IGhyZWYsXG4gICAgICAgICAgICAgICAgdHlwZTogJ3BvcHVwJyxcbiAgICAgICAgICAgICAgICB3aWR0aDogTWF0aC5yb3VuZChib2R5UmVjdC53aWR0aCA/IGJvZHlSZWN0LndpZHRoICsgNjAgOiAzNzUpLFxuICAgICAgICAgICAgICAgIGhlaWdodDogTWF0aC5yb3VuZChib2R5UmVjdC5oZWlnaHQgfHwgNjAwKSxcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5pblBvcHVwKHdpbikpIHtcbiAgICAgICAgICAgICAgICBCcm93c2VyQXBpLmNsb3NlUG9wdXAod2luKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICgodHlwZW9mIGNocm9tZSAhPT0gJ3VuZGVmaW5lZCcpICYmIGNocm9tZS50YWJzICYmIGNocm9tZS50YWJzLmNyZWF0ZSkge1xuICAgICAgICAgICAgaHJlZiA9IGhyZWYucmVwbGFjZSgndWlsb2NhdGlvbj1wb3B1cCcsICd1aWxvY2F0aW9uPXRhYicpXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoJ3VpbG9jYXRpb249cG9wb3V0JywgJ3VpbG9jYXRpb249dGFiJylcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgndWlsb2NhdGlvbj1zaWRlYmFyJywgJ3VpbG9jYXRpb249dGFiJyk7XG4gICAgICAgICAgICBjaHJvbWUudGFicy5jcmVhdGUoe1xuICAgICAgICAgICAgICAgIHVybDogaHJlZixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKCh0eXBlb2Ygc2FmYXJpICE9PSAndW5kZWZpbmVkJykpIHtcbiAgICAgICAgICAgIC8vIFNhZmFyaSBjYW4ndCBvcGVuIHBvcHVwIGluIGZ1bGwgcGFnZSB0YWIgOihcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7IFBhc3N3b3JkSGlzdG9yeVJlc3BvbnNlIH0gZnJvbSAnLi4vcmVzcG9uc2UvcGFzc3dvcmRIaXN0b3J5UmVzcG9uc2UnO1xuXG5leHBvcnQgY2xhc3MgUGFzc3dvcmRIaXN0b3J5RGF0YSB7XG4gICAgcGFzc3dvcmQ6IHN0cmluZztcbiAgICBsYXN0VXNlZERhdGU6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKHJlc3BvbnNlPzogUGFzc3dvcmRIaXN0b3J5UmVzcG9uc2UpIHtcbiAgICAgICAgaWYgKHJlc3BvbnNlID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucGFzc3dvcmQgPSByZXNwb25zZS5wYXNzd29yZDtcbiAgICAgICAgdGhpcy5sYXN0VXNlZERhdGUgPSByZXNwb25zZS5sYXN0VXNlZERhdGU7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgU2VjdXJlTm90ZVR5cGUgfSBmcm9tICcuLi8uLi9lbnVtcy9zZWN1cmVOb3RlVHlwZSc7XG5cbmltcG9ydCB7IFNlY3VyZU5vdGVBcGkgfSBmcm9tICcuLi9hcGkvc2VjdXJlTm90ZUFwaSc7XG5cbmV4cG9ydCBjbGFzcyBTZWN1cmVOb3RlRGF0YSB7XG4gICAgdHlwZTogU2VjdXJlTm90ZVR5cGU7XG5cbiAgICBjb25zdHJ1Y3RvcihkYXRhPzogU2VjdXJlTm90ZUFwaSkge1xuICAgICAgICBpZiAoZGF0YSA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnR5cGUgPSBkYXRhLnR5cGU7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQXR0YWNobWVudERhdGEgfSBmcm9tICcuLi9kYXRhL2F0dGFjaG1lbnREYXRhJztcblxuaW1wb3J0IHsgQXR0YWNobWVudFZpZXcgfSBmcm9tICcuLi92aWV3L2F0dGFjaG1lbnRWaWV3JztcblxuaW1wb3J0IHsgQ2lwaGVyU3RyaW5nIH0gZnJvbSAnLi9jaXBoZXJTdHJpbmcnO1xuaW1wb3J0IERvbWFpbiBmcm9tICcuL2RvbWFpbkJhc2UnO1xuaW1wb3J0IHsgU3ltbWV0cmljQ3J5cHRvS2V5IH0gZnJvbSAnLi9zeW1tZXRyaWNDcnlwdG9LZXknO1xuXG5pbXBvcnQgeyBDcnlwdG9TZXJ2aWNlIH0gZnJvbSAnLi4vLi4vYWJzdHJhY3Rpb25zL2NyeXB0by5zZXJ2aWNlJztcblxuaW1wb3J0IHsgVXRpbHMgfSBmcm9tICcuLi8uLi9taXNjL3V0aWxzJztcblxuZXhwb3J0IGNsYXNzIEF0dGFjaG1lbnQgZXh0ZW5kcyBEb21haW4ge1xuICAgIGlkOiBzdHJpbmc7XG4gICAgdXJsOiBzdHJpbmc7XG4gICAgc2l6ZTogc3RyaW5nO1xuICAgIHNpemVOYW1lOiBzdHJpbmc7XG4gICAga2V5OiBDaXBoZXJTdHJpbmc7XG4gICAgZmlsZU5hbWU6IENpcGhlclN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKG9iaj86IEF0dGFjaG1lbnREYXRhLCBhbHJlYWR5RW5jcnlwdGVkOiBib29sZWFuID0gZmFsc2UpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgaWYgKG9iaiA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNpemUgPSBvYmouc2l6ZTtcbiAgICAgICAgdGhpcy5idWlsZERvbWFpbk1vZGVsKHRoaXMsIG9iaiwge1xuICAgICAgICAgICAgaWQ6IG51bGwsXG4gICAgICAgICAgICB1cmw6IG51bGwsXG4gICAgICAgICAgICBzaXplTmFtZTogbnVsbCxcbiAgICAgICAgICAgIGZpbGVOYW1lOiBudWxsLFxuICAgICAgICAgICAga2V5OiBudWxsLFxuICAgICAgICB9LCBhbHJlYWR5RW5jcnlwdGVkLCBbJ2lkJywgJ3VybCcsICdzaXplTmFtZSddKTtcbiAgICB9XG5cbiAgICBhc3luYyBkZWNyeXB0KG9yZ0lkOiBzdHJpbmcpOiBQcm9taXNlPEF0dGFjaG1lbnRWaWV3PiB7XG4gICAgICAgIGNvbnN0IHZpZXcgPSBhd2FpdCB0aGlzLmRlY3J5cHRPYmoobmV3IEF0dGFjaG1lbnRWaWV3KHRoaXMpLCB7XG4gICAgICAgICAgICBmaWxlTmFtZTogbnVsbCxcbiAgICAgICAgfSwgb3JnSWQpO1xuXG4gICAgICAgIGlmICh0aGlzLmtleSAhPSBudWxsKSB7XG4gICAgICAgICAgICBsZXQgY3J5cHRvU2VydmljZTogQ3J5cHRvU2VydmljZTtcbiAgICAgICAgICAgIGNvbnN0IGNvbnRhaW5lclNlcnZpY2UgPSAoVXRpbHMuZ2xvYmFsIGFzIGFueSkuYml0d2FyZGVuQ29udGFpbmVyU2VydmljZTtcbiAgICAgICAgICAgIGlmIChjb250YWluZXJTZXJ2aWNlKSB7XG4gICAgICAgICAgICAgICAgY3J5cHRvU2VydmljZSA9IGNvbnRhaW5lclNlcnZpY2UuZ2V0Q3J5cHRvU2VydmljZSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2dsb2JhbCBiaXR3YXJkZW5Db250YWluZXJTZXJ2aWNlIG5vdCBpbml0aWFsaXplZC4nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBvcmdLZXkgPSBhd2FpdCBjcnlwdG9TZXJ2aWNlLmdldE9yZ0tleShvcmdJZCk7XG4gICAgICAgICAgICAgICAgY29uc3QgZGVjVmFsdWUgPSBhd2FpdCBjcnlwdG9TZXJ2aWNlLmRlY3J5cHRUb0J5dGVzKHRoaXMua2V5LCBvcmdLZXkpO1xuICAgICAgICAgICAgICAgIHZpZXcua2V5ID0gbmV3IFN5bW1ldHJpY0NyeXB0b0tleShkZWNWYWx1ZSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgLy8gVE9ETzogZXJyb3I/XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmlldztcbiAgICB9XG5cbiAgICB0b0F0dGFjaG1lbnREYXRhKCk6IEF0dGFjaG1lbnREYXRhIHtcbiAgICAgICAgY29uc3QgYSA9IG5ldyBBdHRhY2htZW50RGF0YSgpO1xuICAgICAgICBhLnNpemUgPSB0aGlzLnNpemU7XG4gICAgICAgIHRoaXMuYnVpbGREYXRhTW9kZWwodGhpcywgYSwge1xuICAgICAgICAgICAgaWQ6IG51bGwsXG4gICAgICAgICAgICB1cmw6IG51bGwsXG4gICAgICAgICAgICBzaXplTmFtZTogbnVsbCxcbiAgICAgICAgICAgIGZpbGVOYW1lOiBudWxsLFxuICAgICAgICAgICAga2V5OiBudWxsLFxuICAgICAgICB9LCBbJ2lkJywgJ3VybCcsICdzaXplTmFtZSddKTtcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQ2FyZERhdGEgfSBmcm9tICcuLi9kYXRhL2NhcmREYXRhJztcblxuaW1wb3J0IHsgQ2lwaGVyU3RyaW5nIH0gZnJvbSAnLi9jaXBoZXJTdHJpbmcnO1xuaW1wb3J0IERvbWFpbiBmcm9tICcuL2RvbWFpbkJhc2UnO1xuXG5pbXBvcnQgeyBDYXJkVmlldyB9IGZyb20gJy4uL3ZpZXcvY2FyZFZpZXcnO1xuXG5leHBvcnQgY2xhc3MgQ2FyZCBleHRlbmRzIERvbWFpbiB7XG4gICAgY2FyZGhvbGRlck5hbWU6IENpcGhlclN0cmluZztcbiAgICBicmFuZDogQ2lwaGVyU3RyaW5nO1xuICAgIG51bWJlcjogQ2lwaGVyU3RyaW5nO1xuICAgIGV4cE1vbnRoOiBDaXBoZXJTdHJpbmc7XG4gICAgZXhwWWVhcjogQ2lwaGVyU3RyaW5nO1xuICAgIGNvZGU6IENpcGhlclN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKG9iaj86IENhcmREYXRhLCBhbHJlYWR5RW5jcnlwdGVkOiBib29sZWFuID0gZmFsc2UpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgaWYgKG9iaiA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmJ1aWxkRG9tYWluTW9kZWwodGhpcywgb2JqLCB7XG4gICAgICAgICAgICBjYXJkaG9sZGVyTmFtZTogbnVsbCxcbiAgICAgICAgICAgIGJyYW5kOiBudWxsLFxuICAgICAgICAgICAgbnVtYmVyOiBudWxsLFxuICAgICAgICAgICAgZXhwTW9udGg6IG51bGwsXG4gICAgICAgICAgICBleHBZZWFyOiBudWxsLFxuICAgICAgICAgICAgY29kZTogbnVsbCxcbiAgICAgICAgfSwgYWxyZWFkeUVuY3J5cHRlZCwgW10pO1xuICAgIH1cblxuICAgIGRlY3J5cHQob3JnSWQ6IHN0cmluZyk6IFByb21pc2U8Q2FyZFZpZXc+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVjcnlwdE9iaihuZXcgQ2FyZFZpZXcodGhpcyksIHtcbiAgICAgICAgICAgIGNhcmRob2xkZXJOYW1lOiBudWxsLFxuICAgICAgICAgICAgYnJhbmQ6IG51bGwsXG4gICAgICAgICAgICBudW1iZXI6IG51bGwsXG4gICAgICAgICAgICBleHBNb250aDogbnVsbCxcbiAgICAgICAgICAgIGV4cFllYXI6IG51bGwsXG4gICAgICAgICAgICBjb2RlOiBudWxsLFxuICAgICAgICB9LCBvcmdJZCk7XG4gICAgfVxuXG4gICAgdG9DYXJkRGF0YSgpOiBDYXJkRGF0YSB7XG4gICAgICAgIGNvbnN0IGMgPSBuZXcgQ2FyZERhdGEoKTtcbiAgICAgICAgdGhpcy5idWlsZERhdGFNb2RlbCh0aGlzLCBjLCB7XG4gICAgICAgICAgICBjYXJkaG9sZGVyTmFtZTogbnVsbCxcbiAgICAgICAgICAgIGJyYW5kOiBudWxsLFxuICAgICAgICAgICAgbnVtYmVyOiBudWxsLFxuICAgICAgICAgICAgZXhwTW9udGg6IG51bGwsXG4gICAgICAgICAgICBleHBZZWFyOiBudWxsLFxuICAgICAgICAgICAgY29kZTogbnVsbCxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBjO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IEZpZWxkVHlwZSB9IGZyb20gJy4uLy4uL2VudW1zL2ZpZWxkVHlwZSc7XG5cbmltcG9ydCB7IEZpZWxkRGF0YSB9IGZyb20gJy4uL2RhdGEvZmllbGREYXRhJztcblxuaW1wb3J0IHsgQ2lwaGVyU3RyaW5nIH0gZnJvbSAnLi9jaXBoZXJTdHJpbmcnO1xuaW1wb3J0IERvbWFpbiBmcm9tICcuL2RvbWFpbkJhc2UnO1xuXG5pbXBvcnQgeyBGaWVsZFZpZXcgfSBmcm9tICcuLi92aWV3L2ZpZWxkVmlldyc7XG5cbmV4cG9ydCBjbGFzcyBGaWVsZCBleHRlbmRzIERvbWFpbiB7XG4gICAgbmFtZTogQ2lwaGVyU3RyaW5nO1xuICAgIHZhbHVlOiBDaXBoZXJTdHJpbmc7XG4gICAgdHlwZTogRmllbGRUeXBlO1xuXG4gICAgY29uc3RydWN0b3Iob2JqPzogRmllbGREYXRhLCBhbHJlYWR5RW5jcnlwdGVkOiBib29sZWFuID0gZmFsc2UpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgaWYgKG9iaiA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnR5cGUgPSBvYmoudHlwZTtcbiAgICAgICAgdGhpcy5idWlsZERvbWFpbk1vZGVsKHRoaXMsIG9iaiwge1xuICAgICAgICAgICAgbmFtZTogbnVsbCxcbiAgICAgICAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgICB9LCBhbHJlYWR5RW5jcnlwdGVkLCBbXSk7XG4gICAgfVxuXG4gICAgZGVjcnlwdChvcmdJZDogc3RyaW5nKTogUHJvbWlzZTxGaWVsZFZpZXc+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVjcnlwdE9iaihuZXcgRmllbGRWaWV3KHRoaXMpLCB7XG4gICAgICAgICAgICBuYW1lOiBudWxsLFxuICAgICAgICAgICAgdmFsdWU6IG51bGwsXG4gICAgICAgIH0sIG9yZ0lkKTtcbiAgICB9XG5cbiAgICB0b0ZpZWxkRGF0YSgpOiBGaWVsZERhdGEge1xuICAgICAgICBjb25zdCBmID0gbmV3IEZpZWxkRGF0YSgpO1xuICAgICAgICB0aGlzLmJ1aWxkRGF0YU1vZGVsKHRoaXMsIGYsIHtcbiAgICAgICAgICAgIG5hbWU6IG51bGwsXG4gICAgICAgICAgICB2YWx1ZTogbnVsbCxcbiAgICAgICAgICAgIHR5cGU6IG51bGwsXG4gICAgICAgIH0sIFsndHlwZSddKTtcbiAgICAgICAgcmV0dXJuIGY7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgSWRlbnRpdHlEYXRhIH0gZnJvbSAnLi4vZGF0YS9pZGVudGl0eURhdGEnO1xuXG5pbXBvcnQgeyBDaXBoZXJTdHJpbmcgfSBmcm9tICcuL2NpcGhlclN0cmluZyc7XG5pbXBvcnQgRG9tYWluIGZyb20gJy4vZG9tYWluQmFzZSc7XG5cbmltcG9ydCB7IElkZW50aXR5VmlldyB9IGZyb20gJy4uL3ZpZXcvaWRlbnRpdHlWaWV3JztcblxuZXhwb3J0IGNsYXNzIElkZW50aXR5IGV4dGVuZHMgRG9tYWluIHtcbiAgICB0aXRsZTogQ2lwaGVyU3RyaW5nO1xuICAgIGZpcnN0TmFtZTogQ2lwaGVyU3RyaW5nO1xuICAgIG1pZGRsZU5hbWU6IENpcGhlclN0cmluZztcbiAgICBsYXN0TmFtZTogQ2lwaGVyU3RyaW5nO1xuICAgIGFkZHJlc3MxOiBDaXBoZXJTdHJpbmc7XG4gICAgYWRkcmVzczI6IENpcGhlclN0cmluZztcbiAgICBhZGRyZXNzMzogQ2lwaGVyU3RyaW5nO1xuICAgIGNpdHk6IENpcGhlclN0cmluZztcbiAgICBzdGF0ZTogQ2lwaGVyU3RyaW5nO1xuICAgIHBvc3RhbENvZGU6IENpcGhlclN0cmluZztcbiAgICBjb3VudHJ5OiBDaXBoZXJTdHJpbmc7XG4gICAgY29tcGFueTogQ2lwaGVyU3RyaW5nO1xuICAgIGVtYWlsOiBDaXBoZXJTdHJpbmc7XG4gICAgcGhvbmU6IENpcGhlclN0cmluZztcbiAgICBzc246IENpcGhlclN0cmluZztcbiAgICB1c2VybmFtZTogQ2lwaGVyU3RyaW5nO1xuICAgIHBhc3Nwb3J0TnVtYmVyOiBDaXBoZXJTdHJpbmc7XG4gICAgbGljZW5zZU51bWJlcjogQ2lwaGVyU3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3Iob2JqPzogSWRlbnRpdHlEYXRhLCBhbHJlYWR5RW5jcnlwdGVkOiBib29sZWFuID0gZmFsc2UpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgaWYgKG9iaiA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmJ1aWxkRG9tYWluTW9kZWwodGhpcywgb2JqLCB7XG4gICAgICAgICAgICB0aXRsZTogbnVsbCxcbiAgICAgICAgICAgIGZpcnN0TmFtZTogbnVsbCxcbiAgICAgICAgICAgIG1pZGRsZU5hbWU6IG51bGwsXG4gICAgICAgICAgICBsYXN0TmFtZTogbnVsbCxcbiAgICAgICAgICAgIGFkZHJlc3MxOiBudWxsLFxuICAgICAgICAgICAgYWRkcmVzczI6IG51bGwsXG4gICAgICAgICAgICBhZGRyZXNzMzogbnVsbCxcbiAgICAgICAgICAgIGNpdHk6IG51bGwsXG4gICAgICAgICAgICBzdGF0ZTogbnVsbCxcbiAgICAgICAgICAgIHBvc3RhbENvZGU6IG51bGwsXG4gICAgICAgICAgICBjb3VudHJ5OiBudWxsLFxuICAgICAgICAgICAgY29tcGFueTogbnVsbCxcbiAgICAgICAgICAgIGVtYWlsOiBudWxsLFxuICAgICAgICAgICAgcGhvbmU6IG51bGwsXG4gICAgICAgICAgICBzc246IG51bGwsXG4gICAgICAgICAgICB1c2VybmFtZTogbnVsbCxcbiAgICAgICAgICAgIHBhc3Nwb3J0TnVtYmVyOiBudWxsLFxuICAgICAgICAgICAgbGljZW5zZU51bWJlcjogbnVsbCxcbiAgICAgICAgfSwgYWxyZWFkeUVuY3J5cHRlZCwgW10pO1xuICAgIH1cblxuICAgIGRlY3J5cHQob3JnSWQ6IHN0cmluZyk6IFByb21pc2U8SWRlbnRpdHlWaWV3PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmRlY3J5cHRPYmoobmV3IElkZW50aXR5Vmlldyh0aGlzKSwge1xuICAgICAgICAgICAgdGl0bGU6IG51bGwsXG4gICAgICAgICAgICBmaXJzdE5hbWU6IG51bGwsXG4gICAgICAgICAgICBtaWRkbGVOYW1lOiBudWxsLFxuICAgICAgICAgICAgbGFzdE5hbWU6IG51bGwsXG4gICAgICAgICAgICBhZGRyZXNzMTogbnVsbCxcbiAgICAgICAgICAgIGFkZHJlc3MyOiBudWxsLFxuICAgICAgICAgICAgYWRkcmVzczM6IG51bGwsXG4gICAgICAgICAgICBjaXR5OiBudWxsLFxuICAgICAgICAgICAgc3RhdGU6IG51bGwsXG4gICAgICAgICAgICBwb3N0YWxDb2RlOiBudWxsLFxuICAgICAgICAgICAgY291bnRyeTogbnVsbCxcbiAgICAgICAgICAgIGNvbXBhbnk6IG51bGwsXG4gICAgICAgICAgICBlbWFpbDogbnVsbCxcbiAgICAgICAgICAgIHBob25lOiBudWxsLFxuICAgICAgICAgICAgc3NuOiBudWxsLFxuICAgICAgICAgICAgdXNlcm5hbWU6IG51bGwsXG4gICAgICAgICAgICBwYXNzcG9ydE51bWJlcjogbnVsbCxcbiAgICAgICAgICAgIGxpY2Vuc2VOdW1iZXI6IG51bGwsXG4gICAgICAgIH0sIG9yZ0lkKTtcbiAgICB9XG5cbiAgICB0b0lkZW50aXR5RGF0YSgpOiBJZGVudGl0eURhdGEge1xuICAgICAgICBjb25zdCBpID0gbmV3IElkZW50aXR5RGF0YSgpO1xuICAgICAgICB0aGlzLmJ1aWxkRGF0YU1vZGVsKHRoaXMsIGksIHtcbiAgICAgICAgICAgIHRpdGxlOiBudWxsLFxuICAgICAgICAgICAgZmlyc3ROYW1lOiBudWxsLFxuICAgICAgICAgICAgbWlkZGxlTmFtZTogbnVsbCxcbiAgICAgICAgICAgIGxhc3ROYW1lOiBudWxsLFxuICAgICAgICAgICAgYWRkcmVzczE6IG51bGwsXG4gICAgICAgICAgICBhZGRyZXNzMjogbnVsbCxcbiAgICAgICAgICAgIGFkZHJlc3MzOiBudWxsLFxuICAgICAgICAgICAgY2l0eTogbnVsbCxcbiAgICAgICAgICAgIHN0YXRlOiBudWxsLFxuICAgICAgICAgICAgcG9zdGFsQ29kZTogbnVsbCxcbiAgICAgICAgICAgIGNvdW50cnk6IG51bGwsXG4gICAgICAgICAgICBjb21wYW55OiBudWxsLFxuICAgICAgICAgICAgZW1haWw6IG51bGwsXG4gICAgICAgICAgICBwaG9uZTogbnVsbCxcbiAgICAgICAgICAgIHNzbjogbnVsbCxcbiAgICAgICAgICAgIHVzZXJuYW1lOiBudWxsLFxuICAgICAgICAgICAgcGFzc3BvcnROdW1iZXI6IG51bGwsXG4gICAgICAgICAgICBsaWNlbnNlTnVtYmVyOiBudWxsLFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgTG9naW5VcmkgfSBmcm9tICcuL2xvZ2luVXJpJztcblxuaW1wb3J0IHsgTG9naW5EYXRhIH0gZnJvbSAnLi4vZGF0YS9sb2dpbkRhdGEnO1xuXG5pbXBvcnQgeyBMb2dpblZpZXcgfSBmcm9tICcuLi92aWV3L2xvZ2luVmlldyc7XG5cbmltcG9ydCB7IENpcGhlclN0cmluZyB9IGZyb20gJy4vY2lwaGVyU3RyaW5nJztcbmltcG9ydCBEb21haW4gZnJvbSAnLi9kb21haW5CYXNlJztcblxuZXhwb3J0IGNsYXNzIExvZ2luIGV4dGVuZHMgRG9tYWluIHtcbiAgICB1cmlzOiBMb2dpblVyaVtdO1xuICAgIHVzZXJuYW1lOiBDaXBoZXJTdHJpbmc7XG4gICAgcGFzc3dvcmQ6IENpcGhlclN0cmluZztcbiAgICBwYXNzd29yZFJldmlzaW9uRGF0ZT86IERhdGU7XG4gICAgdG90cDogQ2lwaGVyU3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3Iob2JqPzogTG9naW5EYXRhLCBhbHJlYWR5RW5jcnlwdGVkOiBib29sZWFuID0gZmFsc2UpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgaWYgKG9iaiA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnBhc3N3b3JkUmV2aXNpb25EYXRlID0gb2JqLnBhc3N3b3JkUmV2aXNpb25EYXRlICE9IG51bGwgPyBuZXcgRGF0ZShvYmoucGFzc3dvcmRSZXZpc2lvbkRhdGUpIDogbnVsbDtcbiAgICAgICAgdGhpcy5idWlsZERvbWFpbk1vZGVsKHRoaXMsIG9iaiwge1xuICAgICAgICAgICAgdXNlcm5hbWU6IG51bGwsXG4gICAgICAgICAgICBwYXNzd29yZDogbnVsbCxcbiAgICAgICAgICAgIHRvdHA6IG51bGwsXG4gICAgICAgIH0sIGFscmVhZHlFbmNyeXB0ZWQsIFtdKTtcblxuICAgICAgICBpZiAob2JqLnVyaXMpIHtcbiAgICAgICAgICAgIHRoaXMudXJpcyA9IFtdO1xuICAgICAgICAgICAgb2JqLnVyaXMuZm9yRWFjaCgodSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMudXJpcy5wdXNoKG5ldyBMb2dpblVyaSh1LCBhbHJlYWR5RW5jcnlwdGVkKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIGRlY3J5cHQob3JnSWQ6IHN0cmluZyk6IFByb21pc2U8TG9naW5WaWV3PiB7XG4gICAgICAgIGNvbnN0IHZpZXcgPSBhd2FpdCB0aGlzLmRlY3J5cHRPYmoobmV3IExvZ2luVmlldyh0aGlzKSwge1xuICAgICAgICAgICAgdXNlcm5hbWU6IG51bGwsXG4gICAgICAgICAgICBwYXNzd29yZDogbnVsbCxcbiAgICAgICAgICAgIHRvdHA6IG51bGwsXG4gICAgICAgIH0sIG9yZ0lkKTtcblxuICAgICAgICBpZiAodGhpcy51cmlzICE9IG51bGwpIHtcbiAgICAgICAgICAgIHZpZXcudXJpcyA9IFtdO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnVyaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCB1cmkgPSBhd2FpdCB0aGlzLnVyaXNbaV0uZGVjcnlwdChvcmdJZCk7XG4gICAgICAgICAgICAgICAgdmlldy51cmlzLnB1c2godXJpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB2aWV3O1xuICAgIH1cblxuICAgIHRvTG9naW5EYXRhKCk6IExvZ2luRGF0YSB7XG4gICAgICAgIGNvbnN0IGwgPSBuZXcgTG9naW5EYXRhKCk7XG4gICAgICAgIGwucGFzc3dvcmRSZXZpc2lvbkRhdGUgPSB0aGlzLnBhc3N3b3JkUmV2aXNpb25EYXRlICE9IG51bGwgPyB0aGlzLnBhc3N3b3JkUmV2aXNpb25EYXRlLnRvSVNPU3RyaW5nKCkgOiBudWxsO1xuICAgICAgICB0aGlzLmJ1aWxkRGF0YU1vZGVsKHRoaXMsIGwsIHtcbiAgICAgICAgICAgIHVzZXJuYW1lOiBudWxsLFxuICAgICAgICAgICAgcGFzc3dvcmQ6IG51bGwsXG4gICAgICAgICAgICB0b3RwOiBudWxsLFxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAodGhpcy51cmlzICE9IG51bGwgJiYgdGhpcy51cmlzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGwudXJpcyA9IFtdO1xuICAgICAgICAgICAgdGhpcy51cmlzLmZvckVhY2goKHUpID0+IHtcbiAgICAgICAgICAgICAgICBsLnVyaXMucHVzaCh1LnRvTG9naW5VcmlEYXRhKCkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbDtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBVcmlNYXRjaFR5cGUgfSBmcm9tICcuLi8uLi9lbnVtcy91cmlNYXRjaFR5cGUnO1xuXG5pbXBvcnQgeyBMb2dpblVyaURhdGEgfSBmcm9tICcuLi9kYXRhL2xvZ2luVXJpRGF0YSc7XG5cbmltcG9ydCB7IExvZ2luVXJpVmlldyB9IGZyb20gJy4uL3ZpZXcvbG9naW5VcmlWaWV3JztcblxuaW1wb3J0IHsgQ2lwaGVyU3RyaW5nIH0gZnJvbSAnLi9jaXBoZXJTdHJpbmcnO1xuaW1wb3J0IERvbWFpbiBmcm9tICcuL2RvbWFpbkJhc2UnO1xuXG5leHBvcnQgY2xhc3MgTG9naW5VcmkgZXh0ZW5kcyBEb21haW4ge1xuICAgIHVyaTogQ2lwaGVyU3RyaW5nO1xuICAgIG1hdGNoOiBVcmlNYXRjaFR5cGU7XG5cbiAgICBjb25zdHJ1Y3RvcihvYmo/OiBMb2dpblVyaURhdGEsIGFscmVhZHlFbmNyeXB0ZWQ6IGJvb2xlYW4gPSBmYWxzZSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBpZiAob2JqID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubWF0Y2ggPSBvYmoubWF0Y2g7XG4gICAgICAgIHRoaXMuYnVpbGREb21haW5Nb2RlbCh0aGlzLCBvYmosIHtcbiAgICAgICAgICAgIHVyaTogbnVsbCxcbiAgICAgICAgfSwgYWxyZWFkeUVuY3J5cHRlZCwgW10pO1xuICAgIH1cblxuICAgIGRlY3J5cHQob3JnSWQ6IHN0cmluZyk6IFByb21pc2U8TG9naW5VcmlWaWV3PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmRlY3J5cHRPYmoobmV3IExvZ2luVXJpVmlldyh0aGlzKSwge1xuICAgICAgICAgICAgdXJpOiBudWxsLFxuICAgICAgICB9LCBvcmdJZCk7XG4gICAgfVxuXG4gICAgdG9Mb2dpblVyaURhdGEoKTogTG9naW5VcmlEYXRhIHtcbiAgICAgICAgY29uc3QgdSA9IG5ldyBMb2dpblVyaURhdGEoKTtcbiAgICAgICAgdGhpcy5idWlsZERhdGFNb2RlbCh0aGlzLCB1LCB7XG4gICAgICAgICAgICB1cmk6IG51bGwsXG4gICAgICAgIH0sIFsnbWF0Y2gnXSk7XG4gICAgICAgIHJldHVybiB1O1xuICAgIH1cbn1cbiIsImltcG9ydCB7IFBhc3N3b3JkSGlzdG9yeURhdGEgfSBmcm9tICcuLi9kYXRhL3Bhc3N3b3JkSGlzdG9yeURhdGEnO1xuXG5pbXBvcnQgeyBDaXBoZXJTdHJpbmcgfSBmcm9tICcuL2NpcGhlclN0cmluZyc7XG5pbXBvcnQgRG9tYWluIGZyb20gJy4vZG9tYWluQmFzZSc7XG5cbmltcG9ydCB7IFBhc3N3b3JkSGlzdG9yeVZpZXcgfSBmcm9tICcuLi92aWV3L3Bhc3N3b3JkSGlzdG9yeVZpZXcnO1xuXG5leHBvcnQgY2xhc3MgUGFzc3dvcmQgZXh0ZW5kcyBEb21haW4ge1xuICAgIHBhc3N3b3JkOiBDaXBoZXJTdHJpbmc7XG4gICAgbGFzdFVzZWREYXRlOiBEYXRlO1xuXG4gICAgY29uc3RydWN0b3Iob2JqPzogUGFzc3dvcmRIaXN0b3J5RGF0YSwgYWxyZWFkeUVuY3J5cHRlZDogYm9vbGVhbiA9IGZhbHNlKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIGlmIChvYmogPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5idWlsZERvbWFpbk1vZGVsKHRoaXMsIG9iaiwge1xuICAgICAgICAgICAgcGFzc3dvcmQ6IG51bGwsXG4gICAgICAgIH0sIGFscmVhZHlFbmNyeXB0ZWQpO1xuICAgICAgICB0aGlzLmxhc3RVc2VkRGF0ZSA9IG5ldyBEYXRlKG9iai5sYXN0VXNlZERhdGUpO1xuICAgIH1cblxuICAgIGRlY3J5cHQob3JnSWQ6IHN0cmluZyk6IFByb21pc2U8UGFzc3dvcmRIaXN0b3J5Vmlldz4ge1xuICAgICAgICAgcmV0dXJuIHRoaXMuZGVjcnlwdE9iaihuZXcgUGFzc3dvcmRIaXN0b3J5Vmlldyh0aGlzKSwge1xuICAgICAgICAgICAgcGFzc3dvcmQ6IG51bGwsXG4gICAgICAgIH0sIG9yZ0lkKTtcbiAgICB9XG5cbiAgICB0b1Bhc3N3b3JkSGlzdG9yeURhdGEoKTogUGFzc3dvcmRIaXN0b3J5RGF0YSB7XG4gICAgICAgIGNvbnN0IHBoID0gbmV3IFBhc3N3b3JkSGlzdG9yeURhdGEoKTtcbiAgICAgICAgcGgubGFzdFVzZWREYXRlID0gdGhpcy5sYXN0VXNlZERhdGUudG9JU09TdHJpbmcoKTtcbiAgICAgICAgdGhpcy5idWlsZERhdGFNb2RlbCh0aGlzLCBwaCwge1xuICAgICAgICAgICAgcGFzc3dvcmQ6IG51bGwsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcGg7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgU2VjdXJlTm90ZVR5cGUgfSBmcm9tICcuLi8uLi9lbnVtcy9zZWN1cmVOb3RlVHlwZSc7XG5cbmltcG9ydCB7IFNlY3VyZU5vdGVEYXRhIH0gZnJvbSAnLi4vZGF0YS9zZWN1cmVOb3RlRGF0YSc7XG5cbmltcG9ydCBEb21haW4gZnJvbSAnLi9kb21haW5CYXNlJztcblxuaW1wb3J0IHsgU2VjdXJlTm90ZVZpZXcgfSBmcm9tICcuLi92aWV3L3NlY3VyZU5vdGVWaWV3JztcblxuZXhwb3J0IGNsYXNzIFNlY3VyZU5vdGUgZXh0ZW5kcyBEb21haW4ge1xuICAgIHR5cGU6IFNlY3VyZU5vdGVUeXBlO1xuXG4gICAgY29uc3RydWN0b3Iob2JqPzogU2VjdXJlTm90ZURhdGEsIGFscmVhZHlFbmNyeXB0ZWQ6IGJvb2xlYW4gPSBmYWxzZSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBpZiAob2JqID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudHlwZSA9IG9iai50eXBlO1xuICAgIH1cblxuICAgIGRlY3J5cHQob3JnSWQ6IHN0cmluZyk6IFByb21pc2U8U2VjdXJlTm90ZVZpZXc+IHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXcgU2VjdXJlTm90ZVZpZXcodGhpcykpO1xuICAgIH1cblxuICAgIHRvU2VjdXJlTm90ZURhdGEoKTogU2VjdXJlTm90ZURhdGEge1xuICAgICAgICBjb25zdCBuID0gbmV3IFNlY3VyZU5vdGVEYXRhKCk7XG4gICAgICAgIG4udHlwZSA9IHRoaXMudHlwZTtcbiAgICAgICAgcmV0dXJuIG47XG4gICAgfVxufVxuIiwiZXhwb3J0IGVudW0gVXJpTWF0Y2hUeXBlIHtcbiAgICBEb21haW4gPSAwLFxuICAgIEhvc3QgPSAxLFxuICAgIFN0YXJ0c1dpdGggPSAyLFxuICAgIEV4YWN0ID0gMyxcbiAgICBSZWd1bGFyRXhwcmVzc2lvbiA9IDQsXG4gICAgTmV2ZXIgPSA1LFxufVxuIiwiaW1wb3J0IHsgU2VuZEZpbGVBcGkgfSBmcm9tICcuLi9hcGkvc2VuZEZpbGVBcGknO1xuXG5leHBvcnQgY2xhc3MgU2VuZEZpbGVEYXRhIHtcbiAgICBpZDogc3RyaW5nO1xuICAgIHVybDogc3RyaW5nO1xuICAgIGZpbGVOYW1lOiBzdHJpbmc7XG4gICAga2V5OiBzdHJpbmc7XG4gICAgc2l6ZTogc3RyaW5nO1xuICAgIHNpemVOYW1lOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihkYXRhPzogU2VuZEZpbGVBcGkpIHtcbiAgICAgICAgaWYgKGRhdGEgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5pZCA9IGRhdGEuaWQ7XG4gICAgICAgIHRoaXMudXJsID0gZGF0YS51cmw7XG4gICAgICAgIHRoaXMuZmlsZU5hbWUgPSBkYXRhLmZpbGVOYW1lO1xuICAgICAgICB0aGlzLmtleSA9IGRhdGEua2V5O1xuICAgICAgICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gICAgICAgIHRoaXMuc2l6ZU5hbWUgPSBkYXRhLnNpemVOYW1lO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IFNlbmRUZXh0QXBpIH0gZnJvbSAnLi4vYXBpL3NlbmRUZXh0QXBpJztcblxuZXhwb3J0IGNsYXNzIFNlbmRUZXh0RGF0YSB7XG4gICAgdGV4dDogc3RyaW5nO1xuICAgIGhpZGRlbjogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKGRhdGE/OiBTZW5kVGV4dEFwaSkge1xuICAgICAgICBpZiAoZGF0YSA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnRleHQgPSBkYXRhLnRleHQ7XG4gICAgICAgIHRoaXMuaGlkZGVuID0gZGF0YS5oaWRkZW47XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgVmlldyB9IGZyb20gJy4vdmlldyc7XG5cbmltcG9ydCB7IFNlbmRGaWxlIH0gZnJvbSAnLi4vZG9tYWluL3NlbmRGaWxlJztcblxuZXhwb3J0IGNsYXNzIFNlbmRGaWxlVmlldyBpbXBsZW1lbnRzIFZpZXcge1xuICAgIGlkOiBzdHJpbmcgPSBudWxsO1xuICAgIHVybDogc3RyaW5nID0gbnVsbDtcbiAgICBzaXplOiBzdHJpbmcgPSBudWxsO1xuICAgIHNpemVOYW1lOiBzdHJpbmcgPSBudWxsO1xuICAgIGZpbGVOYW1lOiBzdHJpbmcgPSBudWxsO1xuXG4gICAgY29uc3RydWN0b3IoZj86IFNlbmRGaWxlKSB7XG4gICAgICAgIGlmICghZikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5pZCA9IGYuaWQ7XG4gICAgICAgIHRoaXMudXJsID0gZi51cmw7XG4gICAgICAgIHRoaXMuc2l6ZSA9IGYuc2l6ZTtcbiAgICAgICAgdGhpcy5zaXplTmFtZSA9IGYuc2l6ZU5hbWU7XG4gICAgfVxuXG4gICAgZ2V0IGZpbGVTaXplKCk6IG51bWJlciB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zaXplICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQodGhpcy5zaXplLCBudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCB7IH1cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgVmlldyB9IGZyb20gJy4vdmlldyc7XG5cbmltcG9ydCB7IFNlbmRUZXh0IH0gZnJvbSAnLi4vZG9tYWluL3NlbmRUZXh0JztcblxuZXhwb3J0IGNsYXNzIFNlbmRUZXh0VmlldyBpbXBsZW1lbnRzIFZpZXcge1xuICAgIHRleHQ6IHN0cmluZyA9IG51bGw7XG4gICAgaGlkZGVuOiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IodD86IFNlbmRUZXh0KSB7XG4gICAgICAgIGlmICghdCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5oaWRkZW4gPSB0LmhpZGRlbjtcbiAgICB9XG5cbiAgICBnZXQgbWFza2VkVGV4dCgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy50ZXh0ICE9IG51bGwgPyAn4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCiJyA6IG51bGw7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQ2lwaGVyU3RyaW5nIH0gZnJvbSAnLi9jaXBoZXJTdHJpbmcnO1xuaW1wb3J0IERvbWFpbiBmcm9tICcuL2RvbWFpbkJhc2UnO1xuaW1wb3J0IHsgU3ltbWV0cmljQ3J5cHRvS2V5IH0gZnJvbSAnLi9zeW1tZXRyaWNDcnlwdG9LZXknO1xuXG5pbXBvcnQgeyBTZW5kRmlsZURhdGEgfSBmcm9tICcuLi9kYXRhL3NlbmRGaWxlRGF0YSc7XG5cbmltcG9ydCB7IFNlbmRGaWxlVmlldyB9IGZyb20gJy4uL3ZpZXcvc2VuZEZpbGVWaWV3JztcblxuZXhwb3J0IGNsYXNzIFNlbmRGaWxlIGV4dGVuZHMgRG9tYWluIHtcbiAgICBpZDogc3RyaW5nO1xuICAgIHVybDogc3RyaW5nO1xuICAgIHNpemU6IHN0cmluZztcbiAgICBzaXplTmFtZTogc3RyaW5nO1xuICAgIGZpbGVOYW1lOiBDaXBoZXJTdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihvYmo/OiBTZW5kRmlsZURhdGEsIGFscmVhZHlFbmNyeXB0ZWQ6IGJvb2xlYW4gPSBmYWxzZSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBpZiAob2JqID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2l6ZSA9IG9iai5zaXplO1xuICAgICAgICB0aGlzLmJ1aWxkRG9tYWluTW9kZWwodGhpcywgb2JqLCB7XG4gICAgICAgICAgICBpZDogbnVsbCxcbiAgICAgICAgICAgIHVybDogbnVsbCxcbiAgICAgICAgICAgIHNpemVOYW1lOiBudWxsLFxuICAgICAgICAgICAgZmlsZU5hbWU6IG51bGwsXG4gICAgICAgIH0sIGFscmVhZHlFbmNyeXB0ZWQsIFsnaWQnLCAndXJsJywgJ3NpemVOYW1lJ10pO1xuICAgIH1cblxuICAgIGFzeW5jIGRlY3J5cHQoa2V5OiBTeW1tZXRyaWNDcnlwdG9LZXkpOiBQcm9taXNlPFNlbmRGaWxlVmlldz4ge1xuICAgICAgICBjb25zdCB2aWV3ID0gYXdhaXQgdGhpcy5kZWNyeXB0T2JqKG5ldyBTZW5kRmlsZVZpZXcodGhpcyksIHtcbiAgICAgICAgICAgIGZpbGVOYW1lOiBudWxsLFxuICAgICAgICB9LCBudWxsLCBrZXkpO1xuICAgICAgICByZXR1cm4gdmlldztcbiAgICB9XG5cbiAgICB0b1NlbmRGaWxlRGF0YSgpOiBTZW5kRmlsZURhdGEge1xuICAgICAgICBjb25zdCBmID0gbmV3IFNlbmRGaWxlRGF0YSgpO1xuICAgICAgICBmLnNpemUgPSB0aGlzLnNpemU7XG4gICAgICAgIHRoaXMuYnVpbGREYXRhTW9kZWwodGhpcywgZiwge1xuICAgICAgICAgICAgaWQ6IG51bGwsXG4gICAgICAgICAgICB1cmw6IG51bGwsXG4gICAgICAgICAgICBzaXplTmFtZTogbnVsbCxcbiAgICAgICAgICAgIGZpbGVOYW1lOiBudWxsLFxuICAgICAgICB9LCBbJ2lkJywgJ3VybCcsICdzaXplTmFtZSddKTtcbiAgICAgICAgcmV0dXJuIGY7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQ2lwaGVyU3RyaW5nIH0gZnJvbSAnLi9jaXBoZXJTdHJpbmcnO1xuaW1wb3J0IERvbWFpbiBmcm9tICcuL2RvbWFpbkJhc2UnO1xuaW1wb3J0IHsgU3ltbWV0cmljQ3J5cHRvS2V5IH0gZnJvbSAnLi9zeW1tZXRyaWNDcnlwdG9LZXknO1xuXG5pbXBvcnQgeyBTZW5kVGV4dERhdGEgfSBmcm9tICcuLi9kYXRhL3NlbmRUZXh0RGF0YSc7XG5cbmltcG9ydCB7IFNlbmRUZXh0VmlldyB9IGZyb20gJy4uL3ZpZXcvc2VuZFRleHRWaWV3JztcblxuZXhwb3J0IGNsYXNzIFNlbmRUZXh0IGV4dGVuZHMgRG9tYWluIHtcbiAgICB0ZXh0OiBDaXBoZXJTdHJpbmc7XG4gICAgaGlkZGVuOiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3Iob2JqPzogU2VuZFRleHREYXRhLCBhbHJlYWR5RW5jcnlwdGVkOiBib29sZWFuID0gZmFsc2UpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgaWYgKG9iaiA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmhpZGRlbiA9IG9iai5oaWRkZW47XG4gICAgICAgIHRoaXMuYnVpbGREb21haW5Nb2RlbCh0aGlzLCBvYmosIHtcbiAgICAgICAgICAgIHRleHQ6IG51bGwsXG4gICAgICAgIH0sIGFscmVhZHlFbmNyeXB0ZWQsIFtdKTtcbiAgICB9XG5cbiAgICBkZWNyeXB0KGtleTogU3ltbWV0cmljQ3J5cHRvS2V5KTogUHJvbWlzZTxTZW5kVGV4dFZpZXc+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVjcnlwdE9iaihuZXcgU2VuZFRleHRWaWV3KHRoaXMpLCB7XG4gICAgICAgICAgICB0ZXh0OiBudWxsLFxuICAgICAgICB9LCBudWxsLCBrZXkpO1xuICAgIH1cblxuICAgIHRvU2VuZFRleHREYXRhKCk6IFNlbmRUZXh0RGF0YSB7XG4gICAgICAgIGNvbnN0IHQgPSBuZXcgU2VuZFRleHREYXRhKCk7XG4gICAgICAgIHRoaXMuYnVpbGREYXRhTW9kZWwodGhpcywgdCwge1xuICAgICAgICAgICAgdGV4dDogbnVsbCxcbiAgICAgICAgICAgIGhpZGRlbjogbnVsbCxcbiAgICAgICAgfSwgWydoaWRkZW4nXSk7XG4gICAgICAgIHJldHVybiB0O1xuICAgIH1cbn1cbiIsImltcG9ydCB7IFNlbmRUeXBlIH0gZnJvbSAnLi4vLi4vZW51bXMvc2VuZFR5cGUnO1xuaW1wb3J0IHsgVXRpbHMgfSBmcm9tICcuLi8uLi9taXNjL3V0aWxzJztcblxuaW1wb3J0IHsgU2VuZCB9IGZyb20gJy4uL2RvbWFpbi9zZW5kJztcbmltcG9ydCB7IFN5bW1ldHJpY0NyeXB0b0tleSB9IGZyb20gJy4uL2RvbWFpbi9zeW1tZXRyaWNDcnlwdG9LZXknO1xuXG5pbXBvcnQgeyBTZW5kRmlsZVZpZXcgfSBmcm9tICcuL3NlbmRGaWxlVmlldyc7XG5pbXBvcnQgeyBTZW5kVGV4dFZpZXcgfSBmcm9tICcuL3NlbmRUZXh0Vmlldyc7XG5pbXBvcnQgeyBWaWV3IH0gZnJvbSAnLi92aWV3JztcblxuZXhwb3J0IGNsYXNzIFNlbmRWaWV3IGltcGxlbWVudHMgVmlldyB7XG4gICAgaWQ6IHN0cmluZyA9IG51bGw7XG4gICAgYWNjZXNzSWQ6IHN0cmluZyA9IG51bGw7XG4gICAgbmFtZTogc3RyaW5nID0gbnVsbDtcbiAgICBub3Rlczogc3RyaW5nID0gbnVsbDtcbiAgICBrZXk6IEFycmF5QnVmZmVyO1xuICAgIGNyeXB0b0tleTogU3ltbWV0cmljQ3J5cHRvS2V5O1xuICAgIHR5cGU6IFNlbmRUeXBlID0gbnVsbDtcbiAgICB0ZXh0ID0gbmV3IFNlbmRUZXh0VmlldygpO1xuICAgIGZpbGUgPSBuZXcgU2VuZEZpbGVWaWV3KCk7XG4gICAgbWF4QWNjZXNzQ291bnQ/OiBudW1iZXIgPSBudWxsO1xuICAgIGFjY2Vzc0NvdW50OiBudW1iZXIgPSAwO1xuICAgIHJldmlzaW9uRGF0ZTogRGF0ZSA9IG51bGw7XG4gICAgZGVsZXRpb25EYXRlOiBEYXRlID0gbnVsbDtcbiAgICBleHBpcmF0aW9uRGF0ZTogRGF0ZSA9IG51bGw7XG4gICAgcGFzc3dvcmQ6IHN0cmluZyA9IG51bGw7XG4gICAgZGlzYWJsZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIGNvbnN0cnVjdG9yKHM/OiBTZW5kKSB7XG4gICAgICAgIGlmICghcykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5pZCA9IHMuaWQ7XG4gICAgICAgIHRoaXMuYWNjZXNzSWQgPSBzLmFjY2Vzc0lkO1xuICAgICAgICB0aGlzLnR5cGUgPSBzLnR5cGU7XG4gICAgICAgIHRoaXMubWF4QWNjZXNzQ291bnQgPSBzLm1heEFjY2Vzc0NvdW50O1xuICAgICAgICB0aGlzLmFjY2Vzc0NvdW50ID0gcy5hY2Nlc3NDb3VudDtcbiAgICAgICAgdGhpcy5yZXZpc2lvbkRhdGUgPSBzLnJldmlzaW9uRGF0ZTtcbiAgICAgICAgdGhpcy5kZWxldGlvbkRhdGUgPSBzLmRlbGV0aW9uRGF0ZTtcbiAgICAgICAgdGhpcy5leHBpcmF0aW9uRGF0ZSA9IHMuZXhwaXJhdGlvbkRhdGU7XG4gICAgICAgIHRoaXMuZGlzYWJsZWQgPSBzLmRpc2FibGVkO1xuICAgICAgICB0aGlzLnBhc3N3b3JkID0gcy5wYXNzd29yZDtcbiAgICB9XG5cbiAgICBnZXQgdXJsQjY0S2V5KCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBVdGlscy5mcm9tQnVmZmVyVG9VcmxCNjQodGhpcy5rZXkpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IENyeXB0b1NlcnZpY2UgfSBmcm9tICcuLi8uLi9hYnN0cmFjdGlvbnMvY3J5cHRvLnNlcnZpY2UnO1xuXG5pbXBvcnQgeyBTZW5kVHlwZSB9IGZyb20gJy4uLy4uL2VudW1zL3NlbmRUeXBlJztcblxuaW1wb3J0IHsgVXRpbHMgfSBmcm9tICcuLi8uLi9taXNjL3V0aWxzJztcblxuaW1wb3J0IHsgU2VuZERhdGEgfSBmcm9tICcuLi9kYXRhL3NlbmREYXRhJztcblxuaW1wb3J0IHsgU2VuZFZpZXcgfSBmcm9tICcuLi92aWV3L3NlbmRWaWV3JztcblxuaW1wb3J0IHsgQ2lwaGVyU3RyaW5nIH0gZnJvbSAnLi9jaXBoZXJTdHJpbmcnO1xuaW1wb3J0IERvbWFpbiBmcm9tICcuL2RvbWFpbkJhc2UnO1xuaW1wb3J0IHsgU2VuZEZpbGUgfSBmcm9tICcuL3NlbmRGaWxlJztcbmltcG9ydCB7IFNlbmRUZXh0IH0gZnJvbSAnLi9zZW5kVGV4dCc7XG5cbmV4cG9ydCBjbGFzcyBTZW5kIGV4dGVuZHMgRG9tYWluIHtcbiAgICBpZDogc3RyaW5nO1xuICAgIGFjY2Vzc0lkOiBzdHJpbmc7XG4gICAgdXNlcklkOiBzdHJpbmc7XG4gICAgdHlwZTogU2VuZFR5cGU7XG4gICAgbmFtZTogQ2lwaGVyU3RyaW5nO1xuICAgIG5vdGVzOiBDaXBoZXJTdHJpbmc7XG4gICAgZmlsZTogU2VuZEZpbGU7XG4gICAgdGV4dDogU2VuZFRleHQ7XG4gICAga2V5OiBDaXBoZXJTdHJpbmc7XG4gICAgbWF4QWNjZXNzQ291bnQ/OiBudW1iZXI7XG4gICAgYWNjZXNzQ291bnQ6IG51bWJlcjtcbiAgICByZXZpc2lvbkRhdGU6IERhdGU7XG4gICAgZXhwaXJhdGlvbkRhdGU6IERhdGU7XG4gICAgZGVsZXRpb25EYXRlOiBEYXRlO1xuICAgIHBhc3N3b3JkOiBzdHJpbmc7XG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XG5cbiAgICBjb25zdHJ1Y3RvcihvYmo/OiBTZW5kRGF0YSwgYWxyZWFkeUVuY3J5cHRlZDogYm9vbGVhbiA9IGZhbHNlKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIGlmIChvYmogPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5idWlsZERvbWFpbk1vZGVsKHRoaXMsIG9iaiwge1xuICAgICAgICAgICAgaWQ6IG51bGwsXG4gICAgICAgICAgICBhY2Nlc3NJZDogbnVsbCxcbiAgICAgICAgICAgIHVzZXJJZDogbnVsbCxcbiAgICAgICAgICAgIG5hbWU6IG51bGwsXG4gICAgICAgICAgICBub3RlczogbnVsbCxcbiAgICAgICAgICAgIGtleTogbnVsbCxcbiAgICAgICAgfSwgYWxyZWFkeUVuY3J5cHRlZCwgWydpZCcsICdhY2Nlc3NJZCcsICd1c2VySWQnXSk7XG5cbiAgICAgICAgdGhpcy50eXBlID0gb2JqLnR5cGU7XG4gICAgICAgIHRoaXMubWF4QWNjZXNzQ291bnQgPSBvYmoubWF4QWNjZXNzQ291bnQ7XG4gICAgICAgIHRoaXMuYWNjZXNzQ291bnQgPSBvYmouYWNjZXNzQ291bnQ7XG4gICAgICAgIHRoaXMucGFzc3dvcmQgPSBvYmoucGFzc3dvcmQ7XG4gICAgICAgIHRoaXMuZGlzYWJsZWQgPSBvYmouZGlzYWJsZWQ7XG4gICAgICAgIHRoaXMucmV2aXNpb25EYXRlID0gb2JqLnJldmlzaW9uRGF0ZSAhPSBudWxsID8gbmV3IERhdGUob2JqLnJldmlzaW9uRGF0ZSkgOiBudWxsO1xuICAgICAgICB0aGlzLmRlbGV0aW9uRGF0ZSA9IG9iai5kZWxldGlvbkRhdGUgIT0gbnVsbCA/IG5ldyBEYXRlKG9iai5kZWxldGlvbkRhdGUpIDogbnVsbDtcbiAgICAgICAgdGhpcy5leHBpcmF0aW9uRGF0ZSA9IG9iai5leHBpcmF0aW9uRGF0ZSAhPSBudWxsID8gbmV3IERhdGUob2JqLmV4cGlyYXRpb25EYXRlKSA6IG51bGw7XG5cbiAgICAgICAgc3dpdGNoICh0aGlzLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgU2VuZFR5cGUuVGV4dDpcbiAgICAgICAgICAgICAgICB0aGlzLnRleHQgPSBuZXcgU2VuZFRleHQob2JqLnRleHQsIGFscmVhZHlFbmNyeXB0ZWQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBTZW5kVHlwZS5GaWxlOlxuICAgICAgICAgICAgICAgIHRoaXMuZmlsZSA9IG5ldyBTZW5kRmlsZShvYmouZmlsZSwgYWxyZWFkeUVuY3J5cHRlZCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgZGVjcnlwdCgpOiBQcm9taXNlPFNlbmRWaWV3PiB7XG4gICAgICAgIGNvbnN0IG1vZGVsID0gbmV3IFNlbmRWaWV3KHRoaXMpO1xuXG4gICAgICAgIGxldCBjcnlwdG9TZXJ2aWNlOiBDcnlwdG9TZXJ2aWNlO1xuICAgICAgICBjb25zdCBjb250YWluZXJTZXJ2aWNlID0gKFV0aWxzLmdsb2JhbCBhcyBhbnkpLmJpdHdhcmRlbkNvbnRhaW5lclNlcnZpY2U7XG4gICAgICAgIGlmIChjb250YWluZXJTZXJ2aWNlKSB7XG4gICAgICAgICAgICBjcnlwdG9TZXJ2aWNlID0gY29udGFpbmVyU2VydmljZS5nZXRDcnlwdG9TZXJ2aWNlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2dsb2JhbCBiaXR3YXJkZW5Db250YWluZXJTZXJ2aWNlIG5vdCBpbml0aWFsaXplZC4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBtb2RlbC5rZXkgPSBhd2FpdCBjcnlwdG9TZXJ2aWNlLmRlY3J5cHRUb0J5dGVzKHRoaXMua2V5LCBudWxsKTtcbiAgICAgICAgICAgIG1vZGVsLmNyeXB0b0tleSA9IGF3YWl0IGNyeXB0b1NlcnZpY2UubWFrZVNlbmRLZXkobW9kZWwua2V5KTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgLy8gVE9ETzogZXJyb3I/XG4gICAgICAgIH1cblxuICAgICAgICBhd2FpdCB0aGlzLmRlY3J5cHRPYmoobW9kZWwsIHtcbiAgICAgICAgICAgIG5hbWU6IG51bGwsXG4gICAgICAgICAgICBub3RlczogbnVsbCxcbiAgICAgICAgfSwgbnVsbCwgbW9kZWwuY3J5cHRvS2V5KTtcblxuICAgICAgICBzd2l0Y2ggKHRoaXMudHlwZSkge1xuICAgICAgICAgICAgY2FzZSBTZW5kVHlwZS5GaWxlOlxuICAgICAgICAgICAgICAgIG1vZGVsLmZpbGUgPSBhd2FpdCB0aGlzLmZpbGUuZGVjcnlwdChtb2RlbC5jcnlwdG9LZXkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBTZW5kVHlwZS5UZXh0OlxuICAgICAgICAgICAgICAgIG1vZGVsLnRleHQgPSBhd2FpdCB0aGlzLnRleHQuZGVjcnlwdChtb2RlbC5jcnlwdG9LZXkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtb2RlbDtcbiAgICB9XG5cbiAgICB0b1NlbmREYXRhKHVzZXJJZDogc3RyaW5nKTogU2VuZERhdGEge1xuICAgICAgICBjb25zdCBzID0gbmV3IFNlbmREYXRhKCk7XG4gICAgICAgIHMuaWQgPSB0aGlzLmlkO1xuICAgICAgICBzLmFjY2Vzc0lkID0gdGhpcy5hY2Nlc3NJZDtcbiAgICAgICAgcy51c2VySWQgPSB1c2VySWQ7XG4gICAgICAgIHMubWF4QWNjZXNzQ291bnQgPSB0aGlzLm1heEFjY2Vzc0NvdW50O1xuICAgICAgICBzLmFjY2Vzc0NvdW50ID0gdGhpcy5hY2Nlc3NDb3VudDtcbiAgICAgICAgcy5kaXNhYmxlZCA9IHRoaXMuZGlzYWJsZWQ7XG4gICAgICAgIHMucGFzc3dvcmQgPSB0aGlzLnBhc3N3b3JkO1xuICAgICAgICBzLnJldmlzaW9uRGF0ZSA9IHRoaXMucmV2aXNpb25EYXRlICE9IG51bGwgPyB0aGlzLnJldmlzaW9uRGF0ZS50b0lTT1N0cmluZygpIDogbnVsbDtcbiAgICAgICAgcy5kZWxldGlvbkRhdGUgPSB0aGlzLmRlbGV0aW9uRGF0ZSAhPSBudWxsID8gdGhpcy5kZWxldGlvbkRhdGUudG9JU09TdHJpbmcoKSA6IG51bGw7XG4gICAgICAgIHMuZXhwaXJhdGlvbkRhdGUgPSB0aGlzLmV4cGlyYXRpb25EYXRlICE9IG51bGwgPyB0aGlzLmV4cGlyYXRpb25EYXRlLnRvSVNPU3RyaW5nKCkgOiBudWxsO1xuICAgICAgICBzLnR5cGUgPSB0aGlzLnR5cGU7XG5cbiAgICAgICAgdGhpcy5idWlsZERhdGFNb2RlbCh0aGlzLCBzLCB7XG4gICAgICAgICAgICBuYW1lOiBudWxsLFxuICAgICAgICAgICAgbm90ZXM6IG51bGwsXG4gICAgICAgICAgICBrZXk6IG51bGwsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHN3aXRjaCAocy50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIFNlbmRUeXBlLkZpbGU6XG4gICAgICAgICAgICAgICAgcy50ZXh0ID0gdGhpcy50ZXh0LnRvU2VuZFRleHREYXRhKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFNlbmRUeXBlLlRleHQ6XG4gICAgICAgICAgICAgICAgcy5maWxlID0gdGhpcy5maWxlLnRvU2VuZEZpbGVEYXRhKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHM7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQnJvd3NlckFwaSB9IGZyb20gJy4vYnJvd3NlckFwaSc7XG5cbmV4cG9ydCBjbGFzcyBTYWZhcmlBcHAge1xuICAgIHN0YXRpYyBpbml0KCkge1xuICAgICAgICBpZiAoKHdpbmRvdyBhcyBhbnkpLmJpdHdhcmRlblNhZmFyaUFwcEluaXRlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgICh3aW5kb3cgYXMgYW55KS5iaXR3YXJkZW5TYWZhcmlBcHBJbml0ZWQgPSB0cnVlO1xuICAgICAgICBpZiAoQnJvd3NlckFwaS5pc1NhZmFyaUFwaSkge1xuICAgICAgICAgICAgKHdpbmRvdyBhcyBhbnkpLmJpdHdhcmRlblNhZmFyaUFwcFJlcXVlc3RzID1cbiAgICAgICAgICAgICAgICBuZXcgTWFwPHN0cmluZywgeyByZXNvbHZlOiAodmFsdWU/OiB1bmtub3duKSA9PiB2b2lkLCB0aW1lb3V0RGF0ZTogRGF0ZSB9PigpO1xuICAgICAgICAgICAgKHdpbmRvdyBhcyBhbnkpLmJpdHdhcmRlblNhZmFyaUFwcE1lc3NhZ2VMaXN0ZW5lcnMgPVxuICAgICAgICAgICAgICAgIG5ldyBNYXA8c3RyaW5nLCAobWVzc2FnZTogYW55LCBzZW5kZXI6IGFueSwgcmVzcG9uc2U6IGFueSkgPT4gdm9pZD4oKTtcbiAgICAgICAgICAgICh3aW5kb3cgYXMgYW55KS5iaXR3YXJkZW5TYWZhcmlBcHBNZXNzYWdlUmVjZWl2ZXIgPSAobWVzc2FnZTogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgU2FmYXJpQXBwLnJlY2VpdmVNZXNzYWdlRnJvbUFwcChtZXNzYWdlKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBzZXRJbnRlcnZhbCgoKSA9PiBTYWZhcmlBcHAuY2xlYW51cE9sZFJlcXVlc3RzKCksIDUgKiA2MDAwMCk7IC8vIGV2ZXJ5IDUgbWluc1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGljIHNlbmRNZXNzYWdlVG9BcHAoY29tbWFuZDogc3RyaW5nLCBkYXRhOiBhbnkgPSBudWxsLCByZXNvbHZlTm93ID0gZmFsc2UpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICBpZiAoIUJyb3dzZXJBcGkuaXNTYWZhcmlBcGkpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobnVsbCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgY29uc3QgbWVzc2FnZUlkID0gbm93LmdldFRpbWUoKS50b1N0cmluZygpICsgJ18nICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIpO1xuICAgICAgICAgICAgKHdpbmRvdyBhcyBhbnkpLndlYmtpdC5tZXNzYWdlSGFuZGxlcnMuYml0d2FyZGVuQXBwLnBvc3RNZXNzYWdlKEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgICBpZDogbWVzc2FnZUlkLFxuICAgICAgICAgICAgICAgIGNvbW1hbmQ6IGNvbW1hbmQsXG4gICAgICAgICAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgICAgICAgICByZXNwb25zZURhdGE6IG51bGwsXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBpZiAocmVzb2x2ZU5vdykge1xuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgKHdpbmRvdyBhcyBhbnkpLmJpdHdhcmRlblNhZmFyaUFwcFJlcXVlc3RzLnNldChtZXNzYWdlSWQsIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZTogcmVzb2x2ZSxcbiAgICAgICAgICAgICAgICAgICAgdGltZW91dERhdGU6IG5ldyBEYXRlKG5vdy5nZXRUaW1lKCkgKyA1ICogNjAwMDApLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzdGF0aWMgYWRkTWVzc2FnZUxpc3RlbmVyKG5hbWU6IHN0cmluZywgY2FsbGJhY2s6IChtZXNzYWdlOiBhbnksIHNlbmRlcjogYW55LCByZXNwb25zZTogYW55KSA9PiB2b2lkKSB7XG4gICAgICAgICh3aW5kb3cgYXMgYW55KS5iaXR3YXJkZW5TYWZhcmlBcHBNZXNzYWdlTGlzdGVuZXJzLnNldChuYW1lLCBjYWxsYmFjayk7XG4gICAgfVxuXG4gICAgc3RhdGljIHNlbmRNZXNzYWdlVG9MaXN0ZW5lcnMobWVzc2FnZTogYW55LCBzZW5kZXI6IGFueSwgcmVzcG9uc2U6IGFueSkge1xuICAgICAgICAod2luZG93IGFzIGFueSkuYml0d2FyZGVuU2FmYXJpQXBwTWVzc2FnZUxpc3RlbmVycy5mb3JFYWNoKChmOiBhbnkpID0+IGYobWVzc2FnZSwgc2VuZGVyLCByZXNwb25zZSkpO1xuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIHJlY2VpdmVNZXNzYWdlRnJvbUFwcChtZXNzYWdlOiBhbnkpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICgobWVzc2FnZS5pZCA9PSBudWxsIHx8IG1lc3NhZ2UuaWQgPT09ICcnKSAmJiBtZXNzYWdlLmNvbW1hbmQgPT09ICdhcHBfbWVzc2FnZScpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbXNnID0gSlNPTi5wYXJzZShtZXNzYWdlLmRhdGEpO1xuICAgICAgICAgICAgICAgIFNhZmFyaUFwcC5zZW5kTWVzc2FnZVRvTGlzdGVuZXJzKG1zZywge1xuICAgICAgICAgICAgICAgICAgICBpZDogJ2FwcF9tZXNzYWdlJyxcbiAgICAgICAgICAgICAgICAgICAgdGFiOiBtZXNzYWdlLnNlbmRlclRhYixcbiAgICAgICAgICAgICAgICB9LCBudWxsKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggeyB9XG4gICAgICAgIH0gZWxzZSBpZiAobWVzc2FnZS5pZCAhPSBudWxsICYmICh3aW5kb3cgYXMgYW55KS5iaXR3YXJkZW5TYWZhcmlBcHBSZXF1ZXN0cy5oYXMobWVzc2FnZS5pZCkpIHtcbiAgICAgICAgICAgIGNvbnN0IHAgPSAod2luZG93IGFzIGFueSkuYml0d2FyZGVuU2FmYXJpQXBwUmVxdWVzdHMuZ2V0KG1lc3NhZ2UuaWQpO1xuICAgICAgICAgICAgcC5yZXNvbHZlKG1lc3NhZ2UucmVzcG9uc2VEYXRhKTtcbiAgICAgICAgICAgICh3aW5kb3cgYXMgYW55KS5iaXR3YXJkZW5TYWZhcmlBcHBSZXF1ZXN0cy5kZWxldGUobWVzc2FnZS5pZCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBjbGVhbnVwT2xkUmVxdWVzdHMoKSB7XG4gICAgICAgIGNvbnN0IHJlbW92ZUlkczogc3RyaW5nW10gPSBbXTtcbiAgICAgICAgKCh3aW5kb3cgYXMgYW55KS5iaXR3YXJkZW5TYWZhcmlBcHBSZXF1ZXN0cyBhc1xuICAgICAgICAgICAgTWFwPHN0cmluZywgeyByZXNvbHZlOiAodmFsdWU/OiB1bmtub3duKSA9PiB2b2lkLCB0aW1lb3V0RGF0ZTogRGF0ZSB9PilcbiAgICAgICAgICAgIC5mb3JFYWNoKCh2LCBrZXkpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodi50aW1lb3V0RGF0ZSA8IG5ldyBEYXRlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlSWRzLnB1c2goa2V5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgcmVtb3ZlSWRzLmZvckVhY2goKGlkKSA9PiB7XG4gICAgICAgICAgICAod2luZG93IGFzIGFueSkuYml0d2FyZGVuU2FmYXJpQXBwUmVxdWVzdHMuZGVsZXRlKGlkKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQ2lwaGVyU3RyaW5nIH0gZnJvbSAnLi9jaXBoZXJTdHJpbmcnO1xuXG5pbXBvcnQgeyBWaWV3IH0gZnJvbSAnLi4vdmlldy92aWV3JztcblxuaW1wb3J0IHsgU3ltbWV0cmljQ3J5cHRvS2V5IH0gZnJvbSAnLi9zeW1tZXRyaWNDcnlwdG9LZXknO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEb21haW4ge1xuICAgIHByb3RlY3RlZCBidWlsZERvbWFpbk1vZGVsPEQgZXh0ZW5kcyBEb21haW4+KGRvbWFpbjogRCwgZGF0YU9iajogYW55LCBtYXA6IGFueSxcbiAgICAgICAgYWxyZWFkeUVuY3J5cHRlZDogYm9vbGVhbiwgbm90RW5jTGlzdDogYW55W10gPSBbXSkge1xuICAgICAgICBmb3IgKGNvbnN0IHByb3AgaW4gbWFwKSB7XG4gICAgICAgICAgICBpZiAoIW1hcC5oYXNPd25Qcm9wZXJ0eShwcm9wKSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBvYmpQcm9wID0gZGF0YU9ialsobWFwW3Byb3BdIHx8IHByb3ApXTtcbiAgICAgICAgICAgIGlmIChhbHJlYWR5RW5jcnlwdGVkID09PSB0cnVlIHx8IG5vdEVuY0xpc3QuaW5kZXhPZihwcm9wKSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgKGRvbWFpbiBhcyBhbnkpW3Byb3BdID0gb2JqUHJvcCA/IG9ialByb3AgOiBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAoZG9tYWluIGFzIGFueSlbcHJvcF0gPSBvYmpQcm9wID8gbmV3IENpcGhlclN0cmluZyhvYmpQcm9wKSA6IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcHJvdGVjdGVkIGJ1aWxkRGF0YU1vZGVsPEQgZXh0ZW5kcyBEb21haW4+KGRvbWFpbjogRCwgZGF0YU9iajogYW55LCBtYXA6IGFueSwgbm90Q2lwaGVyU3RyaW5nTGlzdDogYW55W10gPSBbXSkge1xuICAgICAgICBmb3IgKGNvbnN0IHByb3AgaW4gbWFwKSB7XG4gICAgICAgICAgICBpZiAoIW1hcC5oYXNPd25Qcm9wZXJ0eShwcm9wKSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBvYmpQcm9wID0gKGRvbWFpbiBhcyBhbnkpWyhtYXBbcHJvcF0gfHwgcHJvcCldO1xuICAgICAgICAgICAgaWYgKG5vdENpcGhlclN0cmluZ0xpc3QuaW5kZXhPZihwcm9wKSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgKGRhdGFPYmogYXMgYW55KVtwcm9wXSA9IG9ialByb3AgIT0gbnVsbCA/IG9ialByb3AgOiBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAoZGF0YU9iaiBhcyBhbnkpW3Byb3BdID0gb2JqUHJvcCAhPSBudWxsID8gKG9ialByb3AgYXMgQ2lwaGVyU3RyaW5nKS5lbmNyeXB0ZWRTdHJpbmcgOiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGFzeW5jIGRlY3J5cHRPYmo8VCBleHRlbmRzIFZpZXc+KHZpZXdNb2RlbDogVCwgbWFwOiBhbnksIG9yZ0lkOiBzdHJpbmcsXG4gICAgICAgIGtleTogU3ltbWV0cmljQ3J5cHRvS2V5ID0gbnVsbCk6IFByb21pc2U8VD4ge1xuICAgICAgICBjb25zdCBwcm9taXNlcyA9IFtdO1xuICAgICAgICBjb25zdCBzZWxmOiBhbnkgPSB0aGlzO1xuXG4gICAgICAgIGZvciAoY29uc3QgcHJvcCBpbiBtYXApIHtcbiAgICAgICAgICAgIGlmICghbWFwLmhhc093blByb3BlcnR5KHByb3ApKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZVxuICAgICAgICAgICAgKGZ1bmN0aW9uICh0aGVQcm9wKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcCA9IFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXBQcm9wID0gbWFwW3RoZVByb3BdIHx8IHRoZVByb3A7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWxmW21hcFByb3BdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VsZlttYXBQcm9wXS5kZWNyeXB0KG9yZ0lkLCBrZXkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH0pLnRoZW4oKHZhbDogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICh2aWV3TW9kZWwgYXMgYW55KVt0aGVQcm9wXSA9IHZhbDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBwcm9taXNlcy5wdXNoKHApO1xuICAgICAgICAgICAgfSkocHJvcCk7XG4gICAgICAgIH1cblxuICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChwcm9taXNlcyk7XG4gICAgICAgIHJldHVybiB2aWV3TW9kZWw7XG4gICAgfVxufVxuIiwiZXhwb3J0IGNsYXNzIENpcGhlckJ1bGtEZWxldGVSZXF1ZXN0IHtcbiAgICBpZHM6IHN0cmluZ1tdO1xuICAgIG9yZ2FuaXphdGlvbklkOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihpZHM6IHN0cmluZ1tdLCBvcmdhbml6YXRpb25JZD86IHN0cmluZykge1xuICAgICAgICB0aGlzLmlkcyA9IGlkcyA9PSBudWxsID8gW10gOiBpZHM7XG4gICAgICAgIHRoaXMub3JnYW5pemF0aW9uSWQgPSBvcmdhbml6YXRpb25JZDtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBDaXBoZXJUeXBlIH0gZnJvbSAnLi4vZW51bXMvY2lwaGVyVHlwZSc7XG5pbXBvcnQgeyBGaWVsZFR5cGUgfSBmcm9tICcuLi9lbnVtcy9maWVsZFR5cGUnO1xuaW1wb3J0IHsgVXJpTWF0Y2hUeXBlIH0gZnJvbSAnLi4vZW51bXMvdXJpTWF0Y2hUeXBlJztcblxuaW1wb3J0IHsgQ2lwaGVyRGF0YSB9IGZyb20gJy4uL21vZGVscy9kYXRhL2NpcGhlckRhdGEnO1xuXG5pbXBvcnQgeyBBdHRhY2htZW50IH0gZnJvbSAnLi4vbW9kZWxzL2RvbWFpbi9hdHRhY2htZW50JztcbmltcG9ydCB7IENhcmQgfSBmcm9tICcuLi9tb2RlbHMvZG9tYWluL2NhcmQnO1xuaW1wb3J0IHsgQ2lwaGVyIH0gZnJvbSAnLi4vbW9kZWxzL2RvbWFpbi9jaXBoZXInO1xuaW1wb3J0IHsgQ2lwaGVyU3RyaW5nIH0gZnJvbSAnLi4vbW9kZWxzL2RvbWFpbi9jaXBoZXJTdHJpbmcnO1xuaW1wb3J0IERvbWFpbiBmcm9tICcuLi9tb2RlbHMvZG9tYWluL2RvbWFpbkJhc2UnO1xuaW1wb3J0IHsgRmllbGQgfSBmcm9tICcuLi9tb2RlbHMvZG9tYWluL2ZpZWxkJztcbmltcG9ydCB7IElkZW50aXR5IH0gZnJvbSAnLi4vbW9kZWxzL2RvbWFpbi9pZGVudGl0eSc7XG5pbXBvcnQgeyBMb2dpbiB9IGZyb20gJy4uL21vZGVscy9kb21haW4vbG9naW4nO1xuaW1wb3J0IHsgTG9naW5VcmkgfSBmcm9tICcuLi9tb2RlbHMvZG9tYWluL2xvZ2luVXJpJztcbmltcG9ydCB7IFBhc3N3b3JkIH0gZnJvbSAnLi4vbW9kZWxzL2RvbWFpbi9wYXNzd29yZCc7XG5pbXBvcnQgeyBTZWN1cmVOb3RlIH0gZnJvbSAnLi4vbW9kZWxzL2RvbWFpbi9zZWN1cmVOb3RlJztcbmltcG9ydCB7IFN5bW1ldHJpY0NyeXB0b0tleSB9IGZyb20gJy4uL21vZGVscy9kb21haW4vc3ltbWV0cmljQ3J5cHRvS2V5JztcblxuaW1wb3J0IHsgQ2lwaGVyQnVsa0RlbGV0ZVJlcXVlc3QgfSBmcm9tICcuLi9tb2RlbHMvcmVxdWVzdC9jaXBoZXJCdWxrRGVsZXRlUmVxdWVzdCc7XG5pbXBvcnQgeyBDaXBoZXJCdWxrTW92ZVJlcXVlc3QgfSBmcm9tICcuLi9tb2RlbHMvcmVxdWVzdC9jaXBoZXJCdWxrTW92ZVJlcXVlc3QnO1xuaW1wb3J0IHsgQ2lwaGVyQnVsa1Jlc3RvcmVSZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWxzL3JlcXVlc3QvY2lwaGVyQnVsa1Jlc3RvcmVSZXF1ZXN0JztcbmltcG9ydCB7IENpcGhlckJ1bGtTaGFyZVJlcXVlc3QgfSBmcm9tICcuLi9tb2RlbHMvcmVxdWVzdC9jaXBoZXJCdWxrU2hhcmVSZXF1ZXN0JztcbmltcG9ydCB7IENpcGhlckNvbGxlY3Rpb25zUmVxdWVzdCB9IGZyb20gJy4uL21vZGVscy9yZXF1ZXN0L2NpcGhlckNvbGxlY3Rpb25zUmVxdWVzdCc7XG5pbXBvcnQgeyBDaXBoZXJDcmVhdGVSZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWxzL3JlcXVlc3QvY2lwaGVyQ3JlYXRlUmVxdWVzdCc7XG5pbXBvcnQgeyBDaXBoZXJSZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWxzL3JlcXVlc3QvY2lwaGVyUmVxdWVzdCc7XG5pbXBvcnQgeyBDaXBoZXJTaGFyZVJlcXVlc3QgfSBmcm9tICcuLi9tb2RlbHMvcmVxdWVzdC9jaXBoZXJTaGFyZVJlcXVlc3QnO1xuXG5pbXBvcnQgeyBDaXBoZXJSZXNwb25zZSB9IGZyb20gJy4uL21vZGVscy9yZXNwb25zZS9jaXBoZXJSZXNwb25zZSc7XG5pbXBvcnQgeyBFcnJvclJlc3BvbnNlIH0gZnJvbSAnLi4vbW9kZWxzL3Jlc3BvbnNlL2Vycm9yUmVzcG9uc2UnO1xuXG5pbXBvcnQgeyBBdHRhY2htZW50VmlldyB9IGZyb20gJy4uL21vZGVscy92aWV3L2F0dGFjaG1lbnRWaWV3JztcbmltcG9ydCB7IENpcGhlclZpZXcgfSBmcm9tICcuLi9tb2RlbHMvdmlldy9jaXBoZXJWaWV3JztcbmltcG9ydCB7IEZpZWxkVmlldyB9IGZyb20gJy4uL21vZGVscy92aWV3L2ZpZWxkVmlldyc7XG5pbXBvcnQgeyBQYXNzd29yZEhpc3RvcnlWaWV3IH0gZnJvbSAnLi4vbW9kZWxzL3ZpZXcvcGFzc3dvcmRIaXN0b3J5Vmlldyc7XG5pbXBvcnQgeyBWaWV3IH0gZnJvbSAnLi4vbW9kZWxzL3ZpZXcvdmlldyc7XG5cbmltcG9ydCB7IFNvcnRlZENpcGhlcnNDYWNoZSB9IGZyb20gJy4uL21vZGVscy9kb21haW4vc29ydGVkQ2lwaGVyc0NhY2hlJztcblxuaW1wb3J0IHsgQXBpU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9hcGkuc2VydmljZSc7XG5pbXBvcnQgeyBDaXBoZXJTZXJ2aWNlIGFzIENpcGhlclNlcnZpY2VBYnN0cmFjdGlvbiB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9jaXBoZXIuc2VydmljZSc7XG5pbXBvcnQgeyBDcnlwdG9TZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL2NyeXB0by5zZXJ2aWNlJztcbmltcG9ydCB7IEkxOG5TZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL2kxOG4uc2VydmljZSc7XG5pbXBvcnQgeyBTZWFyY2hTZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL3NlYXJjaC5zZXJ2aWNlJztcbmltcG9ydCB7IFNldHRpbmdzU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9zZXR0aW5ncy5zZXJ2aWNlJztcbmltcG9ydCB7IFN0b3JhZ2VTZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL3N0b3JhZ2Uuc2VydmljZSc7XG5pbXBvcnQgeyBVc2VyU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy91c2VyLnNlcnZpY2UnO1xuXG5pbXBvcnQgeyBDb25zdGFudHNTZXJ2aWNlIH0gZnJvbSAnLi9jb25zdGFudHMuc2VydmljZSc7XG5cbmltcG9ydCB7IHNlcXVlbnRpYWxpemUgfSBmcm9tICcuLi9taXNjL3NlcXVlbnRpYWxpemUnO1xuaW1wb3J0IHsgVXRpbHMgfSBmcm9tICcuLi9taXNjL3V0aWxzJztcblxuY29uc3QgS2V5cyA9IHtcbiAgICBjaXBoZXJzUHJlZml4OiAnY2lwaGVyc18nLFxuICAgIGxvY2FsRGF0YTogJ3NpdGVzTG9jYWxEYXRhJyxcbiAgICBuZXZlckRvbWFpbnM6ICduZXZlckRvbWFpbnMnLFxufTtcblxuY29uc3QgRG9tYWluTWF0Y2hCbGFja2xpc3QgPSBuZXcgTWFwPHN0cmluZywgU2V0PHN0cmluZz4+KFtcbiAgICBbJ2dvb2dsZS5jb20nLCBuZXcgU2V0KFsnc2NyaXB0Lmdvb2dsZS5jb20nXSldLFxuXSk7XG5cbmV4cG9ydCBjbGFzcyBDaXBoZXJTZXJ2aWNlIGltcGxlbWVudHMgQ2lwaGVyU2VydmljZUFic3RyYWN0aW9uIHtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmVcbiAgICBfZGVjcnlwdGVkQ2lwaGVyQ2FjaGU6IENpcGhlclZpZXdbXTtcblxuICAgIHByaXZhdGUgc29ydGVkQ2lwaGVyc0NhY2hlOiBTb3J0ZWRDaXBoZXJzQ2FjaGUgPSBuZXcgU29ydGVkQ2lwaGVyc0NhY2hlKHRoaXMuc29ydENpcGhlcnNCeUxhc3RVc2VkKTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgY3J5cHRvU2VydmljZTogQ3J5cHRvU2VydmljZSwgcHJpdmF0ZSB1c2VyU2VydmljZTogVXNlclNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgc2V0dGluZ3NTZXJ2aWNlOiBTZXR0aW5nc1NlcnZpY2UsIHByaXZhdGUgYXBpU2VydmljZTogQXBpU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBzdG9yYWdlU2VydmljZTogU3RvcmFnZVNlcnZpY2UsIHByaXZhdGUgaTE4blNlcnZpY2U6IEkxOG5TZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIHNlYXJjaFNlcnZpY2U6ICgpID0+IFNlYXJjaFNlcnZpY2UpIHtcbiAgICB9XG5cbiAgICBnZXQgZGVjcnlwdGVkQ2lwaGVyQ2FjaGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWNyeXB0ZWRDaXBoZXJDYWNoZTtcbiAgICB9XG4gICAgc2V0IGRlY3J5cHRlZENpcGhlckNhY2hlKHZhbHVlOiBDaXBoZXJWaWV3W10pIHtcbiAgICAgICAgdGhpcy5fZGVjcnlwdGVkQ2lwaGVyQ2FjaGUgPSB2YWx1ZTtcbiAgICAgICAgaWYgKHRoaXMuc2VhcmNoU2VydmljZSAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2VhcmNoU2VydmljZSgpLmNsZWFySW5kZXgoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWFyY2hTZXJ2aWNlKCkuaW5kZXhDaXBoZXJzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjbGVhckNhY2hlKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmRlY3J5cHRlZENpcGhlckNhY2hlID0gbnVsbDtcbiAgICAgICAgdGhpcy5zb3J0ZWRDaXBoZXJzQ2FjaGUuY2xlYXIoKTtcbiAgICB9XG5cbiAgICBhc3luYyBlbmNyeXB0KG1vZGVsOiBDaXBoZXJWaWV3LCBrZXk/OiBTeW1tZXRyaWNDcnlwdG9LZXksIG9yaWdpbmFsQ2lwaGVyOiBDaXBoZXIgPSBudWxsKTogUHJvbWlzZTxDaXBoZXI+IHtcbiAgICAgICAgLy8gQWRqdXN0IHBhc3N3b3JkIGhpc3RvcnlcbiAgICAgICAgaWYgKG1vZGVsLmlkICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChvcmlnaW5hbENpcGhlciA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgb3JpZ2luYWxDaXBoZXIgPSBhd2FpdCB0aGlzLmdldChtb2RlbC5pZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob3JpZ2luYWxDaXBoZXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nQ2lwaGVyID0gYXdhaXQgb3JpZ2luYWxDaXBoZXIuZGVjcnlwdCgpO1xuICAgICAgICAgICAgICAgIG1vZGVsLnBhc3N3b3JkSGlzdG9yeSA9IGV4aXN0aW5nQ2lwaGVyLnBhc3N3b3JkSGlzdG9yeSB8fCBbXTtcbiAgICAgICAgICAgICAgICBpZiAobW9kZWwudHlwZSA9PT0gQ2lwaGVyVHlwZS5Mb2dpbiAmJiBleGlzdGluZ0NpcGhlci50eXBlID09PSBDaXBoZXJUeXBlLkxvZ2luKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChleGlzdGluZ0NpcGhlci5sb2dpbi5wYXNzd29yZCAhPSBudWxsICYmIGV4aXN0aW5nQ2lwaGVyLmxvZ2luLnBhc3N3b3JkICE9PSAnJyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmdDaXBoZXIubG9naW4ucGFzc3dvcmQgIT09IG1vZGVsLmxvZ2luLnBhc3N3b3JkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwaCA9IG5ldyBQYXNzd29yZEhpc3RvcnlWaWV3KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwaC5wYXNzd29yZCA9IGV4aXN0aW5nQ2lwaGVyLmxvZ2luLnBhc3N3b3JkO1xuICAgICAgICAgICAgICAgICAgICAgICAgcGgubGFzdFVzZWREYXRlID0gbW9kZWwubG9naW4ucGFzc3dvcmRSZXZpc2lvbkRhdGUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwucGFzc3dvcmRIaXN0b3J5LnNwbGljZSgwLCAwLCBwaCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5sb2dpbi5wYXNzd29yZFJldmlzaW9uRGF0ZSA9IGV4aXN0aW5nQ2lwaGVyLmxvZ2luLnBhc3N3b3JkUmV2aXNpb25EYXRlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChleGlzdGluZ0NpcGhlci5oYXNGaWVsZHMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZXhpc3RpbmdIaWRkZW5GaWVsZHMgPSBleGlzdGluZ0NpcGhlci5maWVsZHMuZmlsdGVyKChmKSA9PiBmLnR5cGUgPT09IEZpZWxkVHlwZS5IaWRkZW4gJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIGYubmFtZSAhPSBudWxsICYmIGYubmFtZSAhPT0gJycgJiYgZi52YWx1ZSAhPSBudWxsICYmIGYudmFsdWUgIT09ICcnKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaGlkZGVuRmllbGRzID0gbW9kZWwuZmllbGRzID09IG51bGwgPyBbXSA6XG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5maWVsZHMuZmlsdGVyKChmKSA9PiBmLnR5cGUgPT09IEZpZWxkVHlwZS5IaWRkZW4gJiYgZi5uYW1lICE9IG51bGwgJiYgZi5uYW1lICE9PSAnJyk7XG4gICAgICAgICAgICAgICAgICAgIGV4aXN0aW5nSGlkZGVuRmllbGRzLmZvckVhY2goKGVmKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXRjaGVkRmllbGQgPSBoaWRkZW5GaWVsZHMuZmluZCgoZikgPT4gZi5uYW1lID09PSBlZi5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaGVkRmllbGQgPT0gbnVsbCB8fCBtYXRjaGVkRmllbGQudmFsdWUgIT09IGVmLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGggPSBuZXcgUGFzc3dvcmRIaXN0b3J5VmlldygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBoLnBhc3N3b3JkID0gZWYubmFtZSArICc6ICcgKyBlZi52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaC5sYXN0VXNlZERhdGUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsLnBhc3N3b3JkSGlzdG9yeS5zcGxpY2UoMCwgMCwgcGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobW9kZWwucGFzc3dvcmRIaXN0b3J5ICE9IG51bGwgJiYgbW9kZWwucGFzc3dvcmRIaXN0b3J5Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIG1vZGVsLnBhc3N3b3JkSGlzdG9yeSA9IG51bGw7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1vZGVsLnBhc3N3b3JkSGlzdG9yeSAhPSBudWxsICYmIG1vZGVsLnBhc3N3b3JkSGlzdG9yeS5sZW5ndGggPiA1KSB7XG4gICAgICAgICAgICAgICAgLy8gb25seSBzYXZlIGxhc3QgNSBoaXN0b3J5XG4gICAgICAgICAgICAgICAgbW9kZWwucGFzc3dvcmRIaXN0b3J5ID0gbW9kZWwucGFzc3dvcmRIaXN0b3J5LnNsaWNlKDAsIDUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgY2lwaGVyID0gbmV3IENpcGhlcigpO1xuICAgICAgICBjaXBoZXIuaWQgPSBtb2RlbC5pZDtcbiAgICAgICAgY2lwaGVyLmZvbGRlcklkID0gbW9kZWwuZm9sZGVySWQ7XG4gICAgICAgIGNpcGhlci5mYXZvcml0ZSA9IG1vZGVsLmZhdm9yaXRlO1xuICAgICAgICBjaXBoZXIub3JnYW5pemF0aW9uSWQgPSBtb2RlbC5vcmdhbml6YXRpb25JZDtcbiAgICAgICAgY2lwaGVyLnR5cGUgPSBtb2RlbC50eXBlO1xuICAgICAgICBjaXBoZXIuY29sbGVjdGlvbklkcyA9IG1vZGVsLmNvbGxlY3Rpb25JZHM7XG4gICAgICAgIGNpcGhlci5yZXZpc2lvbkRhdGUgPSBtb2RlbC5yZXZpc2lvbkRhdGU7XG5cbiAgICAgICAgaWYgKGtleSA9PSBudWxsICYmIGNpcGhlci5vcmdhbml6YXRpb25JZCAhPSBudWxsKSB7XG4gICAgICAgICAgICBrZXkgPSBhd2FpdCB0aGlzLmNyeXB0b1NlcnZpY2UuZ2V0T3JnS2V5KGNpcGhlci5vcmdhbml6YXRpb25JZCk7XG4gICAgICAgICAgICBpZiAoa2V5ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBlbmNyeXB0IGNpcGhlciBmb3Igb3JnYW5pemF0aW9uLiBObyBrZXkuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgICAgICAgdGhpcy5lbmNyeXB0T2JqUHJvcGVydHkobW9kZWwsIGNpcGhlciwge1xuICAgICAgICAgICAgICAgIG5hbWU6IG51bGwsXG4gICAgICAgICAgICAgICAgbm90ZXM6IG51bGwsXG4gICAgICAgICAgICB9LCBrZXkpLFxuICAgICAgICAgICAgdGhpcy5lbmNyeXB0Q2lwaGVyRGF0YShjaXBoZXIsIG1vZGVsLCBrZXkpLFxuICAgICAgICAgICAgdGhpcy5lbmNyeXB0RmllbGRzKG1vZGVsLmZpZWxkcywga2V5KS50aGVuKChmaWVsZHMpID0+IHtcbiAgICAgICAgICAgICAgICBjaXBoZXIuZmllbGRzID0gZmllbGRzO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICB0aGlzLmVuY3J5cHRQYXNzd29yZEhpc3Rvcmllcyhtb2RlbC5wYXNzd29yZEhpc3RvcnksIGtleSkudGhlbigocGgpID0+IHtcbiAgICAgICAgICAgICAgICBjaXBoZXIucGFzc3dvcmRIaXN0b3J5ID0gcGg7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHRoaXMuZW5jcnlwdEF0dGFjaG1lbnRzKG1vZGVsLmF0dGFjaG1lbnRzLCBrZXkpLnRoZW4oKGF0dGFjaG1lbnRzKSA9PiB7XG4gICAgICAgICAgICAgICAgY2lwaGVyLmF0dGFjaG1lbnRzID0gYXR0YWNobWVudHM7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgXSk7XG5cbiAgICAgICAgcmV0dXJuIGNpcGhlcjtcbiAgICB9XG5cbiAgICBhc3luYyBlbmNyeXB0QXR0YWNobWVudHMoYXR0YWNobWVudHNNb2RlbDogQXR0YWNobWVudFZpZXdbXSwga2V5OiBTeW1tZXRyaWNDcnlwdG9LZXkpOiBQcm9taXNlPEF0dGFjaG1lbnRbXT4ge1xuICAgICAgICBpZiAoYXR0YWNobWVudHNNb2RlbCA9PSBudWxsIHx8IGF0dGFjaG1lbnRzTW9kZWwubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHByb21pc2VzOiBQcm9taXNlPGFueT5bXSA9IFtdO1xuICAgICAgICBjb25zdCBlbmNBdHRhY2htZW50czogQXR0YWNobWVudFtdID0gW107XG4gICAgICAgIGF0dGFjaG1lbnRzTW9kZWwuZm9yRWFjaChhc3luYyAobW9kZWwpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGF0dGFjaG1lbnQgPSBuZXcgQXR0YWNobWVudCgpO1xuICAgICAgICAgICAgYXR0YWNobWVudC5pZCA9IG1vZGVsLmlkO1xuICAgICAgICAgICAgYXR0YWNobWVudC5zaXplID0gbW9kZWwuc2l6ZTtcbiAgICAgICAgICAgIGF0dGFjaG1lbnQuc2l6ZU5hbWUgPSBtb2RlbC5zaXplTmFtZTtcbiAgICAgICAgICAgIGF0dGFjaG1lbnQudXJsID0gbW9kZWwudXJsO1xuICAgICAgICAgICAgY29uc3QgcHJvbWlzZSA9IHRoaXMuZW5jcnlwdE9ialByb3BlcnR5KG1vZGVsLCBhdHRhY2htZW50LCB7XG4gICAgICAgICAgICAgICAgZmlsZU5hbWU6IG51bGwsXG4gICAgICAgICAgICB9LCBrZXkpLnRoZW4oYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChtb2RlbC5rZXkgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBhdHRhY2htZW50LmtleSA9IGF3YWl0IHRoaXMuY3J5cHRvU2VydmljZS5lbmNyeXB0KG1vZGVsLmtleS5rZXksIGtleSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVuY0F0dGFjaG1lbnRzLnB1c2goYXR0YWNobWVudCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHByb21pc2VzLnB1c2gocHJvbWlzZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGF3YWl0IFByb21pc2UuYWxsKHByb21pc2VzKTtcbiAgICAgICAgcmV0dXJuIGVuY0F0dGFjaG1lbnRzO1xuICAgIH1cblxuICAgIGFzeW5jIGVuY3J5cHRGaWVsZHMoZmllbGRzTW9kZWw6IEZpZWxkVmlld1tdLCBrZXk6IFN5bW1ldHJpY0NyeXB0b0tleSk6IFByb21pc2U8RmllbGRbXT4ge1xuICAgICAgICBpZiAoIWZpZWxkc01vZGVsIHx8ICFmaWVsZHNNb2RlbC5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgICAgIGNvbnN0IGVuY0ZpZWxkczogRmllbGRbXSA9IFtdO1xuICAgICAgICBhd2FpdCBmaWVsZHNNb2RlbC5yZWR1Y2UoKHByb21pc2UsIGZpZWxkKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gcHJvbWlzZS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5lbmNyeXB0RmllbGQoZmllbGQsIGtleSk7XG4gICAgICAgICAgICB9KS50aGVuKChlbmNGaWVsZDogRmllbGQpID0+IHtcbiAgICAgICAgICAgICAgICBlbmNGaWVsZHMucHVzaChlbmNGaWVsZCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSwgUHJvbWlzZS5yZXNvbHZlKCkpO1xuXG4gICAgICAgIHJldHVybiBlbmNGaWVsZHM7XG4gICAgfVxuXG4gICAgYXN5bmMgZW5jcnlwdEZpZWxkKGZpZWxkTW9kZWw6IEZpZWxkVmlldywga2V5OiBTeW1tZXRyaWNDcnlwdG9LZXkpOiBQcm9taXNlPEZpZWxkPiB7XG4gICAgICAgIGNvbnN0IGZpZWxkID0gbmV3IEZpZWxkKCk7XG4gICAgICAgIGZpZWxkLnR5cGUgPSBmaWVsZE1vZGVsLnR5cGU7XG4gICAgICAgIC8vIG5vcm1hbGl6ZSBib29sZWFuIHR5cGUgZmllbGQgdmFsdWVzXG4gICAgICAgIGlmIChmaWVsZE1vZGVsLnR5cGUgPT09IEZpZWxkVHlwZS5Cb29sZWFuICYmIGZpZWxkTW9kZWwudmFsdWUgIT09ICd0cnVlJykge1xuICAgICAgICAgICAgZmllbGRNb2RlbC52YWx1ZSA9ICdmYWxzZSc7XG4gICAgICAgIH1cblxuICAgICAgICBhd2FpdCB0aGlzLmVuY3J5cHRPYmpQcm9wZXJ0eShmaWVsZE1vZGVsLCBmaWVsZCwge1xuICAgICAgICAgICAgbmFtZTogbnVsbCxcbiAgICAgICAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgICB9LCBrZXkpO1xuXG4gICAgICAgIHJldHVybiBmaWVsZDtcbiAgICB9XG5cbiAgICBhc3luYyBlbmNyeXB0UGFzc3dvcmRIaXN0b3JpZXMocGhNb2RlbHM6IFBhc3N3b3JkSGlzdG9yeVZpZXdbXSwga2V5OiBTeW1tZXRyaWNDcnlwdG9LZXkpOiBQcm9taXNlPFBhc3N3b3JkW10+IHtcbiAgICAgICAgaWYgKCFwaE1vZGVscyB8fCAhcGhNb2RlbHMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgICAgICBjb25zdCBlbmNQaHM6IFBhc3N3b3JkW10gPSBbXTtcbiAgICAgICAgYXdhaXQgcGhNb2RlbHMucmVkdWNlKChwcm9taXNlLCBwaCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHByb21pc2UudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuZW5jcnlwdFBhc3N3b3JkSGlzdG9yeShwaCwga2V5KTtcbiAgICAgICAgICAgIH0pLnRoZW4oKGVuY1BoOiBQYXNzd29yZCkgPT4ge1xuICAgICAgICAgICAgICAgIGVuY1Bocy5wdXNoKGVuY1BoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LCBQcm9taXNlLnJlc29sdmUoKSk7XG5cbiAgICAgICAgcmV0dXJuIGVuY1BocztcbiAgICB9XG5cbiAgICBhc3luYyBlbmNyeXB0UGFzc3dvcmRIaXN0b3J5KHBoTW9kZWw6IFBhc3N3b3JkSGlzdG9yeVZpZXcsIGtleTogU3ltbWV0cmljQ3J5cHRvS2V5KTogUHJvbWlzZTxQYXNzd29yZD4ge1xuICAgICAgICBjb25zdCBwaCA9IG5ldyBQYXNzd29yZCgpO1xuICAgICAgICBwaC5sYXN0VXNlZERhdGUgPSBwaE1vZGVsLmxhc3RVc2VkRGF0ZTtcblxuICAgICAgICBhd2FpdCB0aGlzLmVuY3J5cHRPYmpQcm9wZXJ0eShwaE1vZGVsLCBwaCwge1xuICAgICAgICAgICAgcGFzc3dvcmQ6IG51bGwsXG4gICAgICAgIH0sIGtleSk7XG5cbiAgICAgICAgcmV0dXJuIHBoO1xuICAgIH1cblxuICAgIGFzeW5jIGdldChpZDogc3RyaW5nKTogUHJvbWlzZTxDaXBoZXI+IHtcbiAgICAgICAgY29uc3QgdXNlcklkID0gYXdhaXQgdGhpcy51c2VyU2VydmljZS5nZXRVc2VySWQoKTtcbiAgICAgICAgY29uc3QgbG9jYWxEYXRhID0gYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5nZXQ8YW55PihLZXlzLmxvY2FsRGF0YSk7XG4gICAgICAgIGNvbnN0IGNpcGhlcnMgPSBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldDx7IFtpZDogc3RyaW5nXTogQ2lwaGVyRGF0YTsgfT4oXG4gICAgICAgICAgICBLZXlzLmNpcGhlcnNQcmVmaXggKyB1c2VySWQpO1xuICAgICAgICBpZiAoY2lwaGVycyA9PSBudWxsIHx8ICFjaXBoZXJzLmhhc093blByb3BlcnR5KGlkKSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3IENpcGhlcihjaXBoZXJzW2lkXSwgZmFsc2UsIGxvY2FsRGF0YSA/IGxvY2FsRGF0YVtpZF0gOiBudWxsKTtcbiAgICB9XG5cbiAgICBhc3luYyBnZXRBbGwoKTogUHJvbWlzZTxDaXBoZXJbXT4ge1xuICAgICAgICBjb25zdCB1c2VySWQgPSBhd2FpdCB0aGlzLnVzZXJTZXJ2aWNlLmdldFVzZXJJZCgpO1xuICAgICAgICBjb25zdCBsb2NhbERhdGEgPSBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldDxhbnk+KEtleXMubG9jYWxEYXRhKTtcbiAgICAgICAgY29uc3QgY2lwaGVycyA9IGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2UuZ2V0PHsgW2lkOiBzdHJpbmddOiBDaXBoZXJEYXRhOyB9PihcbiAgICAgICAgICAgIEtleXMuY2lwaGVyc1ByZWZpeCArIHVzZXJJZCk7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlOiBDaXBoZXJbXSA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IGlkIGluIGNpcGhlcnMpIHtcbiAgICAgICAgICAgIGlmIChjaXBoZXJzLmhhc093blByb3BlcnR5KGlkKSkge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlLnB1c2gobmV3IENpcGhlcihjaXBoZXJzW2lkXSwgZmFsc2UsIGxvY2FsRGF0YSA/IGxvY2FsRGF0YVtpZF0gOiBudWxsKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH1cblxuICAgIEBzZXF1ZW50aWFsaXplKCgpID0+ICdnZXRBbGxEZWNyeXB0ZWQnKVxuICAgIGFzeW5jIGdldEFsbERlY3J5cHRlZCgpOiBQcm9taXNlPENpcGhlclZpZXdbXT4ge1xuICAgICAgICBpZiAodGhpcy5kZWNyeXB0ZWRDaXBoZXJDYWNoZSAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kZWNyeXB0ZWRDaXBoZXJDYWNoZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGRlY0NpcGhlcnM6IENpcGhlclZpZXdbXSA9IFtdO1xuICAgICAgICBjb25zdCBoYXNLZXkgPSBhd2FpdCB0aGlzLmNyeXB0b1NlcnZpY2UuaGFzS2V5KCk7XG4gICAgICAgIGlmICghaGFzS2V5KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGtleS4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHByb21pc2VzOiBhbnlbXSA9IFtdO1xuICAgICAgICBjb25zdCBjaXBoZXJzID0gYXdhaXQgdGhpcy5nZXRBbGwoKTtcbiAgICAgICAgY2lwaGVycy5mb3JFYWNoKChjaXBoZXIpID0+IHtcbiAgICAgICAgICAgIHByb21pc2VzLnB1c2goY2lwaGVyLmRlY3J5cHQoKS50aGVuKChjKSA9PiBkZWNDaXBoZXJzLnB1c2goYykpKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xuICAgICAgICBkZWNDaXBoZXJzLnNvcnQodGhpcy5nZXRMb2NhbGVTb3J0aW5nRnVuY3Rpb24oKSk7XG4gICAgICAgIHRoaXMuZGVjcnlwdGVkQ2lwaGVyQ2FjaGUgPSBkZWNDaXBoZXJzO1xuICAgICAgICByZXR1cm4gdGhpcy5kZWNyeXB0ZWRDaXBoZXJDYWNoZTtcbiAgICB9XG5cbiAgICBhc3luYyBnZXRBbGxEZWNyeXB0ZWRGb3JHcm91cGluZyhncm91cGluZ0lkOiBzdHJpbmcsIGZvbGRlcjogYm9vbGVhbiA9IHRydWUpOiBQcm9taXNlPENpcGhlclZpZXdbXT4ge1xuICAgICAgICBjb25zdCBjaXBoZXJzID0gYXdhaXQgdGhpcy5nZXRBbGxEZWNyeXB0ZWQoKTtcblxuICAgICAgICByZXR1cm4gY2lwaGVycy5maWx0ZXIoKGNpcGhlcikgPT4ge1xuICAgICAgICAgICAgaWYgKGNpcGhlci5pc0RlbGV0ZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZm9sZGVyICYmIGNpcGhlci5mb2xkZXJJZCA9PT0gZ3JvdXBpbmdJZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIGlmICghZm9sZGVyICYmIGNpcGhlci5jb2xsZWN0aW9uSWRzICE9IG51bGwgJiYgY2lwaGVyLmNvbGxlY3Rpb25JZHMuaW5kZXhPZihncm91cGluZ0lkKSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0QWxsRGVjcnlwdGVkRm9yVXJsKHVybDogc3RyaW5nLCBpbmNsdWRlT3RoZXJUeXBlcz86IENpcGhlclR5cGVbXSxcbiAgICAgICAgZGVmYXVsdE1hdGNoOiBVcmlNYXRjaFR5cGUgPSBudWxsKTogUHJvbWlzZTxDaXBoZXJWaWV3W10+IHtcbiAgICAgICAgaWYgKHVybCA9PSBudWxsICYmIGluY2x1ZGVPdGhlclR5cGVzID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoW10pO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZG9tYWluID0gVXRpbHMuZ2V0RG9tYWluKHVybCk7XG4gICAgICAgIGNvbnN0IGVxRG9tYWluc1Byb21pc2UgPSBkb21haW4gPT0gbnVsbCA/IFByb21pc2UucmVzb2x2ZShbXSkgOlxuICAgICAgICAgICAgdGhpcy5zZXR0aW5nc1NlcnZpY2UuZ2V0RXF1aXZhbGVudERvbWFpbnMoKS50aGVuKChlcURvbWFpbnM6IGFueVtdW10pID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgbWF0Y2hlczogYW55W10gPSBbXTtcbiAgICAgICAgICAgICAgICBlcURvbWFpbnMuZm9yRWFjaCgoZXFEb21haW4pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVxRG9tYWluLmxlbmd0aCAmJiBlcURvbWFpbi5pbmRleE9mKGRvbWFpbikgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcyA9IG1hdGNoZXMuY29uY2F0KGVxRG9tYWluKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFtYXRjaGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBtYXRjaGVzLnB1c2goZG9tYWluKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gbWF0Y2hlcztcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IFByb21pc2UuYWxsKFtlcURvbWFpbnNQcm9taXNlLCB0aGlzLmdldEFsbERlY3J5cHRlZCgpXSk7XG4gICAgICAgIGNvbnN0IG1hdGNoaW5nRG9tYWlucyA9IHJlc3VsdFswXTtcbiAgICAgICAgY29uc3QgY2lwaGVycyA9IHJlc3VsdFsxXTtcblxuICAgICAgICBpZiAoZGVmYXVsdE1hdGNoID09IG51bGwpIHtcbiAgICAgICAgICAgIGRlZmF1bHRNYXRjaCA9IGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2UuZ2V0PFVyaU1hdGNoVHlwZT4oQ29uc3RhbnRzU2VydmljZS5kZWZhdWx0VXJpTWF0Y2gpO1xuICAgICAgICAgICAgaWYgKGRlZmF1bHRNYXRjaCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgZGVmYXVsdE1hdGNoID0gVXJpTWF0Y2hUeXBlLkRvbWFpbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjaXBoZXJzLmZpbHRlcigoY2lwaGVyKSA9PiB7XG4gICAgICAgICAgICBpZiAoY2lwaGVyLmRlbGV0ZWREYXRlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaW5jbHVkZU90aGVyVHlwZXMgIT0gbnVsbCAmJiBpbmNsdWRlT3RoZXJUeXBlcy5pbmRleE9mKGNpcGhlci50eXBlKSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh1cmwgIT0gbnVsbCAmJiBjaXBoZXIudHlwZSA9PT0gQ2lwaGVyVHlwZS5Mb2dpbiAmJiBjaXBoZXIubG9naW4udXJpcyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaXBoZXIubG9naW4udXJpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB1ID0gY2lwaGVyLmxvZ2luLnVyaXNbaV07XG4gICAgICAgICAgICAgICAgICAgIGlmICh1LnVyaSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gdS5tYXRjaCA9PSBudWxsID8gZGVmYXVsdE1hdGNoIDogdS5tYXRjaDtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChtYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBVcmlNYXRjaFR5cGUuRG9tYWluOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkb21haW4gIT0gbnVsbCAmJiB1LmRvbWFpbiAhPSBudWxsICYmIG1hdGNoaW5nRG9tYWlucy5pbmRleE9mKHUuZG9tYWluKSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChEb21haW5NYXRjaEJsYWNrbGlzdC5oYXModS5kb21haW4pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkb21haW5VcmxIb3N0ID0gVXRpbHMuZ2V0SG9zdCh1cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFEb21haW5NYXRjaEJsYWNrbGlzdC5nZXQodS5kb21haW4pLmhhcyhkb21haW5VcmxIb3N0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFVyaU1hdGNoVHlwZS5Ib3N0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHVybEhvc3QgPSBVdGlscy5nZXRIb3N0KHVybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHVybEhvc3QgIT0gbnVsbCAmJiB1cmxIb3N0ID09PSBVdGlscy5nZXRIb3N0KHUudXJpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFVyaU1hdGNoVHlwZS5FeGFjdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodXJsID09PSB1LnVyaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFVyaU1hdGNoVHlwZS5TdGFydHNXaXRoOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1cmwuc3RhcnRzV2l0aCh1LnVyaSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBVcmlNYXRjaFR5cGUuUmVndWxhckV4cHJlc3Npb246XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVnZXggPSBuZXcgUmVnRXhwKHUudXJpLCAnaScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVnZXgudGVzdCh1cmwpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggeyB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFVyaU1hdGNoVHlwZS5OZXZlcjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0QWxsRnJvbUFwaUZvck9yZ2FuaXphdGlvbihvcmdhbml6YXRpb25JZDogc3RyaW5nKTogUHJvbWlzZTxDaXBoZXJWaWV3W10+IHtcbiAgICAgICAgY29uc3QgY2lwaGVycyA9IGF3YWl0IHRoaXMuYXBpU2VydmljZS5nZXRDaXBoZXJzT3JnYW5pemF0aW9uKG9yZ2FuaXphdGlvbklkKTtcbiAgICAgICAgaWYgKGNpcGhlcnMgIT0gbnVsbCAmJiBjaXBoZXJzLmRhdGEgIT0gbnVsbCAmJiBjaXBoZXJzLmRhdGEubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCBkZWNDaXBoZXJzOiBDaXBoZXJWaWV3W10gPSBbXTtcbiAgICAgICAgICAgIGNvbnN0IHByb21pc2VzOiBhbnlbXSA9IFtdO1xuICAgICAgICAgICAgY2lwaGVycy5kYXRhLmZvckVhY2goKHIpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gbmV3IENpcGhlckRhdGEocik7XG4gICAgICAgICAgICAgICAgY29uc3QgY2lwaGVyID0gbmV3IENpcGhlcihkYXRhKTtcbiAgICAgICAgICAgICAgICBwcm9taXNlcy5wdXNoKGNpcGhlci5kZWNyeXB0KCkudGhlbigoYykgPT4gZGVjQ2lwaGVycy5wdXNoKGMpKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGF3YWl0IFByb21pc2UuYWxsKHByb21pc2VzKTtcbiAgICAgICAgICAgIGRlY0NpcGhlcnMuc29ydCh0aGlzLmdldExvY2FsZVNvcnRpbmdGdW5jdGlvbigpKTtcbiAgICAgICAgICAgIHJldHVybiBkZWNDaXBoZXJzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0TGFzdFVzZWRGb3JVcmwodXJsOiBzdHJpbmcpOiBQcm9taXNlPENpcGhlclZpZXc+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q2lwaGVyRm9yVXJsKHVybCwgdHJ1ZSwgZmFsc2UpO1xuICAgIH1cblxuICAgIGFzeW5jIGdldExhc3RMYXVuY2hlZEZvclVybCh1cmw6IHN0cmluZyk6IFByb21pc2U8Q2lwaGVyVmlldz4ge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRDaXBoZXJGb3JVcmwodXJsLCBmYWxzZSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0TmV4dENpcGhlckZvclVybCh1cmw6IHN0cmluZyk6IFByb21pc2U8Q2lwaGVyVmlldz4ge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRDaXBoZXJGb3JVcmwodXJsLCBmYWxzZSwgZmFsc2UpO1xuICAgIH1cblxuICAgIHVwZGF0ZUxhc3RVc2VkSW5kZXhGb3JVcmwodXJsOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5zb3J0ZWRDaXBoZXJzQ2FjaGUudXBkYXRlTGFzdFVzZWRJbmRleCh1cmwpO1xuICAgIH1cblxuICAgIGFzeW5jIHVwZGF0ZUxhc3RVc2VkRGF0ZShpZDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGxldCBjaXBoZXJzTG9jYWxEYXRhID0gYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5nZXQ8YW55PihLZXlzLmxvY2FsRGF0YSk7XG4gICAgICAgIGlmICghY2lwaGVyc0xvY2FsRGF0YSkge1xuICAgICAgICAgICAgY2lwaGVyc0xvY2FsRGF0YSA9IHt9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNpcGhlcnNMb2NhbERhdGFbaWRdKSB7XG4gICAgICAgICAgICBjaXBoZXJzTG9jYWxEYXRhW2lkXS5sYXN0VXNlZERhdGUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNpcGhlcnNMb2NhbERhdGFbaWRdID0ge1xuICAgICAgICAgICAgICAgIGxhc3RVc2VkRGF0ZTogbmV3IERhdGUoKS5nZXRUaW1lKCksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5zYXZlKEtleXMubG9jYWxEYXRhLCBjaXBoZXJzTG9jYWxEYXRhKTtcblxuICAgICAgICBpZiAodGhpcy5kZWNyeXB0ZWRDaXBoZXJDYWNoZSA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZGVjcnlwdGVkQ2lwaGVyQ2FjaGUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGNhY2hlZCA9IHRoaXMuZGVjcnlwdGVkQ2lwaGVyQ2FjaGVbaV07XG4gICAgICAgICAgICBpZiAoY2FjaGVkLmlkID09PSBpZCkge1xuICAgICAgICAgICAgICAgIGNhY2hlZC5sb2NhbERhdGEgPSBjaXBoZXJzTG9jYWxEYXRhW2lkXTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIHVwZGF0ZUxhc3RMYXVuY2hlZERhdGUoaWQ6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBsZXQgY2lwaGVyc0xvY2FsRGF0YSA9IGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2UuZ2V0PGFueT4oS2V5cy5sb2NhbERhdGEpO1xuICAgICAgICBpZiAoIWNpcGhlcnNMb2NhbERhdGEpIHtcbiAgICAgICAgICAgIGNpcGhlcnNMb2NhbERhdGEgPSB7fTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjaXBoZXJzTG9jYWxEYXRhW2lkXSkge1xuICAgICAgICAgICAgY2lwaGVyc0xvY2FsRGF0YVtpZF0ubGFzdExhdW5jaGVkID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjaXBoZXJzTG9jYWxEYXRhW2lkXSA9IHtcbiAgICAgICAgICAgICAgICBsYXN0VXNlZERhdGU6IG5ldyBEYXRlKCkuZ2V0VGltZSgpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2Uuc2F2ZShLZXlzLmxvY2FsRGF0YSwgY2lwaGVyc0xvY2FsRGF0YSk7XG5cbiAgICAgICAgaWYgKHRoaXMuZGVjcnlwdGVkQ2lwaGVyQ2FjaGUgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmRlY3J5cHRlZENpcGhlckNhY2hlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBjYWNoZWQgPSB0aGlzLmRlY3J5cHRlZENpcGhlckNhY2hlW2ldO1xuICAgICAgICAgICAgaWYgKGNhY2hlZC5pZCA9PT0gaWQpIHtcbiAgICAgICAgICAgICAgICBjYWNoZWQubG9jYWxEYXRhID0gY2lwaGVyc0xvY2FsRGF0YVtpZF07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhc3luYyBzYXZlTmV2ZXJEb21haW4oZG9tYWluOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgaWYgKGRvbWFpbiA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgZG9tYWlucyA9IGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2UuZ2V0PHsgW2lkOiBzdHJpbmddOiBhbnk7IH0+KEtleXMubmV2ZXJEb21haW5zKTtcbiAgICAgICAgaWYgKCFkb21haW5zKSB7XG4gICAgICAgICAgICBkb21haW5zID0ge307XG4gICAgICAgIH1cbiAgICAgICAgZG9tYWluc1tkb21haW5dID0gbnVsbDtcbiAgICAgICAgYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5zYXZlKEtleXMubmV2ZXJEb21haW5zLCBkb21haW5zKTtcbiAgICB9XG5cbiAgICBhc3luYyBzYXZlV2l0aFNlcnZlcihjaXBoZXI6IENpcGhlcik6IFByb21pc2U8YW55PiB7XG4gICAgICAgIGxldCByZXNwb25zZTogQ2lwaGVyUmVzcG9uc2U7XG4gICAgICAgIGlmIChjaXBoZXIuaWQgPT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKGNpcGhlci5jb2xsZWN0aW9uSWRzICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXF1ZXN0ID0gbmV3IENpcGhlckNyZWF0ZVJlcXVlc3QoY2lwaGVyKTtcbiAgICAgICAgICAgICAgICByZXNwb25zZSA9IGF3YWl0IHRoaXMuYXBpU2VydmljZS5wb3N0Q2lwaGVyQ3JlYXRlKHJlcXVlc3QpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXF1ZXN0ID0gbmV3IENpcGhlclJlcXVlc3QoY2lwaGVyKTtcbiAgICAgICAgICAgICAgICByZXNwb25zZSA9IGF3YWl0IHRoaXMuYXBpU2VydmljZS5wb3N0Q2lwaGVyKHJlcXVlc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2lwaGVyLmlkID0gcmVzcG9uc2UuaWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCByZXF1ZXN0ID0gbmV3IENpcGhlclJlcXVlc3QoY2lwaGVyKTtcbiAgICAgICAgICAgIHJlc3BvbnNlID0gYXdhaXQgdGhpcy5hcGlTZXJ2aWNlLnB1dENpcGhlcihjaXBoZXIuaWQsIHJlcXVlc3QpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdXNlcklkID0gYXdhaXQgdGhpcy51c2VyU2VydmljZS5nZXRVc2VySWQoKTtcbiAgICAgICAgY29uc3QgZGF0YSA9IG5ldyBDaXBoZXJEYXRhKHJlc3BvbnNlLCB1c2VySWQsIGNpcGhlci5jb2xsZWN0aW9uSWRzKTtcbiAgICAgICAgYXdhaXQgdGhpcy51cHNlcnQoZGF0YSk7XG4gICAgfVxuXG4gICAgYXN5bmMgc2hhcmVXaXRoU2VydmVyKGNpcGhlcjogQ2lwaGVyVmlldywgb3JnYW5pemF0aW9uSWQ6IHN0cmluZywgY29sbGVjdGlvbklkczogc3RyaW5nW10pOiBQcm9taXNlPGFueT4ge1xuICAgICAgICBjb25zdCBhdHRhY2htZW50UHJvbWlzZXM6IFByb21pc2U8YW55PltdID0gW107XG4gICAgICAgIGlmIChjaXBoZXIuYXR0YWNobWVudHMgIT0gbnVsbCkge1xuICAgICAgICAgICAgY2lwaGVyLmF0dGFjaG1lbnRzLmZvckVhY2goKGF0dGFjaG1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoYXR0YWNobWVudC5rZXkgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBhdHRhY2htZW50UHJvbWlzZXMucHVzaCh0aGlzLnNoYXJlQXR0YWNobWVudFdpdGhTZXJ2ZXIoYXR0YWNobWVudCwgY2lwaGVyLmlkLCBvcmdhbml6YXRpb25JZCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGF3YWl0IFByb21pc2UuYWxsKGF0dGFjaG1lbnRQcm9taXNlcyk7XG5cbiAgICAgICAgY2lwaGVyLm9yZ2FuaXphdGlvbklkID0gb3JnYW5pemF0aW9uSWQ7XG4gICAgICAgIGNpcGhlci5jb2xsZWN0aW9uSWRzID0gY29sbGVjdGlvbklkcztcbiAgICAgICAgY29uc3QgZW5jQ2lwaGVyID0gYXdhaXQgdGhpcy5lbmNyeXB0KGNpcGhlcik7XG4gICAgICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgQ2lwaGVyU2hhcmVSZXF1ZXN0KGVuY0NpcGhlcik7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5hcGlTZXJ2aWNlLnB1dFNoYXJlQ2lwaGVyKGNpcGhlci5pZCwgcmVxdWVzdCk7XG4gICAgICAgIGNvbnN0IHVzZXJJZCA9IGF3YWl0IHRoaXMudXNlclNlcnZpY2UuZ2V0VXNlcklkKCk7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBuZXcgQ2lwaGVyRGF0YShyZXNwb25zZSwgdXNlcklkLCBjb2xsZWN0aW9uSWRzKTtcbiAgICAgICAgYXdhaXQgdGhpcy51cHNlcnQoZGF0YSk7XG4gICAgfVxuXG4gICAgYXN5bmMgc2hhcmVNYW55V2l0aFNlcnZlcihjaXBoZXJzOiBDaXBoZXJWaWV3W10sIG9yZ2FuaXphdGlvbklkOiBzdHJpbmcsIGNvbGxlY3Rpb25JZHM6IHN0cmluZ1tdKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgY29uc3QgcHJvbWlzZXM6IFByb21pc2U8YW55PltdID0gW107XG4gICAgICAgIGNvbnN0IGVuY0NpcGhlcnM6IENpcGhlcltdID0gW107XG4gICAgICAgIGZvciAoY29uc3QgY2lwaGVyIG9mIGNpcGhlcnMpIHtcbiAgICAgICAgICAgIGNpcGhlci5vcmdhbml6YXRpb25JZCA9IG9yZ2FuaXphdGlvbklkO1xuICAgICAgICAgICAgY2lwaGVyLmNvbGxlY3Rpb25JZHMgPSBjb2xsZWN0aW9uSWRzO1xuICAgICAgICAgICAgcHJvbWlzZXMucHVzaCh0aGlzLmVuY3J5cHQoY2lwaGVyKS50aGVuKChjKSA9PiB7XG4gICAgICAgICAgICAgICAgZW5jQ2lwaGVycy5wdXNoKGMpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgICAgIGF3YWl0IFByb21pc2UuYWxsKHByb21pc2VzKTtcbiAgICAgICAgY29uc3QgcmVxdWVzdCA9IG5ldyBDaXBoZXJCdWxrU2hhcmVSZXF1ZXN0KGVuY0NpcGhlcnMsIGNvbGxlY3Rpb25JZHMpO1xuICAgICAgICBhd2FpdCB0aGlzLmFwaVNlcnZpY2UucHV0U2hhcmVDaXBoZXJzKHJlcXVlc3QpO1xuICAgICAgICBjb25zdCB1c2VySWQgPSBhd2FpdCB0aGlzLnVzZXJTZXJ2aWNlLmdldFVzZXJJZCgpO1xuICAgICAgICBhd2FpdCB0aGlzLnVwc2VydChlbmNDaXBoZXJzLm1hcCgoYykgPT4gYy50b0NpcGhlckRhdGEodXNlcklkKSkpO1xuICAgIH1cblxuICAgIHNhdmVBdHRhY2htZW50V2l0aFNlcnZlcihjaXBoZXI6IENpcGhlciwgdW5lbmNyeXB0ZWRGaWxlOiBhbnksIGFkbWluID0gZmFsc2UpOiBQcm9taXNlPENpcGhlcj4ge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICAgICAgICAgIHJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcih1bmVuY3J5cHRlZEZpbGUpO1xuICAgICAgICAgICAgcmVhZGVyLm9ubG9hZCA9IGFzeW5jIChldnQ6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNEYXRhID0gYXdhaXQgdGhpcy5zYXZlQXR0YWNobWVudFJhd1dpdGhTZXJ2ZXIoY2lwaGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgdW5lbmNyeXB0ZWRGaWxlLm5hbWUsIGV2dC50YXJnZXQucmVzdWx0LCBhZG1pbik7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoY0RhdGEpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZWFkZXIub25lcnJvciA9IChldnQpID0+IHtcbiAgICAgICAgICAgICAgICByZWplY3QoJ0Vycm9yIHJlYWRpbmcgZmlsZS4nKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGFzeW5jIHNhdmVBdHRhY2htZW50UmF3V2l0aFNlcnZlcihjaXBoZXI6IENpcGhlciwgZmlsZW5hbWU6IHN0cmluZyxcbiAgICAgICAgZGF0YTogQXJyYXlCdWZmZXIsIGFkbWluID0gZmFsc2UpOiBQcm9taXNlPENpcGhlcj4ge1xuICAgICAgICBjb25zdCBrZXkgPSBhd2FpdCB0aGlzLmNyeXB0b1NlcnZpY2UuZ2V0T3JnS2V5KGNpcGhlci5vcmdhbml6YXRpb25JZCk7XG4gICAgICAgIGNvbnN0IGVuY0ZpbGVOYW1lID0gYXdhaXQgdGhpcy5jcnlwdG9TZXJ2aWNlLmVuY3J5cHQoZmlsZW5hbWUsIGtleSk7XG5cbiAgICAgICAgY29uc3QgZGF0YUVuY0tleSA9IGF3YWl0IHRoaXMuY3J5cHRvU2VydmljZS5tYWtlRW5jS2V5KGtleSk7XG4gICAgICAgIGNvbnN0IGVuY0RhdGEgPSBhd2FpdCB0aGlzLmNyeXB0b1NlcnZpY2UuZW5jcnlwdFRvQnl0ZXMoZGF0YSwgZGF0YUVuY0tleVswXSk7XG5cbiAgICAgICAgY29uc3QgZmQgPSBuZXcgRm9ybURhdGEoKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGJsb2IgPSBuZXcgQmxvYihbZW5jRGF0YV0sIHsgdHlwZTogJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbScgfSk7XG4gICAgICAgICAgICBmZC5hcHBlbmQoJ2tleScsIGRhdGFFbmNLZXlbMV0uZW5jcnlwdGVkU3RyaW5nKTtcbiAgICAgICAgICAgIGZkLmFwcGVuZCgnZGF0YScsIGJsb2IsIGVuY0ZpbGVOYW1lLmVuY3J5cHRlZFN0cmluZyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGlmIChVdGlscy5pc05vZGUgJiYgIVV0aWxzLmlzQnJvd3Nlcikge1xuICAgICAgICAgICAgICAgIGZkLmFwcGVuZCgna2V5JywgZGF0YUVuY0tleVsxXS5lbmNyeXB0ZWRTdHJpbmcpO1xuICAgICAgICAgICAgICAgIGZkLmFwcGVuZCgnZGF0YScsIEJ1ZmZlci5mcm9tKGVuY0RhdGEpIGFzIGFueSwge1xuICAgICAgICAgICAgICAgICAgICBmaWxlcGF0aDogZW5jRmlsZU5hbWUuZW5jcnlwdGVkU3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbScsXG4gICAgICAgICAgICAgICAgfSBhcyBhbnkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHJlc3BvbnNlOiBDaXBoZXJSZXNwb25zZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChhZG1pbikge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gYXdhaXQgdGhpcy5hcGlTZXJ2aWNlLnBvc3RDaXBoZXJBdHRhY2htZW50QWRtaW4oY2lwaGVyLmlkLCBmZCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gYXdhaXQgdGhpcy5hcGlTZXJ2aWNlLnBvc3RDaXBoZXJBdHRhY2htZW50KGNpcGhlci5pZCwgZmQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKGUgYXMgRXJyb3JSZXNwb25zZSkuZ2V0U2luZ2xlTWVzc2FnZSgpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHVzZXJJZCA9IGF3YWl0IHRoaXMudXNlclNlcnZpY2UuZ2V0VXNlcklkKCk7XG4gICAgICAgIGNvbnN0IGNEYXRhID0gbmV3IENpcGhlckRhdGEocmVzcG9uc2UsIHVzZXJJZCwgY2lwaGVyLmNvbGxlY3Rpb25JZHMpO1xuICAgICAgICBpZiAoIWFkbWluKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnVwc2VydChjRGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBDaXBoZXIoY0RhdGEpO1xuICAgIH1cblxuICAgIGFzeW5jIHNhdmVDb2xsZWN0aW9uc1dpdGhTZXJ2ZXIoY2lwaGVyOiBDaXBoZXIpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICBjb25zdCByZXF1ZXN0ID0gbmV3IENpcGhlckNvbGxlY3Rpb25zUmVxdWVzdChjaXBoZXIuY29sbGVjdGlvbklkcyk7XG4gICAgICAgIGF3YWl0IHRoaXMuYXBpU2VydmljZS5wdXRDaXBoZXJDb2xsZWN0aW9ucyhjaXBoZXIuaWQsIHJlcXVlc3QpO1xuICAgICAgICBjb25zdCB1c2VySWQgPSBhd2FpdCB0aGlzLnVzZXJTZXJ2aWNlLmdldFVzZXJJZCgpO1xuICAgICAgICBjb25zdCBkYXRhID0gY2lwaGVyLnRvQ2lwaGVyRGF0YSh1c2VySWQpO1xuICAgICAgICBhd2FpdCB0aGlzLnVwc2VydChkYXRhKTtcbiAgICB9XG5cbiAgICBhc3luYyB1cHNlcnQoY2lwaGVyOiBDaXBoZXJEYXRhIHwgQ2lwaGVyRGF0YVtdKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgY29uc3QgdXNlcklkID0gYXdhaXQgdGhpcy51c2VyU2VydmljZS5nZXRVc2VySWQoKTtcbiAgICAgICAgbGV0IGNpcGhlcnMgPSBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldDx7IFtpZDogc3RyaW5nXTogQ2lwaGVyRGF0YTsgfT4oXG4gICAgICAgICAgICBLZXlzLmNpcGhlcnNQcmVmaXggKyB1c2VySWQpO1xuICAgICAgICBpZiAoY2lwaGVycyA9PSBudWxsKSB7XG4gICAgICAgICAgICBjaXBoZXJzID0ge307XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2lwaGVyIGluc3RhbmNlb2YgQ2lwaGVyRGF0YSkge1xuICAgICAgICAgICAgY29uc3QgYyA9IGNpcGhlciBhcyBDaXBoZXJEYXRhO1xuICAgICAgICAgICAgY2lwaGVyc1tjLmlkXSA9IGM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAoY2lwaGVyIGFzIENpcGhlckRhdGFbXSkuZm9yRWFjaCgoYykgPT4ge1xuICAgICAgICAgICAgICAgIGNpcGhlcnNbYy5pZF0gPSBjO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLnNhdmUoS2V5cy5jaXBoZXJzUHJlZml4ICsgdXNlcklkLCBjaXBoZXJzKTtcbiAgICAgICAgdGhpcy5kZWNyeXB0ZWRDaXBoZXJDYWNoZSA9IG51bGw7XG4gICAgfVxuXG4gICAgYXN5bmMgcmVwbGFjZShjaXBoZXJzOiB7IFtpZDogc3RyaW5nXTogQ2lwaGVyRGF0YTsgfSk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIGNvbnN0IHVzZXJJZCA9IGF3YWl0IHRoaXMudXNlclNlcnZpY2UuZ2V0VXNlcklkKCk7XG4gICAgICAgIGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2Uuc2F2ZShLZXlzLmNpcGhlcnNQcmVmaXggKyB1c2VySWQsIGNpcGhlcnMpO1xuICAgICAgICB0aGlzLmRlY3J5cHRlZENpcGhlckNhY2hlID0gbnVsbDtcbiAgICB9XG5cbiAgICBhc3luYyBjbGVhcih1c2VySWQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2UucmVtb3ZlKEtleXMuY2lwaGVyc1ByZWZpeCArIHVzZXJJZCk7XG4gICAgICAgIHRoaXMuY2xlYXJDYWNoZSgpO1xuICAgIH1cblxuICAgIGFzeW5jIG1vdmVNYW55V2l0aFNlcnZlcihpZHM6IHN0cmluZ1tdLCBmb2xkZXJJZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgYXdhaXQgdGhpcy5hcGlTZXJ2aWNlLnB1dE1vdmVDaXBoZXJzKG5ldyBDaXBoZXJCdWxrTW92ZVJlcXVlc3QoaWRzLCBmb2xkZXJJZCkpO1xuXG4gICAgICAgIGNvbnN0IHVzZXJJZCA9IGF3YWl0IHRoaXMudXNlclNlcnZpY2UuZ2V0VXNlcklkKCk7XG4gICAgICAgIGxldCBjaXBoZXJzID0gYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5nZXQ8eyBbaWQ6IHN0cmluZ106IENpcGhlckRhdGE7IH0+KFxuICAgICAgICAgICAgS2V5cy5jaXBoZXJzUHJlZml4ICsgdXNlcklkKTtcbiAgICAgICAgaWYgKGNpcGhlcnMgPT0gbnVsbCkge1xuICAgICAgICAgICAgY2lwaGVycyA9IHt9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWRzLmZvckVhY2goKGlkKSA9PiB7XG4gICAgICAgICAgICBpZiAoY2lwaGVycy5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICAgICAgICAgICAgICBjaXBoZXJzW2lkXS5mb2xkZXJJZCA9IGZvbGRlcklkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLnNhdmUoS2V5cy5jaXBoZXJzUHJlZml4ICsgdXNlcklkLCBjaXBoZXJzKTtcbiAgICAgICAgdGhpcy5kZWNyeXB0ZWRDaXBoZXJDYWNoZSA9IG51bGw7XG4gICAgfVxuXG4gICAgYXN5bmMgZGVsZXRlKGlkOiBzdHJpbmcgfCBzdHJpbmdbXSk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIGNvbnN0IHVzZXJJZCA9IGF3YWl0IHRoaXMudXNlclNlcnZpY2UuZ2V0VXNlcklkKCk7XG4gICAgICAgIGNvbnN0IGNpcGhlcnMgPSBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldDx7IFtpZDogc3RyaW5nXTogQ2lwaGVyRGF0YTsgfT4oXG4gICAgICAgICAgICBLZXlzLmNpcGhlcnNQcmVmaXggKyB1c2VySWQpO1xuICAgICAgICBpZiAoY2lwaGVycyA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGlkID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgaWYgKGNpcGhlcnNbaWRdID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWxldGUgY2lwaGVyc1tpZF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAoaWQgYXMgc3RyaW5nW10pLmZvckVhY2goKGkpID0+IHtcbiAgICAgICAgICAgICAgICBkZWxldGUgY2lwaGVyc1tpXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5zYXZlKEtleXMuY2lwaGVyc1ByZWZpeCArIHVzZXJJZCwgY2lwaGVycyk7XG4gICAgICAgIHRoaXMuZGVjcnlwdGVkQ2lwaGVyQ2FjaGUgPSBudWxsO1xuICAgIH1cblxuICAgIGFzeW5jIGRlbGV0ZVdpdGhTZXJ2ZXIoaWQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIGF3YWl0IHRoaXMuYXBpU2VydmljZS5kZWxldGVDaXBoZXIoaWQpO1xuICAgICAgICBhd2FpdCB0aGlzLmRlbGV0ZShpZCk7XG4gICAgfVxuXG4gICAgYXN5bmMgZGVsZXRlTWFueVdpdGhTZXJ2ZXIoaWRzOiBzdHJpbmdbXSk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIGF3YWl0IHRoaXMuYXBpU2VydmljZS5kZWxldGVNYW55Q2lwaGVycyhuZXcgQ2lwaGVyQnVsa0RlbGV0ZVJlcXVlc3QoaWRzKSk7XG4gICAgICAgIGF3YWl0IHRoaXMuZGVsZXRlKGlkcyk7XG4gICAgfVxuXG4gICAgYXN5bmMgZGVsZXRlQXR0YWNobWVudChpZDogc3RyaW5nLCBhdHRhY2htZW50SWQ6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCB1c2VySWQgPSBhd2FpdCB0aGlzLnVzZXJTZXJ2aWNlLmdldFVzZXJJZCgpO1xuICAgICAgICBjb25zdCBjaXBoZXJzID0gYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5nZXQ8eyBbaWQ6IHN0cmluZ106IENpcGhlckRhdGE7IH0+KFxuICAgICAgICAgICAgS2V5cy5jaXBoZXJzUHJlZml4ICsgdXNlcklkKTtcblxuICAgICAgICBpZiAoY2lwaGVycyA9PSBudWxsIHx8ICFjaXBoZXJzLmhhc093blByb3BlcnR5KGlkKSB8fCBjaXBoZXJzW2lkXS5hdHRhY2htZW50cyA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNpcGhlcnNbaWRdLmF0dGFjaG1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoY2lwaGVyc1tpZF0uYXR0YWNobWVudHNbaV0uaWQgPT09IGF0dGFjaG1lbnRJZCkge1xuICAgICAgICAgICAgICAgIGNpcGhlcnNbaWRdLmF0dGFjaG1lbnRzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2Uuc2F2ZShLZXlzLmNpcGhlcnNQcmVmaXggKyB1c2VySWQsIGNpcGhlcnMpO1xuICAgICAgICB0aGlzLmRlY3J5cHRlZENpcGhlckNhY2hlID0gbnVsbDtcbiAgICB9XG5cbiAgICBhc3luYyBkZWxldGVBdHRhY2htZW50V2l0aFNlcnZlcihpZDogc3RyaW5nLCBhdHRhY2htZW50SWQ6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5hcGlTZXJ2aWNlLmRlbGV0ZUNpcGhlckF0dGFjaG1lbnQoaWQsIGF0dGFjaG1lbnRJZCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCgoZSBhcyBFcnJvclJlc3BvbnNlKS5nZXRTaW5nbGVNZXNzYWdlKCkpO1xuICAgICAgICB9XG4gICAgICAgIGF3YWl0IHRoaXMuZGVsZXRlQXR0YWNobWVudChpZCwgYXR0YWNobWVudElkKTtcbiAgICB9XG5cbiAgICBzb3J0Q2lwaGVyc0J5TGFzdFVzZWQoYTogQ2lwaGVyVmlldywgYjogQ2lwaGVyVmlldyk6IG51bWJlciB7XG4gICAgICAgIGNvbnN0IGFMYXN0VXNlZCA9IGEubG9jYWxEYXRhICYmIGEubG9jYWxEYXRhLmxhc3RVc2VkRGF0ZSA/IGEubG9jYWxEYXRhLmxhc3RVc2VkRGF0ZSBhcyBudW1iZXIgOiBudWxsO1xuICAgICAgICBjb25zdCBiTGFzdFVzZWQgPSBiLmxvY2FsRGF0YSAmJiBiLmxvY2FsRGF0YS5sYXN0VXNlZERhdGUgPyBiLmxvY2FsRGF0YS5sYXN0VXNlZERhdGUgYXMgbnVtYmVyIDogbnVsbDtcblxuICAgICAgICBjb25zdCBib3RoTm90TnVsbCA9IGFMYXN0VXNlZCAhPSBudWxsICYmIGJMYXN0VXNlZCAhPSBudWxsO1xuICAgICAgICBpZiAoYm90aE5vdE51bGwgJiYgYUxhc3RVc2VkIDwgYkxhc3RVc2VkKSB7XG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYUxhc3RVc2VkICE9IG51bGwgJiYgYkxhc3RVc2VkID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChib3RoTm90TnVsbCAmJiBhTGFzdFVzZWQgPiBiTGFzdFVzZWQpIHtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYkxhc3RVc2VkICE9IG51bGwgJiYgYUxhc3RVc2VkID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgc29ydENpcGhlcnNCeUxhc3RVc2VkVGhlbk5hbWUoYTogQ2lwaGVyVmlldywgYjogQ2lwaGVyVmlldyk6IG51bWJlciB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuc29ydENpcGhlcnNCeUxhc3RVc2VkKGEsIGIpO1xuICAgICAgICBpZiAocmVzdWx0ICE9PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TG9jYWxlU29ydGluZ0Z1bmN0aW9uKCkoYSwgYik7XG4gICAgfVxuXG4gICAgZ2V0TG9jYWxlU29ydGluZ0Z1bmN0aW9uKCk6IChhOiBDaXBoZXJWaWV3LCBiOiBDaXBoZXJWaWV3KSA9PiBudW1iZXIge1xuICAgICAgICByZXR1cm4gKGEsIGIpID0+IHtcbiAgICAgICAgICAgIGxldCBhTmFtZSA9IGEubmFtZTtcbiAgICAgICAgICAgIGxldCBiTmFtZSA9IGIubmFtZTtcblxuICAgICAgICAgICAgaWYgKGFOYW1lID09IG51bGwgJiYgYk5hbWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhTmFtZSAhPSBudWxsICYmIGJOYW1lID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhTmFtZSA9PSBudWxsICYmIGJOYW1lID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5pMThuU2VydmljZS5jb2xsYXRvciA/IHRoaXMuaTE4blNlcnZpY2UuY29sbGF0b3IuY29tcGFyZShhTmFtZSwgYk5hbWUpIDpcbiAgICAgICAgICAgICAgICBhTmFtZS5sb2NhbGVDb21wYXJlKGJOYW1lKTtcblxuICAgICAgICAgICAgaWYgKHJlc3VsdCAhPT0gMCB8fCBhLnR5cGUgIT09IENpcGhlclR5cGUuTG9naW4gfHwgYi50eXBlICE9PSBDaXBoZXJUeXBlLkxvZ2luKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGEubG9naW4udXNlcm5hbWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGFOYW1lICs9IGEubG9naW4udXNlcm5hbWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChiLmxvZ2luLnVzZXJuYW1lICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBiTmFtZSArPSBiLmxvZ2luLnVzZXJuYW1lO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pMThuU2VydmljZS5jb2xsYXRvciA/IHRoaXMuaTE4blNlcnZpY2UuY29sbGF0b3IuY29tcGFyZShhTmFtZSwgYk5hbWUpIDpcbiAgICAgICAgICAgICAgICBhTmFtZS5sb2NhbGVDb21wYXJlKGJOYW1lKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBhc3luYyBzb2Z0RGVsZXRlKGlkOiBzdHJpbmcgfCBzdHJpbmdbXSk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIGNvbnN0IHVzZXJJZCA9IGF3YWl0IHRoaXMudXNlclNlcnZpY2UuZ2V0VXNlcklkKCk7XG4gICAgICAgIGNvbnN0IGNpcGhlcnMgPSBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldDx7IFtpZDogc3RyaW5nXTogQ2lwaGVyRGF0YTsgfT4oXG4gICAgICAgICAgICBLZXlzLmNpcGhlcnNQcmVmaXggKyB1c2VySWQpO1xuICAgICAgICBpZiAoY2lwaGVycyA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzZXREZWxldGVkRGF0ZSA9IChjaXBoZXJJZDogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICBpZiAoY2lwaGVyc1tjaXBoZXJJZF0gPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNpcGhlcnNbY2lwaGVySWRdLmRlbGV0ZWREYXRlID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmICh0eXBlb2YgaWQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBzZXREZWxldGVkRGF0ZShpZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAoaWQgYXMgc3RyaW5nW10pLmZvckVhY2goc2V0RGVsZXRlZERhdGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5zYXZlKEtleXMuY2lwaGVyc1ByZWZpeCArIHVzZXJJZCwgY2lwaGVycyk7XG4gICAgICAgIHRoaXMuZGVjcnlwdGVkQ2lwaGVyQ2FjaGUgPSBudWxsO1xuICAgIH1cblxuICAgIGFzeW5jIHNvZnREZWxldGVXaXRoU2VydmVyKGlkOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICBhd2FpdCB0aGlzLmFwaVNlcnZpY2UucHV0RGVsZXRlQ2lwaGVyKGlkKTtcbiAgICAgICAgYXdhaXQgdGhpcy5zb2Z0RGVsZXRlKGlkKTtcbiAgICB9XG5cbiAgICBhc3luYyBzb2Z0RGVsZXRlTWFueVdpdGhTZXJ2ZXIoaWRzOiBzdHJpbmdbXSk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIGF3YWl0IHRoaXMuYXBpU2VydmljZS5wdXREZWxldGVNYW55Q2lwaGVycyhuZXcgQ2lwaGVyQnVsa0RlbGV0ZVJlcXVlc3QoaWRzKSk7XG4gICAgICAgIGF3YWl0IHRoaXMuc29mdERlbGV0ZShpZHMpO1xuICAgIH1cblxuICAgIGFzeW5jIHJlc3RvcmUoaWQ6IHN0cmluZyB8IHN0cmluZ1tdKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgY29uc3QgdXNlcklkID0gYXdhaXQgdGhpcy51c2VyU2VydmljZS5nZXRVc2VySWQoKTtcbiAgICAgICAgY29uc3QgY2lwaGVycyA9IGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2UuZ2V0PHsgW2lkOiBzdHJpbmddOiBDaXBoZXJEYXRhOyB9PihcbiAgICAgICAgICAgIEtleXMuY2lwaGVyc1ByZWZpeCArIHVzZXJJZCk7XG4gICAgICAgIGlmIChjaXBoZXJzID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGNsZWFyRGVsZXRlZERhdGUgPSAoY2lwaGVySWQ6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgaWYgKGNpcGhlcnNbY2lwaGVySWRdID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjaXBoZXJzW2NpcGhlcklkXS5kZWxldGVkRGF0ZSA9IG51bGw7XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKHR5cGVvZiBpZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGNsZWFyRGVsZXRlZERhdGUoaWQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgKGlkIGFzIHN0cmluZ1tdKS5mb3JFYWNoKGNsZWFyRGVsZXRlZERhdGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5zYXZlKEtleXMuY2lwaGVyc1ByZWZpeCArIHVzZXJJZCwgY2lwaGVycyk7XG4gICAgICAgIHRoaXMuZGVjcnlwdGVkQ2lwaGVyQ2FjaGUgPSBudWxsO1xuICAgIH1cblxuICAgIGFzeW5jIHJlc3RvcmVXaXRoU2VydmVyKGlkOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICBhd2FpdCB0aGlzLmFwaVNlcnZpY2UucHV0UmVzdG9yZUNpcGhlcihpZCk7XG4gICAgICAgIGF3YWl0IHRoaXMucmVzdG9yZShpZCk7XG4gICAgfVxuXG4gICAgYXN5bmMgcmVzdG9yZU1hbnlXaXRoU2VydmVyKGlkczogc3RyaW5nW10pOiBQcm9taXNlPGFueT4ge1xuICAgICAgICBhd2FpdCB0aGlzLmFwaVNlcnZpY2UucHV0UmVzdG9yZU1hbnlDaXBoZXJzKG5ldyBDaXBoZXJCdWxrUmVzdG9yZVJlcXVlc3QoaWRzKSk7XG4gICAgICAgIGF3YWl0IHRoaXMucmVzdG9yZShpZHMpO1xuICAgIH1cblxuICAgIC8vIEhlbHBlcnNcblxuICAgIHByaXZhdGUgYXN5bmMgc2hhcmVBdHRhY2htZW50V2l0aFNlcnZlcihhdHRhY2htZW50VmlldzogQXR0YWNobWVudFZpZXcsIGNpcGhlcklkOiBzdHJpbmcsXG4gICAgICAgIG9yZ2FuaXphdGlvbklkOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICBjb25zdCBhdHRhY2htZW50UmVzcG9uc2UgPSBhd2FpdCB0aGlzLmFwaVNlcnZpY2UubmF0aXZlRmV0Y2goXG4gICAgICAgICAgICBuZXcgUmVxdWVzdChhdHRhY2htZW50Vmlldy51cmwsIHsgY2FjaGU6ICduby1zdG9yZScgfSkpO1xuICAgICAgICBpZiAoYXR0YWNobWVudFJlc3BvbnNlLnN0YXR1cyAhPT0gMjAwKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcignRmFpbGVkIHRvIGRvd25sb2FkIGF0dGFjaG1lbnQ6ICcgKyBhdHRhY2htZW50UmVzcG9uc2Uuc3RhdHVzLnRvU3RyaW5nKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgYnVmID0gYXdhaXQgYXR0YWNobWVudFJlc3BvbnNlLmFycmF5QnVmZmVyKCk7XG4gICAgICAgIGNvbnN0IGRlY0J1ZiA9IGF3YWl0IHRoaXMuY3J5cHRvU2VydmljZS5kZWNyeXB0RnJvbUJ5dGVzKGJ1ZiwgbnVsbCk7XG4gICAgICAgIGNvbnN0IGtleSA9IGF3YWl0IHRoaXMuY3J5cHRvU2VydmljZS5nZXRPcmdLZXkob3JnYW5pemF0aW9uSWQpO1xuICAgICAgICBjb25zdCBlbmNGaWxlTmFtZSA9IGF3YWl0IHRoaXMuY3J5cHRvU2VydmljZS5lbmNyeXB0KGF0dGFjaG1lbnRWaWV3LmZpbGVOYW1lLCBrZXkpO1xuXG4gICAgICAgIGNvbnN0IGRhdGFFbmNLZXkgPSBhd2FpdCB0aGlzLmNyeXB0b1NlcnZpY2UubWFrZUVuY0tleShrZXkpO1xuICAgICAgICBjb25zdCBlbmNEYXRhID0gYXdhaXQgdGhpcy5jcnlwdG9TZXJ2aWNlLmVuY3J5cHRUb0J5dGVzKGRlY0J1ZiwgZGF0YUVuY0tleVswXSk7XG5cbiAgICAgICAgY29uc3QgZmQgPSBuZXcgRm9ybURhdGEoKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGJsb2IgPSBuZXcgQmxvYihbZW5jRGF0YV0sIHsgdHlwZTogJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbScgfSk7XG4gICAgICAgICAgICBmZC5hcHBlbmQoJ2tleScsIGRhdGFFbmNLZXlbMV0uZW5jcnlwdGVkU3RyaW5nKTtcbiAgICAgICAgICAgIGZkLmFwcGVuZCgnZGF0YScsIGJsb2IsIGVuY0ZpbGVOYW1lLmVuY3J5cHRlZFN0cmluZyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGlmIChVdGlscy5pc05vZGUgJiYgIVV0aWxzLmlzQnJvd3Nlcikge1xuICAgICAgICAgICAgICAgIGZkLmFwcGVuZCgna2V5JywgZGF0YUVuY0tleVsxXS5lbmNyeXB0ZWRTdHJpbmcpO1xuICAgICAgICAgICAgICAgIGZkLmFwcGVuZCgnZGF0YScsIEJ1ZmZlci5mcm9tKGVuY0RhdGEpIGFzIGFueSwge1xuICAgICAgICAgICAgICAgICAgICBmaWxlcGF0aDogZW5jRmlsZU5hbWUuZW5jcnlwdGVkU3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbScsXG4gICAgICAgICAgICAgICAgfSBhcyBhbnkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuYXBpU2VydmljZS5wb3N0U2hhcmVDaXBoZXJBdHRhY2htZW50KGNpcGhlcklkLCBhdHRhY2htZW50Vmlldy5pZCwgZmQsIG9yZ2FuaXphdGlvbklkKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKChlIGFzIEVycm9yUmVzcG9uc2UpLmdldFNpbmdsZU1lc3NhZ2UoKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIGVuY3J5cHRPYmpQcm9wZXJ0eTxWIGV4dGVuZHMgVmlldywgRCBleHRlbmRzIERvbWFpbj4obW9kZWw6IFYsIG9iajogRCxcbiAgICAgICAgbWFwOiBhbnksIGtleTogU3ltbWV0cmljQ3J5cHRvS2V5KTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IHByb21pc2VzID0gW107XG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuXG4gICAgICAgIGZvciAoY29uc3QgcHJvcCBpbiBtYXApIHtcbiAgICAgICAgICAgIGlmICghbWFwLmhhc093blByb3BlcnR5KHByb3ApKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZVxuICAgICAgICAgICAgKGZ1bmN0aW9uICh0aGVQcm9wLCB0aGVPYmopIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwID0gUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1vZGVsUHJvcCA9IChtb2RlbCBhcyBhbnkpWyhtYXBbdGhlUHJvcF0gfHwgdGhlUHJvcCldO1xuICAgICAgICAgICAgICAgICAgICBpZiAobW9kZWxQcm9wICYmIG1vZGVsUHJvcCAhPT0gJycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLmNyeXB0b1NlcnZpY2UuZW5jcnlwdChtb2RlbFByb3AsIGtleSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfSkudGhlbigodmFsOiBDaXBoZXJTdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgKHRoZU9iaiBhcyBhbnkpW3RoZVByb3BdID0gdmFsO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHByb21pc2VzLnB1c2gocCk7XG4gICAgICAgICAgICB9KShwcm9wLCBvYmopO1xuICAgICAgICB9XG5cbiAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgZW5jcnlwdENpcGhlckRhdGEoY2lwaGVyOiBDaXBoZXIsIG1vZGVsOiBDaXBoZXJWaWV3LCBrZXk6IFN5bW1ldHJpY0NyeXB0b0tleSkge1xuICAgICAgICBzd2l0Y2ggKGNpcGhlci50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIENpcGhlclR5cGUuTG9naW46XG4gICAgICAgICAgICAgICAgY2lwaGVyLmxvZ2luID0gbmV3IExvZ2luKCk7XG4gICAgICAgICAgICAgICAgY2lwaGVyLmxvZ2luLnBhc3N3b3JkUmV2aXNpb25EYXRlID0gbW9kZWwubG9naW4ucGFzc3dvcmRSZXZpc2lvbkRhdGU7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5lbmNyeXB0T2JqUHJvcGVydHkobW9kZWwubG9naW4sIGNpcGhlci5sb2dpbiwge1xuICAgICAgICAgICAgICAgICAgICB1c2VybmFtZTogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgcGFzc3dvcmQ6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHRvdHA6IG51bGwsXG4gICAgICAgICAgICAgICAgfSwga2V5KTtcblxuICAgICAgICAgICAgICAgIGlmIChtb2RlbC5sb2dpbi51cmlzICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2lwaGVyLmxvZ2luLnVyaXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtb2RlbC5sb2dpbi51cmlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsb2dpblVyaSA9IG5ldyBMb2dpblVyaSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9naW5VcmkubWF0Y2ggPSBtb2RlbC5sb2dpbi51cmlzW2ldLm1hdGNoO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5lbmNyeXB0T2JqUHJvcGVydHkobW9kZWwubG9naW4udXJpc1tpXSwgbG9naW5VcmksIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmk6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBrZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2lwaGVyLmxvZ2luLnVyaXMucHVzaChsb2dpblVyaSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgY2FzZSBDaXBoZXJUeXBlLlNlY3VyZU5vdGU6XG4gICAgICAgICAgICAgICAgY2lwaGVyLnNlY3VyZU5vdGUgPSBuZXcgU2VjdXJlTm90ZSgpO1xuICAgICAgICAgICAgICAgIGNpcGhlci5zZWN1cmVOb3RlLnR5cGUgPSBtb2RlbC5zZWN1cmVOb3RlLnR5cGU7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgY2FzZSBDaXBoZXJUeXBlLkNhcmQ6XG4gICAgICAgICAgICAgICAgY2lwaGVyLmNhcmQgPSBuZXcgQ2FyZCgpO1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuZW5jcnlwdE9ialByb3BlcnR5KG1vZGVsLmNhcmQsIGNpcGhlci5jYXJkLCB7XG4gICAgICAgICAgICAgICAgICAgIGNhcmRob2xkZXJOYW1lOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBicmFuZDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbnVtYmVyOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBleHBNb250aDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgZXhwWWVhcjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgY29kZTogbnVsbCxcbiAgICAgICAgICAgICAgICB9LCBrZXkpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGNhc2UgQ2lwaGVyVHlwZS5JZGVudGl0eTpcbiAgICAgICAgICAgICAgICBjaXBoZXIuaWRlbnRpdHkgPSBuZXcgSWRlbnRpdHkoKTtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmVuY3J5cHRPYmpQcm9wZXJ0eShtb2RlbC5pZGVudGl0eSwgY2lwaGVyLmlkZW50aXR5LCB7XG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBmaXJzdE5hbWU6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1pZGRsZU5hbWU6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIGxhc3ROYW1lOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBhZGRyZXNzMTogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgYWRkcmVzczI6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIGFkZHJlc3MzOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBjaXR5OiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZTogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgcG9zdGFsQ29kZTogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgY291bnRyeTogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgY29tcGFueTogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgZW1haWw6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHBob25lOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBzc246IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHVzZXJuYW1lOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICBwYXNzcG9ydE51bWJlcjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbGljZW5zZU51bWJlcjogbnVsbCxcbiAgICAgICAgICAgICAgICB9LCBrZXkpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIGNpcGhlciB0eXBlLicpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBnZXRDaXBoZXJGb3JVcmwodXJsOiBzdHJpbmcsIGxhc3RVc2VkOiBib29sZWFuLCBsYXN0TGF1bmNoZWQ6IGJvb2xlYW4pOiBQcm9taXNlPENpcGhlclZpZXc+IHtcbiAgICAgICAgaWYgKCF0aGlzLnNvcnRlZENpcGhlcnNDYWNoZS5pc0NhY2hlZCh1cmwpKSB7XG4gICAgICAgICAgICBjb25zdCBjaXBoZXJzID0gYXdhaXQgdGhpcy5nZXRBbGxEZWNyeXB0ZWRGb3JVcmwodXJsKTtcbiAgICAgICAgICAgIGlmICghY2lwaGVycykge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zb3J0ZWRDaXBoZXJzQ2FjaGUuYWRkQ2lwaGVycyh1cmwsIGNpcGhlcnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxhc3RMYXVuY2hlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc29ydGVkQ2lwaGVyc0NhY2hlLmdldExhc3RMYXVuY2hlZCh1cmwpO1xuICAgICAgICB9IGVsc2UgaWYgKGxhc3RVc2VkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zb3J0ZWRDaXBoZXJzQ2FjaGUuZ2V0TGFzdFVzZWQodXJsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNvcnRlZENpcGhlcnNDYWNoZS5nZXROZXh0KHVybCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCIvKiAoaWdub3JlZCkgKi8iLCJleHBvcnQgY2xhc3MgQ2lwaGVyQnVsa01vdmVSZXF1ZXN0IHtcbiAgICBpZHM6IHN0cmluZ1tdO1xuICAgIGZvbGRlcklkOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihpZHM6IHN0cmluZ1tdLCBmb2xkZXJJZDogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuaWRzID0gaWRzID09IG51bGwgPyBbXSA6IGlkcztcbiAgICAgICAgdGhpcy5mb2xkZXJJZCA9IGZvbGRlcklkO1xuICAgIH1cbn1cbiIsImV4cG9ydCBjbGFzcyBDaXBoZXJCdWxrUmVzdG9yZVJlcXVlc3Qge1xuICAgIGlkczogc3RyaW5nW107XG5cbiAgICBjb25zdHJ1Y3RvcihpZHM6IHN0cmluZ1tdKSB7XG4gICAgICAgIHRoaXMuaWRzID0gaWRzID09IG51bGwgPyBbXSA6IGlkcztcbiAgICB9XG59XG4iLCJleHBvcnQgY2xhc3MgQ2lwaGVyQ29sbGVjdGlvbnNSZXF1ZXN0IHtcbiAgICBjb2xsZWN0aW9uSWRzOiBzdHJpbmdbXTtcblxuICAgIGNvbnN0cnVjdG9yKGNvbGxlY3Rpb25JZHM6IHN0cmluZ1tdKSB7XG4gICAgICAgIHRoaXMuY29sbGVjdGlvbklkcyA9IGNvbGxlY3Rpb25JZHMgPT0gbnVsbCA/IFtdIDogY29sbGVjdGlvbklkcztcbiAgICB9XG59XG4iLCJleHBvcnQgZW51bSBFdmVudFR5cGUge1xuICAgIFVzZXJfTG9nZ2VkSW4gPSAxMDAwLFxuICAgIFVzZXJfQ2hhbmdlZFBhc3N3b3JkID0gMTAwMSxcbiAgICBVc2VyX1VwZGF0ZWQyZmEgPSAxMDAyLFxuICAgIFVzZXJfRGlzYWJsZWQyZmEgPSAxMDAzLFxuICAgIFVzZXJfUmVjb3ZlcmVkMmZhID0gMTAwNCxcbiAgICBVc2VyX0ZhaWxlZExvZ0luID0gMTAwNSxcbiAgICBVc2VyX0ZhaWxlZExvZ0luMmZhID0gMTAwNixcbiAgICBVc2VyX0NsaWVudEV4cG9ydGVkVmF1bHQgPSAxMDA3LFxuXG4gICAgQ2lwaGVyX0NyZWF0ZWQgPSAxMTAwLFxuICAgIENpcGhlcl9VcGRhdGVkID0gMTEwMSxcbiAgICBDaXBoZXJfRGVsZXRlZCA9IDExMDIsXG4gICAgQ2lwaGVyX0F0dGFjaG1lbnRDcmVhdGVkID0gMTEwMyxcbiAgICBDaXBoZXJfQXR0YWNobWVudERlbGV0ZWQgPSAxMTA0LFxuICAgIENpcGhlcl9TaGFyZWQgPSAxMTA1LFxuICAgIENpcGhlcl9VcGRhdGVkQ29sbGVjdGlvbnMgPSAxMTA2LFxuICAgIENpcGhlcl9DbGllbnRWaWV3ZWQgPSAxMTA3LFxuICAgIENpcGhlcl9DbGllbnRUb2dnbGVkUGFzc3dvcmRWaXNpYmxlID0gMTEwOCxcbiAgICBDaXBoZXJfQ2xpZW50VG9nZ2xlZEhpZGRlbkZpZWxkVmlzaWJsZSA9IDExMDksXG4gICAgQ2lwaGVyX0NsaWVudFRvZ2dsZWRDYXJkQ29kZVZpc2libGUgPSAxMTEwLFxuICAgIENpcGhlcl9DbGllbnRDb3BpZWRQYXNzd29yZCA9IDExMTEsXG4gICAgQ2lwaGVyX0NsaWVudENvcGllZEhpZGRlbkZpZWxkID0gMTExMixcbiAgICBDaXBoZXJfQ2xpZW50Q29waWVkQ2FyZENvZGUgPSAxMTEzLFxuICAgIENpcGhlcl9DbGllbnRBdXRvZmlsbGVkID0gMTExNCxcbiAgICBDaXBoZXJfU29mdERlbGV0ZWQgPSAxMTE1LFxuICAgIENpcGhlcl9SZXN0b3JlZCA9IDExMTYsXG5cbiAgICBDb2xsZWN0aW9uX0NyZWF0ZWQgPSAxMzAwLFxuICAgIENvbGxlY3Rpb25fVXBkYXRlZCA9IDEzMDEsXG4gICAgQ29sbGVjdGlvbl9EZWxldGVkID0gMTMwMixcblxuICAgIEdyb3VwX0NyZWF0ZWQgPSAxNDAwLFxuICAgIEdyb3VwX1VwZGF0ZWQgPSAxNDAxLFxuICAgIEdyb3VwX0RlbGV0ZWQgPSAxNDAyLFxuXG4gICAgT3JnYW5pemF0aW9uVXNlcl9JbnZpdGVkID0gMTUwMCxcbiAgICBPcmdhbml6YXRpb25Vc2VyX0NvbmZpcm1lZCA9IDE1MDEsXG4gICAgT3JnYW5pemF0aW9uVXNlcl9VcGRhdGVkID0gMTUwMixcbiAgICBPcmdhbml6YXRpb25Vc2VyX1JlbW92ZWQgPSAxNTAzLFxuICAgIE9yZ2FuaXphdGlvblVzZXJfVXBkYXRlZEdyb3VwcyA9IDE1MDQsXG5cbiAgICBPcmdhbml6YXRpb25fVXBkYXRlZCA9IDE2MDAsXG4gICAgT3JnYW5pemF0aW9uX1B1cmdlZFZhdWx0ID0gMTYwMSxcbiAgICAvLyBPcmdhbml6YXRpb25fQ2xpZW50RXhwb3J0ZWRWYXVsdCA9IDE2MDIsXG5cbiAgICBQb2xpY3lfQ3JlYXRlZCA9IDE3MDAsXG4gICAgUG9saWN5X1VwZGF0ZWQgPSAxNzAxLFxuICAgIFBvbGljeV9EZWxldGVkID0gMTcwMixcbn1cbiIsImltcG9ydCB7IENpcGhlclJlcXVlc3QgfSBmcm9tICcuL2NpcGhlclJlcXVlc3QnO1xuXG5pbXBvcnQgeyBDaXBoZXIgfSBmcm9tICcuLi9kb21haW4vY2lwaGVyJztcblxuZXhwb3J0IGNsYXNzIENpcGhlckNyZWF0ZVJlcXVlc3Qge1xuICAgIGNpcGhlcjogQ2lwaGVyUmVxdWVzdDtcbiAgICBjb2xsZWN0aW9uSWRzOiBzdHJpbmdbXTtcblxuICAgIGNvbnN0cnVjdG9yKGNpcGhlcjogQ2lwaGVyKSB7XG4gICAgICAgIHRoaXMuY2lwaGVyID0gbmV3IENpcGhlclJlcXVlc3QoY2lwaGVyKTtcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uSWRzID0gY2lwaGVyLmNvbGxlY3Rpb25JZHM7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQ2lwaGVyUmVxdWVzdCB9IGZyb20gJy4vY2lwaGVyUmVxdWVzdCc7XG5cbmltcG9ydCB7IENpcGhlciB9IGZyb20gJy4uL2RvbWFpbi9jaXBoZXInO1xuXG5leHBvcnQgY2xhc3MgQ2lwaGVyU2hhcmVSZXF1ZXN0IHtcbiAgICBjaXBoZXI6IENpcGhlclJlcXVlc3Q7XG4gICAgY29sbGVjdGlvbklkczogc3RyaW5nW107XG5cbiAgICBjb25zdHJ1Y3RvcihjaXBoZXI6IENpcGhlcikge1xuICAgICAgICB0aGlzLmNpcGhlciA9IG5ldyBDaXBoZXJSZXF1ZXN0KGNpcGhlcik7XG4gICAgICAgIHRoaXMuY29sbGVjdGlvbklkcyA9IGNpcGhlci5jb2xsZWN0aW9uSWRzO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IENpcGhlclZpZXcgfSBmcm9tICcuLi92aWV3JztcblxuY29uc3QgQ2FjaGVUVEwgPSAzMDAwO1xuXG5leHBvcnQgY2xhc3MgU29ydGVkQ2lwaGVyc0NhY2hlIHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IHNvcnRlZENpcGhlcnNCeVVybDogTWFwPHN0cmluZywgQ2lwaGVycz4gPSBuZXcgTWFwPHN0cmluZywgQ2lwaGVycz4oKTtcbiAgICBwcml2YXRlIHJlYWRvbmx5IHRpbWVvdXRzOiBNYXA8c3RyaW5nLCBhbnk+ID0gbmV3IE1hcDxzdHJpbmcsIGFueT4oKTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgY29tcGFyYXRvcjogKGE6IENpcGhlclZpZXcsIGI6IENpcGhlclZpZXcpID0+IG51bWJlcikgeyB9XG5cbiAgICBpc0NhY2hlZCh1cmw6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gdGhpcy5zb3J0ZWRDaXBoZXJzQnlVcmwuaGFzKHVybCk7XG4gICAgfVxuXG4gICAgYWRkQ2lwaGVycyh1cmw6IHN0cmluZywgY2lwaGVyczogQ2lwaGVyVmlld1tdKSB7XG4gICAgICAgIGNpcGhlcnMuc29ydCh0aGlzLmNvbXBhcmF0b3IpO1xuICAgICAgICB0aGlzLnNvcnRlZENpcGhlcnNCeVVybC5zZXQodXJsLCBuZXcgQ2lwaGVycyhjaXBoZXJzKSk7XG4gICAgICAgIHRoaXMucmVzZXRUaW1lcih1cmwpO1xuICAgIH1cblxuICAgIGdldExhc3RVc2VkKHVybDogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMucmVzZXRUaW1lcih1cmwpO1xuICAgICAgICByZXR1cm4gdGhpcy5pc0NhY2hlZCh1cmwpID8gdGhpcy5zb3J0ZWRDaXBoZXJzQnlVcmwuZ2V0KHVybCkuZ2V0TGFzdFVzZWQoKSA6IG51bGw7XG4gICAgfVxuXG4gICAgZ2V0TGFzdExhdW5jaGVkKHVybDogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzQ2FjaGVkKHVybCkgPyB0aGlzLnNvcnRlZENpcGhlcnNCeVVybC5nZXQodXJsKS5nZXRMYXN0TGF1bmNoZWQoKSA6IG51bGw7XG4gICAgfVxuXG4gICAgZ2V0TmV4dCh1cmw6IHN0cmluZykge1xuICAgICAgICB0aGlzLnJlc2V0VGltZXIodXJsKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNDYWNoZWQodXJsKSA/IHRoaXMuc29ydGVkQ2lwaGVyc0J5VXJsLmdldCh1cmwpLmdldE5leHQoKSA6IG51bGw7XG4gICAgfVxuXG4gICAgdXBkYXRlTGFzdFVzZWRJbmRleCh1cmw6IHN0cmluZykge1xuICAgICAgICBpZiAodGhpcy5pc0NhY2hlZCh1cmwpKSB7XG4gICAgICAgICAgICB0aGlzLnNvcnRlZENpcGhlcnNCeVVybC5nZXQodXJsKS51cGRhdGVMYXN0VXNlZEluZGV4KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjbGVhcigpIHtcbiAgICAgICAgdGhpcy5zb3J0ZWRDaXBoZXJzQnlVcmwuY2xlYXIoKTtcbiAgICAgICAgdGhpcy50aW1lb3V0cy5jbGVhcigpO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVzZXRUaW1lcih1cmw6IHN0cmluZykge1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0cy5nZXQodXJsKSk7XG4gICAgICAgIHRoaXMudGltZW91dHMuc2V0KHVybCwgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNvcnRlZENpcGhlcnNCeVVybC5kZWxldGUodXJsKTtcbiAgICAgICAgICAgIHRoaXMudGltZW91dHMuZGVsZXRlKHVybCk7XG4gICAgICAgIH0sIENhY2hlVFRMKSk7XG4gICAgfVxufVxuXG5jbGFzcyBDaXBoZXJzIHtcbiAgICBsYXN0VXNlZEluZGV4ID0gLTE7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGNpcGhlcnM6IENpcGhlclZpZXdbXSkgeyB9XG5cbiAgICBnZXRMYXN0VXNlZCgpIHtcbiAgICAgICAgdGhpcy5sYXN0VXNlZEluZGV4ID0gTWF0aC5tYXgodGhpcy5sYXN0VXNlZEluZGV4LCAwKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2lwaGVyc1t0aGlzLmxhc3RVc2VkSW5kZXhdO1xuICAgIH1cblxuICAgIGdldExhc3RMYXVuY2hlZCgpIHtcbiAgICAgICAgY29uc3QgdXNlZENpcGhlcnMgPSB0aGlzLmNpcGhlcnMuZmlsdGVyKGNpcGhlciA9PiBjaXBoZXIubG9jYWxEYXRhPy5sYXN0TGF1bmNoZWQpO1xuICAgICAgICBjb25zdCBzb3J0ZWRDaXBoZXJzID0gdXNlZENpcGhlcnMuc29ydCgoeCwgeSkgPT4geS5sb2NhbERhdGEubGFzdExhdW5jaGVkLnZhbHVlT2YoKSAtIHgubG9jYWxEYXRhLmxhc3RMYXVuY2hlZC52YWx1ZU9mKCkpO1xuICAgICAgICByZXR1cm4gc29ydGVkQ2lwaGVyc1swXTtcbiAgICB9XG5cbiAgICBnZXROZXh0SW5kZXgoKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5sYXN0VXNlZEluZGV4ICsgMSkgJSB0aGlzLmNpcGhlcnMubGVuZ3RoO1xuICAgIH1cblxuICAgIGdldE5leHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNpcGhlcnNbdGhpcy5nZXROZXh0SW5kZXgoKV07XG4gICAgfVxuXG4gICAgdXBkYXRlTGFzdFVzZWRJbmRleCgpIHtcbiAgICAgICAgdGhpcy5sYXN0VXNlZEluZGV4ID0gdGhpcy5nZXROZXh0SW5kZXgoKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBTZW5kRGF0YSB9IGZyb20gJy4uL21vZGVscy9kYXRhL3NlbmREYXRhJztcblxuaW1wb3J0IHsgU2VuZFJlcXVlc3QgfSBmcm9tICcuLi9tb2RlbHMvcmVxdWVzdC9zZW5kUmVxdWVzdCc7XG5cbmltcG9ydCB7IFNlbmRSZXNwb25zZSB9IGZyb20gJy4uL21vZGVscy9yZXNwb25zZS9zZW5kUmVzcG9uc2UnO1xuXG5pbXBvcnQgeyBTZW5kIH0gZnJvbSAnLi4vbW9kZWxzL2RvbWFpbi9zZW5kJztcbmltcG9ydCB7IFNlbmRGaWxlIH0gZnJvbSAnLi4vbW9kZWxzL2RvbWFpbi9zZW5kRmlsZSc7XG5pbXBvcnQgeyBTZW5kVGV4dCB9IGZyb20gJy4uL21vZGVscy9kb21haW4vc2VuZFRleHQnO1xuaW1wb3J0IHsgU3ltbWV0cmljQ3J5cHRvS2V5IH0gZnJvbSAnLi4vbW9kZWxzL2RvbWFpbi9zeW1tZXRyaWNDcnlwdG9LZXknO1xuXG5pbXBvcnQgeyBTZW5kVHlwZSB9IGZyb20gJy4uL2VudW1zL3NlbmRUeXBlJztcblxuaW1wb3J0IHsgU2VuZFZpZXcgfSBmcm9tICcuLi9tb2RlbHMvdmlldy9zZW5kVmlldyc7XG5cbmltcG9ydCB7IEFwaVNlcnZpY2UgfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvYXBpLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ3J5cHRvU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9jcnlwdG8uc2VydmljZSc7XG5pbXBvcnQgeyBDcnlwdG9GdW5jdGlvblNlcnZpY2UgfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvY3J5cHRvRnVuY3Rpb24uc2VydmljZSc7XG5pbXBvcnQgeyBJMThuU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9pMThuLnNlcnZpY2UnO1xuaW1wb3J0IHsgU2VuZFNlcnZpY2UgYXMgU2VuZFNlcnZpY2VBYnN0cmFjdGlvbiB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9zZW5kLnNlcnZpY2UnO1xuaW1wb3J0IHsgU3RvcmFnZVNlcnZpY2UgfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvc3RvcmFnZS5zZXJ2aWNlJztcbmltcG9ydCB7IFVzZXJTZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL3VzZXIuc2VydmljZSc7XG5cbmltcG9ydCB7IFV0aWxzIH0gZnJvbSAnLi4vbWlzYy91dGlscyc7XG5cbmNvbnN0IEtleXMgPSB7XG4gICAgc2VuZHNQcmVmaXg6ICdzZW5kc18nLFxufTtcblxuZXhwb3J0IGNsYXNzIFNlbmRTZXJ2aWNlIGltcGxlbWVudHMgU2VuZFNlcnZpY2VBYnN0cmFjdGlvbiB7XG4gICAgZGVjcnlwdGVkU2VuZENhY2hlOiBTZW5kVmlld1tdO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBjcnlwdG9TZXJ2aWNlOiBDcnlwdG9TZXJ2aWNlLCBwcml2YXRlIHVzZXJTZXJ2aWNlOiBVc2VyU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBhcGlTZXJ2aWNlOiBBcGlTZXJ2aWNlLCBwcml2YXRlIHN0b3JhZ2VTZXJ2aWNlOiBTdG9yYWdlU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBpMThuU2VydmljZTogSTE4blNlcnZpY2UsIHByaXZhdGUgY3J5cHRvRnVuY3Rpb25TZXJ2aWNlOiBDcnlwdG9GdW5jdGlvblNlcnZpY2UpIHsgfVxuXG4gICAgY2xlYXJDYWNoZSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5kZWNyeXB0ZWRTZW5kQ2FjaGUgPSBudWxsO1xuICAgIH1cblxuICAgIGFzeW5jIGVuY3J5cHQobW9kZWw6IFNlbmRWaWV3LCBmaWxlOiBGaWxlLCBwYXNzd29yZDogc3RyaW5nLFxuICAgICAgICBrZXk/OiBTeW1tZXRyaWNDcnlwdG9LZXkpOiBQcm9taXNlPFtTZW5kLCBBcnJheUJ1ZmZlcl0+IHtcbiAgICAgICAgbGV0IGZpbGVEYXRhOiBBcnJheUJ1ZmZlciA9IG51bGw7XG4gICAgICAgIGNvbnN0IHNlbmQgPSBuZXcgU2VuZCgpO1xuICAgICAgICBzZW5kLmlkID0gbW9kZWwuaWQ7XG4gICAgICAgIHNlbmQudHlwZSA9IG1vZGVsLnR5cGU7XG4gICAgICAgIHNlbmQuZGlzYWJsZWQgPSBtb2RlbC5kaXNhYmxlZDtcbiAgICAgICAgc2VuZC5tYXhBY2Nlc3NDb3VudCA9IG1vZGVsLm1heEFjY2Vzc0NvdW50O1xuICAgICAgICBpZiAobW9kZWwua2V5ID09IG51bGwpIHtcbiAgICAgICAgICAgIG1vZGVsLmtleSA9IGF3YWl0IHRoaXMuY3J5cHRvRnVuY3Rpb25TZXJ2aWNlLnJhbmRvbUJ5dGVzKDE2KTtcbiAgICAgICAgICAgIG1vZGVsLmNyeXB0b0tleSA9IGF3YWl0IHRoaXMuY3J5cHRvU2VydmljZS5tYWtlU2VuZEtleShtb2RlbC5rZXkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXNzd29yZCAhPSBudWxsKSB7XG4gICAgICAgICAgICBjb25zdCBwYXNzd29yZEhhc2ggPSBhd2FpdCB0aGlzLmNyeXB0b0Z1bmN0aW9uU2VydmljZS5wYmtkZjIocGFzc3dvcmQsIG1vZGVsLmtleSwgJ3NoYTI1NicsIDEwMDAwMCk7XG4gICAgICAgICAgICBzZW5kLnBhc3N3b3JkID0gVXRpbHMuZnJvbUJ1ZmZlclRvQjY0KHBhc3N3b3JkSGFzaCk7XG4gICAgICAgIH1cbiAgICAgICAgc2VuZC5rZXkgPSBhd2FpdCB0aGlzLmNyeXB0b1NlcnZpY2UuZW5jcnlwdChtb2RlbC5rZXksIGtleSk7XG4gICAgICAgIHNlbmQubmFtZSA9IGF3YWl0IHRoaXMuY3J5cHRvU2VydmljZS5lbmNyeXB0KG1vZGVsLm5hbWUsIG1vZGVsLmNyeXB0b0tleSk7XG4gICAgICAgIHNlbmQubm90ZXMgPSBhd2FpdCB0aGlzLmNyeXB0b1NlcnZpY2UuZW5jcnlwdChtb2RlbC5ub3RlcywgbW9kZWwuY3J5cHRvS2V5KTtcbiAgICAgICAgaWYgKHNlbmQudHlwZSA9PT0gU2VuZFR5cGUuVGV4dCkge1xuICAgICAgICAgICAgc2VuZC50ZXh0ID0gbmV3IFNlbmRUZXh0KCk7XG4gICAgICAgICAgICBzZW5kLnRleHQudGV4dCA9IGF3YWl0IHRoaXMuY3J5cHRvU2VydmljZS5lbmNyeXB0KG1vZGVsLnRleHQudGV4dCwgbW9kZWwuY3J5cHRvS2V5KTtcbiAgICAgICAgICAgIHNlbmQudGV4dC5oaWRkZW4gPSBtb2RlbC50ZXh0LmhpZGRlbjtcbiAgICAgICAgfSBlbHNlIGlmIChzZW5kLnR5cGUgPT09IFNlbmRUeXBlLkZpbGUpIHtcbiAgICAgICAgICAgIHNlbmQuZmlsZSA9IG5ldyBTZW5kRmlsZSgpO1xuICAgICAgICAgICAgaWYgKGZpbGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGZpbGVEYXRhID0gYXdhaXQgdGhpcy5wYXJzZUZpbGUoc2VuZCwgZmlsZSwgbW9kZWwuY3J5cHRvS2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBbc2VuZCwgZmlsZURhdGFdO1xuICAgIH1cblxuICAgIGFzeW5jIGdldChpZDogc3RyaW5nKTogUHJvbWlzZTxTZW5kPiB7XG4gICAgICAgIGNvbnN0IHVzZXJJZCA9IGF3YWl0IHRoaXMudXNlclNlcnZpY2UuZ2V0VXNlcklkKCk7XG4gICAgICAgIGNvbnN0IHNlbmRzID0gYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5nZXQ8eyBbaWQ6IHN0cmluZ106IFNlbmREYXRhOyB9PihcbiAgICAgICAgICAgIEtleXMuc2VuZHNQcmVmaXggKyB1c2VySWQpO1xuICAgICAgICBpZiAoc2VuZHMgPT0gbnVsbCB8fCAhc2VuZHMuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXcgU2VuZChzZW5kc1tpZF0pO1xuICAgIH1cblxuICAgIGFzeW5jIGdldEFsbCgpOiBQcm9taXNlPFNlbmRbXT4ge1xuICAgICAgICBjb25zdCB1c2VySWQgPSBhd2FpdCB0aGlzLnVzZXJTZXJ2aWNlLmdldFVzZXJJZCgpO1xuICAgICAgICBjb25zdCBzZW5kcyA9IGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2UuZ2V0PHsgW2lkOiBzdHJpbmddOiBTZW5kRGF0YTsgfT4oXG4gICAgICAgICAgICBLZXlzLnNlbmRzUHJlZml4ICsgdXNlcklkKTtcbiAgICAgICAgY29uc3QgcmVzcG9uc2U6IFNlbmRbXSA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IGlkIGluIHNlbmRzKSB7XG4gICAgICAgICAgICBpZiAoc2VuZHMuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2UucHVzaChuZXcgU2VuZChzZW5kc1tpZF0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0QWxsRGVjcnlwdGVkKCk6IFByb21pc2U8U2VuZFZpZXdbXT4ge1xuICAgICAgICBpZiAodGhpcy5kZWNyeXB0ZWRTZW5kQ2FjaGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVjcnlwdGVkU2VuZENhY2hlO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgaGFzS2V5ID0gYXdhaXQgdGhpcy5jcnlwdG9TZXJ2aWNlLmhhc0tleSgpO1xuICAgICAgICBpZiAoIWhhc0tleSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBrZXkuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBkZWNTZW5kczogU2VuZFZpZXdbXSA9IFtdO1xuICAgICAgICBjb25zdCBwcm9taXNlczogUHJvbWlzZTxhbnk+W10gPSBbXTtcbiAgICAgICAgY29uc3Qgc2VuZHMgPSBhd2FpdCB0aGlzLmdldEFsbCgpO1xuICAgICAgICBzZW5kcy5mb3JFYWNoKChzZW5kKSA9PiB7XG4gICAgICAgICAgICBwcm9taXNlcy5wdXNoKHNlbmQuZGVjcnlwdCgpLnRoZW4oKGYpID0+IGRlY1NlbmRzLnB1c2goZikpKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xuICAgICAgICBkZWNTZW5kcy5zb3J0KFV0aWxzLmdldFNvcnRGdW5jdGlvbih0aGlzLmkxOG5TZXJ2aWNlLCAnbmFtZScpKTtcblxuICAgICAgICB0aGlzLmRlY3J5cHRlZFNlbmRDYWNoZSA9IGRlY1NlbmRzO1xuICAgICAgICByZXR1cm4gdGhpcy5kZWNyeXB0ZWRTZW5kQ2FjaGU7XG4gICAgfVxuXG4gICAgYXN5bmMgc2F2ZVdpdGhTZXJ2ZXIoc2VuZERhdGE6IFtTZW5kLCBBcnJheUJ1ZmZlcl0pOiBQcm9taXNlPGFueT4ge1xuICAgICAgICBjb25zdCByZXF1ZXN0ID0gbmV3IFNlbmRSZXF1ZXN0KHNlbmREYXRhWzBdKTtcbiAgICAgICAgbGV0IHJlc3BvbnNlOiBTZW5kUmVzcG9uc2U7XG4gICAgICAgIGlmIChzZW5kRGF0YVswXS5pZCA9PSBudWxsKSB7XG4gICAgICAgICAgICBpZiAoc2VuZERhdGFbMF0udHlwZSA9PT0gU2VuZFR5cGUuVGV4dCkge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gYXdhaXQgdGhpcy5hcGlTZXJ2aWNlLnBvc3RTZW5kKHJlcXVlc3QpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBmZCA9IG5ldyBGb3JtRGF0YSgpO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGJsb2IgPSBuZXcgQmxvYihbc2VuZERhdGFbMV1dLCB7IHR5cGU6ICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nIH0pO1xuICAgICAgICAgICAgICAgICAgICBmZC5hcHBlbmQoJ21vZGVsJywgSlNPTi5zdHJpbmdpZnkocmVxdWVzdCkpO1xuICAgICAgICAgICAgICAgICAgICBmZC5hcHBlbmQoJ2RhdGEnLCBibG9iLCBzZW5kRGF0YVswXS5maWxlLmZpbGVOYW1lLmVuY3J5cHRlZFN0cmluZyk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoVXRpbHMuaXNOb2RlICYmICFVdGlscy5pc0Jyb3dzZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZkLmFwcGVuZCgnbW9kZWwnLCBKU09OLnN0cmluZ2lmeShyZXF1ZXN0KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmZC5hcHBlbmQoJ2RhdGEnLCBCdWZmZXIuZnJvbShzZW5kRGF0YVsxXSkgYXMgYW55LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZXBhdGg6IHNlbmREYXRhWzBdLmZpbGUuZmlsZU5hbWUuZW5jcnlwdGVkU3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gYXMgYW55KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmFwaVNlcnZpY2UucG9zdFNlbmRGaWxlKGZkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlbmREYXRhWzBdLmlkID0gcmVzcG9uc2UuaWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXNwb25zZSA9IGF3YWl0IHRoaXMuYXBpU2VydmljZS5wdXRTZW5kKHNlbmREYXRhWzBdLmlkLCByZXF1ZXN0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHVzZXJJZCA9IGF3YWl0IHRoaXMudXNlclNlcnZpY2UuZ2V0VXNlcklkKCk7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBuZXcgU2VuZERhdGEocmVzcG9uc2UsIHVzZXJJZCk7XG4gICAgICAgIGF3YWl0IHRoaXMudXBzZXJ0KGRhdGEpO1xuXG4gICAgfVxuXG4gICAgYXN5bmMgdXBzZXJ0KHNlbmQ6IFNlbmREYXRhIHwgU2VuZERhdGFbXSk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIGNvbnN0IHVzZXJJZCA9IGF3YWl0IHRoaXMudXNlclNlcnZpY2UuZ2V0VXNlcklkKCk7XG4gICAgICAgIGxldCBzZW5kcyA9IGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2UuZ2V0PHsgW2lkOiBzdHJpbmddOiBTZW5kRGF0YTsgfT4oXG4gICAgICAgICAgICBLZXlzLnNlbmRzUHJlZml4ICsgdXNlcklkKTtcbiAgICAgICAgaWYgKHNlbmRzID09IG51bGwpIHtcbiAgICAgICAgICAgIHNlbmRzID0ge307XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2VuZCBpbnN0YW5jZW9mIFNlbmREYXRhKSB7XG4gICAgICAgICAgICBjb25zdCBzID0gc2VuZCBhcyBTZW5kRGF0YTtcbiAgICAgICAgICAgIHNlbmRzW3MuaWRdID0gcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIChzZW5kIGFzIFNlbmREYXRhW10pLmZvckVhY2goKHMpID0+IHtcbiAgICAgICAgICAgICAgICBzZW5kc1tzLmlkXSA9IHM7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2Uuc2F2ZShLZXlzLnNlbmRzUHJlZml4ICsgdXNlcklkLCBzZW5kcyk7XG4gICAgICAgIHRoaXMuZGVjcnlwdGVkU2VuZENhY2hlID0gbnVsbDtcbiAgICB9XG5cbiAgICBhc3luYyByZXBsYWNlKHNlbmRzOiB7IFtpZDogc3RyaW5nXTogU2VuZERhdGE7IH0pOiBQcm9taXNlPGFueT4ge1xuICAgICAgICBjb25zdCB1c2VySWQgPSBhd2FpdCB0aGlzLnVzZXJTZXJ2aWNlLmdldFVzZXJJZCgpO1xuICAgICAgICBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLnNhdmUoS2V5cy5zZW5kc1ByZWZpeCArIHVzZXJJZCwgc2VuZHMpO1xuICAgICAgICB0aGlzLmRlY3J5cHRlZFNlbmRDYWNoZSA9IG51bGw7XG4gICAgfVxuXG4gICAgYXN5bmMgY2xlYXIodXNlcklkOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLnJlbW92ZShLZXlzLnNlbmRzUHJlZml4ICsgdXNlcklkKTtcbiAgICAgICAgdGhpcy5kZWNyeXB0ZWRTZW5kQ2FjaGUgPSBudWxsO1xuICAgIH1cblxuICAgIGFzeW5jIGRlbGV0ZShpZDogc3RyaW5nIHwgc3RyaW5nW10pOiBQcm9taXNlPGFueT4ge1xuICAgICAgICBjb25zdCB1c2VySWQgPSBhd2FpdCB0aGlzLnVzZXJTZXJ2aWNlLmdldFVzZXJJZCgpO1xuICAgICAgICBjb25zdCBzZW5kcyA9IGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2UuZ2V0PHsgW2lkOiBzdHJpbmddOiBTZW5kRGF0YTsgfT4oXG4gICAgICAgICAgICBLZXlzLnNlbmRzUHJlZml4ICsgdXNlcklkKTtcbiAgICAgICAgaWYgKHNlbmRzID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgaWQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBpZiAoc2VuZHNbaWRdID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWxldGUgc2VuZHNbaWRdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgKGlkIGFzIHN0cmluZ1tdKS5mb3JFYWNoKChpKSA9PiB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHNlbmRzW2ldO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLnNhdmUoS2V5cy5zZW5kc1ByZWZpeCArIHVzZXJJZCwgc2VuZHMpO1xuICAgICAgICB0aGlzLmRlY3J5cHRlZFNlbmRDYWNoZSA9IG51bGw7XG4gICAgfVxuXG4gICAgYXN5bmMgZGVsZXRlV2l0aFNlcnZlcihpZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgYXdhaXQgdGhpcy5hcGlTZXJ2aWNlLmRlbGV0ZVNlbmQoaWQpO1xuICAgICAgICBhd2FpdCB0aGlzLmRlbGV0ZShpZCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBwYXJzZUZpbGUoc2VuZDogU2VuZCwgZmlsZTogRmlsZSwga2V5OiBTeW1tZXRyaWNDcnlwdG9LZXkpOiBQcm9taXNlPEFycmF5QnVmZmVyPiB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgICAgICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpO1xuICAgICAgICAgICAgcmVhZGVyLm9ubG9hZCA9IGFzeW5jIChldnQpID0+IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBzZW5kLmZpbGUuZmlsZU5hbWUgPSBhd2FpdCB0aGlzLmNyeXB0b1NlcnZpY2UuZW5jcnlwdChmaWxlLm5hbWUsIGtleSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbGVEYXRhID0gYXdhaXQgdGhpcy5jcnlwdG9TZXJ2aWNlLmVuY3J5cHRUb0J5dGVzKGV2dC50YXJnZXQucmVzdWx0IGFzIEFycmF5QnVmZmVyLCBrZXkpO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGZpbGVEYXRhKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmVhZGVyLm9uZXJyb3IgPSAoZXZ0KSA9PiB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KCdFcnJvciByZWFkaW5nIGZpbGUuJyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBTZW5kVHlwZSB9IGZyb20gJy4uLy4uL2VudW1zL3NlbmRUeXBlJztcblxuaW1wb3J0IHsgU2VuZEZpbGVBcGkgfSBmcm9tICcuLi9hcGkvc2VuZEZpbGVBcGknXG5pbXBvcnQgeyBTZW5kVGV4dEFwaSB9IGZyb20gJy4uL2FwaS9zZW5kVGV4dEFwaSc7XG5cbmltcG9ydCB7IFNlbmQgfSBmcm9tICcuLi9kb21haW4vc2VuZCc7XG5cbmV4cG9ydCBjbGFzcyBTZW5kUmVxdWVzdCB7XG4gICAgdHlwZTogU2VuZFR5cGU7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIG5vdGVzOiBzdHJpbmc7XG4gICAga2V5OiBzdHJpbmc7XG4gICAgbWF4QWNjZXNzQ291bnQ/OiBudW1iZXI7XG4gICAgZXhwaXJhdGlvbkRhdGU6IHN0cmluZztcbiAgICBkZWxldGlvbkRhdGU6IHN0cmluZztcbiAgICB0ZXh0OiBTZW5kVGV4dEFwaTtcbiAgICBmaWxlOiBTZW5kRmlsZUFwaTtcbiAgICBwYXNzd29yZDogc3RyaW5nO1xuICAgIGRpc2FibGVkOiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3Ioc2VuZDogU2VuZCkge1xuICAgICAgICB0aGlzLnR5cGUgPSBzZW5kLnR5cGU7XG4gICAgICAgIHRoaXMubmFtZSA9IHNlbmQubmFtZSA/IHNlbmQubmFtZS5lbmNyeXB0ZWRTdHJpbmcgOiBudWxsO1xuICAgICAgICB0aGlzLm5vdGVzID0gc2VuZC5ub3RlcyA/IHNlbmQubm90ZXMuZW5jcnlwdGVkU3RyaW5nIDogbnVsbDtcbiAgICAgICAgdGhpcy5tYXhBY2Nlc3NDb3VudCA9IHNlbmQubWF4QWNjZXNzQ291bnQ7XG4gICAgICAgIHRoaXMuZXhwaXJhdGlvbkRhdGUgPSBzZW5kLmV4cGlyYXRpb25EYXRlICE9IG51bGwgPyBzZW5kLmV4cGlyYXRpb25EYXRlLnRvSVNPU3RyaW5nKCkgOiBudWxsO1xuICAgICAgICB0aGlzLmRlbGV0aW9uRGF0ZSA9IHNlbmQuZGVsZXRpb25EYXRlICE9IG51bGwgPyBzZW5kLmRlbGV0aW9uRGF0ZS50b0lTT1N0cmluZygpIDogbnVsbDtcbiAgICAgICAgdGhpcy5rZXkgPSBzZW5kLmtleSAhPSBudWxsID8gc2VuZC5rZXkuZW5jcnlwdGVkU3RyaW5nIDogbnVsbDtcbiAgICAgICAgdGhpcy5wYXNzd29yZCA9IHNlbmQucGFzc3dvcmQ7XG4gICAgICAgIHRoaXMuZGlzYWJsZWQgPSBzZW5kLmRpc2FibGVkO1xuXG4gICAgICAgIHN3aXRjaCAodGhpcy50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIFNlbmRUeXBlLlRleHQ6XG4gICAgICAgICAgICAgICAgdGhpcy50ZXh0ID0gbmV3IFNlbmRUZXh0QXBpKCk7XG4gICAgICAgICAgICAgICAgdGhpcy50ZXh0LnRleHQgPSBzZW5kLnRleHQudGV4dCAhPSBudWxsID8gc2VuZC50ZXh0LnRleHQuZW5jcnlwdGVkU3RyaW5nIDogbnVsbDtcbiAgICAgICAgICAgICAgICB0aGlzLnRleHQuaGlkZGVuID0gc2VuZC50ZXh0LmhpZGRlbjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgU2VuZFR5cGUuRmlsZTpcbiAgICAgICAgICAgICAgICB0aGlzLmZpbGUgPSBuZXcgU2VuZEZpbGVBcGkoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmZpbGUuZmlsZU5hbWUgPSBzZW5kLmZpbGUuZmlsZU5hbWUgIT0gbnVsbCA/IHNlbmQuZmlsZS5maWxlTmFtZS5lbmNyeXB0ZWRTdHJpbmcgOiBudWxsO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7IENpcGhlclJlcXVlc3QgfSBmcm9tICcuL2NpcGhlclJlcXVlc3QnO1xuXG5pbXBvcnQgeyBDaXBoZXIgfSBmcm9tICcuLi9kb21haW4vY2lwaGVyJztcblxuZXhwb3J0IGNsYXNzIENpcGhlcldpdGhJZFJlcXVlc3QgZXh0ZW5kcyBDaXBoZXJSZXF1ZXN0IHtcbiAgICBpZDogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IoY2lwaGVyOiBDaXBoZXIpIHtcbiAgICAgICAgc3VwZXIoY2lwaGVyKTtcbiAgICAgICAgdGhpcy5pZCA9IGNpcGhlci5pZDtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBDaXBoZXJXaXRoSWRSZXF1ZXN0IH0gZnJvbSAnLi9jaXBoZXJXaXRoSWRSZXF1ZXN0JztcblxuaW1wb3J0IHsgQ2lwaGVyIH0gZnJvbSAnLi4vZG9tYWluL2NpcGhlcic7XG5cbmV4cG9ydCBjbGFzcyBDaXBoZXJCdWxrU2hhcmVSZXF1ZXN0IHtcbiAgICBjaXBoZXJzOiBDaXBoZXJXaXRoSWRSZXF1ZXN0W107XG4gICAgY29sbGVjdGlvbklkczogc3RyaW5nW107XG5cbiAgICBjb25zdHJ1Y3RvcihjaXBoZXJzOiBDaXBoZXJbXSwgY29sbGVjdGlvbklkczogc3RyaW5nW10pIHtcbiAgICAgICAgaWYgKGNpcGhlcnMgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5jaXBoZXJzID0gW107XG4gICAgICAgICAgICBjaXBoZXJzLmZvckVhY2goKGMpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmNpcGhlcnMucHVzaChuZXcgQ2lwaGVyV2l0aElkUmVxdWVzdChjKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNvbGxlY3Rpb25JZHMgPSBjb2xsZWN0aW9uSWRzO1xuICAgIH1cbn1cbiIsImV4cG9ydCBlbnVtIEZpZWxkVHlwZSB7XG4gICAgVGV4dCA9IDAsXG4gICAgSGlkZGVuID0gMSxcbiAgICBCb29sZWFuID0gMixcbn1cbiIsImV4cG9ydCBlbnVtIFNlbmRUeXBlIHtcbiAgICBUZXh0ID0gMCxcbiAgICBGaWxlID0gMSxcbn1cbiIsImV4cG9ydCBjbGFzcyBDb25zdGFudHNTZXJ2aWNlIHtcbiAgICBzdGF0aWMgcmVhZG9ubHkgZW52aXJvbm1lbnRVcmxzS2V5OiBzdHJpbmcgPSAnZW52aXJvbm1lbnRVcmxzJztcbiAgICBzdGF0aWMgcmVhZG9ubHkgZGlzYWJsZUdhS2V5OiBzdHJpbmcgPSAnZGlzYWJsZUdhJztcbiAgICBzdGF0aWMgcmVhZG9ubHkgZGlzYWJsZUFkZExvZ2luTm90aWZpY2F0aW9uS2V5OiBzdHJpbmcgPSAnZGlzYWJsZUFkZExvZ2luTm90aWZpY2F0aW9uJztcbiAgICBzdGF0aWMgcmVhZG9ubHkgZGlzYWJsZUNoYW5nZWRQYXNzd29yZE5vdGlmaWNhdGlvbktleTogc3RyaW5nID0gJ2Rpc2FibGVDaGFuZ2VkUGFzc3dvcmROb3RpZmljYXRpb24nO1xuICAgIHN0YXRpYyByZWFkb25seSBkaXNhYmxlQ29udGV4dE1lbnVJdGVtS2V5OiBzdHJpbmcgPSAnZGlzYWJsZUNvbnRleHRNZW51SXRlbSc7XG4gICAgc3RhdGljIHJlYWRvbmx5IGRpc2FibGVGYXZpY29uS2V5OiBzdHJpbmcgPSAnZGlzYWJsZUZhdmljb24nO1xuICAgIHN0YXRpYyByZWFkb25seSBkaXNhYmxlQXV0b1RvdHBDb3B5S2V5OiBzdHJpbmcgPSAnZGlzYWJsZUF1dG9Ub3RwQ29weSc7XG4gICAgc3RhdGljIHJlYWRvbmx5IGVuYWJsZUF1dG9GaWxsT25QYWdlTG9hZEtleTogc3RyaW5nID0gJ2VuYWJsZUF1dG9GaWxsT25QYWdlTG9hZCc7XG4gICAgc3RhdGljIHJlYWRvbmx5IHZhdWx0VGltZW91dEtleTogc3RyaW5nID0gJ2xvY2tPcHRpb24nO1xuICAgIHN0YXRpYyByZWFkb25seSB2YXVsdFRpbWVvdXRBY3Rpb25LZXk6IHN0cmluZyA9ICd2YXVsdFRpbWVvdXRBY3Rpb24nO1xuICAgIHN0YXRpYyByZWFkb25seSBsYXN0QWN0aXZlS2V5OiBzdHJpbmcgPSAnbGFzdEFjdGl2ZSc7XG4gICAgc3RhdGljIHJlYWRvbmx5IG5ldmVyRG9tYWluc0tleTogc3RyaW5nID0gJ25ldmVyRG9tYWlucyc7XG4gICAgc3RhdGljIHJlYWRvbmx5IGluc3RhbGxlZFZlcnNpb25LZXk6IHN0cmluZyA9ICdpbnN0YWxsZWRWZXJzaW9uJztcbiAgICBzdGF0aWMgcmVhZG9ubHkgbG9jYWxlS2V5OiBzdHJpbmcgPSAnbG9jYWxlJztcbiAgICBzdGF0aWMgcmVhZG9ubHkgdGhlbWVLZXk6IHN0cmluZyA9ICd0aGVtZSc7XG4gICAgc3RhdGljIHJlYWRvbmx5IGNvbGxhcHNlZEdyb3VwaW5nc0tleTogc3RyaW5nID0gJ2NvbGxhcHNlZEdyb3VwaW5ncyc7XG4gICAgc3RhdGljIHJlYWRvbmx5IGF1dG9Db25maXJtRmluZ2VycHJpbnRzOiBzdHJpbmcgPSAnYXV0b0NvbmZpcm1GaW5nZXJwcmludHMnO1xuICAgIHN0YXRpYyByZWFkb25seSBkb250U2hvd0NhcmRzQ3VycmVudFRhYjogc3RyaW5nID0gJ2RvbnRTaG93Q2FyZHNDdXJyZW50VGFiJztcbiAgICBzdGF0aWMgcmVhZG9ubHkgZG9udFNob3dJZGVudGl0aWVzQ3VycmVudFRhYjogc3RyaW5nID0gJ2RvbnRTaG93SWRlbnRpdGllc0N1cnJlbnRUYWInO1xuICAgIHN0YXRpYyByZWFkb25seSBkZWZhdWx0VXJpTWF0Y2g6IHN0cmluZyA9ICdkZWZhdWx0VXJpTWF0Y2gnO1xuICAgIHN0YXRpYyByZWFkb25seSBwaW5Qcm90ZWN0ZWRLZXk6IHN0cmluZyA9ICdwaW5Qcm90ZWN0ZWRLZXknO1xuICAgIHN0YXRpYyByZWFkb25seSBwcm90ZWN0ZWRQaW46IHN0cmluZyA9ICdwcm90ZWN0ZWRQaW4nO1xuICAgIHN0YXRpYyByZWFkb25seSBjbGVhckNsaXBib2FyZEtleTogc3RyaW5nID0gJ2NsZWFyQ2xpcGJvYXJkS2V5JztcbiAgICBzdGF0aWMgcmVhZG9ubHkgZXZlbnRDb2xsZWN0aW9uS2V5OiBzdHJpbmcgPSAnZXZlbnRDb2xsZWN0aW9uJztcbiAgICBzdGF0aWMgcmVhZG9ubHkgc3NvQ29kZVZlcmlmaWVyS2V5OiBzdHJpbmcgPSAnc3NvQ29kZVZlcmlmaWVyJztcbiAgICBzdGF0aWMgcmVhZG9ubHkgc3NvU3RhdGVLZXk6IHN0cmluZyA9ICdzc29TdGF0ZSc7XG4gICAgc3RhdGljIHJlYWRvbmx5IGJpb21ldHJpY1VubG9ja0tleTogc3RyaW5nID0gJ2Jpb21ldHJpYyc7XG4gICAgc3RhdGljIHJlYWRvbmx5IGJpb21ldHJpY1RleHQ6IHN0cmluZyA9ICdiaW9tZXRyaWNUZXh0JztcbiAgICBzdGF0aWMgcmVhZG9ubHkgYmlvbWV0cmljQXdhaXRpbmdBY2NlcHRhbmNlOiBzdHJpbmcgPSAnYmlvbWV0cmljQXdhaXRpbmdBY2NlcHRhbmNlJztcblxuICAgIHJlYWRvbmx5IGVudmlyb25tZW50VXJsc0tleTogc3RyaW5nID0gQ29uc3RhbnRzU2VydmljZS5lbnZpcm9ubWVudFVybHNLZXk7XG4gICAgcmVhZG9ubHkgZGlzYWJsZUdhS2V5OiBzdHJpbmcgPSBDb25zdGFudHNTZXJ2aWNlLmRpc2FibGVHYUtleTtcbiAgICByZWFkb25seSBkaXNhYmxlQWRkTG9naW5Ob3RpZmljYXRpb25LZXk6IHN0cmluZyA9IENvbnN0YW50c1NlcnZpY2UuZGlzYWJsZUFkZExvZ2luTm90aWZpY2F0aW9uS2V5O1xuICAgIHJlYWRvbmx5IGRpc2FibGVDb250ZXh0TWVudUl0ZW1LZXk6IHN0cmluZyA9IENvbnN0YW50c1NlcnZpY2UuZGlzYWJsZUNvbnRleHRNZW51SXRlbUtleTtcbiAgICByZWFkb25seSBkaXNhYmxlRmF2aWNvbktleTogc3RyaW5nID0gQ29uc3RhbnRzU2VydmljZS5kaXNhYmxlRmF2aWNvbktleTtcbiAgICByZWFkb25seSBkaXNhYmxlQXV0b1RvdHBDb3B5S2V5OiBzdHJpbmcgPSBDb25zdGFudHNTZXJ2aWNlLmRpc2FibGVBdXRvVG90cENvcHlLZXk7XG4gICAgcmVhZG9ubHkgZW5hYmxlQXV0b0ZpbGxPblBhZ2VMb2FkS2V5OiBzdHJpbmcgPSBDb25zdGFudHNTZXJ2aWNlLmVuYWJsZUF1dG9GaWxsT25QYWdlTG9hZEtleTtcbiAgICByZWFkb25seSB2YXVsdFRpbWVvdXRLZXk6IHN0cmluZyA9IENvbnN0YW50c1NlcnZpY2UudmF1bHRUaW1lb3V0S2V5O1xuICAgIHJlYWRvbmx5IHZhdWx0VGltZW91dEFjdGlvbktleTogc3RyaW5nID0gQ29uc3RhbnRzU2VydmljZS52YXVsdFRpbWVvdXRBY3Rpb25LZXk7XG4gICAgcmVhZG9ubHkgbGFzdEFjdGl2ZUtleTogc3RyaW5nID0gQ29uc3RhbnRzU2VydmljZS5sYXN0QWN0aXZlS2V5O1xuICAgIHJlYWRvbmx5IG5ldmVyRG9tYWluc0tleTogc3RyaW5nID0gQ29uc3RhbnRzU2VydmljZS5uZXZlckRvbWFpbnNLZXk7XG4gICAgcmVhZG9ubHkgaW5zdGFsbGVkVmVyc2lvbktleTogc3RyaW5nID0gQ29uc3RhbnRzU2VydmljZS5pbnN0YWxsZWRWZXJzaW9uS2V5O1xuICAgIHJlYWRvbmx5IGxvY2FsZUtleTogc3RyaW5nID0gQ29uc3RhbnRzU2VydmljZS5sb2NhbGVLZXk7XG4gICAgcmVhZG9ubHkgdGhlbWVLZXk6IHN0cmluZyA9IENvbnN0YW50c1NlcnZpY2UudGhlbWVLZXk7XG4gICAgcmVhZG9ubHkgY29sbGFwc2VkR3JvdXBpbmdzS2V5OiBzdHJpbmcgPSBDb25zdGFudHNTZXJ2aWNlLmNvbGxhcHNlZEdyb3VwaW5nc0tleTtcbiAgICByZWFkb25seSBhdXRvQ29uZmlybUZpbmdlcnByaW50czogc3RyaW5nID0gQ29uc3RhbnRzU2VydmljZS5hdXRvQ29uZmlybUZpbmdlcnByaW50cztcbiAgICByZWFkb25seSBkb250U2hvd0NhcmRzQ3VycmVudFRhYjogc3RyaW5nID0gQ29uc3RhbnRzU2VydmljZS5kb250U2hvd0NhcmRzQ3VycmVudFRhYjtcbiAgICByZWFkb25seSBkb250U2hvd0lkZW50aXRpZXNDdXJyZW50VGFiOiBzdHJpbmcgPSBDb25zdGFudHNTZXJ2aWNlLmRvbnRTaG93SWRlbnRpdGllc0N1cnJlbnRUYWI7XG4gICAgcmVhZG9ubHkgZGVmYXVsdFVyaU1hdGNoOiBzdHJpbmcgPSBDb25zdGFudHNTZXJ2aWNlLmRlZmF1bHRVcmlNYXRjaDtcbiAgICByZWFkb25seSBwaW5Qcm90ZWN0ZWRLZXk6IHN0cmluZyA9IENvbnN0YW50c1NlcnZpY2UucGluUHJvdGVjdGVkS2V5O1xuICAgIHJlYWRvbmx5IHByb3RlY3RlZFBpbjogc3RyaW5nID0gQ29uc3RhbnRzU2VydmljZS5wcm90ZWN0ZWRQaW47XG4gICAgcmVhZG9ubHkgY2xlYXJDbGlwYm9hcmRLZXk6IHN0cmluZyA9IENvbnN0YW50c1NlcnZpY2UuY2xlYXJDbGlwYm9hcmRLZXk7XG4gICAgcmVhZG9ubHkgZXZlbnRDb2xsZWN0aW9uS2V5OiBzdHJpbmcgPSBDb25zdGFudHNTZXJ2aWNlLmV2ZW50Q29sbGVjdGlvbktleTtcbiAgICByZWFkb25seSBzc29Db2RlVmVyaWZpZXJLZXk6IHN0cmluZyA9IENvbnN0YW50c1NlcnZpY2Uuc3NvQ29kZVZlcmlmaWVyS2V5O1xuICAgIHJlYWRvbmx5IHNzb1N0YXRlS2V5OiBzdHJpbmcgPSBDb25zdGFudHNTZXJ2aWNlLnNzb1N0YXRlS2V5O1xuICAgIHJlYWRvbmx5IGJpb21ldHJpY1VubG9ja0tleTogc3RyaW5nID0gQ29uc3RhbnRzU2VydmljZS5iaW9tZXRyaWNVbmxvY2tLZXk7XG4gICAgcmVhZG9ubHkgYmlvbWV0cmljVGV4dDogc3RyaW5nID0gQ29uc3RhbnRzU2VydmljZS5iaW9tZXRyaWNUZXh0O1xuICAgIHJlYWRvbmx5IGJpb21ldHJpY0F3YWl0aW5nQWNjZXB0YW5jZTogc3RyaW5nID0gQ29uc3RhbnRzU2VydmljZS5iaW9tZXRyaWNBd2FpdGluZ0FjY2VwdGFuY2U7XG59XG4iLCJpbXBvcnQgeyBMb2dpblVyaVZpZXcgfSBmcm9tICcuL2xvZ2luVXJpVmlldyc7XG5pbXBvcnQgeyBWaWV3IH0gZnJvbSAnLi92aWV3JztcblxuaW1wb3J0IHsgTG9naW4gfSBmcm9tICcuLi9kb21haW4vbG9naW4nO1xuXG5leHBvcnQgY2xhc3MgTG9naW5WaWV3IGltcGxlbWVudHMgVmlldyB7XG4gICAgdXNlcm5hbWU6IHN0cmluZyA9IG51bGw7XG4gICAgcGFzc3dvcmQ6IHN0cmluZyA9IG51bGw7XG4gICAgcGFzc3dvcmRSZXZpc2lvbkRhdGU/OiBEYXRlID0gbnVsbDtcbiAgICB0b3RwOiBzdHJpbmcgPSBudWxsO1xuICAgIHVyaXM6IExvZ2luVXJpVmlld1tdID0gbnVsbDtcblxuICAgIGNvbnN0cnVjdG9yKGw/OiBMb2dpbikge1xuICAgICAgICBpZiAoIWwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucGFzc3dvcmRSZXZpc2lvbkRhdGUgPSBsLnBhc3N3b3JkUmV2aXNpb25EYXRlO1xuICAgIH1cblxuICAgIGdldCB1cmkoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGFzVXJpcyA/IHRoaXMudXJpc1swXS51cmkgOiBudWxsO1xuICAgIH1cblxuICAgIGdldCBtYXNrZWRQYXNzd29yZCgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5wYXNzd29yZCAhPSBudWxsID8gJ+KAouKAouKAouKAouKAouKAouKAouKAoicgOiBudWxsO1xuICAgIH1cblxuICAgIGdldCBzdWJUaXRsZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy51c2VybmFtZTtcbiAgICB9XG5cbiAgICBnZXQgY2FuTGF1bmNoKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5oYXNVcmlzICYmIHRoaXMudXJpcy5zb21lKCh1KSA9PiB1LmNhbkxhdW5jaCk7XG4gICAgfVxuXG4gICAgZ2V0IGxhdW5jaFVyaSgpOiBzdHJpbmcge1xuICAgICAgICBpZiAodGhpcy5oYXNVcmlzKSB7XG4gICAgICAgICAgICBjb25zdCB1cmkgPSB0aGlzLnVyaXMuZmluZCgodSkgPT4gdS5jYW5MYXVuY2gpO1xuICAgICAgICAgICAgaWYgKHVyaSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVyaS5sYXVuY2hVcmk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgZ2V0IGhhc1VyaXMoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLnVyaXMgIT0gbnVsbCAmJiB0aGlzLnVyaXMubGVuZ3RoID4gMDtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBFbmNyeXB0aW9uVHlwZSB9IGZyb20gJy4uLy4uL2VudW1zL2VuY3J5cHRpb25UeXBlJztcblxuaW1wb3J0IHsgQ3J5cHRvU2VydmljZSB9IGZyb20gJy4uLy4uL2Fic3RyYWN0aW9ucy9jcnlwdG8uc2VydmljZSc7XG5cbmltcG9ydCB7IFV0aWxzIH0gZnJvbSAnLi4vLi4vbWlzYy91dGlscyc7XG5cbmltcG9ydCB7IFN5bW1ldHJpY0NyeXB0b0tleSB9IGZyb20gJy4vc3ltbWV0cmljQ3J5cHRvS2V5JztcblxuZXhwb3J0IGNsYXNzIENpcGhlclN0cmluZyB7XG4gICAgZW5jcnlwdGVkU3RyaW5nPzogc3RyaW5nO1xuICAgIGVuY3J5cHRpb25UeXBlPzogRW5jcnlwdGlvblR5cGU7XG4gICAgZGVjcnlwdGVkVmFsdWU/OiBzdHJpbmc7XG4gICAgZGF0YT86IHN0cmluZztcbiAgICBpdj86IHN0cmluZztcbiAgICBtYWM/OiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihlbmNyeXB0ZWRTdHJpbmdPclR5cGU6IHN0cmluZyB8IEVuY3J5cHRpb25UeXBlLCBkYXRhPzogc3RyaW5nLCBpdj86IHN0cmluZywgbWFjPzogc3RyaW5nKSB7XG4gICAgICAgIGlmIChkYXRhICE9IG51bGwpIHtcbiAgICAgICAgICAgIC8vIGRhdGEgYW5kIGhlYWRlclxuICAgICAgICAgICAgY29uc3QgZW5jVHlwZSA9IGVuY3J5cHRlZFN0cmluZ09yVHlwZSBhcyBFbmNyeXB0aW9uVHlwZTtcblxuICAgICAgICAgICAgaWYgKGl2ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVuY3J5cHRlZFN0cmluZyA9IGVuY1R5cGUgKyAnLicgKyBpdiArICd8JyArIGRhdGE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuZW5jcnlwdGVkU3RyaW5nID0gZW5jVHlwZSArICcuJyArIGRhdGE7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIG1hY1xuICAgICAgICAgICAgaWYgKG1hYyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbmNyeXB0ZWRTdHJpbmcgKz0gKCd8JyArIG1hYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuZW5jcnlwdGlvblR5cGUgPSBlbmNUeXBlO1xuICAgICAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgICAgIHRoaXMuaXYgPSBpdjtcbiAgICAgICAgICAgIHRoaXMubWFjID0gbWFjO1xuXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmVuY3J5cHRlZFN0cmluZyA9IGVuY3J5cHRlZFN0cmluZ09yVHlwZSBhcyBzdHJpbmc7XG4gICAgICAgIGlmICghdGhpcy5lbmNyeXB0ZWRTdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGhlYWRlclBpZWNlcyA9IHRoaXMuZW5jcnlwdGVkU3RyaW5nLnNwbGl0KCcuJyk7XG4gICAgICAgIGxldCBlbmNQaWVjZXM6IHN0cmluZ1tdID0gbnVsbDtcblxuICAgICAgICBpZiAoaGVhZGVyUGllY2VzLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB0aGlzLmVuY3J5cHRpb25UeXBlID0gcGFyc2VJbnQoaGVhZGVyUGllY2VzWzBdLCBudWxsKTtcbiAgICAgICAgICAgICAgICBlbmNQaWVjZXMgPSBoZWFkZXJQaWVjZXNbMV0uc3BsaXQoJ3wnKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlbmNQaWVjZXMgPSB0aGlzLmVuY3J5cHRlZFN0cmluZy5zcGxpdCgnfCcpO1xuICAgICAgICAgICAgdGhpcy5lbmNyeXB0aW9uVHlwZSA9IGVuY1BpZWNlcy5sZW5ndGggPT09IDMgPyBFbmNyeXB0aW9uVHlwZS5BZXNDYmMxMjhfSG1hY1NoYTI1Nl9CNjQgOlxuICAgICAgICAgICAgICAgIEVuY3J5cHRpb25UeXBlLkFlc0NiYzI1Nl9CNjQ7XG4gICAgICAgIH1cblxuICAgICAgICBzd2l0Y2ggKHRoaXMuZW5jcnlwdGlvblR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgRW5jcnlwdGlvblR5cGUuQWVzQ2JjMTI4X0htYWNTaGEyNTZfQjY0OlxuICAgICAgICAgICAgY2FzZSBFbmNyeXB0aW9uVHlwZS5BZXNDYmMyNTZfSG1hY1NoYTI1Nl9CNjQ6XG4gICAgICAgICAgICAgICAgaWYgKGVuY1BpZWNlcy5sZW5ndGggIT09IDMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuaXYgPSBlbmNQaWVjZXNbMF07XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhID0gZW5jUGllY2VzWzFdO1xuICAgICAgICAgICAgICAgIHRoaXMubWFjID0gZW5jUGllY2VzWzJdO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBFbmNyeXB0aW9uVHlwZS5BZXNDYmMyNTZfQjY0OlxuICAgICAgICAgICAgICAgIGlmIChlbmNQaWVjZXMubGVuZ3RoICE9PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLml2ID0gZW5jUGllY2VzWzBdO1xuICAgICAgICAgICAgICAgIHRoaXMuZGF0YSA9IGVuY1BpZWNlc1sxXTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgRW5jcnlwdGlvblR5cGUuUnNhMjA0OF9PYWVwU2hhMjU2X0I2NDpcbiAgICAgICAgICAgIGNhc2UgRW5jcnlwdGlvblR5cGUuUnNhMjA0OF9PYWVwU2hhMV9CNjQ6XG4gICAgICAgICAgICAgICAgaWYgKGVuY1BpZWNlcy5sZW5ndGggIT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YSA9IGVuY1BpZWNlc1swXTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgZGVjcnlwdChvcmdJZDogc3RyaW5nLCBrZXk6IFN5bW1ldHJpY0NyeXB0b0tleSA9IG51bGwpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgICAgICBpZiAodGhpcy5kZWNyeXB0ZWRWYWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kZWNyeXB0ZWRWYWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBjcnlwdG9TZXJ2aWNlOiBDcnlwdG9TZXJ2aWNlO1xuICAgICAgICBjb25zdCBjb250YWluZXJTZXJ2aWNlID0gKFV0aWxzLmdsb2JhbCBhcyBhbnkpLmJpdHdhcmRlbkNvbnRhaW5lclNlcnZpY2U7XG4gICAgICAgIGlmIChjb250YWluZXJTZXJ2aWNlKSB7XG4gICAgICAgICAgICBjcnlwdG9TZXJ2aWNlID0gY29udGFpbmVyU2VydmljZS5nZXRDcnlwdG9TZXJ2aWNlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2dsb2JhbCBiaXR3YXJkZW5Db250YWluZXJTZXJ2aWNlIG5vdCBpbml0aWFsaXplZC4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoa2V5ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBrZXkgPSBhd2FpdCBjcnlwdG9TZXJ2aWNlLmdldE9yZ0tleShvcmdJZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmRlY3J5cHRlZFZhbHVlID0gYXdhaXQgY3J5cHRvU2VydmljZS5kZWNyeXB0VG9VdGY4KHRoaXMsIGtleSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHRoaXMuZGVjcnlwdGVkVmFsdWUgPSAnW2Vycm9yOiBjYW5ub3QgZGVjcnlwdF0nO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmRlY3J5cHRlZFZhbHVlO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IEVuY3J5cHRpb25UeXBlIH0gZnJvbSAnLi4vLi4vZW51bXMvZW5jcnlwdGlvblR5cGUnO1xuXG5pbXBvcnQgeyBVdGlscyB9IGZyb20gJy4uLy4uL21pc2MvdXRpbHMnO1xuXG5leHBvcnQgY2xhc3MgU3ltbWV0cmljQ3J5cHRvS2V5IHtcbiAgICBrZXk6IEFycmF5QnVmZmVyO1xuICAgIGVuY0tleT86IEFycmF5QnVmZmVyO1xuICAgIG1hY0tleT86IEFycmF5QnVmZmVyO1xuICAgIGVuY1R5cGU6IEVuY3J5cHRpb25UeXBlO1xuXG4gICAga2V5QjY0OiBzdHJpbmc7XG4gICAgZW5jS2V5QjY0OiBzdHJpbmc7XG4gICAgbWFjS2V5QjY0OiBzdHJpbmc7XG5cbiAgICBtZXRhOiBhbnk7XG5cbiAgICBjb25zdHJ1Y3RvcihrZXk6IEFycmF5QnVmZmVyLCBlbmNUeXBlPzogRW5jcnlwdGlvblR5cGUpIHtcbiAgICAgICAgaWYgKGtleSA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ011c3QgcHJvdmlkZSBrZXknKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbmNUeXBlID09IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChrZXkuYnl0ZUxlbmd0aCA9PT0gMzIpIHtcbiAgICAgICAgICAgICAgICBlbmNUeXBlID0gRW5jcnlwdGlvblR5cGUuQWVzQ2JjMjU2X0I2NDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoa2V5LmJ5dGVMZW5ndGggPT09IDY0KSB7XG4gICAgICAgICAgICAgICAgZW5jVHlwZSA9IEVuY3J5cHRpb25UeXBlLkFlc0NiYzI1Nl9IbWFjU2hhMjU2X0I2NDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gZGV0ZXJtaW5lIGVuY1R5cGUuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmtleSA9IGtleTtcbiAgICAgICAgdGhpcy5lbmNUeXBlID0gZW5jVHlwZTtcblxuICAgICAgICBpZiAoZW5jVHlwZSA9PT0gRW5jcnlwdGlvblR5cGUuQWVzQ2JjMjU2X0I2NCAmJiBrZXkuYnl0ZUxlbmd0aCA9PT0gMzIpIHtcbiAgICAgICAgICAgIHRoaXMuZW5jS2V5ID0ga2V5O1xuICAgICAgICAgICAgdGhpcy5tYWNLZXkgPSBudWxsO1xuICAgICAgICB9IGVsc2UgaWYgKGVuY1R5cGUgPT09IEVuY3J5cHRpb25UeXBlLkFlc0NiYzEyOF9IbWFjU2hhMjU2X0I2NCAmJiBrZXkuYnl0ZUxlbmd0aCA9PT0gMzIpIHtcbiAgICAgICAgICAgIHRoaXMuZW5jS2V5ID0ga2V5LnNsaWNlKDAsIDE2KTtcbiAgICAgICAgICAgIHRoaXMubWFjS2V5ID0ga2V5LnNsaWNlKDE2LCAzMik7XG4gICAgICAgIH0gZWxzZSBpZiAoZW5jVHlwZSA9PT0gRW5jcnlwdGlvblR5cGUuQWVzQ2JjMjU2X0htYWNTaGEyNTZfQjY0ICYmIGtleS5ieXRlTGVuZ3RoID09PSA2NCkge1xuICAgICAgICAgICAgdGhpcy5lbmNLZXkgPSBrZXkuc2xpY2UoMCwgMzIpO1xuICAgICAgICAgICAgdGhpcy5tYWNLZXkgPSBrZXkuc2xpY2UoMzIsIDY0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgZW5jVHlwZS9rZXkgbGVuZ3RoLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMua2V5ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMua2V5QjY0ID0gVXRpbHMuZnJvbUJ1ZmZlclRvQjY0KHRoaXMua2V5KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5lbmNLZXkgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5lbmNLZXlCNjQgPSBVdGlscy5mcm9tQnVmZmVyVG9CNjQodGhpcy5lbmNLZXkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLm1hY0tleSAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLm1hY0tleUI2NCA9IFV0aWxzLmZyb21CdWZmZXJUb0I2NCh0aGlzLm1hY0tleSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCIvKiAoaWdub3JlZCkgKi8iLCIvKiAoaWdub3JlZCkgKi8iLCJleHBvcnQgZW51bSBMb2dMZXZlbFR5cGUge1xuICAgIERlYnVnLFxuICAgIEluZm8sXG4gICAgV2FybmluZyxcbiAgICBFcnJvcixcbn1cbiIsImV4cG9ydCB7IENpcGhlclR5cGUgfSBmcm9tICcuL2NpcGhlclR5cGUnO1xuZXhwb3J0IHsgRGV2aWNlVHlwZSB9IGZyb20gJy4vZGV2aWNlVHlwZSc7XG5leHBvcnQgeyBFbmNyeXB0aW9uVHlwZSB9IGZyb20gJy4vZW5jcnlwdGlvblR5cGUnO1xuZXhwb3J0IHsgRmllbGRUeXBlIH0gZnJvbSAnLi9maWVsZFR5cGUnO1xuZXhwb3J0IHsgTG9nTGV2ZWxUeXBlIH0gZnJvbSAnLi9sb2dMZXZlbFR5cGUnO1xuZXhwb3J0IHsgU2VjdXJlTm90ZVR5cGUgfSBmcm9tICcuL3NlY3VyZU5vdGVUeXBlJztcbmV4cG9ydCB7IFR3b0ZhY3RvclByb3ZpZGVyVHlwZSB9IGZyb20gJy4vdHdvRmFjdG9yUHJvdmlkZXJUeXBlJztcbmV4cG9ydCB7IFVyaU1hdGNoVHlwZSB9IGZyb20gJy4vdXJpTWF0Y2hUeXBlJztcbiIsImltcG9ydCB7IEJhc2VSZXNwb25zZSB9IGZyb20gJy4vYmFzZVJlc3BvbnNlJztcblxuZXhwb3J0IGNsYXNzIEFwaUtleVJlc3BvbnNlIGV4dGVuZHMgQmFzZVJlc3BvbnNlIHtcbiAgICBhcGlLZXk6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKHJlc3BvbnNlOiBhbnkpIHtcbiAgICAgICAgc3VwZXIocmVzcG9uc2UpO1xuICAgICAgICB0aGlzLmFwaUtleSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnQXBpS2V5Jyk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQmFzZVJlc3BvbnNlIH0gZnJvbSAnLi9iYXNlUmVzcG9uc2UnO1xuXG5pbXBvcnQgeyBQYXltZW50TWV0aG9kVHlwZSB9IGZyb20gJy4uLy4uL2VudW1zL3BheW1lbnRNZXRob2RUeXBlJztcbmltcG9ydCB7IFRyYW5zYWN0aW9uVHlwZSB9IGZyb20gJy4uLy4uL2VudW1zL3RyYW5zYWN0aW9uVHlwZSc7XG5cbmV4cG9ydCBjbGFzcyBCaWxsaW5nUmVzcG9uc2UgZXh0ZW5kcyBCYXNlUmVzcG9uc2Uge1xuICAgIGJhbGFuY2U6IG51bWJlcjtcbiAgICBwYXltZW50U291cmNlOiBCaWxsaW5nU291cmNlUmVzcG9uc2U7XG4gICAgaW52b2ljZXM6IEJpbGxpbmdJbnZvaWNlUmVzcG9uc2VbXSA9IFtdO1xuICAgIHRyYW5zYWN0aW9uczogQmlsbGluZ1RyYW5zYWN0aW9uUmVzcG9uc2VbXSA9IFtdO1xuXG4gICAgY29uc3RydWN0b3IocmVzcG9uc2U6IGFueSkge1xuICAgICAgICBzdXBlcihyZXNwb25zZSk7XG4gICAgICAgIHRoaXMuYmFsYW5jZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnQmFsYW5jZScpO1xuICAgICAgICBjb25zdCBwYXltZW50U291cmNlID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdQYXltZW50U291cmNlJyk7XG4gICAgICAgIGNvbnN0IHRyYW5zYWN0aW9ucyA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnVHJhbnNhY3Rpb25zJyk7XG4gICAgICAgIGNvbnN0IGludm9pY2VzID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdJbnZvaWNlcycpO1xuICAgICAgICB0aGlzLnBheW1lbnRTb3VyY2UgPSBwYXltZW50U291cmNlID09IG51bGwgPyBudWxsIDogbmV3IEJpbGxpbmdTb3VyY2VSZXNwb25zZShwYXltZW50U291cmNlKTtcbiAgICAgICAgaWYgKHRyYW5zYWN0aW9ucyAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnRyYW5zYWN0aW9ucyA9IHRyYW5zYWN0aW9ucy5tYXAoKHQ6IGFueSkgPT4gbmV3IEJpbGxpbmdUcmFuc2FjdGlvblJlc3BvbnNlKHQpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW52b2ljZXMgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5pbnZvaWNlcyA9IGludm9pY2VzLm1hcCgoaTogYW55KSA9PiBuZXcgQmlsbGluZ0ludm9pY2VSZXNwb25zZShpKSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBCaWxsaW5nU291cmNlUmVzcG9uc2UgZXh0ZW5kcyBCYXNlUmVzcG9uc2Uge1xuICAgIHR5cGU6IFBheW1lbnRNZXRob2RUeXBlO1xuICAgIGNhcmRCcmFuZDogc3RyaW5nO1xuICAgIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gICAgbmVlZHNWZXJpZmljYXRpb246IGJvb2xlYW47XG5cbiAgICBjb25zdHJ1Y3RvcihyZXNwb25zZTogYW55KSB7XG4gICAgICAgIHN1cGVyKHJlc3BvbnNlKTtcbiAgICAgICAgdGhpcy50eXBlID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdUeXBlJyk7XG4gICAgICAgIHRoaXMuY2FyZEJyYW5kID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdDYXJkQnJhbmQnKTtcbiAgICAgICAgdGhpcy5kZXNjcmlwdGlvbiA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnRGVzY3JpcHRpb24nKTtcbiAgICAgICAgdGhpcy5uZWVkc1ZlcmlmaWNhdGlvbiA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnTmVlZHNWZXJpZmljYXRpb24nKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBCaWxsaW5nSW52b2ljZVJlc3BvbnNlIGV4dGVuZHMgQmFzZVJlc3BvbnNlIHtcbiAgICB1cmw6IHN0cmluZztcbiAgICBwZGZVcmw6IHN0cmluZztcbiAgICBudW1iZXI6IHN0cmluZztcbiAgICBwYWlkOiBib29sZWFuO1xuICAgIGRhdGU6IHN0cmluZztcbiAgICBhbW91bnQ6IG51bWJlcjtcblxuICAgIGNvbnN0cnVjdG9yKHJlc3BvbnNlOiBhbnkpIHtcbiAgICAgICAgc3VwZXIocmVzcG9uc2UpO1xuICAgICAgICB0aGlzLnVybCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnVXJsJyk7XG4gICAgICAgIHRoaXMucGRmVXJsID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdQZGZVcmwnKTtcbiAgICAgICAgdGhpcy5udW1iZXIgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ051bWJlcicpO1xuICAgICAgICB0aGlzLnBhaWQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1BhaWQnKTtcbiAgICAgICAgdGhpcy5kYXRlID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdEYXRlJyk7XG4gICAgICAgIHRoaXMuYW1vdW50ID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdBbW91bnQnKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBCaWxsaW5nVHJhbnNhY3Rpb25SZXNwb25zZSBleHRlbmRzIEJhc2VSZXNwb25zZSB7XG4gICAgY3JlYXRlZERhdGU6IHN0cmluZztcbiAgICBhbW91bnQ6IG51bWJlcjtcbiAgICByZWZ1bmRlZDogYm9vbGVhbjtcbiAgICBwYXJ0aWFsbHlSZWZ1bmRlZDogYm9vbGVhbjtcbiAgICByZWZ1bmRlZEFtb3VudDogbnVtYmVyO1xuICAgIHR5cGU6IFRyYW5zYWN0aW9uVHlwZTtcbiAgICBwYXltZW50TWV0aG9kVHlwZTogUGF5bWVudE1ldGhvZFR5cGU7XG4gICAgZGV0YWlsczogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IocmVzcG9uc2U6IGFueSkge1xuICAgICAgICBzdXBlcihyZXNwb25zZSk7XG4gICAgICAgIHRoaXMuY3JlYXRlZERhdGUgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0NyZWF0ZWREYXRlJyk7XG4gICAgICAgIHRoaXMuYW1vdW50ID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdBbW91bnQnKTtcbiAgICAgICAgdGhpcy5yZWZ1bmRlZCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnUmVmdW5kZWQnKTtcbiAgICAgICAgdGhpcy5wYXJ0aWFsbHlSZWZ1bmRlZCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnUGFydGlhbGx5UmVmdW5kZWQnKTtcbiAgICAgICAgdGhpcy5yZWZ1bmRlZEFtb3VudCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnUmVmdW5kZWRBbW91bnQnKTtcbiAgICAgICAgdGhpcy50eXBlID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdUeXBlJyk7XG4gICAgICAgIHRoaXMucGF5bWVudE1ldGhvZFR5cGUgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1BheW1lbnRNZXRob2RUeXBlJyk7XG4gICAgICAgIHRoaXMuZGV0YWlscyA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnRGV0YWlscycpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IEJhc2VSZXNwb25zZSB9IGZyb20gJy4vYmFzZVJlc3BvbnNlJztcblxuZXhwb3J0IGNsYXNzIEJyZWFjaEFjY291bnRSZXNwb25zZSBleHRlbmRzIEJhc2VSZXNwb25zZSB7XG4gICAgYWRkZWREYXRlOiBzdHJpbmc7XG4gICAgYnJlYWNoRGF0ZTogc3RyaW5nO1xuICAgIGRhdGFDbGFzc2VzOiBzdHJpbmdbXTtcbiAgICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICAgIGRvbWFpbjogc3RyaW5nO1xuICAgIGlzQWN0aXZlOiBib29sZWFuO1xuICAgIGlzVmVyaWZpZWQ6IGJvb2xlYW47XG4gICAgbG9nb1BhdGg6IHN0cmluZztcbiAgICBtb2RpZmllZERhdGU6IHN0cmluZztcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgcHduQ291bnQ6IG51bWJlcjtcbiAgICB0aXRsZTogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IocmVzcG9uc2U6IGFueSkge1xuICAgICAgICBzdXBlcihyZXNwb25zZSk7XG4gICAgICAgIHRoaXMuYWRkZWREYXRlID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdBZGRlZERhdGUnKTtcbiAgICAgICAgdGhpcy5icmVhY2hEYXRlID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdCcmVhY2hEYXRlJyk7XG4gICAgICAgIHRoaXMuZGF0YUNsYXNzZXMgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0RhdGFDbGFzc2VzJyk7XG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb24gPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0Rlc2NyaXB0aW9uJyk7XG4gICAgICAgIHRoaXMuZG9tYWluID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdEb21haW4nKTtcbiAgICAgICAgdGhpcy5pc0FjdGl2ZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnSXNBY3RpdmUnKTtcbiAgICAgICAgdGhpcy5pc1ZlcmlmaWVkID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdJc1ZlcmlmaWVkJyk7XG4gICAgICAgIHRoaXMubG9nb1BhdGggPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0xvZ29QYXRoJyk7XG4gICAgICAgIHRoaXMubW9kaWZpZWREYXRlID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdNb2RpZmllZERhdGUnKTtcbiAgICAgICAgdGhpcy5uYW1lID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdOYW1lJyk7XG4gICAgICAgIHRoaXMucHduQ291bnQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1B3bkNvdW50Jyk7XG4gICAgICAgIHRoaXMudGl0bGUgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1RpdGxlJyk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQmFzZVJlc3BvbnNlIH0gZnJvbSAnLi9iYXNlUmVzcG9uc2UnO1xuXG5leHBvcnQgY2xhc3MgQXR0YWNobWVudFJlc3BvbnNlIGV4dGVuZHMgQmFzZVJlc3BvbnNlIHtcbiAgICBpZDogc3RyaW5nO1xuICAgIHVybDogc3RyaW5nO1xuICAgIGZpbGVOYW1lOiBzdHJpbmc7XG4gICAga2V5OiBzdHJpbmc7XG4gICAgc2l6ZTogc3RyaW5nO1xuICAgIHNpemVOYW1lOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihyZXNwb25zZTogYW55KSB7XG4gICAgICAgIHN1cGVyKHJlc3BvbnNlKTtcbiAgICAgICAgdGhpcy5pZCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnSWQnKTtcbiAgICAgICAgdGhpcy51cmwgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1VybCcpO1xuICAgICAgICB0aGlzLmZpbGVOYW1lID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdGaWxlTmFtZScpO1xuICAgICAgICB0aGlzLmtleSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnS2V5Jyk7XG4gICAgICAgIHRoaXMuc2l6ZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnU2l6ZScpO1xuICAgICAgICB0aGlzLnNpemVOYW1lID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdTaXplTmFtZScpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IEJhc2VSZXNwb25zZSB9IGZyb20gJy4vYmFzZVJlc3BvbnNlJztcblxuZXhwb3J0IGNsYXNzIFBhc3N3b3JkSGlzdG9yeVJlc3BvbnNlIGV4dGVuZHMgQmFzZVJlc3BvbnNlIHtcbiAgICBwYXNzd29yZDogc3RyaW5nO1xuICAgIGxhc3RVc2VkRGF0ZTogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IocmVzcG9uc2U6IGFueSkge1xuICAgICAgICBzdXBlcihyZXNwb25zZSk7XG4gICAgICAgIHRoaXMucGFzc3dvcmQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1Bhc3N3b3JkJyk7XG4gICAgICAgIHRoaXMubGFzdFVzZWREYXRlID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdMYXN0VXNlZERhdGUnKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBBdHRhY2htZW50UmVzcG9uc2UgfSBmcm9tICcuL2F0dGFjaG1lbnRSZXNwb25zZSc7XG5pbXBvcnQgeyBCYXNlUmVzcG9uc2UgfSBmcm9tICcuL2Jhc2VSZXNwb25zZSc7XG5pbXBvcnQgeyBQYXNzd29yZEhpc3RvcnlSZXNwb25zZSB9IGZyb20gJy4vcGFzc3dvcmRIaXN0b3J5UmVzcG9uc2UnO1xuXG5pbXBvcnQgeyBDYXJkQXBpIH0gZnJvbSAnLi4vYXBpL2NhcmRBcGknO1xuaW1wb3J0IHsgRmllbGRBcGkgfSBmcm9tICcuLi9hcGkvZmllbGRBcGknO1xuaW1wb3J0IHsgSWRlbnRpdHlBcGkgfSBmcm9tICcuLi9hcGkvaWRlbnRpdHlBcGknO1xuaW1wb3J0IHsgTG9naW5BcGkgfSBmcm9tICcuLi9hcGkvbG9naW5BcGknO1xuaW1wb3J0IHsgU2VjdXJlTm90ZUFwaSB9IGZyb20gJy4uL2FwaS9zZWN1cmVOb3RlQXBpJztcblxuZXhwb3J0IGNsYXNzIENpcGhlclJlc3BvbnNlIGV4dGVuZHMgQmFzZVJlc3BvbnNlIHtcbiAgICBpZDogc3RyaW5nO1xuICAgIG9yZ2FuaXphdGlvbklkOiBzdHJpbmc7XG4gICAgZm9sZGVySWQ6IHN0cmluZztcbiAgICB0eXBlOiBudW1iZXI7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIG5vdGVzOiBzdHJpbmc7XG4gICAgZmllbGRzOiBGaWVsZEFwaVtdO1xuICAgIGxvZ2luOiBMb2dpbkFwaTtcbiAgICBjYXJkOiBDYXJkQXBpO1xuICAgIGlkZW50aXR5OiBJZGVudGl0eUFwaTtcbiAgICBzZWN1cmVOb3RlOiBTZWN1cmVOb3RlQXBpO1xuICAgIGZhdm9yaXRlOiBib29sZWFuO1xuICAgIGVkaXQ6IGJvb2xlYW47XG4gICAgdmlld1Bhc3N3b3JkOiBib29sZWFuO1xuICAgIG9yZ2FuaXphdGlvblVzZVRvdHA6IGJvb2xlYW47XG4gICAgcmV2aXNpb25EYXRlOiBzdHJpbmc7XG4gICAgYXR0YWNobWVudHM6IEF0dGFjaG1lbnRSZXNwb25zZVtdO1xuICAgIHBhc3N3b3JkSGlzdG9yeTogUGFzc3dvcmRIaXN0b3J5UmVzcG9uc2VbXTtcbiAgICBjb2xsZWN0aW9uSWRzOiBzdHJpbmdbXTtcbiAgICBkZWxldGVkRGF0ZTogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IocmVzcG9uc2U6IGFueSkge1xuICAgICAgICBzdXBlcihyZXNwb25zZSk7XG4gICAgICAgIHRoaXMuaWQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0lkJyk7XG4gICAgICAgIHRoaXMub3JnYW5pemF0aW9uSWQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ09yZ2FuaXphdGlvbklkJyk7XG4gICAgICAgIHRoaXMuZm9sZGVySWQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0ZvbGRlcklkJykgfHwgbnVsbDtcbiAgICAgICAgdGhpcy50eXBlID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdUeXBlJyk7XG4gICAgICAgIHRoaXMubmFtZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnTmFtZScpO1xuICAgICAgICB0aGlzLm5vdGVzID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdOb3RlcycpO1xuICAgICAgICB0aGlzLmZhdm9yaXRlID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdGYXZvcml0ZScpIHx8IGZhbHNlO1xuICAgICAgICB0aGlzLmVkaXQgPSAhIXRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnRWRpdCcpO1xuICAgICAgICBpZiAodGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdWaWV3UGFzc3dvcmQnKSA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnZpZXdQYXNzd29yZCA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnZpZXdQYXNzd29yZCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnVmlld1Bhc3N3b3JkJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vcmdhbml6YXRpb25Vc2VUb3RwID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdPcmdhbml6YXRpb25Vc2VUb3RwJyk7XG4gICAgICAgIHRoaXMucmV2aXNpb25EYXRlID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdSZXZpc2lvbkRhdGUnKTtcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uSWRzID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdDb2xsZWN0aW9uSWRzJyk7XG4gICAgICAgIHRoaXMuZGVsZXRlZERhdGUgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0RlbGV0ZWREYXRlJyk7XG5cbiAgICAgICAgY29uc3QgbG9naW4gPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0xvZ2luJyk7XG4gICAgICAgIGlmIChsb2dpbiAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmxvZ2luID0gbmV3IExvZ2luQXBpKGxvZ2luKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGNhcmQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0NhcmQnKTtcbiAgICAgICAgaWYgKGNhcmQgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5jYXJkID0gbmV3IENhcmRBcGkoY2FyZCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBpZGVudGl0eSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnSWRlbnRpdHknKTtcbiAgICAgICAgaWYgKGlkZW50aXR5ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuaWRlbnRpdHkgPSBuZXcgSWRlbnRpdHlBcGkoaWRlbnRpdHkpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc2VjdXJlTm90ZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnU2VjdXJlTm90ZScpO1xuICAgICAgICBpZiAoc2VjdXJlTm90ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnNlY3VyZU5vdGUgPSBuZXcgU2VjdXJlTm90ZUFwaShzZWN1cmVOb3RlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGZpZWxkcyA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnRmllbGRzJyk7XG4gICAgICAgIGlmIChmaWVsZHMgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5maWVsZHMgPSBmaWVsZHMubWFwKChmOiBhbnkpID0+IG5ldyBGaWVsZEFwaShmKSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBhdHRhY2htZW50cyA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnQXR0YWNobWVudHMnKTtcbiAgICAgICAgaWYgKGF0dGFjaG1lbnRzICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuYXR0YWNobWVudHMgPSBhdHRhY2htZW50cy5tYXAoKGE6IGFueSkgPT4gbmV3IEF0dGFjaG1lbnRSZXNwb25zZShhKSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwYXNzd29yZEhpc3RvcnkgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1Bhc3N3b3JkSGlzdG9yeScpO1xuICAgICAgICBpZiAocGFzc3dvcmRIaXN0b3J5ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMucGFzc3dvcmRIaXN0b3J5ID0gcGFzc3dvcmRIaXN0b3J5Lm1hcCgoaDogYW55KSA9PiBuZXcgUGFzc3dvcmRIaXN0b3J5UmVzcG9uc2UoaCkpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQmFzZVJlc3BvbnNlIH0gZnJvbSAnLi9iYXNlUmVzcG9uc2UnO1xuXG5leHBvcnQgY2xhc3MgU2VsZWN0aW9uUmVhZE9ubHlSZXNwb25zZSBleHRlbmRzIEJhc2VSZXNwb25zZSB7XG4gICAgaWQ6IHN0cmluZztcbiAgICByZWFkT25seTogYm9vbGVhbjtcbiAgICBoaWRlUGFzc3dvcmRzOiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IocmVzcG9uc2U6IGFueSkge1xuICAgICAgICBzdXBlcihyZXNwb25zZSk7XG4gICAgICAgIHRoaXMuaWQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0lkJyk7XG4gICAgICAgIHRoaXMucmVhZE9ubHkgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1JlYWRPbmx5Jyk7XG4gICAgICAgIHRoaXMuaGlkZVBhc3N3b3JkcyA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnSGlkZVBhc3N3b3JkcycpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IEJhc2VSZXNwb25zZSB9IGZyb20gJy4vYmFzZVJlc3BvbnNlJztcbmltcG9ydCB7IFNlbGVjdGlvblJlYWRPbmx5UmVzcG9uc2UgfSBmcm9tICcuL3NlbGVjdGlvblJlYWRPbmx5UmVzcG9uc2UnO1xuXG5leHBvcnQgY2xhc3MgQ29sbGVjdGlvblJlc3BvbnNlIGV4dGVuZHMgQmFzZVJlc3BvbnNlIHtcbiAgICBpZDogc3RyaW5nO1xuICAgIG9yZ2FuaXphdGlvbklkOiBzdHJpbmc7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIGV4dGVybmFsSWQ6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKHJlc3BvbnNlOiBhbnkpIHtcbiAgICAgICAgc3VwZXIocmVzcG9uc2UpO1xuICAgICAgICB0aGlzLmlkID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdJZCcpO1xuICAgICAgICB0aGlzLm9yZ2FuaXphdGlvbklkID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdPcmdhbml6YXRpb25JZCcpO1xuICAgICAgICB0aGlzLm5hbWUgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ05hbWUnKTtcbiAgICAgICAgdGhpcy5leHRlcm5hbElkID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdFeHRlcm5hbElkJyk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ29sbGVjdGlvbkRldGFpbHNSZXNwb25zZSBleHRlbmRzIENvbGxlY3Rpb25SZXNwb25zZSB7XG4gICAgcmVhZE9ubHk6IGJvb2xlYW47XG5cbiAgICBjb25zdHJ1Y3RvcihyZXNwb25zZTogYW55KSB7XG4gICAgICAgIHN1cGVyKHJlc3BvbnNlKTtcbiAgICAgICAgdGhpcy5yZWFkT25seSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnUmVhZE9ubHknKSB8fCBmYWxzZTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDb2xsZWN0aW9uR3JvdXBEZXRhaWxzUmVzcG9uc2UgZXh0ZW5kcyBDb2xsZWN0aW9uUmVzcG9uc2Uge1xuICAgIGdyb3VwczogU2VsZWN0aW9uUmVhZE9ubHlSZXNwb25zZVtdID0gW107XG5cbiAgICBjb25zdHJ1Y3RvcihyZXNwb25zZTogYW55KSB7XG4gICAgICAgIHN1cGVyKHJlc3BvbnNlKTtcbiAgICAgICAgY29uc3QgZ3JvdXBzID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdHcm91cHMnKTtcbiAgICAgICAgaWYgKGdyb3VwcyAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmdyb3VwcyA9IGdyb3Vwcy5tYXAoKGc6IGFueSkgPT4gbmV3IFNlbGVjdGlvblJlYWRPbmx5UmVzcG9uc2UoZykpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQmFzZVJlc3BvbnNlIH0gZnJvbSAnLi9iYXNlUmVzcG9uc2UnO1xuXG5leHBvcnQgY2xhc3MgR2xvYmFsRG9tYWluUmVzcG9uc2UgZXh0ZW5kcyBCYXNlUmVzcG9uc2Uge1xuICAgIHR5cGU6IG51bWJlcjtcbiAgICBkb21haW5zOiBzdHJpbmdbXTtcbiAgICBleGNsdWRlZDogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKHJlc3BvbnNlOiBhbnkpIHtcbiAgICAgICAgc3VwZXIocmVzcG9uc2UpO1xuICAgICAgICB0aGlzLnR5cGUgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1R5cGUnKTtcbiAgICAgICAgdGhpcy5kb21haW5zID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdEb21haW5zJyk7XG4gICAgICAgIHRoaXMuZXhjbHVkZWQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0V4Y2x1ZGVkJyk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQmFzZVJlc3BvbnNlIH0gZnJvbSAnLi9iYXNlUmVzcG9uc2UnO1xuaW1wb3J0IHsgR2xvYmFsRG9tYWluUmVzcG9uc2UgfSBmcm9tICcuL2dsb2JhbERvbWFpblJlc3BvbnNlJztcblxuZXhwb3J0IGNsYXNzIERvbWFpbnNSZXNwb25zZSBleHRlbmRzIEJhc2VSZXNwb25zZSB7XG4gICAgZXF1aXZhbGVudERvbWFpbnM6IHN0cmluZ1tdW107XG4gICAgZ2xvYmFsRXF1aXZhbGVudERvbWFpbnM6IEdsb2JhbERvbWFpblJlc3BvbnNlW10gPSBbXTtcblxuICAgIGNvbnN0cnVjdG9yKHJlc3BvbnNlOiBhbnkpIHtcbiAgICAgICAgc3VwZXIocmVzcG9uc2UpO1xuICAgICAgICB0aGlzLmVxdWl2YWxlbnREb21haW5zID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdFcXVpdmFsZW50RG9tYWlucycpO1xuICAgICAgICBjb25zdCBnbG9iYWxFcXVpdmFsZW50RG9tYWlucyA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnR2xvYmFsRXF1aXZhbGVudERvbWFpbnMnKTtcbiAgICAgICAgaWYgKGdsb2JhbEVxdWl2YWxlbnREb21haW5zICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuZ2xvYmFsRXF1aXZhbGVudERvbWFpbnMgPSBnbG9iYWxFcXVpdmFsZW50RG9tYWlucy5tYXAoKGQ6IGFueSkgPT4gbmV3IEdsb2JhbERvbWFpblJlc3BvbnNlKGQpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZ2xvYmFsRXF1aXZhbGVudERvbWFpbnMgPSBbXTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7IEJhc2VSZXNwb25zZSB9IGZyb20gJy4vYmFzZVJlc3BvbnNlJztcblxuZXhwb3J0IGNsYXNzIEVycm9yUmVzcG9uc2UgZXh0ZW5kcyBCYXNlUmVzcG9uc2Uge1xuICAgIG1lc3NhZ2U6IHN0cmluZztcbiAgICB2YWxpZGF0aW9uRXJyb3JzOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZ1tdOyB9O1xuICAgIHN0YXR1c0NvZGU6IG51bWJlcjtcblxuICAgIGNvbnN0cnVjdG9yKHJlc3BvbnNlOiBhbnksIHN0YXR1czogbnVtYmVyLCBpZGVudGl0eVJlc3BvbnNlPzogYm9vbGVhbikge1xuICAgICAgICBzdXBlcihyZXNwb25zZSk7XG4gICAgICAgIGxldCBlcnJvck1vZGVsID0gbnVsbDtcbiAgICAgICAgaWYgKHJlc3BvbnNlICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlRXJyb3JNb2RlbCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnRXJyb3JNb2RlbCcpO1xuICAgICAgICAgICAgaWYgKHJlc3BvbnNlRXJyb3JNb2RlbCAmJiBpZGVudGl0eVJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgZXJyb3JNb2RlbCA9IHJlc3BvbnNlRXJyb3JNb2RlbDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZXJyb3JNb2RlbCA9IHJlc3BvbnNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVycm9yTW9kZWwpIHtcbiAgICAgICAgICAgIHRoaXMubWVzc2FnZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnTWVzc2FnZScsIGVycm9yTW9kZWwpO1xuICAgICAgICAgICAgdGhpcy52YWxpZGF0aW9uRXJyb3JzID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdWYWxpZGF0aW9uRXJyb3JzJywgZXJyb3JNb2RlbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoc3RhdHVzID09PSA0MjkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1lc3NhZ2UgPSAnUmF0ZSBsaW1pdCBleGNlZWRlZC4gVHJ5IGFnYWluIGxhdGVyLic7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdGF0dXNDb2RlID0gc3RhdHVzO1xuICAgIH1cblxuICAgIGdldFNpbmdsZU1lc3NhZ2UoKTogc3RyaW5nIHtcbiAgICAgICAgaWYgKHRoaXMudmFsaWRhdGlvbkVycm9ycyA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5tZXNzYWdlO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMudmFsaWRhdGlvbkVycm9ycykge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnZhbGlkYXRpb25FcnJvcnMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMudmFsaWRhdGlvbkVycm9yc1trZXldLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbGlkYXRpb25FcnJvcnNba2V5XVswXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5tZXNzYWdlO1xuICAgIH1cblxuICAgIGdldEFsbE1lc3NhZ2VzKCk6IHN0cmluZ1tdIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZXM6IHN0cmluZ1tdID0gW107XG4gICAgICAgIGlmICh0aGlzLnZhbGlkYXRpb25FcnJvcnMgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG1lc3NhZ2VzO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMudmFsaWRhdGlvbkVycm9ycykge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnZhbGlkYXRpb25FcnJvcnMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy52YWxpZGF0aW9uRXJyb3JzW2tleV0uZm9yRWFjaCgoaXRlbTogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHByZWZpeCA9ICcnO1xuICAgICAgICAgICAgICAgIGlmIChrZXkuaW5kZXhPZignWycpID4gLTEgJiYga2V5LmluZGV4T2YoJ10nKSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxhc3RTZXAgPSBrZXkubGFzdEluZGV4T2YoJy4nKTtcbiAgICAgICAgICAgICAgICAgICAgcHJlZml4ID0ga2V5LnN1YnN0cigwLCBsYXN0U2VwID4gLTEgPyBsYXN0U2VwIDoga2V5Lmxlbmd0aCkgKyAnOiAnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBtZXNzYWdlcy5wdXNoKHByZWZpeCArIGl0ZW0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2VzO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IEJhc2VSZXNwb25zZSB9IGZyb20gJy4vYmFzZVJlc3BvbnNlJztcblxuaW1wb3J0IHsgRGV2aWNlVHlwZSB9IGZyb20gJy4uLy4uL2VudW1zL2RldmljZVR5cGUnO1xuaW1wb3J0IHsgRXZlbnRUeXBlIH0gZnJvbSAnLi4vLi4vZW51bXMvZXZlbnRUeXBlJztcblxuZXhwb3J0IGNsYXNzIEV2ZW50UmVzcG9uc2UgZXh0ZW5kcyBCYXNlUmVzcG9uc2Uge1xuICAgIHR5cGU6IEV2ZW50VHlwZTtcbiAgICB1c2VySWQ6IHN0cmluZztcbiAgICBvcmdhbml6YXRpb25JZDogc3RyaW5nO1xuICAgIGNpcGhlcklkOiBzdHJpbmc7XG4gICAgY29sbGVjdGlvbklkOiBzdHJpbmc7XG4gICAgZ3JvdXBJZDogc3RyaW5nO1xuICAgIG9yZ2FuaXphdGlvblVzZXJJZDogc3RyaW5nO1xuICAgIGFjdGluZ1VzZXJJZDogc3RyaW5nO1xuICAgIGRhdGU6IHN0cmluZztcbiAgICBkZXZpY2VUeXBlOiBEZXZpY2VUeXBlO1xuICAgIGlwQWRkcmVzczogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IocmVzcG9uc2U6IGFueSkge1xuICAgICAgICBzdXBlcihyZXNwb25zZSk7XG4gICAgICAgIHRoaXMudHlwZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnVHlwZScpO1xuICAgICAgICB0aGlzLnVzZXJJZCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnVXNlcklkJyk7XG4gICAgICAgIHRoaXMub3JnYW5pemF0aW9uSWQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ09yZ2FuaXphdGlvbklkJyk7XG4gICAgICAgIHRoaXMuY2lwaGVySWQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0NpcGhlcklkJyk7XG4gICAgICAgIHRoaXMuY29sbGVjdGlvbklkID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdDb2xsZWN0aW9uSWQnKTtcbiAgICAgICAgdGhpcy5ncm91cElkID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdHcm91cElkJyk7XG4gICAgICAgIHRoaXMub3JnYW5pemF0aW9uVXNlcklkID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdPcmdhbml6YXRpb25Vc2VySWQnKTtcbiAgICAgICAgdGhpcy5hY3RpbmdVc2VySWQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0FjdGluZ1VzZXJJZCcpO1xuICAgICAgICB0aGlzLmRhdGUgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0RhdGUnKTtcbiAgICAgICAgdGhpcy5kZXZpY2VUeXBlID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdEZXZpY2VUeXBlJyk7XG4gICAgICAgIHRoaXMuaXBBZGRyZXNzID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdJcEFkZHJlc3MnKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBCYXNlUmVzcG9uc2UgfSBmcm9tICcuL2Jhc2VSZXNwb25zZSc7XG5cbmV4cG9ydCBjbGFzcyBGb2xkZXJSZXNwb25zZSBleHRlbmRzIEJhc2VSZXNwb25zZSB7XG4gICAgaWQ6IHN0cmluZztcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgcmV2aXNpb25EYXRlOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihyZXNwb25zZTogYW55KSB7XG4gICAgICAgIHN1cGVyKHJlc3BvbnNlKTtcbiAgICAgICAgdGhpcy5pZCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnSWQnKTtcbiAgICAgICAgdGhpcy5uYW1lID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdOYW1lJyk7XG4gICAgICAgIHRoaXMucmV2aXNpb25EYXRlID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdSZXZpc2lvbkRhdGUnKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBCYXNlUmVzcG9uc2UgfSBmcm9tICcuL2Jhc2VSZXNwb25zZSc7XG5pbXBvcnQgeyBTZWxlY3Rpb25SZWFkT25seVJlc3BvbnNlIH0gZnJvbSAnLi9zZWxlY3Rpb25SZWFkT25seVJlc3BvbnNlJztcblxuZXhwb3J0IGNsYXNzIEdyb3VwUmVzcG9uc2UgZXh0ZW5kcyBCYXNlUmVzcG9uc2Uge1xuICAgIGlkOiBzdHJpbmc7XG4gICAgb3JnYW5pemF0aW9uSWQ6IHN0cmluZztcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgYWNjZXNzQWxsOiBib29sZWFuO1xuICAgIGV4dGVybmFsSWQ6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKHJlc3BvbnNlOiBhbnkpIHtcbiAgICAgICAgc3VwZXIocmVzcG9uc2UpO1xuICAgICAgICB0aGlzLmlkID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdJZCcpO1xuICAgICAgICB0aGlzLm9yZ2FuaXphdGlvbklkID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdPcmdhbml6YXRpb25JZCcpO1xuICAgICAgICB0aGlzLm5hbWUgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ05hbWUnKTtcbiAgICAgICAgdGhpcy5hY2Nlc3NBbGwgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0FjY2Vzc0FsbCcpO1xuICAgICAgICB0aGlzLmV4dGVybmFsSWQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0V4dGVybmFsSWQnKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBHcm91cERldGFpbHNSZXNwb25zZSBleHRlbmRzIEdyb3VwUmVzcG9uc2Uge1xuICAgIGNvbGxlY3Rpb25zOiBTZWxlY3Rpb25SZWFkT25seVJlc3BvbnNlW10gPSBbXTtcblxuICAgIGNvbnN0cnVjdG9yKHJlc3BvbnNlOiBhbnkpIHtcbiAgICAgICAgc3VwZXIocmVzcG9uc2UpO1xuICAgICAgICBjb25zdCBjb2xsZWN0aW9ucyA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnQ29sbGVjdGlvbnMnKTtcbiAgICAgICAgaWYgKGNvbGxlY3Rpb25zICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuY29sbGVjdGlvbnMgPSBjb2xsZWN0aW9ucy5tYXAoKGM6IGFueSkgPT4gbmV3IFNlbGVjdGlvblJlYWRPbmx5UmVzcG9uc2UoYykpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQmFzZVJlc3BvbnNlIH0gZnJvbSAnLi9iYXNlUmVzcG9uc2UnO1xuXG5pbXBvcnQgeyBLZGZUeXBlIH0gZnJvbSAnLi4vLi4vZW51bXMva2RmVHlwZSc7XG5cbmV4cG9ydCBjbGFzcyBJZGVudGl0eVRva2VuUmVzcG9uc2UgZXh0ZW5kcyBCYXNlUmVzcG9uc2Uge1xuICAgIGFjY2Vzc1Rva2VuOiBzdHJpbmc7XG4gICAgZXhwaXJlc0luOiBudW1iZXI7XG4gICAgcmVmcmVzaFRva2VuOiBzdHJpbmc7XG4gICAgdG9rZW5UeXBlOiBzdHJpbmc7XG5cbiAgICByZXNldE1hc3RlclBhc3N3b3JkOiBib29sZWFuO1xuICAgIHByaXZhdGVLZXk6IHN0cmluZztcbiAgICBrZXk6IHN0cmluZztcbiAgICB0d29GYWN0b3JUb2tlbjogc3RyaW5nO1xuICAgIGtkZjogS2RmVHlwZTtcbiAgICBrZGZJdGVyYXRpb25zOiBudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3RvcihyZXNwb25zZTogYW55KSB7XG4gICAgICAgIHN1cGVyKHJlc3BvbnNlKTtcbiAgICAgICAgdGhpcy5hY2Nlc3NUb2tlbiA9IHJlc3BvbnNlLmFjY2Vzc190b2tlbjtcbiAgICAgICAgdGhpcy5leHBpcmVzSW4gPSByZXNwb25zZS5leHBpcmVzX2luO1xuICAgICAgICB0aGlzLnJlZnJlc2hUb2tlbiA9IHJlc3BvbnNlLnJlZnJlc2hfdG9rZW47XG4gICAgICAgIHRoaXMudG9rZW5UeXBlID0gcmVzcG9uc2UudG9rZW5fdHlwZTtcblxuICAgICAgICB0aGlzLnJlc2V0TWFzdGVyUGFzc3dvcmQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1Jlc2V0TWFzdGVyUGFzc3dvcmQnKTtcbiAgICAgICAgdGhpcy5wcml2YXRlS2V5ID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdQcml2YXRlS2V5Jyk7XG4gICAgICAgIHRoaXMua2V5ID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdLZXknKTtcbiAgICAgICAgdGhpcy50d29GYWN0b3JUb2tlbiA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnVHdvRmFjdG9yVG9rZW4nKTtcbiAgICAgICAgdGhpcy5rZGYgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0tkZicpO1xuICAgICAgICB0aGlzLmtkZkl0ZXJhdGlvbnMgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0tkZkl0ZXJhdGlvbnMnKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBCYXNlUmVzcG9uc2UgfSBmcm9tICcuL2Jhc2VSZXNwb25zZSc7XG5cbmltcG9ydCB7IFR3b0ZhY3RvclByb3ZpZGVyVHlwZSB9IGZyb20gJy4uLy4uL2VudW1zL3R3b0ZhY3RvclByb3ZpZGVyVHlwZSc7XG5cbmV4cG9ydCBjbGFzcyBJZGVudGl0eVR3b0ZhY3RvclJlc3BvbnNlIGV4dGVuZHMgQmFzZVJlc3BvbnNlIHtcbiAgICB0d29GYWN0b3JQcm92aWRlcnM6IFR3b0ZhY3RvclByb3ZpZGVyVHlwZVtdO1xuICAgIHR3b0ZhY3RvclByb3ZpZGVyczIgPSBuZXcgTWFwPFR3b0ZhY3RvclByb3ZpZGVyVHlwZSwgeyBba2V5OiBzdHJpbmddOiBzdHJpbmc7IH0+KCk7XG5cbiAgICBjb25zdHJ1Y3RvcihyZXNwb25zZTogYW55KSB7XG4gICAgICAgIHN1cGVyKHJlc3BvbnNlKTtcbiAgICAgICAgdGhpcy50d29GYWN0b3JQcm92aWRlcnMgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1R3b0ZhY3RvclByb3ZpZGVycycpO1xuICAgICAgICBjb25zdCB0d29GYWN0b3JQcm92aWRlcnMyID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdUd29GYWN0b3JQcm92aWRlcnMyJyk7XG4gICAgICAgIGlmICh0d29GYWN0b3JQcm92aWRlcnMyICE9IG51bGwpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgcHJvcCBpbiB0d29GYWN0b3JQcm92aWRlcnMyKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR3b0ZhY3RvclByb3ZpZGVyczIuaGFzT3duUHJvcGVydHkocHJvcCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50d29GYWN0b3JQcm92aWRlcnMyLnNldChwYXJzZUludChwcm9wLCBudWxsKSwgdHdvRmFjdG9yUHJvdmlkZXJzMltwcm9wXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQmFzZVJlc3BvbnNlIH0gZnJvbSAnLi9iYXNlUmVzcG9uc2UnO1xuXG5leHBvcnQgY2xhc3MgTGlzdFJlc3BvbnNlPFQ+IGV4dGVuZHMgQmFzZVJlc3BvbnNlIHtcbiAgICBkYXRhOiBUW107XG4gICAgY29udGludWF0aW9uVG9rZW46IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKHJlc3BvbnNlOiBhbnksIHQ6IG5ldyAoZGF0YVJlc3BvbnNlOiBhbnkpID0+IFQpIHtcbiAgICAgICAgc3VwZXIocmVzcG9uc2UpO1xuICAgICAgICBjb25zdCBkYXRhID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdEYXRhJyk7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGEgPT0gbnVsbCA/IFtdIDogZGF0YS5tYXAoKGRyOiBhbnkpID0+IG5ldyB0KGRyKSk7XG4gICAgICAgIHRoaXMuY29udGludWF0aW9uVG9rZW4gPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0NvbnRpbnVhdGlvblRva2VuJyk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgUGxhblR5cGUgfSBmcm9tICcuLi8uLi9lbnVtcy9wbGFuVHlwZSc7XG5pbXBvcnQgeyBQcm9kdWN0VHlwZSB9IGZyb20gJy4uLy4uL2VudW1zL3Byb2R1Y3RUeXBlJztcblxuaW1wb3J0IHsgQmFzZVJlc3BvbnNlIH0gZnJvbSAnLi9iYXNlUmVzcG9uc2UnO1xuXG5leHBvcnQgY2xhc3MgUGxhblJlc3BvbnNlIGV4dGVuZHMgQmFzZVJlc3BvbnNlIHtcbiAgICB0eXBlOiBQbGFuVHlwZTtcbiAgICBwcm9kdWN0OiBQcm9kdWN0VHlwZTtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgaXNBbm51YWw6IGJvb2xlYW47XG4gICAgbmFtZUxvY2FsaXphdGlvbktleTogc3RyaW5nO1xuICAgIGRlc2NyaXB0aW9uTG9jYWxpemF0aW9uS2V5OiBzdHJpbmc7XG4gICAgY2FuQmVVc2VkQnlCdXNpbmVzczogYm9vbGVhbjtcbiAgICBiYXNlU2VhdHM6IG51bWJlcjtcbiAgICBiYXNlU3RvcmFnZUdiOiBudW1iZXI7XG4gICAgbWF4Q29sbGVjdGlvbnM6IG51bWJlcjtcbiAgICBtYXhVc2VyczogbnVtYmVyO1xuXG4gICAgaGFzQWRkaXRpb25hbFNlYXRzT3B0aW9uOiBib29sZWFuO1xuICAgIG1heEFkZGl0aW9uYWxTZWF0czogbnVtYmVyO1xuICAgIGhhc0FkZGl0aW9uYWxTdG9yYWdlT3B0aW9uOiBib29sZWFuO1xuICAgIG1heEFkZGl0aW9uYWxTdG9yYWdlOiBudW1iZXI7XG4gICAgaGFzUHJlbWl1bUFjY2Vzc09wdGlvbjogYm9vbGVhbjtcbiAgICB0cmlhbFBlcmlvZERheXM6IG51bWJlcjtcblxuICAgIGhhc1NlbGZIb3N0OiBib29sZWFuO1xuICAgIGhhc1BvbGljaWVzOiBib29sZWFuO1xuICAgIGhhc0dyb3VwczogYm9vbGVhbjtcbiAgICBoYXNEaXJlY3Rvcnk6IGJvb2xlYW47XG4gICAgaGFzRXZlbnRzOiBib29sZWFuO1xuICAgIGhhc1RvdHA6IGJvb2xlYW47XG4gICAgaGFzMmZhOiBib29sZWFuO1xuICAgIGhhc0FwaTogYm9vbGVhbjtcbiAgICBoYXNTc286IGJvb2xlYW47XG4gICAgdXNlcnNHZXRQcmVtaXVtOiBib29sZWFuO1xuXG4gICAgdXBncmFkZVNvcnRPcmRlcjogbnVtYmVyO1xuICAgIGRpc3BsYXlTb3J0T3JkZXI6IG51bWJlcjtcbiAgICBsZWdhY3lZZWFyOiBudW1iZXI7XG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XG5cbiAgICBzdHJpcGVQbGFuSWQ6IHN0cmluZztcbiAgICBzdHJpcGVTZWF0UGxhbklkOiBzdHJpbmc7XG4gICAgc3RyaXBlU3RvcmFnZVBsYW5JZDogc3RyaW5nO1xuICAgIHN0cmlwZVByZW1pdW1BY2Nlc3NQbGFuSWQ6IHN0cmluZztcbiAgICBiYXNlUHJpY2U6IG51bWJlcjtcbiAgICBzZWF0UHJpY2U6IG51bWJlcjtcbiAgICBhZGRpdGlvbmFsU3RvcmFnZVByaWNlUGVyR2I6IG51bWJlcjtcbiAgICBwcmVtaXVtQWNjZXNzT3B0aW9uUHJpY2U6IG51bWJlcjtcblxuICAgIGNvbnN0cnVjdG9yKHJlc3BvbnNlOiBhbnkpIHtcbiAgICAgICAgc3VwZXIocmVzcG9uc2UpO1xuICAgICAgICB0aGlzLnR5cGUgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1R5cGUnKTtcbiAgICAgICAgdGhpcy5wcm9kdWN0ID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdQcm9kdWN0Jyk7XG4gICAgICAgIHRoaXMubmFtZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnTmFtZScpO1xuICAgICAgICB0aGlzLmlzQW5udWFsID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdJc0FubnVhbCcpO1xuICAgICAgICB0aGlzLm5hbWVMb2NhbGl6YXRpb25LZXkgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ05hbWVMb2NhbGl6YXRpb25LZXknKTtcbiAgICAgICAgdGhpcy5kZXNjcmlwdGlvbkxvY2FsaXphdGlvbktleSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnRGVzY3JpcHRpb25Mb2NhbGl6YXRpb25LZXknKTtcbiAgICAgICAgdGhpcy5jYW5CZVVzZWRCeUJ1c2luZXNzID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdDYW5CZVVzZWRCeUJ1c2luZXNzJyk7XG4gICAgICAgIHRoaXMuYmFzZVNlYXRzID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdCYXNlU2VhdHMnKTtcbiAgICAgICAgdGhpcy5iYXNlU3RvcmFnZUdiID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdCYXNlU3RvcmFnZUdiJyk7XG4gICAgICAgIHRoaXMubWF4Q29sbGVjdGlvbnMgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ01heENvbGxlY3Rpb25zJyk7XG4gICAgICAgIHRoaXMubWF4VXNlcnMgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ01heFVzZXJzJyk7XG4gICAgICAgIHRoaXMuaGFzQWRkaXRpb25hbFNlYXRzT3B0aW9uID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdIYXNBZGRpdGlvbmFsU2VhdHNPcHRpb24nKTtcbiAgICAgICAgdGhpcy5tYXhBZGRpdGlvbmFsU2VhdHMgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ01heEFkZGl0aW9uYWxTZWF0cycpO1xuICAgICAgICB0aGlzLmhhc0FkZGl0aW9uYWxTdG9yYWdlT3B0aW9uID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdIYXNBZGRpdGlvbmFsU3RvcmFnZU9wdGlvbicpO1xuICAgICAgICB0aGlzLm1heEFkZGl0aW9uYWxTdG9yYWdlID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdNYXhBZGRpdGlvbmFsU3RvcmFnZScpO1xuICAgICAgICB0aGlzLmhhc1ByZW1pdW1BY2Nlc3NPcHRpb24gPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0hhc1ByZW1pdW1BY2Nlc3NPcHRpb24nKTtcbiAgICAgICAgdGhpcy50cmlhbFBlcmlvZERheXMgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1RyaWFsUGVyaW9kRGF5cycpO1xuICAgICAgICB0aGlzLmhhc1NlbGZIb3N0ID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdIYXNTZWxmSG9zdCcpO1xuICAgICAgICB0aGlzLmhhc1BvbGljaWVzID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdIYXNQb2xpY2llcycpO1xuICAgICAgICB0aGlzLmhhc0dyb3VwcyA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnSGFzR3JvdXBzJyk7XG4gICAgICAgIHRoaXMuaGFzRGlyZWN0b3J5ID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdIYXNEaXJlY3RvcnknKTtcbiAgICAgICAgdGhpcy5oYXNFdmVudHMgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0hhc0V2ZW50cycpO1xuICAgICAgICB0aGlzLmhhc1RvdHAgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0hhc1RvdHAnKTtcbiAgICAgICAgdGhpcy5oYXMyZmEgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0hhczJmYScpO1xuICAgICAgICB0aGlzLmhhc0FwaSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnSGFzQXBpJyk7XG4gICAgICAgIHRoaXMuaGFzU3NvID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdIYXNTc28nKTtcbiAgICAgICAgdGhpcy51c2Vyc0dldFByZW1pdW0gPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1VzZXJzR2V0UHJlbWl1bScpO1xuICAgICAgICB0aGlzLnVwZ3JhZGVTb3J0T3JkZXIgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1VwZ3JhZGVTb3J0T3JkZXInKTtcbiAgICAgICAgdGhpcy5kaXNwbGF5U29ydE9yZGVyID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdTb3J0T3JkZXInKTtcbiAgICAgICAgdGhpcy5sZWdhY3lZZWFyID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdMZWdhY3lZZWFyJyk7XG4gICAgICAgIHRoaXMuZGlzYWJsZWQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0Rpc2FibGVkJyk7XG4gICAgICAgIHRoaXMuc3RyaXBlUGxhbklkID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdTdHJpcGVQbGFuSWQnKTtcbiAgICAgICAgdGhpcy5zdHJpcGVTZWF0UGxhbklkID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdTdHJpcGVTZWF0UGxhbklkJyk7XG4gICAgICAgIHRoaXMuc3RyaXBlU3RvcmFnZVBsYW5JZCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnU3RyaXBlU3RvcmFnZVBsYW5JZCcpO1xuICAgICAgICB0aGlzLnN0cmlwZVByZW1pdW1BY2Nlc3NQbGFuSWQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1N0cmlwZVByZW1pdW1BY2Nlc3NQbGFuSWQnKTtcbiAgICAgICAgdGhpcy5iYXNlUHJpY2UgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0Jhc2VQcmljZScpO1xuICAgICAgICB0aGlzLnNlYXRQcmljZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnU2VhdFByaWNlJyk7XG4gICAgICAgIHRoaXMuYWRkaXRpb25hbFN0b3JhZ2VQcmljZVBlckdiID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdBZGRpdGlvbmFsU3RvcmFnZVByaWNlUGVyR2InKTtcbiAgICAgICAgdGhpcy5wcmVtaXVtQWNjZXNzT3B0aW9uUHJpY2UgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1ByZW1pdW1BY2Nlc3NPcHRpb25QcmljZScpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IEJhc2VSZXNwb25zZSB9IGZyb20gJy4vYmFzZVJlc3BvbnNlJztcbmltcG9ydCB7IFBsYW5SZXNwb25zZSB9IGZyb20gJy4vcGxhblJlc3BvbnNlJztcblxuaW1wb3J0IHsgUGxhblR5cGUgfSBmcm9tICcuLi8uLi9lbnVtcy9wbGFuVHlwZSc7XG5cbmV4cG9ydCBjbGFzcyBPcmdhbml6YXRpb25SZXNwb25zZSBleHRlbmRzIEJhc2VSZXNwb25zZSB7XG4gICAgaWQ6IHN0cmluZztcbiAgICBpZGVudGlmaWVyOiBzdHJpbmc7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIGJ1c2luZXNzTmFtZTogc3RyaW5nO1xuICAgIGJ1c2luZXNzQWRkcmVzczE6IHN0cmluZztcbiAgICBidXNpbmVzc0FkZHJlc3MyOiBzdHJpbmc7XG4gICAgYnVzaW5lc3NBZGRyZXNzMzogc3RyaW5nO1xuICAgIGJ1c2luZXNzQ291bnRyeTogc3RyaW5nO1xuICAgIGJ1c2luZXNzVGF4TnVtYmVyOiBzdHJpbmc7XG4gICAgYmlsbGluZ0VtYWlsOiBzdHJpbmc7XG4gICAgcGxhbjogUGxhblJlc3BvbnNlO1xuICAgIHBsYW5UeXBlOiBQbGFuVHlwZTtcbiAgICBzZWF0czogbnVtYmVyO1xuICAgIG1heENvbGxlY3Rpb25zOiBudW1iZXI7XG4gICAgbWF4U3RvcmFnZUdiOiBudW1iZXI7XG4gICAgdXNlR3JvdXBzOiBib29sZWFuO1xuICAgIHVzZURpcmVjdG9yeTogYm9vbGVhbjtcbiAgICB1c2VFdmVudHM6IGJvb2xlYW47XG4gICAgdXNlVG90cDogYm9vbGVhbjtcbiAgICB1c2UyZmE6IGJvb2xlYW47XG4gICAgdXNlQXBpOiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IocmVzcG9uc2U6IGFueSkge1xuICAgICAgICBzdXBlcihyZXNwb25zZSk7XG4gICAgICAgIHRoaXMuaWQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0lkJyk7XG4gICAgICAgIHRoaXMuaWRlbnRpZmllciA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnSWRlbnRpZmllcicpO1xuICAgICAgICB0aGlzLm5hbWUgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ05hbWUnKTtcbiAgICAgICAgdGhpcy5idXNpbmVzc05hbWUgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0J1c2luZXNzTmFtZScpO1xuICAgICAgICB0aGlzLmJ1c2luZXNzQWRkcmVzczEgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0J1c2luZXNzQWRkcmVzczEnKTtcbiAgICAgICAgdGhpcy5idXNpbmVzc0FkZHJlc3MyID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdCdXNpbmVzc0FkZHJlc3MyJyk7XG4gICAgICAgIHRoaXMuYnVzaW5lc3NBZGRyZXNzMyA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnQnVzaW5lc3NBZGRyZXNzMycpO1xuICAgICAgICB0aGlzLmJ1c2luZXNzQ291bnRyeSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnQnVzaW5lc3NDb3VudHJ5Jyk7XG4gICAgICAgIHRoaXMuYnVzaW5lc3NUYXhOdW1iZXIgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0J1c2luZXNzVGF4TnVtYmVyJyk7XG4gICAgICAgIHRoaXMuYmlsbGluZ0VtYWlsID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdCaWxsaW5nRW1haWwnKTtcbiAgICAgICAgY29uc3QgcGxhbiA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnUGxhbicpO1xuICAgICAgICB0aGlzLnBsYW4gPSBwbGFuID09IG51bGwgPyBudWxsIDogbmV3IFBsYW5SZXNwb25zZShwbGFuKTtcbiAgICAgICAgdGhpcy5wbGFuVHlwZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnUGxhblR5cGUnKTtcbiAgICAgICAgdGhpcy5zZWF0cyA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnU2VhdHMnKTtcbiAgICAgICAgdGhpcy5tYXhDb2xsZWN0aW9ucyA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnTWF4Q29sbGVjdGlvbnMnKTtcbiAgICAgICAgdGhpcy5tYXhTdG9yYWdlR2IgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ01heFN0b3JhZ2VHYicpO1xuICAgICAgICB0aGlzLnVzZUdyb3VwcyA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnVXNlR3JvdXBzJyk7XG4gICAgICAgIHRoaXMudXNlRGlyZWN0b3J5ID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdVc2VEaXJlY3RvcnknKTtcbiAgICAgICAgdGhpcy51c2VFdmVudHMgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1VzZUV2ZW50cycpO1xuICAgICAgICB0aGlzLnVzZVRvdHAgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1VzZVRvdHAnKTtcbiAgICAgICAgdGhpcy51c2UyZmEgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1VzZTJmYScpO1xuICAgICAgICB0aGlzLnVzZUFwaSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnVXNlQXBpJyk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQmFzZVJlc3BvbnNlIH0gZnJvbSAnLi9iYXNlUmVzcG9uc2UnO1xuXG5leHBvcnQgY2xhc3MgU3Vic2NyaXB0aW9uUmVzcG9uc2UgZXh0ZW5kcyBCYXNlUmVzcG9uc2Uge1xuICAgIHN0b3JhZ2VOYW1lOiBzdHJpbmc7XG4gICAgc3RvcmFnZUdiOiBudW1iZXI7XG4gICAgbWF4U3RvcmFnZUdiOiBudW1iZXI7XG4gICAgc3Vic2NyaXB0aW9uOiBCaWxsaW5nU3Vic2NyaXB0aW9uUmVzcG9uc2U7XG4gICAgdXBjb21pbmdJbnZvaWNlOiBCaWxsaW5nU3Vic2NyaXB0aW9uVXBjb21pbmdJbnZvaWNlUmVzcG9uc2U7XG4gICAgbGljZW5zZTogYW55O1xuICAgIGV4cGlyYXRpb246IHN0cmluZztcbiAgICB1c2luZ0luQXBwUHVyY2hhc2U6IGJvb2xlYW47XG5cbiAgICBjb25zdHJ1Y3RvcihyZXNwb25zZTogYW55KSB7XG4gICAgICAgIHN1cGVyKHJlc3BvbnNlKTtcbiAgICAgICAgdGhpcy5zdG9yYWdlTmFtZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnU3RvcmFnZU5hbWUnKTtcbiAgICAgICAgdGhpcy5zdG9yYWdlR2IgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1N0b3JhZ2VHYicpO1xuICAgICAgICB0aGlzLm1heFN0b3JhZ2VHYiA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnTWF4U3RvcmFnZUdiJyk7XG4gICAgICAgIHRoaXMubGljZW5zZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnTGljZW5zZScpO1xuICAgICAgICB0aGlzLmV4cGlyYXRpb24gPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0V4cGlyYXRpb24nKTtcbiAgICAgICAgdGhpcy51c2luZ0luQXBwUHVyY2hhc2UgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1VzaW5nSW5BcHBQdXJjaGFzZScpO1xuICAgICAgICBjb25zdCBzdWJzY3JpcHRpb24gPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1N1YnNjcmlwdGlvbicpO1xuICAgICAgICBjb25zdCB1cGNvbWluZ0ludm9pY2UgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1VwY29taW5nSW52b2ljZScpO1xuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbiA9IHN1YnNjcmlwdGlvbiA9PSBudWxsID8gbnVsbCA6IG5ldyBCaWxsaW5nU3Vic2NyaXB0aW9uUmVzcG9uc2Uoc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgdGhpcy51cGNvbWluZ0ludm9pY2UgPSB1cGNvbWluZ0ludm9pY2UgPT0gbnVsbCA/IG51bGwgOlxuICAgICAgICAgICAgbmV3IEJpbGxpbmdTdWJzY3JpcHRpb25VcGNvbWluZ0ludm9pY2VSZXNwb25zZSh1cGNvbWluZ0ludm9pY2UpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEJpbGxpbmdTdWJzY3JpcHRpb25SZXNwb25zZSBleHRlbmRzIEJhc2VSZXNwb25zZSB7XG4gICAgdHJpYWxTdGFydERhdGU6IHN0cmluZztcbiAgICB0cmlhbEVuZERhdGU6IHN0cmluZztcbiAgICBwZXJpb2RTdGFydERhdGU6IHN0cmluZztcbiAgICBwZXJpb2RFbmREYXRlOiBzdHJpbmc7XG4gICAgY2FuY2VsbGVkRGF0ZTogc3RyaW5nO1xuICAgIGNhbmNlbEF0RW5kRGF0ZTogYm9vbGVhbjtcbiAgICBzdGF0dXM6IHN0cmluZztcbiAgICBjYW5jZWxsZWQ6IGJvb2xlYW47XG4gICAgaXRlbXM6IEJpbGxpbmdTdWJzY3JpcHRpb25JdGVtUmVzcG9uc2VbXSA9IFtdO1xuXG4gICAgY29uc3RydWN0b3IocmVzcG9uc2U6IGFueSkge1xuICAgICAgICBzdXBlcihyZXNwb25zZSk7XG4gICAgICAgIHRoaXMudHJpYWxFbmREYXRlID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdUcmlhbFN0YXJ0RGF0ZScpO1xuICAgICAgICB0aGlzLnRyaWFsRW5kRGF0ZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnVHJpYWxFbmREYXRlJyk7XG4gICAgICAgIHRoaXMucGVyaW9kU3RhcnREYXRlID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdQZXJpb2RTdGFydERhdGUnKTtcbiAgICAgICAgdGhpcy5wZXJpb2RFbmREYXRlID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdQZXJpb2RFbmREYXRlJyk7XG4gICAgICAgIHRoaXMuY2FuY2VsbGVkRGF0ZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnQ2FuY2VsbGVkRGF0ZScpO1xuICAgICAgICB0aGlzLmNhbmNlbEF0RW5kRGF0ZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnQ2FuY2VsQXRFbmREYXRlJyk7XG4gICAgICAgIHRoaXMuc3RhdHVzID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdTdGF0dXMnKTtcbiAgICAgICAgdGhpcy5jYW5jZWxsZWQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0NhbmNlbGxlZCcpO1xuICAgICAgICBjb25zdCBpdGVtcyA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnSXRlbXMnKTtcbiAgICAgICAgaWYgKGl0ZW1zICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuaXRlbXMgPSBpdGVtcy5tYXAoKGk6IGFueSkgPT4gbmV3IEJpbGxpbmdTdWJzY3JpcHRpb25JdGVtUmVzcG9uc2UoaSkpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgQmlsbGluZ1N1YnNjcmlwdGlvbkl0ZW1SZXNwb25zZSBleHRlbmRzIEJhc2VSZXNwb25zZSB7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIGFtb3VudDogbnVtYmVyO1xuICAgIHF1YW50aXR5OiBudW1iZXI7XG4gICAgaW50ZXJ2YWw6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKHJlc3BvbnNlOiBhbnkpIHtcbiAgICAgICAgc3VwZXIocmVzcG9uc2UpO1xuICAgICAgICB0aGlzLm5hbWUgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ05hbWUnKTtcbiAgICAgICAgdGhpcy5hbW91bnQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0Ftb3VudCcpO1xuICAgICAgICB0aGlzLnF1YW50aXR5ID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdRdWFudGl0eScpO1xuICAgICAgICB0aGlzLmludGVydmFsID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdJbnRlcnZhbCcpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEJpbGxpbmdTdWJzY3JpcHRpb25VcGNvbWluZ0ludm9pY2VSZXNwb25zZSBleHRlbmRzIEJhc2VSZXNwb25zZSB7XG4gICAgZGF0ZTogc3RyaW5nO1xuICAgIGFtb3VudDogbnVtYmVyO1xuXG4gICAgY29uc3RydWN0b3IocmVzcG9uc2U6IGFueSkge1xuICAgICAgICBzdXBlcihyZXNwb25zZSk7XG4gICAgICAgIHRoaXMuZGF0ZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnRGF0ZScpO1xuICAgICAgICB0aGlzLmFtb3VudCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnQW1vdW50Jyk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgT3JnYW5pemF0aW9uUmVzcG9uc2UgfSBmcm9tICcuL29yZ2FuaXphdGlvblJlc3BvbnNlJztcbmltcG9ydCB7XG4gICAgQmlsbGluZ1N1YnNjcmlwdGlvblJlc3BvbnNlLFxuICAgIEJpbGxpbmdTdWJzY3JpcHRpb25VcGNvbWluZ0ludm9pY2VSZXNwb25zZSxcbn0gZnJvbSAnLi9zdWJzY3JpcHRpb25SZXNwb25zZSc7XG5cbmV4cG9ydCBjbGFzcyBPcmdhbml6YXRpb25TdWJzY3JpcHRpb25SZXNwb25zZSBleHRlbmRzIE9yZ2FuaXphdGlvblJlc3BvbnNlIHtcbiAgICBzdG9yYWdlTmFtZTogc3RyaW5nO1xuICAgIHN0b3JhZ2VHYjogbnVtYmVyO1xuICAgIHN1YnNjcmlwdGlvbjogQmlsbGluZ1N1YnNjcmlwdGlvblJlc3BvbnNlO1xuICAgIHVwY29taW5nSW52b2ljZTogQmlsbGluZ1N1YnNjcmlwdGlvblVwY29taW5nSW52b2ljZVJlc3BvbnNlO1xuICAgIGV4cGlyYXRpb246IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKHJlc3BvbnNlOiBhbnkpIHtcbiAgICAgICAgc3VwZXIocmVzcG9uc2UpO1xuICAgICAgICB0aGlzLnN0b3JhZ2VOYW1lID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdTdG9yYWdlTmFtZScpO1xuICAgICAgICB0aGlzLnN0b3JhZ2VHYiA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnU3RvcmFnZUdiJyk7XG4gICAgICAgIGNvbnN0IHN1YnNjcmlwdGlvbiA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnU3Vic2NyaXB0aW9uJyk7XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uID0gc3Vic2NyaXB0aW9uID09IG51bGwgPyBudWxsIDogbmV3IEJpbGxpbmdTdWJzY3JpcHRpb25SZXNwb25zZShzdWJzY3JpcHRpb24pO1xuICAgICAgICBjb25zdCB1cGNvbWluZ0ludm9pY2UgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1VwY29taW5nSW52b2ljZScpO1xuICAgICAgICB0aGlzLnVwY29taW5nSW52b2ljZSA9IHVwY29taW5nSW52b2ljZSA9PSBudWxsID8gbnVsbCA6XG4gICAgICAgICAgICBuZXcgQmlsbGluZ1N1YnNjcmlwdGlvblVwY29taW5nSW52b2ljZVJlc3BvbnNlKHVwY29taW5nSW52b2ljZSk7XG4gICAgICAgIHRoaXMuZXhwaXJhdGlvbiA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnRXhwaXJhdGlvbicpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IE9yZ2FuaXphdGlvblVzZXJTdGF0dXNUeXBlIH0gZnJvbSAnLi4vLi4vZW51bXMvb3JnYW5pemF0aW9uVXNlclN0YXR1c1R5cGUnO1xuaW1wb3J0IHsgT3JnYW5pemF0aW9uVXNlclR5cGUgfSBmcm9tICcuLi8uLi9lbnVtcy9vcmdhbml6YXRpb25Vc2VyVHlwZSc7XG5cbmltcG9ydCB7IEJhc2VSZXNwb25zZSB9IGZyb20gJy4vYmFzZVJlc3BvbnNlJztcbmltcG9ydCB7IFNlbGVjdGlvblJlYWRPbmx5UmVzcG9uc2UgfSBmcm9tICcuL3NlbGVjdGlvblJlYWRPbmx5UmVzcG9uc2UnO1xuXG5leHBvcnQgY2xhc3MgT3JnYW5pemF0aW9uVXNlclJlc3BvbnNlIGV4dGVuZHMgQmFzZVJlc3BvbnNlIHtcbiAgICBpZDogc3RyaW5nO1xuICAgIHVzZXJJZDogc3RyaW5nO1xuICAgIHR5cGU6IE9yZ2FuaXphdGlvblVzZXJUeXBlO1xuICAgIHN0YXR1czogT3JnYW5pemF0aW9uVXNlclN0YXR1c1R5cGU7XG4gICAgYWNjZXNzQWxsOiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IocmVzcG9uc2U6IGFueSkge1xuICAgICAgICBzdXBlcihyZXNwb25zZSk7XG4gICAgICAgIHRoaXMuaWQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0lkJyk7XG4gICAgICAgIHRoaXMudXNlcklkID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdVc2VySWQnKTtcbiAgICAgICAgdGhpcy50eXBlID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdUeXBlJyk7XG4gICAgICAgIHRoaXMuc3RhdHVzID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdTdGF0dXMnKTtcbiAgICAgICAgdGhpcy5hY2Nlc3NBbGwgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0FjY2Vzc0FsbCcpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIE9yZ2FuaXphdGlvblVzZXJVc2VyRGV0YWlsc1Jlc3BvbnNlIGV4dGVuZHMgT3JnYW5pemF0aW9uVXNlclJlc3BvbnNlIHtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgZW1haWw6IHN0cmluZztcbiAgICB0d29GYWN0b3JFbmFibGVkOiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IocmVzcG9uc2U6IGFueSkge1xuICAgICAgICBzdXBlcihyZXNwb25zZSk7XG4gICAgICAgIHRoaXMubmFtZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnTmFtZScpO1xuICAgICAgICB0aGlzLmVtYWlsID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdFbWFpbCcpO1xuICAgICAgICB0aGlzLnR3b0ZhY3RvckVuYWJsZWQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1R3b0ZhY3RvckVuYWJsZWQnKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBPcmdhbml6YXRpb25Vc2VyRGV0YWlsc1Jlc3BvbnNlIGV4dGVuZHMgT3JnYW5pemF0aW9uVXNlclJlc3BvbnNlIHtcbiAgICBjb2xsZWN0aW9uczogU2VsZWN0aW9uUmVhZE9ubHlSZXNwb25zZVtdID0gW107XG5cbiAgICBjb25zdHJ1Y3RvcihyZXNwb25zZTogYW55KSB7XG4gICAgICAgIHN1cGVyKHJlc3BvbnNlKTtcbiAgICAgICAgY29uc3QgY29sbGVjdGlvbnMgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0NvbGxlY3Rpb25zJyk7XG4gICAgICAgIGlmIChjb2xsZWN0aW9ucyAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmNvbGxlY3Rpb25zID0gY29sbGVjdGlvbnMubWFwKChjOiBhbnkpID0+IG5ldyBTZWxlY3Rpb25SZWFkT25seVJlc3BvbnNlKGMpKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7IEJhc2VSZXNwb25zZSB9IGZyb20gJy4vYmFzZVJlc3BvbnNlJztcblxuaW1wb3J0IHsgT3JnYW5pemF0aW9uVXNlclN0YXR1c1R5cGUgfSBmcm9tICcuLi8uLi9lbnVtcy9vcmdhbml6YXRpb25Vc2VyU3RhdHVzVHlwZSc7XG5pbXBvcnQgeyBPcmdhbml6YXRpb25Vc2VyVHlwZSB9IGZyb20gJy4uLy4uL2VudW1zL29yZ2FuaXphdGlvblVzZXJUeXBlJztcblxuZXhwb3J0IGNsYXNzIFByb2ZpbGVPcmdhbml6YXRpb25SZXNwb25zZSBleHRlbmRzIEJhc2VSZXNwb25zZSB7XG4gICAgaWQ6IHN0cmluZztcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgdXNlUG9saWNpZXM6IGJvb2xlYW47XG4gICAgdXNlR3JvdXBzOiBib29sZWFuO1xuICAgIHVzZURpcmVjdG9yeTogYm9vbGVhbjtcbiAgICB1c2VFdmVudHM6IGJvb2xlYW47XG4gICAgdXNlVG90cDogYm9vbGVhbjtcbiAgICB1c2UyZmE6IGJvb2xlYW47XG4gICAgdXNlQXBpOiBib29sZWFuO1xuICAgIHVzZUJ1c2luZXNzUG9ydGFsOiBib29sZWFuO1xuICAgIHVzZVNzbzogYm9vbGVhbjtcbiAgICBzZWxmSG9zdDogYm9vbGVhbjtcbiAgICB1c2Vyc0dldFByZW1pdW06IGJvb2xlYW47XG4gICAgc2VhdHM6IG51bWJlcjtcbiAgICBtYXhDb2xsZWN0aW9uczogbnVtYmVyO1xuICAgIG1heFN0b3JhZ2VHYj86IG51bWJlcjtcbiAgICBrZXk6IHN0cmluZztcbiAgICBzdGF0dXM6IE9yZ2FuaXphdGlvblVzZXJTdGF0dXNUeXBlO1xuICAgIHR5cGU6IE9yZ2FuaXphdGlvblVzZXJUeXBlO1xuICAgIGVuYWJsZWQ6IGJvb2xlYW47XG4gICAgc3NvQm91bmQ6IGJvb2xlYW47XG4gICAgaWRlbnRpZmllcjogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IocmVzcG9uc2U6IGFueSkge1xuICAgICAgICBzdXBlcihyZXNwb25zZSk7XG4gICAgICAgIHRoaXMuaWQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0lkJyk7XG4gICAgICAgIHRoaXMubmFtZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnTmFtZScpO1xuICAgICAgICB0aGlzLnVzZVBvbGljaWVzID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdVc2VQb2xpY2llcycpO1xuICAgICAgICB0aGlzLnVzZUdyb3VwcyA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnVXNlR3JvdXBzJyk7XG4gICAgICAgIHRoaXMudXNlRGlyZWN0b3J5ID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdVc2VEaXJlY3RvcnknKTtcbiAgICAgICAgdGhpcy51c2VFdmVudHMgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1VzZUV2ZW50cycpO1xuICAgICAgICB0aGlzLnVzZVRvdHAgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1VzZVRvdHAnKTtcbiAgICAgICAgdGhpcy51c2UyZmEgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1VzZTJmYScpO1xuICAgICAgICB0aGlzLnVzZUFwaSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnVXNlQXBpJyk7XG4gICAgICAgIHRoaXMudXNlQnVzaW5lc3NQb3J0YWwgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1VzZUJ1c2luZXNzUG9ydGFsJyk7XG4gICAgICAgIHRoaXMudXNlU3NvID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdVc2VTc28nKTtcbiAgICAgICAgdGhpcy5zZWxmSG9zdCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnU2VsZkhvc3QnKTtcbiAgICAgICAgdGhpcy51c2Vyc0dldFByZW1pdW0gPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1VzZXJzR2V0UHJlbWl1bScpO1xuICAgICAgICB0aGlzLnNlYXRzID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdTZWF0cycpO1xuICAgICAgICB0aGlzLm1heENvbGxlY3Rpb25zID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdNYXhDb2xsZWN0aW9ucycpO1xuICAgICAgICB0aGlzLm1heFN0b3JhZ2VHYiA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnTWF4U3RvcmFnZUdiJyk7XG4gICAgICAgIHRoaXMua2V5ID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdLZXknKTtcbiAgICAgICAgdGhpcy5zdGF0dXMgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1N0YXR1cycpO1xuICAgICAgICB0aGlzLnR5cGUgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1R5cGUnKTtcbiAgICAgICAgdGhpcy5lbmFibGVkID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdFbmFibGVkJyk7XG4gICAgICAgIHRoaXMuc3NvQm91bmQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1Nzb0JvdW5kJyk7XG4gICAgICAgIHRoaXMuaWRlbnRpZmllciA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnSWRlbnRpZmllcicpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IEJhc2VSZXNwb25zZSB9IGZyb20gJy4vYmFzZVJlc3BvbnNlJztcbmltcG9ydCB7IFByb2ZpbGVPcmdhbml6YXRpb25SZXNwb25zZSB9IGZyb20gJy4vcHJvZmlsZU9yZ2FuaXphdGlvblJlc3BvbnNlJztcblxuZXhwb3J0IGNsYXNzIFByb2ZpbGVSZXNwb25zZSBleHRlbmRzIEJhc2VSZXNwb25zZSB7XG4gICAgaWQ6IHN0cmluZztcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgZW1haWw6IHN0cmluZztcbiAgICBlbWFpbFZlcmlmaWVkOiBib29sZWFuO1xuICAgIG1hc3RlclBhc3N3b3JkSGludDogc3RyaW5nO1xuICAgIHByZW1pdW06IGJvb2xlYW47XG4gICAgY3VsdHVyZTogc3RyaW5nO1xuICAgIHR3b0ZhY3RvckVuYWJsZWQ6IGJvb2xlYW47XG4gICAga2V5OiBzdHJpbmc7XG4gICAgcHJpdmF0ZUtleTogc3RyaW5nO1xuICAgIHNlY3VyaXR5U3RhbXA6IHN0cmluZztcbiAgICBvcmdhbml6YXRpb25zOiBQcm9maWxlT3JnYW5pemF0aW9uUmVzcG9uc2VbXSA9IFtdO1xuXG4gICAgY29uc3RydWN0b3IocmVzcG9uc2U6IGFueSkge1xuICAgICAgICBzdXBlcihyZXNwb25zZSk7XG4gICAgICAgIHRoaXMuaWQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0lkJyk7XG4gICAgICAgIHRoaXMubmFtZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnTmFtZScpO1xuICAgICAgICB0aGlzLmVtYWlsID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdFbWFpbCcpO1xuICAgICAgICB0aGlzLmVtYWlsVmVyaWZpZWQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0VtYWlsVmVyaWZpZWQnKTtcbiAgICAgICAgdGhpcy5tYXN0ZXJQYXNzd29yZEhpbnQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ01hc3RlclBhc3N3b3JkSGludCcpO1xuICAgICAgICB0aGlzLnByZW1pdW0gPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1ByZW1pdW0nKTtcbiAgICAgICAgdGhpcy5jdWx0dXJlID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdDdWx0dXJlJyk7XG4gICAgICAgIHRoaXMudHdvRmFjdG9yRW5hYmxlZCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnVHdvRmFjdG9yRW5hYmxlZCcpO1xuICAgICAgICB0aGlzLmtleSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnS2V5Jyk7XG4gICAgICAgIHRoaXMucHJpdmF0ZUtleSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnUHJpdmF0ZUtleScpO1xuICAgICAgICB0aGlzLnNlY3VyaXR5U3RhbXAgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1NlY3VyaXR5U3RhbXAnKTtcblxuICAgICAgICBjb25zdCBvcmdhbml6YXRpb25zID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdPcmdhbml6YXRpb25zJyk7XG4gICAgICAgIGlmIChvcmdhbml6YXRpb25zICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMub3JnYW5pemF0aW9ucyA9IG9yZ2FuaXphdGlvbnMubWFwKChvOiBhbnkpID0+IG5ldyBQcm9maWxlT3JnYW5pemF0aW9uUmVzcG9uc2UobykpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQmFzZVJlc3BvbnNlIH0gZnJvbSAnLi9iYXNlUmVzcG9uc2UnO1xuaW1wb3J0IHsgUHJvZmlsZVJlc3BvbnNlIH0gZnJvbSAnLi9wcm9maWxlUmVzcG9uc2UnO1xuXG5leHBvcnQgY2xhc3MgUGF5bWVudFJlc3BvbnNlIGV4dGVuZHMgQmFzZVJlc3BvbnNlIHtcbiAgICB1c2VyUHJvZmlsZTogUHJvZmlsZVJlc3BvbnNlO1xuICAgIHBheW1lbnRJbnRlbnRDbGllbnRTZWNyZXQ6IHN0cmluZztcbiAgICBzdWNjZXNzOiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IocmVzcG9uc2U6IGFueSkge1xuICAgICAgICBzdXBlcihyZXNwb25zZSk7XG4gICAgICAgIGNvbnN0IHVzZXJQcm9maWxlID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdVc2VyUHJvZmlsZScpO1xuICAgICAgICBpZiAodXNlclByb2ZpbGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy51c2VyUHJvZmlsZSA9IG5ldyBQcm9maWxlUmVzcG9uc2UodXNlclByb2ZpbGUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucGF5bWVudEludGVudENsaWVudFNlY3JldCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnUGF5bWVudEludGVudENsaWVudFNlY3JldCcpO1xuICAgICAgICB0aGlzLnN1Y2Nlc3MgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1N1Y2Nlc3MnKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBCYXNlUmVzcG9uc2UgfSBmcm9tICcuL2Jhc2VSZXNwb25zZSc7XG5cbmltcG9ydCB7IFBvbGljeVR5cGUgfSBmcm9tICcuLi8uLi9lbnVtcy9wb2xpY3lUeXBlJztcblxuZXhwb3J0IGNsYXNzIFBvbGljeVJlc3BvbnNlIGV4dGVuZHMgQmFzZVJlc3BvbnNlIHtcbiAgICBpZDogc3RyaW5nO1xuICAgIG9yZ2FuaXphdGlvbklkOiBzdHJpbmc7XG4gICAgdHlwZTogUG9saWN5VHlwZTtcbiAgICBkYXRhOiBhbnk7XG4gICAgZW5hYmxlZDogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKHJlc3BvbnNlOiBhbnkpIHtcbiAgICAgICAgc3VwZXIocmVzcG9uc2UpO1xuICAgICAgICB0aGlzLmlkID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdJZCcpO1xuICAgICAgICB0aGlzLm9yZ2FuaXphdGlvbklkID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdPcmdhbml6YXRpb25JZCcpO1xuICAgICAgICB0aGlzLnR5cGUgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1R5cGUnKTtcbiAgICAgICAgdGhpcy5kYXRhID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdEYXRhJyk7XG4gICAgICAgIHRoaXMuZW5hYmxlZCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnRW5hYmxlZCcpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IEJhc2VSZXNwb25zZSB9IGZyb20gJy4vYmFzZVJlc3BvbnNlJztcblxuaW1wb3J0IHsgS2RmVHlwZSB9IGZyb20gJy4uLy4uL2VudW1zL2tkZlR5cGUnO1xuXG5leHBvcnQgY2xhc3MgUHJlbG9naW5SZXNwb25zZSBleHRlbmRzIEJhc2VSZXNwb25zZSB7XG4gICAga2RmOiBLZGZUeXBlO1xuICAgIGtkZkl0ZXJhdGlvbnM6IG51bWJlcjtcblxuICAgIGNvbnN0cnVjdG9yKHJlc3BvbnNlOiBhbnkpIHtcbiAgICAgICAgc3VwZXIocmVzcG9uc2UpO1xuICAgICAgICB0aGlzLmtkZiA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnS2RmJyk7XG4gICAgICAgIHRoaXMua2RmSXRlcmF0aW9ucyA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnS2RmSXRlcmF0aW9ucycpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IEJhc2VSZXNwb25zZSB9IGZyb20gJy4vYmFzZVJlc3BvbnNlJztcblxuaW1wb3J0IHsgU2VuZFR5cGUgfSBmcm9tICcuLi8uLi9lbnVtcy9zZW5kVHlwZSc7XG5cbmltcG9ydCB7IFNlbmRGaWxlQXBpIH0gZnJvbSAnLi4vYXBpL3NlbmRGaWxlQXBpJztcbmltcG9ydCB7IFNlbmRUZXh0QXBpIH0gZnJvbSAnLi4vYXBpL3NlbmRUZXh0QXBpJztcblxuZXhwb3J0IGNsYXNzIFNlbmRBY2Nlc3NSZXNwb25zZSBleHRlbmRzIEJhc2VSZXNwb25zZSB7XG4gICAgaWQ6IHN0cmluZztcbiAgICB0eXBlOiBTZW5kVHlwZTtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgZmlsZTogU2VuZEZpbGVBcGk7XG4gICAgdGV4dDogU2VuZFRleHRBcGk7XG5cbiAgICBjb25zdHJ1Y3RvcihyZXNwb25zZTogYW55KSB7XG4gICAgICAgIHN1cGVyKHJlc3BvbnNlKTtcbiAgICAgICAgdGhpcy5pZCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnSWQnKTtcbiAgICAgICAgdGhpcy50eXBlID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdUeXBlJyk7XG4gICAgICAgIHRoaXMubmFtZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnTmFtZScpO1xuXG4gICAgICAgIGNvbnN0IHRleHQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1RleHQnKTtcbiAgICAgICAgaWYgKHRleHQgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy50ZXh0ID0gbmV3IFNlbmRUZXh0QXBpKHRleHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZmlsZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnRmlsZScpO1xuICAgICAgICBpZiAoZmlsZSAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmZpbGUgPSBuZXcgU2VuZEZpbGVBcGkoZmlsZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQgeyBCYXNlUmVzcG9uc2UgfSBmcm9tICcuL2Jhc2VSZXNwb25zZSc7XG5cbmltcG9ydCB7IFNlbmRUeXBlIH0gZnJvbSAnLi4vLi4vZW51bXMvc2VuZFR5cGUnO1xuXG5pbXBvcnQgeyBTZW5kRmlsZUFwaSB9IGZyb20gJy4uL2FwaS9zZW5kRmlsZUFwaSc7XG5pbXBvcnQgeyBTZW5kVGV4dEFwaSB9IGZyb20gJy4uL2FwaS9zZW5kVGV4dEFwaSc7XG5cbmV4cG9ydCBjbGFzcyBTZW5kUmVzcG9uc2UgZXh0ZW5kcyBCYXNlUmVzcG9uc2Uge1xuICAgIGlkOiBzdHJpbmc7XG4gICAgYWNjZXNzSWQ6IHN0cmluZztcbiAgICB0eXBlOiBTZW5kVHlwZTtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgbm90ZXM6IHN0cmluZztcbiAgICBmaWxlOiBTZW5kRmlsZUFwaTtcbiAgICB0ZXh0OiBTZW5kVGV4dEFwaTtcbiAgICBrZXk6IHN0cmluZztcbiAgICBtYXhBY2Nlc3NDb3VudD86IG51bWJlcjtcbiAgICBhY2Nlc3NDb3VudDogbnVtYmVyO1xuICAgIHJldmlzaW9uRGF0ZTogc3RyaW5nO1xuICAgIGV4cGlyYXRpb25EYXRlOiBzdHJpbmc7XG4gICAgZGVsZXRpb25EYXRlOiBzdHJpbmc7XG4gICAgcGFzc3dvcmQ6IHN0cmluZztcbiAgICBkaXNhYmxlOiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IocmVzcG9uc2U6IGFueSkge1xuICAgICAgICBzdXBlcihyZXNwb25zZSk7XG4gICAgICAgIHRoaXMuaWQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0lkJyk7XG4gICAgICAgIHRoaXMuYWNjZXNzSWQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0FjY2Vzc0lkJyk7XG4gICAgICAgIHRoaXMudHlwZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnVHlwZScpO1xuICAgICAgICB0aGlzLm5hbWUgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ05hbWUnKTtcbiAgICAgICAgdGhpcy5ub3RlcyA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnTm90ZXMnKTtcbiAgICAgICAgdGhpcy5rZXkgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0tleScpO1xuICAgICAgICB0aGlzLm1heEFjY2Vzc0NvdW50ID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdNYXhBY2Nlc3NDb3VudCcpO1xuICAgICAgICB0aGlzLmFjY2Vzc0NvdW50ID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdBY2Nlc3NDb3VudCcpO1xuICAgICAgICB0aGlzLnJldmlzaW9uRGF0ZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnUmV2aXNpb25EYXRlJyk7XG4gICAgICAgIHRoaXMuZXhwaXJhdGlvbkRhdGUgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0V4cGlyYXRpb25EYXRlJyk7XG4gICAgICAgIHRoaXMuZGVsZXRpb25EYXRlID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdEZWxldGlvbkRhdGUnKTtcbiAgICAgICAgdGhpcy5wYXNzd29yZCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnUGFzc3dvcmQnKTtcbiAgICAgICAgdGhpcy5kaXNhYmxlID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdEaXNhYmxlZCcpIHx8IGZhbHNlO1xuXG4gICAgICAgIGNvbnN0IHRleHQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1RleHQnKTtcbiAgICAgICAgaWYgKHRleHQgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy50ZXh0ID0gbmV3IFNlbmRUZXh0QXBpKHRleHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZmlsZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnRmlsZScpO1xuICAgICAgICBpZiAoZmlsZSAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmZpbGUgPSBuZXcgU2VuZEZpbGVBcGkoZmlsZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQgeyBCYXNlUmVzcG9uc2UgfSBmcm9tICcuL2Jhc2VSZXNwb25zZSc7XG5pbXBvcnQgeyBDaXBoZXJSZXNwb25zZSB9IGZyb20gJy4vY2lwaGVyUmVzcG9uc2UnO1xuaW1wb3J0IHsgQ29sbGVjdGlvbkRldGFpbHNSZXNwb25zZSB9IGZyb20gJy4vY29sbGVjdGlvblJlc3BvbnNlJztcbmltcG9ydCB7IERvbWFpbnNSZXNwb25zZSB9IGZyb20gJy4vZG9tYWluc1Jlc3BvbnNlJztcbmltcG9ydCB7IEZvbGRlclJlc3BvbnNlIH0gZnJvbSAnLi9mb2xkZXJSZXNwb25zZSc7XG5pbXBvcnQgeyBQb2xpY3lSZXNwb25zZSB9IGZyb20gJy4vcG9saWN5UmVzcG9uc2UnO1xuaW1wb3J0IHsgUHJvZmlsZVJlc3BvbnNlIH0gZnJvbSAnLi9wcm9maWxlUmVzcG9uc2UnO1xuaW1wb3J0IHsgU2VuZFJlc3BvbnNlIH0gZnJvbSAnLi9zZW5kUmVzcG9uc2UnO1xuXG5leHBvcnQgY2xhc3MgU3luY1Jlc3BvbnNlIGV4dGVuZHMgQmFzZVJlc3BvbnNlIHtcbiAgICBwcm9maWxlPzogUHJvZmlsZVJlc3BvbnNlO1xuICAgIGZvbGRlcnM6IEZvbGRlclJlc3BvbnNlW10gPSBbXTtcbiAgICBjb2xsZWN0aW9uczogQ29sbGVjdGlvbkRldGFpbHNSZXNwb25zZVtdID0gW107XG4gICAgY2lwaGVyczogQ2lwaGVyUmVzcG9uc2VbXSA9IFtdO1xuICAgIGRvbWFpbnM/OiBEb21haW5zUmVzcG9uc2U7XG4gICAgcG9saWNpZXM/OiBQb2xpY3lSZXNwb25zZVtdID0gW107XG4gICAgc2VuZHM6IFNlbmRSZXNwb25zZVtdID0gW107XG5cbiAgICBjb25zdHJ1Y3RvcihyZXNwb25zZTogYW55KSB7XG4gICAgICAgIHN1cGVyKHJlc3BvbnNlKTtcblxuICAgICAgICBjb25zdCBwcm9maWxlID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdQcm9maWxlJyk7XG4gICAgICAgIGlmIChwcm9maWxlICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMucHJvZmlsZSA9IG5ldyBQcm9maWxlUmVzcG9uc2UocHJvZmlsZSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBmb2xkZXJzID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdGb2xkZXJzJyk7XG4gICAgICAgIGlmIChmb2xkZXJzICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuZm9sZGVycyA9IGZvbGRlcnMubWFwKChmOiBhbnkpID0+IG5ldyBGb2xkZXJSZXNwb25zZShmKSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjb2xsZWN0aW9ucyA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnQ29sbGVjdGlvbnMnKTtcbiAgICAgICAgaWYgKGNvbGxlY3Rpb25zICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuY29sbGVjdGlvbnMgPSBjb2xsZWN0aW9ucy5tYXAoKGM6IGFueSkgPT4gbmV3IENvbGxlY3Rpb25EZXRhaWxzUmVzcG9uc2UoYykpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgY2lwaGVycyA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnQ2lwaGVycycpO1xuICAgICAgICBpZiAoY2lwaGVycyAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmNpcGhlcnMgPSBjaXBoZXJzLm1hcCgoYzogYW55KSA9PiBuZXcgQ2lwaGVyUmVzcG9uc2UoYykpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZG9tYWlucyA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnRG9tYWlucycpO1xuICAgICAgICBpZiAoZG9tYWlucyAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmRvbWFpbnMgPSBuZXcgRG9tYWluc1Jlc3BvbnNlKGRvbWFpbnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcG9saWNpZXMgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1BvbGljaWVzJyk7XG4gICAgICAgIGlmIChwb2xpY2llcyAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnBvbGljaWVzID0gcG9saWNpZXMubWFwKChwOiBhbnkpID0+IG5ldyBQb2xpY3lSZXNwb25zZShwKSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzZW5kcyA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnU2VuZHMnKTtcbiAgICAgICAgaWYgKHNlbmRzICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuc2VuZHMgPSBzZW5kcy5tYXAoKHM6IGFueSkgPT4gbmV3IFNlbmRSZXNwb25zZShzKSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQgeyBCYXNlUmVzcG9uc2UgfSBmcm9tICcuL2Jhc2VSZXNwb25zZSc7XG5cbmV4cG9ydCBjbGFzcyBUYXhJbmZvUmVzcG9uc2UgZXh0ZW5kcyBCYXNlUmVzcG9uc2Uge1xuICAgIHRheElkOiBzdHJpbmc7XG4gICAgdGF4SWRUeXBlOiBzdHJpbmc7XG4gICAgbGluZTE6IHN0cmluZztcbiAgICBsaW5lMjogc3RyaW5nO1xuICAgIGNpdHk6IHN0cmluZztcbiAgICBzdGF0ZTogc3RyaW5nO1xuICAgIGNvdW50cnk6IHN0cmluZztcbiAgICBwb3N0YWxDb2RlOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihyZXNwb25zZTogYW55KSB7XG4gICAgICAgIHN1cGVyKHJlc3BvbnNlKTtcbiAgICAgICAgdGhpcy50YXhJZCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnVGF4SWROdW1iZXInKTtcbiAgICAgICAgdGhpcy50YXhJZFR5cGUgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1RheElkVHlwZScpO1xuICAgICAgICB0aGlzLmxpbmUxID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdMaW5lMScpO1xuICAgICAgICB0aGlzLmxpbmUyID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdMaW5lMicpO1xuICAgICAgICB0aGlzLmNpdHkgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0NpdHknKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnU3RhdGUnKTtcbiAgICAgICAgdGhpcy5wb3N0YWxDb2RlID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdQb3N0YWxDb2RlJyk7XG4gICAgICAgIHRoaXMuY291bnRyeSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnQ291bnRyeScpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IEJhc2VSZXNwb25zZSB9IGZyb20gJy4vYmFzZVJlc3BvbnNlJztcblxuZXhwb3J0IGNsYXNzIFR3b0ZhY3RvckF1dGhlbnRpY2F0b3JSZXNwb25zZSBleHRlbmRzIEJhc2VSZXNwb25zZSB7XG4gICAgZW5hYmxlZDogYm9vbGVhbjtcbiAgICBrZXk6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKHJlc3BvbnNlOiBhbnkpIHtcbiAgICAgICAgc3VwZXIocmVzcG9uc2UpO1xuICAgICAgICB0aGlzLmVuYWJsZWQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0VuYWJsZWQnKTtcbiAgICAgICAgdGhpcy5rZXkgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0tleScpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IEJhc2VSZXNwb25zZSB9IGZyb20gJy4vYmFzZVJlc3BvbnNlJztcblxuZXhwb3J0IGNsYXNzIFR3b0ZhY3RvckR1b1Jlc3BvbnNlIGV4dGVuZHMgQmFzZVJlc3BvbnNlIHtcbiAgICBlbmFibGVkOiBib29sZWFuO1xuICAgIGhvc3Q6IHN0cmluZztcbiAgICBzZWNyZXRLZXk6IHN0cmluZztcbiAgICBpbnRlZ3JhdGlvbktleTogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IocmVzcG9uc2U6IGFueSkge1xuICAgICAgICBzdXBlcihyZXNwb25zZSk7XG4gICAgICAgIHRoaXMuZW5hYmxlZCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnRW5hYmxlZCcpO1xuICAgICAgICB0aGlzLmhvc3QgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0hvc3QnKTtcbiAgICAgICAgdGhpcy5zZWNyZXRLZXkgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1NlY3JldEtleScpO1xuICAgICAgICB0aGlzLmludGVncmF0aW9uS2V5ID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdJbnRlZ3JhdGlvbktleScpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IEJhc2VSZXNwb25zZSB9IGZyb20gJy4vYmFzZVJlc3BvbnNlJztcblxuZXhwb3J0IGNsYXNzIFR3b0ZhY3RvckVtYWlsUmVzcG9uc2UgZXh0ZW5kcyBCYXNlUmVzcG9uc2Uge1xuICAgIGVuYWJsZWQ6IGJvb2xlYW47XG4gICAgZW1haWw6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKHJlc3BvbnNlOiBhbnkpIHtcbiAgICAgICAgc3VwZXIocmVzcG9uc2UpO1xuICAgICAgICB0aGlzLmVuYWJsZWQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0VuYWJsZWQnKTtcbiAgICAgICAgdGhpcy5lbWFpbCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnRW1haWwnKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBCYXNlUmVzcG9uc2UgfSBmcm9tICcuL2Jhc2VSZXNwb25zZSc7XG5cbmltcG9ydCB7IFR3b0ZhY3RvclByb3ZpZGVyVHlwZSB9IGZyb20gJy4uLy4uL2VudW1zL3R3b0ZhY3RvclByb3ZpZGVyVHlwZSc7XG5cbmV4cG9ydCBjbGFzcyBUd29GYWN0b3JQcm92aWRlclJlc3BvbnNlIGV4dGVuZHMgQmFzZVJlc3BvbnNlIHtcbiAgICBlbmFibGVkOiBib29sZWFuO1xuICAgIHR5cGU6IFR3b0ZhY3RvclByb3ZpZGVyVHlwZTtcblxuICAgIGNvbnN0cnVjdG9yKHJlc3BvbnNlOiBhbnkpIHtcbiAgICAgICAgc3VwZXIocmVzcG9uc2UpO1xuICAgICAgICB0aGlzLmVuYWJsZWQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0VuYWJsZWQnKTtcbiAgICAgICAgdGhpcy50eXBlID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdUeXBlJyk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQmFzZVJlc3BvbnNlIH0gZnJvbSAnLi9iYXNlUmVzcG9uc2UnO1xuXG5leHBvcnQgY2xhc3MgVHdvRmFjdG9yUmVjb3ZlclJlc3BvbnNlIGV4dGVuZHMgQmFzZVJlc3BvbnNlIHtcbiAgICBjb2RlOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihyZXNwb25zZTogYW55KSB7XG4gICAgICAgIHN1cGVyKHJlc3BvbnNlKTtcbiAgICAgICAgdGhpcy5jb2RlID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdDb2RlJyk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQmFzZVJlc3BvbnNlIH0gZnJvbSAnLi9iYXNlUmVzcG9uc2UnO1xuXG5leHBvcnQgY2xhc3MgVHdvRmFjdG9yVTJmUmVzcG9uc2UgZXh0ZW5kcyBCYXNlUmVzcG9uc2Uge1xuICAgIGVuYWJsZWQ6IGJvb2xlYW47XG4gICAga2V5czogS2V5UmVzcG9uc2VbXTtcblxuICAgIGNvbnN0cnVjdG9yKHJlc3BvbnNlOiBhbnkpIHtcbiAgICAgICAgc3VwZXIocmVzcG9uc2UpO1xuICAgICAgICB0aGlzLmVuYWJsZWQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0VuYWJsZWQnKTtcbiAgICAgICAgY29uc3Qga2V5cyA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnS2V5cycpO1xuICAgICAgICB0aGlzLmtleXMgPSBrZXlzID09IG51bGwgPyBudWxsIDoga2V5cy5tYXAoKGs6IGFueSkgPT4gbmV3IEtleVJlc3BvbnNlKGspKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBLZXlSZXNwb25zZSBleHRlbmRzIEJhc2VSZXNwb25zZSB7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIGlkOiBudW1iZXI7XG4gICAgY29tcHJvbWlzZWQ6IGJvb2xlYW47XG5cbiAgICBjb25zdHJ1Y3RvcihyZXNwb25zZTogYW55KSB7XG4gICAgICAgIHN1cGVyKHJlc3BvbnNlKTtcbiAgICAgICAgdGhpcy5uYW1lID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdOYW1lJyk7XG4gICAgICAgIHRoaXMuaWQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0lkJyk7XG4gICAgICAgIHRoaXMuY29tcHJvbWlzZWQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0NvbXByb21pc2VkJyk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ2hhbGxlbmdlUmVzcG9uc2UgZXh0ZW5kcyBCYXNlUmVzcG9uc2Uge1xuICAgIHVzZXJJZDogc3RyaW5nO1xuICAgIGFwcElkOiBzdHJpbmc7XG4gICAgY2hhbGxlbmdlOiBzdHJpbmc7XG4gICAgdmVyc2lvbjogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IocmVzcG9uc2U6IGFueSkge1xuICAgICAgICBzdXBlcihyZXNwb25zZSk7XG4gICAgICAgIHRoaXMudXNlcklkID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdVc2VySWQnKTtcbiAgICAgICAgdGhpcy5hcHBJZCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnQXBwSWQnKTtcbiAgICAgICAgdGhpcy5jaGFsbGVuZ2UgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0NoYWxsZW5nZScpO1xuICAgICAgICB0aGlzLnZlcnNpb24gPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1ZlcnNpb24nKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBCYXNlUmVzcG9uc2UgfSBmcm9tICcuL2Jhc2VSZXNwb25zZSc7XG5cbmV4cG9ydCBjbGFzcyBUd29GYWN0b3JZdWJpS2V5UmVzcG9uc2UgZXh0ZW5kcyBCYXNlUmVzcG9uc2Uge1xuICAgIGVuYWJsZWQ6IGJvb2xlYW47XG4gICAga2V5MTogc3RyaW5nO1xuICAgIGtleTI6IHN0cmluZztcbiAgICBrZXkzOiBzdHJpbmc7XG4gICAga2V5NDogc3RyaW5nO1xuICAgIGtleTU6IHN0cmluZztcbiAgICBuZmM6IGJvb2xlYW47XG5cbiAgICBjb25zdHJ1Y3RvcihyZXNwb25zZTogYW55KSB7XG4gICAgICAgIHN1cGVyKHJlc3BvbnNlKTtcbiAgICAgICAgdGhpcy5lbmFibGVkID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdFbmFibGVkJyk7XG4gICAgICAgIHRoaXMua2V5MSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnS2V5MScpO1xuICAgICAgICB0aGlzLmtleTIgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0tleTInKTtcbiAgICAgICAgdGhpcy5rZXkzID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdLZXkzJyk7XG4gICAgICAgIHRoaXMua2V5NCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnS2V5NCcpO1xuICAgICAgICB0aGlzLmtleTUgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0tleTUnKTtcbiAgICAgICAgdGhpcy5uZmMgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ05mYycpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IEJhc2VSZXNwb25zZSB9IGZyb20gJy4vYmFzZVJlc3BvbnNlJztcblxuZXhwb3J0IGNsYXNzIFVzZXJLZXlSZXNwb25zZSBleHRlbmRzIEJhc2VSZXNwb25zZSB7XG4gICAgdXNlcklkOiBzdHJpbmc7XG4gICAgcHVibGljS2V5OiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihyZXNwb25zZTogYW55KSB7XG4gICAgICAgIHN1cGVyKHJlc3BvbnNlKTtcbiAgICAgICAgdGhpcy51c2VySWQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1VzZXJJZCcpO1xuICAgICAgICB0aGlzLnB1YmxpY0tleSA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnUHVibGljS2V5Jyk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgRGV2aWNlVHlwZSB9IGZyb20gJy4uL2VudW1zL2RldmljZVR5cGUnO1xuaW1wb3J0IHsgUG9saWN5VHlwZSB9IGZyb20gJy4uL2VudW1zL3BvbGljeVR5cGUnO1xuXG5pbXBvcnQgeyBBcGlTZXJ2aWNlIGFzIEFwaVNlcnZpY2VBYnN0cmFjdGlvbiB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9hcGkuc2VydmljZSc7XG5pbXBvcnQgeyBQbGF0Zm9ybVV0aWxzU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9wbGF0Zm9ybVV0aWxzLnNlcnZpY2UnO1xuaW1wb3J0IHsgVG9rZW5TZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL3Rva2VuLnNlcnZpY2UnO1xuXG5pbXBvcnQgeyBFbnZpcm9ubWVudFVybHMgfSBmcm9tICcuLi9tb2RlbHMvZG9tYWluL2Vudmlyb25tZW50VXJscyc7XG5cbmltcG9ydCB7IEJpdFBheUludm9pY2VSZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWxzL3JlcXVlc3QvYml0UGF5SW52b2ljZVJlcXVlc3QnO1xuaW1wb3J0IHsgQ2lwaGVyQnVsa0RlbGV0ZVJlcXVlc3QgfSBmcm9tICcuLi9tb2RlbHMvcmVxdWVzdC9jaXBoZXJCdWxrRGVsZXRlUmVxdWVzdCc7XG5pbXBvcnQgeyBDaXBoZXJCdWxrTW92ZVJlcXVlc3QgfSBmcm9tICcuLi9tb2RlbHMvcmVxdWVzdC9jaXBoZXJCdWxrTW92ZVJlcXVlc3QnO1xuaW1wb3J0IHsgQ2lwaGVyQnVsa1NoYXJlUmVxdWVzdCB9IGZyb20gJy4uL21vZGVscy9yZXF1ZXN0L2NpcGhlckJ1bGtTaGFyZVJlcXVlc3QnO1xuaW1wb3J0IHsgQ2lwaGVyQ29sbGVjdGlvbnNSZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWxzL3JlcXVlc3QvY2lwaGVyQ29sbGVjdGlvbnNSZXF1ZXN0JztcbmltcG9ydCB7IENpcGhlckNyZWF0ZVJlcXVlc3QgfSBmcm9tICcuLi9tb2RlbHMvcmVxdWVzdC9jaXBoZXJDcmVhdGVSZXF1ZXN0JztcbmltcG9ydCB7IENpcGhlclJlcXVlc3QgfSBmcm9tICcuLi9tb2RlbHMvcmVxdWVzdC9jaXBoZXJSZXF1ZXN0JztcbmltcG9ydCB7IENpcGhlclNoYXJlUmVxdWVzdCB9IGZyb20gJy4uL21vZGVscy9yZXF1ZXN0L2NpcGhlclNoYXJlUmVxdWVzdCc7XG5pbXBvcnQgeyBDb2xsZWN0aW9uUmVxdWVzdCB9IGZyb20gJy4uL21vZGVscy9yZXF1ZXN0L2NvbGxlY3Rpb25SZXF1ZXN0JztcbmltcG9ydCB7IERlbGV0ZVJlY292ZXJSZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWxzL3JlcXVlc3QvZGVsZXRlUmVjb3ZlclJlcXVlc3QnO1xuaW1wb3J0IHsgRW1haWxSZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWxzL3JlcXVlc3QvZW1haWxSZXF1ZXN0JztcbmltcG9ydCB7IEVtYWlsVG9rZW5SZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWxzL3JlcXVlc3QvZW1haWxUb2tlblJlcXVlc3QnO1xuaW1wb3J0IHsgRXZlbnRSZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWxzL3JlcXVlc3QvZXZlbnRSZXF1ZXN0JztcbmltcG9ydCB7IEZvbGRlclJlcXVlc3QgfSBmcm9tICcuLi9tb2RlbHMvcmVxdWVzdC9mb2xkZXJSZXF1ZXN0JztcbmltcG9ydCB7IEdyb3VwUmVxdWVzdCB9IGZyb20gJy4uL21vZGVscy9yZXF1ZXN0L2dyb3VwUmVxdWVzdCc7XG5pbXBvcnQgeyBJYXBDaGVja1JlcXVlc3QgfSBmcm9tICcuLi9tb2RlbHMvcmVxdWVzdC9pYXBDaGVja1JlcXVlc3QnO1xuaW1wb3J0IHsgSW1wb3J0Q2lwaGVyc1JlcXVlc3QgfSBmcm9tICcuLi9tb2RlbHMvcmVxdWVzdC9pbXBvcnRDaXBoZXJzUmVxdWVzdCc7XG5pbXBvcnQgeyBJbXBvcnREaXJlY3RvcnlSZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWxzL3JlcXVlc3QvaW1wb3J0RGlyZWN0b3J5UmVxdWVzdCc7XG5pbXBvcnQgeyBJbXBvcnRPcmdhbml6YXRpb25DaXBoZXJzUmVxdWVzdCB9IGZyb20gJy4uL21vZGVscy9yZXF1ZXN0L2ltcG9ydE9yZ2FuaXphdGlvbkNpcGhlcnNSZXF1ZXN0JztcbmltcG9ydCB7IEtkZlJlcXVlc3QgfSBmcm9tICcuLi9tb2RlbHMvcmVxdWVzdC9rZGZSZXF1ZXN0JztcbmltcG9ydCB7IEtleXNSZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWxzL3JlcXVlc3Qva2V5c1JlcXVlc3QnO1xuaW1wb3J0IHsgT3JnYW5pemF0aW9uQ3JlYXRlUmVxdWVzdCB9IGZyb20gJy4uL21vZGVscy9yZXF1ZXN0L29yZ2FuaXphdGlvbkNyZWF0ZVJlcXVlc3QnO1xuaW1wb3J0IHsgT3JnYW5pemF0aW9uVGF4SW5mb1VwZGF0ZVJlcXVlc3QgfSBmcm9tICcuLi9tb2RlbHMvcmVxdWVzdC9vcmdhbml6YXRpb25UYXhJbmZvVXBkYXRlUmVxdWVzdCc7XG5pbXBvcnQgeyBPcmdhbml6YXRpb25VcGRhdGVSZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWxzL3JlcXVlc3Qvb3JnYW5pemF0aW9uVXBkYXRlUmVxdWVzdCc7XG5pbXBvcnQgeyBPcmdhbml6YXRpb25VcGdyYWRlUmVxdWVzdCB9IGZyb20gJy4uL21vZGVscy9yZXF1ZXN0L29yZ2FuaXphdGlvblVwZ3JhZGVSZXF1ZXN0JztcbmltcG9ydCB7IE9yZ2FuaXphdGlvblVzZXJBY2NlcHRSZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWxzL3JlcXVlc3Qvb3JnYW5pemF0aW9uVXNlckFjY2VwdFJlcXVlc3QnO1xuaW1wb3J0IHsgT3JnYW5pemF0aW9uVXNlckNvbmZpcm1SZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWxzL3JlcXVlc3Qvb3JnYW5pemF0aW9uVXNlckNvbmZpcm1SZXF1ZXN0JztcbmltcG9ydCB7IE9yZ2FuaXphdGlvblVzZXJJbnZpdGVSZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWxzL3JlcXVlc3Qvb3JnYW5pemF0aW9uVXNlckludml0ZVJlcXVlc3QnO1xuaW1wb3J0IHsgT3JnYW5pemF0aW9uVXNlclVwZGF0ZUdyb3Vwc1JlcXVlc3QgfSBmcm9tICcuLi9tb2RlbHMvcmVxdWVzdC9vcmdhbml6YXRpb25Vc2VyVXBkYXRlR3JvdXBzUmVxdWVzdCc7XG5pbXBvcnQgeyBPcmdhbml6YXRpb25Vc2VyVXBkYXRlUmVxdWVzdCB9IGZyb20gJy4uL21vZGVscy9yZXF1ZXN0L29yZ2FuaXphdGlvblVzZXJVcGRhdGVSZXF1ZXN0JztcbmltcG9ydCB7IFBhc3N3b3JkSGludFJlcXVlc3QgfSBmcm9tICcuLi9tb2RlbHMvcmVxdWVzdC9wYXNzd29yZEhpbnRSZXF1ZXN0JztcbmltcG9ydCB7IFBhc3N3b3JkUmVxdWVzdCB9IGZyb20gJy4uL21vZGVscy9yZXF1ZXN0L3Bhc3N3b3JkUmVxdWVzdCc7XG5pbXBvcnQgeyBQYXNzd29yZFZlcmlmaWNhdGlvblJlcXVlc3QgfSBmcm9tICcuLi9tb2RlbHMvcmVxdWVzdC9wYXNzd29yZFZlcmlmaWNhdGlvblJlcXVlc3QnO1xuaW1wb3J0IHsgUGF5bWVudFJlcXVlc3QgfSBmcm9tICcuLi9tb2RlbHMvcmVxdWVzdC9wYXltZW50UmVxdWVzdCc7XG5pbXBvcnQgeyBQb2xpY3lSZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWxzL3JlcXVlc3QvcG9saWN5UmVxdWVzdCc7XG5pbXBvcnQgeyBQcmVsb2dpblJlcXVlc3QgfSBmcm9tICcuLi9tb2RlbHMvcmVxdWVzdC9wcmVsb2dpblJlcXVlc3QnO1xuaW1wb3J0IHsgUmVnaXN0ZXJSZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWxzL3JlcXVlc3QvcmVnaXN0ZXJSZXF1ZXN0JztcbmltcG9ydCB7IFNlYXRSZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWxzL3JlcXVlc3Qvc2VhdFJlcXVlc3QnO1xuaW1wb3J0IHsgU2VsZWN0aW9uUmVhZE9ubHlSZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWxzL3JlcXVlc3Qvc2VsZWN0aW9uUmVhZE9ubHlSZXF1ZXN0JztcbmltcG9ydCB7IFNlbmRBY2Nlc3NSZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWxzL3JlcXVlc3Qvc2VuZEFjY2Vzc1JlcXVlc3QnO1xuaW1wb3J0IHsgU2VuZFJlcXVlc3QgfSBmcm9tICcuLi9tb2RlbHMvcmVxdWVzdC9zZW5kUmVxdWVzdCc7XG5pbXBvcnQgeyBTZXRQYXNzd29yZFJlcXVlc3QgfSBmcm9tICcuLi9tb2RlbHMvcmVxdWVzdC9zZXRQYXNzd29yZFJlcXVlc3QnO1xuaW1wb3J0IHsgU3RvcmFnZVJlcXVlc3QgfSBmcm9tICcuLi9tb2RlbHMvcmVxdWVzdC9zdG9yYWdlUmVxdWVzdCc7XG5pbXBvcnQgeyBUYXhJbmZvVXBkYXRlUmVxdWVzdCB9IGZyb20gJy4uL21vZGVscy9yZXF1ZXN0L3RheEluZm9VcGRhdGVSZXF1ZXN0JztcbmltcG9ydCB7IFRva2VuUmVxdWVzdCB9IGZyb20gJy4uL21vZGVscy9yZXF1ZXN0L3Rva2VuUmVxdWVzdCc7XG5pbXBvcnQgeyBUd29GYWN0b3JFbWFpbFJlcXVlc3QgfSBmcm9tICcuLi9tb2RlbHMvcmVxdWVzdC90d29GYWN0b3JFbWFpbFJlcXVlc3QnO1xuaW1wb3J0IHsgVHdvRmFjdG9yUHJvdmlkZXJSZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWxzL3JlcXVlc3QvdHdvRmFjdG9yUHJvdmlkZXJSZXF1ZXN0JztcbmltcG9ydCB7IFR3b0ZhY3RvclJlY292ZXJ5UmVxdWVzdCB9IGZyb20gJy4uL21vZGVscy9yZXF1ZXN0L3R3b0ZhY3RvclJlY292ZXJ5UmVxdWVzdCc7XG5pbXBvcnQgeyBVcGRhdGVEb21haW5zUmVxdWVzdCB9IGZyb20gJy4uL21vZGVscy9yZXF1ZXN0L3VwZGF0ZURvbWFpbnNSZXF1ZXN0JztcbmltcG9ydCB7IFVwZGF0ZUtleVJlcXVlc3QgfSBmcm9tICcuLi9tb2RlbHMvcmVxdWVzdC91cGRhdGVLZXlSZXF1ZXN0JztcbmltcG9ydCB7IFVwZGF0ZVByb2ZpbGVSZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWxzL3JlcXVlc3QvdXBkYXRlUHJvZmlsZVJlcXVlc3QnO1xuaW1wb3J0IHsgVXBkYXRlVHdvRmFjdG9yQXV0aGVudGljYXRvclJlcXVlc3QgfSBmcm9tICcuLi9tb2RlbHMvcmVxdWVzdC91cGRhdGVUd29GYWN0b3JBdXRoZW50aWNhdG9yUmVxdWVzdCc7XG5pbXBvcnQgeyBVcGRhdGVUd29GYWN0b3JEdW9SZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWxzL3JlcXVlc3QvdXBkYXRlVHdvRmFjdG9yRHVvUmVxdWVzdCc7XG5pbXBvcnQgeyBVcGRhdGVUd29GYWN0b3JFbWFpbFJlcXVlc3QgfSBmcm9tICcuLi9tb2RlbHMvcmVxdWVzdC91cGRhdGVUd29GYWN0b3JFbWFpbFJlcXVlc3QnO1xuaW1wb3J0IHsgVXBkYXRlVHdvRmFjdG9yVTJmRGVsZXRlUmVxdWVzdCB9IGZyb20gJy4uL21vZGVscy9yZXF1ZXN0L3VwZGF0ZVR3b0ZhY3RvclUyZkRlbGV0ZVJlcXVlc3QnO1xuaW1wb3J0IHsgVXBkYXRlVHdvRmFjdG9yVTJmUmVxdWVzdCB9IGZyb20gJy4uL21vZGVscy9yZXF1ZXN0L3VwZGF0ZVR3b0ZhY3RvclUyZlJlcXVlc3QnO1xuaW1wb3J0IHsgVXBkYXRlVHdvRmFjdG9yWXViaW9PdHBSZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWxzL3JlcXVlc3QvdXBkYXRlVHdvRmFjdG9yWXViaW9PdHBSZXF1ZXN0JztcbmltcG9ydCB7IFZlcmlmeUJhbmtSZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWxzL3JlcXVlc3QvdmVyaWZ5QmFua1JlcXVlc3QnO1xuaW1wb3J0IHsgVmVyaWZ5RGVsZXRlUmVjb3ZlclJlcXVlc3QgfSBmcm9tICcuLi9tb2RlbHMvcmVxdWVzdC92ZXJpZnlEZWxldGVSZWNvdmVyUmVxdWVzdCc7XG5pbXBvcnQgeyBWZXJpZnlFbWFpbFJlcXVlc3QgfSBmcm9tICcuLi9tb2RlbHMvcmVxdWVzdC92ZXJpZnlFbWFpbFJlcXVlc3QnO1xuXG5pbXBvcnQgeyBBcGlLZXlSZXNwb25zZSB9IGZyb20gJy4uL21vZGVscy9yZXNwb25zZS9hcGlLZXlSZXNwb25zZSc7XG5pbXBvcnQgeyBCaWxsaW5nUmVzcG9uc2UgfSBmcm9tICcuLi9tb2RlbHMvcmVzcG9uc2UvYmlsbGluZ1Jlc3BvbnNlJztcbmltcG9ydCB7IEJyZWFjaEFjY291bnRSZXNwb25zZSB9IGZyb20gJy4uL21vZGVscy9yZXNwb25zZS9icmVhY2hBY2NvdW50UmVzcG9uc2UnO1xuaW1wb3J0IHsgQ2lwaGVyUmVzcG9uc2UgfSBmcm9tICcuLi9tb2RlbHMvcmVzcG9uc2UvY2lwaGVyUmVzcG9uc2UnO1xuaW1wb3J0IHtcbiAgICBDb2xsZWN0aW9uR3JvdXBEZXRhaWxzUmVzcG9uc2UsXG4gICAgQ29sbGVjdGlvblJlc3BvbnNlLFxufSBmcm9tICcuLi9tb2RlbHMvcmVzcG9uc2UvY29sbGVjdGlvblJlc3BvbnNlJztcbmltcG9ydCB7IERvbWFpbnNSZXNwb25zZSB9IGZyb20gJy4uL21vZGVscy9yZXNwb25zZS9kb21haW5zUmVzcG9uc2UnO1xuaW1wb3J0IHsgRXJyb3JSZXNwb25zZSB9IGZyb20gJy4uL21vZGVscy9yZXNwb25zZS9lcnJvclJlc3BvbnNlJztcbmltcG9ydCB7IEV2ZW50UmVzcG9uc2UgfSBmcm9tICcuLi9tb2RlbHMvcmVzcG9uc2UvZXZlbnRSZXNwb25zZSc7XG5pbXBvcnQgeyBGb2xkZXJSZXNwb25zZSB9IGZyb20gJy4uL21vZGVscy9yZXNwb25zZS9mb2xkZXJSZXNwb25zZSc7XG5pbXBvcnQge1xuICAgIEdyb3VwRGV0YWlsc1Jlc3BvbnNlLFxuICAgIEdyb3VwUmVzcG9uc2UsXG59IGZyb20gJy4uL21vZGVscy9yZXNwb25zZS9ncm91cFJlc3BvbnNlJztcbmltcG9ydCB7IElkZW50aXR5VG9rZW5SZXNwb25zZSB9IGZyb20gJy4uL21vZGVscy9yZXNwb25zZS9pZGVudGl0eVRva2VuUmVzcG9uc2UnO1xuaW1wb3J0IHsgSWRlbnRpdHlUd29GYWN0b3JSZXNwb25zZSB9IGZyb20gJy4uL21vZGVscy9yZXNwb25zZS9pZGVudGl0eVR3b0ZhY3RvclJlc3BvbnNlJztcbmltcG9ydCB7IExpc3RSZXNwb25zZSB9IGZyb20gJy4uL21vZGVscy9yZXNwb25zZS9saXN0UmVzcG9uc2UnO1xuaW1wb3J0IHsgT3JnYW5pemF0aW9uUmVzcG9uc2UgfSBmcm9tICcuLi9tb2RlbHMvcmVzcG9uc2Uvb3JnYW5pemF0aW9uUmVzcG9uc2UnO1xuaW1wb3J0IHsgT3JnYW5pemF0aW9uU3Vic2NyaXB0aW9uUmVzcG9uc2UgfSBmcm9tICcuLi9tb2RlbHMvcmVzcG9uc2Uvb3JnYW5pemF0aW9uU3Vic2NyaXB0aW9uUmVzcG9uc2UnO1xuaW1wb3J0IHtcbiAgICBPcmdhbml6YXRpb25Vc2VyRGV0YWlsc1Jlc3BvbnNlLFxuICAgIE9yZ2FuaXphdGlvblVzZXJVc2VyRGV0YWlsc1Jlc3BvbnNlLFxufSBmcm9tICcuLi9tb2RlbHMvcmVzcG9uc2Uvb3JnYW5pemF0aW9uVXNlclJlc3BvbnNlJztcbmltcG9ydCB7IFBheW1lbnRSZXNwb25zZSB9IGZyb20gJy4uL21vZGVscy9yZXNwb25zZS9wYXltZW50UmVzcG9uc2UnO1xuaW1wb3J0IHsgUGxhblJlc3BvbnNlIH0gZnJvbSAnLi4vbW9kZWxzL3Jlc3BvbnNlL3BsYW5SZXNwb25zZSc7XG5pbXBvcnQgeyBQb2xpY3lSZXNwb25zZSB9IGZyb20gJy4uL21vZGVscy9yZXNwb25zZS9wb2xpY3lSZXNwb25zZSc7XG5pbXBvcnQgeyBQcmVsb2dpblJlc3BvbnNlIH0gZnJvbSAnLi4vbW9kZWxzL3Jlc3BvbnNlL3ByZWxvZ2luUmVzcG9uc2UnO1xuaW1wb3J0IHsgUHJvZmlsZVJlc3BvbnNlIH0gZnJvbSAnLi4vbW9kZWxzL3Jlc3BvbnNlL3Byb2ZpbGVSZXNwb25zZSc7XG5pbXBvcnQgeyBTZWxlY3Rpb25SZWFkT25seVJlc3BvbnNlIH0gZnJvbSAnLi4vbW9kZWxzL3Jlc3BvbnNlL3NlbGVjdGlvblJlYWRPbmx5UmVzcG9uc2UnO1xuaW1wb3J0IHsgU2VuZEFjY2Vzc1Jlc3BvbnNlIH0gZnJvbSAnLi4vbW9kZWxzL3Jlc3BvbnNlL3NlbmRBY2Nlc3NSZXNwb25zZSc7XG5pbXBvcnQgeyBTZW5kUmVzcG9uc2UgfSBmcm9tICcuLi9tb2RlbHMvcmVzcG9uc2Uvc2VuZFJlc3BvbnNlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvblJlc3BvbnNlIH0gZnJvbSAnLi4vbW9kZWxzL3Jlc3BvbnNlL3N1YnNjcmlwdGlvblJlc3BvbnNlJztcbmltcG9ydCB7IFN5bmNSZXNwb25zZSB9IGZyb20gJy4uL21vZGVscy9yZXNwb25zZS9zeW5jUmVzcG9uc2UnO1xuaW1wb3J0IHsgVGF4SW5mb1Jlc3BvbnNlIH0gZnJvbSAnLi4vbW9kZWxzL3Jlc3BvbnNlL3RheEluZm9SZXNwb25zZSc7XG5pbXBvcnQgeyBUd29GYWN0b3JBdXRoZW50aWNhdG9yUmVzcG9uc2UgfSBmcm9tICcuLi9tb2RlbHMvcmVzcG9uc2UvdHdvRmFjdG9yQXV0aGVudGljYXRvclJlc3BvbnNlJztcbmltcG9ydCB7IFR3b0ZhY3RvckR1b1Jlc3BvbnNlIH0gZnJvbSAnLi4vbW9kZWxzL3Jlc3BvbnNlL3R3b0ZhY3RvckR1b1Jlc3BvbnNlJztcbmltcG9ydCB7IFR3b0ZhY3RvckVtYWlsUmVzcG9uc2UgfSBmcm9tICcuLi9tb2RlbHMvcmVzcG9uc2UvdHdvRmFjdG9yRW1haWxSZXNwb25zZSc7XG5pbXBvcnQgeyBUd29GYWN0b3JQcm92aWRlclJlc3BvbnNlIH0gZnJvbSAnLi4vbW9kZWxzL3Jlc3BvbnNlL3R3b0ZhY3RvclByb3ZpZGVyUmVzcG9uc2UnO1xuaW1wb3J0IHsgVHdvRmFjdG9yUmVjb3ZlclJlc3BvbnNlIH0gZnJvbSAnLi4vbW9kZWxzL3Jlc3BvbnNlL3R3b0ZhY3RvclJlc2NvdmVyUmVzcG9uc2UnO1xuaW1wb3J0IHtcbiAgICBDaGFsbGVuZ2VSZXNwb25zZSxcbiAgICBUd29GYWN0b3JVMmZSZXNwb25zZSxcbn0gZnJvbSAnLi4vbW9kZWxzL3Jlc3BvbnNlL3R3b0ZhY3RvclUyZlJlc3BvbnNlJztcbmltcG9ydCB7IFR3b0ZhY3Rvcll1YmlLZXlSZXNwb25zZSB9IGZyb20gJy4uL21vZGVscy9yZXNwb25zZS90d29GYWN0b3JZdWJpS2V5UmVzcG9uc2UnO1xuaW1wb3J0IHsgVXNlcktleVJlc3BvbnNlIH0gZnJvbSAnLi4vbW9kZWxzL3Jlc3BvbnNlL3VzZXJLZXlSZXNwb25zZSc7XG5cbmV4cG9ydCBjbGFzcyBBcGlTZXJ2aWNlIGltcGxlbWVudHMgQXBpU2VydmljZUFic3RyYWN0aW9uIHtcbiAgICB1cmxzU2V0OiBib29sZWFuID0gZmFsc2U7XG4gICAgYXBpQmFzZVVybDogc3RyaW5nO1xuICAgIGlkZW50aXR5QmFzZVVybDogc3RyaW5nO1xuICAgIGV2ZW50c0Jhc2VVcmw6IHN0cmluZztcblxuICAgIHByaXZhdGUgZGV2aWNlOiBEZXZpY2VUeXBlO1xuICAgIHByaXZhdGUgZGV2aWNlVHlwZTogc3RyaW5nO1xuICAgIHByaXZhdGUgaXNXZWJDbGllbnQgPSBmYWxzZTtcbiAgICBwcml2YXRlIGlzRGVza3RvcENsaWVudCA9IGZhbHNlO1xuICAgIHByaXZhdGUgdXNpbmdCYXNlVXJsID0gZmFsc2U7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHRva2VuU2VydmljZTogVG9rZW5TZXJ2aWNlLCBwcml2YXRlIHBsYXRmb3JtVXRpbHNTZXJ2aWNlOiBQbGF0Zm9ybVV0aWxzU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBsb2dvdXRDYWxsYmFjazogKGV4cGlyZWQ6IGJvb2xlYW4pID0+IFByb21pc2U8dm9pZD4sIHByaXZhdGUgY3VzdG9tVXNlckFnZW50OiBzdHJpbmcgPSBudWxsKSB7XG4gICAgICAgIHRoaXMuZGV2aWNlID0gcGxhdGZvcm1VdGlsc1NlcnZpY2UuZ2V0RGV2aWNlKCk7XG4gICAgICAgIHRoaXMuZGV2aWNlVHlwZSA9IHRoaXMuZGV2aWNlLnRvU3RyaW5nKCk7XG4gICAgICAgIHRoaXMuaXNXZWJDbGllbnQgPSB0aGlzLmRldmljZSA9PT0gRGV2aWNlVHlwZS5JRUJyb3dzZXIgfHwgdGhpcy5kZXZpY2UgPT09IERldmljZVR5cGUuQ2hyb21lQnJvd3NlciB8fFxuICAgICAgICAgICAgdGhpcy5kZXZpY2UgPT09IERldmljZVR5cGUuRWRnZUJyb3dzZXIgfHwgdGhpcy5kZXZpY2UgPT09IERldmljZVR5cGUuRmlyZWZveEJyb3dzZXIgfHxcbiAgICAgICAgICAgIHRoaXMuZGV2aWNlID09PSBEZXZpY2VUeXBlLk9wZXJhQnJvd3NlciB8fCB0aGlzLmRldmljZSA9PT0gRGV2aWNlVHlwZS5TYWZhcmlCcm93c2VyIHx8XG4gICAgICAgICAgICB0aGlzLmRldmljZSA9PT0gRGV2aWNlVHlwZS5Vbmtub3duQnJvd3NlciB8fCB0aGlzLmRldmljZSA9PT0gRGV2aWNlVHlwZS5WaXZhbGRpQnJvd3NlcjtcbiAgICAgICAgdGhpcy5pc0Rlc2t0b3BDbGllbnQgPSB0aGlzLmRldmljZSA9PT0gRGV2aWNlVHlwZS5XaW5kb3dzRGVza3RvcCB8fCB0aGlzLmRldmljZSA9PT0gRGV2aWNlVHlwZS5NYWNPc0Rlc2t0b3AgfHxcbiAgICAgICAgICAgIHRoaXMuZGV2aWNlID09PSBEZXZpY2VUeXBlLkxpbnV4RGVza3RvcDtcbiAgICB9XG5cbiAgICBzZXRVcmxzKHVybHM6IEVudmlyb25tZW50VXJscyk6IHZvaWQge1xuICAgICAgICB0aGlzLnVybHNTZXQgPSB0cnVlO1xuXG4gICAgICAgIGlmICh1cmxzLmJhc2UgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy51c2luZ0Jhc2VVcmwgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5hcGlCYXNlVXJsID0gdXJscy5iYXNlICsgJy9hcGknO1xuICAgICAgICAgICAgdGhpcy5pZGVudGl0eUJhc2VVcmwgPSB1cmxzLmJhc2UgKyAnL2lkZW50aXR5JztcbiAgICAgICAgICAgIHRoaXMuZXZlbnRzQmFzZVVybCA9IHVybHMuYmFzZSArICcvZXZlbnRzJztcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuYXBpQmFzZVVybCA9IHVybHMuYXBpO1xuICAgICAgICB0aGlzLmlkZW50aXR5QmFzZVVybCA9IHVybHMuaWRlbnRpdHk7XG4gICAgICAgIHRoaXMuZXZlbnRzQmFzZVVybCA9IHVybHMuZXZlbnRzO1xuXG4gICAgICAgIC8vIFByb2R1Y3Rpb25cbiAgICAgICAgaWYgKHRoaXMuYXBpQmFzZVVybCA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmFwaUJhc2VVcmwgPSAnaHR0cHM6Ly9hcGkuYml0d2FyZGVuLmNvbSc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaWRlbnRpdHlCYXNlVXJsID09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuaWRlbnRpdHlCYXNlVXJsID0gJ2h0dHBzOi8vaWRlbnRpdHkuYml0d2FyZGVuLmNvbSc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuZXZlbnRzQmFzZVVybCA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmV2ZW50c0Jhc2VVcmwgPSAnaHR0cHM6Ly9ldmVudHMuYml0d2FyZGVuLmNvbSc7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBdXRoIEFQSXNcblxuICAgIGFzeW5jIHBvc3RJZGVudGl0eVRva2VuKHJlcXVlc3Q6IFRva2VuUmVxdWVzdCk6IFByb21pc2U8SWRlbnRpdHlUb2tlblJlc3BvbnNlIHwgSWRlbnRpdHlUd29GYWN0b3JSZXNwb25zZT4ge1xuICAgICAgICBjb25zdCBoZWFkZXJzID0gbmV3IEhlYWRlcnMoe1xuICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9dXRmLTgnLFxuICAgICAgICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICdEZXZpY2UtVHlwZSc6IHRoaXMuZGV2aWNlVHlwZSxcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICh0aGlzLmN1c3RvbVVzZXJBZ2VudCAhPSBudWxsKSB7XG4gICAgICAgICAgICBoZWFkZXJzLnNldCgnVXNlci1BZ2VudCcsIHRoaXMuY3VzdG9tVXNlckFnZW50KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuZmV0Y2gobmV3IFJlcXVlc3QodGhpcy5pZGVudGl0eUJhc2VVcmwgKyAnL2Nvbm5lY3QvdG9rZW4nLCB7XG4gICAgICAgICAgICBib2R5OiB0aGlzLnFzU3RyaW5naWZ5KHJlcXVlc3QudG9JZGVudGl0eVRva2VuKHJlcXVlc3QuY2xpZW50SWQgPz8gdGhpcy5wbGF0Zm9ybVV0aWxzU2VydmljZS5pZGVudGl0eUNsaWVudElkKSksXG4gICAgICAgICAgICBjcmVkZW50aWFsczogdGhpcy5nZXRDcmVkZW50aWFscygpLFxuICAgICAgICAgICAgY2FjaGU6ICduby1zdG9yZScsXG4gICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIH0pKTtcblxuICAgICAgICBsZXQgcmVzcG9uc2VKc29uOiBhbnkgPSBudWxsO1xuICAgICAgICBpZiAodGhpcy5pc0pzb25SZXNwb25zZShyZXNwb25zZSkpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlSnNvbiA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyZXNwb25zZUpzb24gIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBJZGVudGl0eVRva2VuUmVzcG9uc2UocmVzcG9uc2VKc29uKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSA0MDAgJiYgcmVzcG9uc2VKc29uLlR3b0ZhY3RvclByb3ZpZGVyczIgJiZcbiAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhyZXNwb25zZUpzb24uVHdvRmFjdG9yUHJvdmlkZXJzMikubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy50b2tlblNlcnZpY2UuY2xlYXJUd29GYWN0b3JUb2tlbihyZXF1ZXN0LmVtYWlsKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IElkZW50aXR5VHdvRmFjdG9yUmVzcG9uc2UocmVzcG9uc2VKc29uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3JSZXNwb25zZShyZXNwb25zZUpzb24sIHJlc3BvbnNlLnN0YXR1cywgdHJ1ZSkpO1xuICAgIH1cblxuICAgIGFzeW5jIHJlZnJlc2hJZGVudGl0eVRva2VuKCk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmRvUmVmcmVzaFRva2VuKCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChudWxsKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIEFjY291bnQgQVBJc1xuXG4gICAgYXN5bmMgZ2V0UHJvZmlsZSgpOiBQcm9taXNlPFByb2ZpbGVSZXNwb25zZT4ge1xuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdHRVQnLCAnL2FjY291bnRzL3Byb2ZpbGUnLCBudWxsLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9maWxlUmVzcG9uc2Uocik7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0VXNlckJpbGxpbmcoKTogUHJvbWlzZTxCaWxsaW5nUmVzcG9uc2U+IHtcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnR0VUJywgJy9hY2NvdW50cy9iaWxsaW5nJywgbnVsbCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiBuZXcgQmlsbGluZ1Jlc3BvbnNlKHIpO1xuICAgIH1cblxuICAgIGFzeW5jIGdldFVzZXJTdWJzY3JpcHRpb24oKTogUHJvbWlzZTxTdWJzY3JpcHRpb25SZXNwb25zZT4ge1xuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdHRVQnLCAnL2FjY291bnRzL3N1YnNjcmlwdGlvbicsIG51bGwsIHRydWUsIHRydWUpO1xuICAgICAgICByZXR1cm4gbmV3IFN1YnNjcmlwdGlvblJlc3BvbnNlKHIpO1xuICAgIH1cblxuICAgIGFzeW5jIGdldFRheEluZm8oKTogUHJvbWlzZTxUYXhJbmZvUmVzcG9uc2U+IHtcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnR0VUJywgJy9hY2NvdW50cy90YXgnLCBudWxsLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIG5ldyBUYXhJbmZvUmVzcG9uc2Uocik7XG4gICAgfVxuXG4gICAgYXN5bmMgcHV0UHJvZmlsZShyZXF1ZXN0OiBVcGRhdGVQcm9maWxlUmVxdWVzdCk6IFByb21pc2U8UHJvZmlsZVJlc3BvbnNlPiB7XG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ1BVVCcsICcvYWNjb3VudHMvcHJvZmlsZScsIHJlcXVlc3QsIHRydWUsIHRydWUpO1xuICAgICAgICByZXR1cm4gbmV3IFByb2ZpbGVSZXNwb25zZShyKTtcbiAgICB9XG5cbiAgICBwdXRUYXhJbmZvKHJlcXVlc3Q6IFRheEluZm9VcGRhdGVSZXF1ZXN0KTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZCgnUFVUJywgJy9hY2NvdW50cy90YXgnLCByZXF1ZXN0LCB0cnVlLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgYXN5bmMgcG9zdFByZWxvZ2luKHJlcXVlc3Q6IFByZWxvZ2luUmVxdWVzdCk6IFByb21pc2U8UHJlbG9naW5SZXNwb25zZT4ge1xuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdQT1NUJywgJy9hY2NvdW50cy9wcmVsb2dpbicsIHJlcXVlc3QsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIG5ldyBQcmVsb2dpblJlc3BvbnNlKHIpO1xuICAgIH1cblxuICAgIHBvc3RFbWFpbFRva2VuKHJlcXVlc3Q6IEVtYWlsVG9rZW5SZXF1ZXN0KTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZCgnUE9TVCcsICcvYWNjb3VudHMvZW1haWwtdG9rZW4nLCByZXF1ZXN0LCB0cnVlLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgcG9zdEVtYWlsKHJlcXVlc3Q6IEVtYWlsUmVxdWVzdCk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoJ1BPU1QnLCAnL2FjY291bnRzL2VtYWlsJywgcmVxdWVzdCwgdHJ1ZSwgZmFsc2UpO1xuICAgIH1cblxuICAgIHBvc3RQYXNzd29yZChyZXF1ZXN0OiBQYXNzd29yZFJlcXVlc3QpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKCdQT1NUJywgJy9hY2NvdW50cy9wYXNzd29yZCcsIHJlcXVlc3QsIHRydWUsIGZhbHNlKTtcbiAgICB9XG5cbiAgICBzZXRQYXNzd29yZChyZXF1ZXN0OiBTZXRQYXNzd29yZFJlcXVlc3QpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKCdQT1NUJywgJy9hY2NvdW50cy9zZXQtcGFzc3dvcmQnLCByZXF1ZXN0LCB0cnVlLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgcG9zdFNlY3VyaXR5U3RhbXAocmVxdWVzdDogUGFzc3dvcmRWZXJpZmljYXRpb25SZXF1ZXN0KTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZCgnUE9TVCcsICcvYWNjb3VudHMvc2VjdXJpdHktc3RhbXAnLCByZXF1ZXN0LCB0cnVlLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgZGVsZXRlQWNjb3VudChyZXF1ZXN0OiBQYXNzd29yZFZlcmlmaWNhdGlvblJlcXVlc3QpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKCdERUxFVEUnLCAnL2FjY291bnRzJywgcmVxdWVzdCwgdHJ1ZSwgZmFsc2UpO1xuICAgIH1cblxuICAgIGFzeW5jIGdldEFjY291bnRSZXZpc2lvbkRhdGUoKTogUHJvbWlzZTxudW1iZXI+IHtcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnR0VUJywgJy9hY2NvdW50cy9yZXZpc2lvbi1kYXRlJywgbnVsbCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiByIGFzIG51bWJlcjtcbiAgICB9XG5cbiAgICBwb3N0UGFzc3dvcmRIaW50KHJlcXVlc3Q6IFBhc3N3b3JkSGludFJlcXVlc3QpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKCdQT1NUJywgJy9hY2NvdW50cy9wYXNzd29yZC1oaW50JywgcmVxdWVzdCwgZmFsc2UsIGZhbHNlKTtcbiAgICB9XG5cbiAgICBwb3N0UmVnaXN0ZXIocmVxdWVzdDogUmVnaXN0ZXJSZXF1ZXN0KTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZCgnUE9TVCcsICcvYWNjb3VudHMvcmVnaXN0ZXInLCByZXF1ZXN0LCBmYWxzZSwgZmFsc2UpO1xuICAgIH1cblxuICAgIGFzeW5jIHBvc3RQcmVtaXVtKGRhdGE6IEZvcm1EYXRhKTogUHJvbWlzZTxQYXltZW50UmVzcG9uc2U+IHtcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnUE9TVCcsICcvYWNjb3VudHMvcHJlbWl1bScsIGRhdGEsIHRydWUsIHRydWUpO1xuICAgICAgICByZXR1cm4gbmV3IFBheW1lbnRSZXNwb25zZShyKTtcbiAgICB9XG5cbiAgICBhc3luYyBwb3N0SWFwQ2hlY2socmVxdWVzdDogSWFwQ2hlY2tSZXF1ZXN0KTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZCgnUE9TVCcsICcvYWNjb3VudHMvaWFwLWNoZWNrJywgcmVxdWVzdCwgdHJ1ZSwgZmFsc2UpO1xuICAgIH1cblxuICAgIHBvc3RSZWluc3RhdGVQcmVtaXVtKCk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoJ1BPU1QnLCAnL2FjY291bnRzL3JlaW5zdGF0ZS1wcmVtaXVtJywgbnVsbCwgdHJ1ZSwgZmFsc2UpO1xuICAgIH1cblxuICAgIHBvc3RDYW5jZWxQcmVtaXVtKCk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoJ1BPU1QnLCAnL2FjY291bnRzL2NhbmNlbC1wcmVtaXVtJywgbnVsbCwgdHJ1ZSwgZmFsc2UpO1xuICAgIH1cblxuICAgIGFzeW5jIHBvc3RBY2NvdW50U3RvcmFnZShyZXF1ZXN0OiBTdG9yYWdlUmVxdWVzdCk6IFByb21pc2U8UGF5bWVudFJlc3BvbnNlPiB7XG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ1BPU1QnLCAnL2FjY291bnRzL3N0b3JhZ2UnLCByZXF1ZXN0LCB0cnVlLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIG5ldyBQYXltZW50UmVzcG9uc2Uocik7XG4gICAgfVxuXG4gICAgcG9zdEFjY291bnRQYXltZW50KHJlcXVlc3Q6IFBheW1lbnRSZXF1ZXN0KTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZCgnUE9TVCcsICcvYWNjb3VudHMvcGF5bWVudCcsIHJlcXVlc3QsIHRydWUsIGZhbHNlKTtcbiAgICB9XG5cbiAgICBwb3N0QWNjb3VudExpY2Vuc2UoZGF0YTogRm9ybURhdGEpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKCdQT1NUJywgJy9hY2NvdW50cy9saWNlbnNlJywgZGF0YSwgdHJ1ZSwgZmFsc2UpO1xuICAgIH1cblxuICAgIHBvc3RBY2NvdW50S2V5cyhyZXF1ZXN0OiBLZXlzUmVxdWVzdCk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoJ1BPU1QnLCAnL2FjY291bnRzL2tleXMnLCByZXF1ZXN0LCB0cnVlLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgcG9zdEFjY291bnRLZXkocmVxdWVzdDogVXBkYXRlS2V5UmVxdWVzdCk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoJ1BPU1QnLCAnL2FjY291bnRzL2tleScsIHJlcXVlc3QsIHRydWUsIGZhbHNlKTtcbiAgICB9XG5cbiAgICBwb3N0QWNjb3VudFZlcmlmeUVtYWlsKCk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoJ1BPU1QnLCAnL2FjY291bnRzL3ZlcmlmeS1lbWFpbCcsIG51bGwsIHRydWUsIGZhbHNlKTtcbiAgICB9XG5cbiAgICBwb3N0QWNjb3VudFZlcmlmeUVtYWlsVG9rZW4ocmVxdWVzdDogVmVyaWZ5RW1haWxSZXF1ZXN0KTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZCgnUE9TVCcsICcvYWNjb3VudHMvdmVyaWZ5LWVtYWlsLXRva2VuJywgcmVxdWVzdCwgZmFsc2UsIGZhbHNlKTtcbiAgICB9XG5cbiAgICBwb3N0QWNjb3VudFZlcmlmeVBhc3N3b3JkKHJlcXVlc3Q6IFBhc3N3b3JkVmVyaWZpY2F0aW9uUmVxdWVzdCk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoJ1BPU1QnLCAnL2FjY291bnRzL3ZlcmlmeS1wYXNzd29yZCcsIHJlcXVlc3QsIHRydWUsIGZhbHNlKTtcbiAgICB9XG5cbiAgICBwb3N0QWNjb3VudFJlY292ZXJEZWxldGUocmVxdWVzdDogRGVsZXRlUmVjb3ZlclJlcXVlc3QpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKCdQT1NUJywgJy9hY2NvdW50cy9kZWxldGUtcmVjb3ZlcicsIHJlcXVlc3QsIGZhbHNlLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgcG9zdEFjY291bnRSZWNvdmVyRGVsZXRlVG9rZW4ocmVxdWVzdDogVmVyaWZ5RGVsZXRlUmVjb3ZlclJlcXVlc3QpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKCdQT1NUJywgJy9hY2NvdW50cy9kZWxldGUtcmVjb3Zlci10b2tlbicsIHJlcXVlc3QsIGZhbHNlLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgcG9zdEFjY291bnRLZGYocmVxdWVzdDogS2RmUmVxdWVzdCk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoJ1BPU1QnLCAnL2FjY291bnRzL2tkZicsIHJlcXVlc3QsIHRydWUsIGZhbHNlKTtcbiAgICB9XG5cbiAgICBhc3luYyBnZXRFbnRlcnByaXNlUG9ydGFsU2lnbkluVG9rZW4oKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnR0VUJywgJy9hY2NvdW50cy9lbnRlcnByaXNlLXBvcnRhbC1zaWduaW4tdG9rZW4nLCBudWxsLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIHIgYXMgc3RyaW5nO1xuICAgIH1cblxuICAgIGFzeW5jIGRlbGV0ZVNzb1VzZXIob3JnYW5pemF0aW9uSWQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoJ0RFTEVURScsICcvYWNjb3VudHMvc3NvLycgKyBvcmdhbml6YXRpb25JZCwgbnVsbCwgdHJ1ZSwgZmFsc2UpO1xuICAgIH1cblxuICAgIGFzeW5jIGdldFNzb1VzZXJJZGVudGlmaWVyKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoJ0dFVCcsICcvYWNjb3VudHMvc3NvL3VzZXItaWRlbnRpZmllcicsIG51bGwsIHRydWUsIHRydWUpO1xuICAgIH1cblxuICAgIGFzeW5jIHBvc3RVc2VyQXBpS2V5KGlkOiBzdHJpbmcsIHJlcXVlc3Q6IFBhc3N3b3JkVmVyaWZpY2F0aW9uUmVxdWVzdCk6IFByb21pc2U8QXBpS2V5UmVzcG9uc2U+IHtcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnUE9TVCcsICcvYWNjb3VudHMvYXBpLWtleScsIHJlcXVlc3QsIHRydWUsIHRydWUpO1xuICAgICAgICByZXR1cm4gbmV3IEFwaUtleVJlc3BvbnNlKHIpO1xuICAgIH1cblxuICAgIGFzeW5jIHBvc3RVc2VyUm90YXRlQXBpS2V5KGlkOiBzdHJpbmcsIHJlcXVlc3Q6IFBhc3N3b3JkVmVyaWZpY2F0aW9uUmVxdWVzdCk6IFByb21pc2U8QXBpS2V5UmVzcG9uc2U+IHtcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnUE9TVCcsICcvYWNjb3VudHMvcm90YXRlLWFwaS1rZXknLCByZXF1ZXN0LCB0cnVlLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIG5ldyBBcGlLZXlSZXNwb25zZShyKTtcbiAgICB9XG5cbiAgICAvLyBGb2xkZXIgQVBJc1xuXG4gICAgYXN5bmMgZ2V0Rm9sZGVyKGlkOiBzdHJpbmcpOiBQcm9taXNlPEZvbGRlclJlc3BvbnNlPiB7XG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ0dFVCcsICcvZm9sZGVycy8nICsgaWQsIG51bGwsIHRydWUsIHRydWUpO1xuICAgICAgICByZXR1cm4gbmV3IEZvbGRlclJlc3BvbnNlKHIpO1xuICAgIH1cblxuICAgIGFzeW5jIHBvc3RGb2xkZXIocmVxdWVzdDogRm9sZGVyUmVxdWVzdCk6IFByb21pc2U8Rm9sZGVyUmVzcG9uc2U+IHtcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnUE9TVCcsICcvZm9sZGVycycsIHJlcXVlc3QsIHRydWUsIHRydWUpO1xuICAgICAgICByZXR1cm4gbmV3IEZvbGRlclJlc3BvbnNlKHIpO1xuICAgIH1cblxuICAgIGFzeW5jIHB1dEZvbGRlcihpZDogc3RyaW5nLCByZXF1ZXN0OiBGb2xkZXJSZXF1ZXN0KTogUHJvbWlzZTxGb2xkZXJSZXNwb25zZT4ge1xuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdQVVQnLCAnL2ZvbGRlcnMvJyArIGlkLCByZXF1ZXN0LCB0cnVlLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIG5ldyBGb2xkZXJSZXNwb25zZShyKTtcbiAgICB9XG5cbiAgICBkZWxldGVGb2xkZXIoaWQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoJ0RFTEVURScsICcvZm9sZGVycy8nICsgaWQsIG51bGwsIHRydWUsIGZhbHNlKTtcbiAgICB9XG5cbiAgICAvLyBTZW5kIEFQSXNcblxuICAgIGFzeW5jIGdldFNlbmQoaWQ6IHN0cmluZyk6IFByb21pc2U8U2VuZFJlc3BvbnNlPiB7XG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ0dFVCcsICcvc2VuZHMvJyArIGlkLCBudWxsLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIG5ldyBTZW5kUmVzcG9uc2Uocik7XG4gICAgfVxuXG4gICAgYXN5bmMgcG9zdFNlbmRBY2Nlc3MoaWQ6IHN0cmluZywgcmVxdWVzdDogU2VuZEFjY2Vzc1JlcXVlc3QpOiBQcm9taXNlPFNlbmRBY2Nlc3NSZXNwb25zZT4ge1xuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdQT1NUJywgJy9zZW5kcy9hY2Nlc3MvJyArIGlkLCByZXF1ZXN0LCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiBuZXcgU2VuZEFjY2Vzc1Jlc3BvbnNlKHIpO1xuICAgIH1cblxuICAgIGFzeW5jIGdldFNlbmRzKCk6IFByb21pc2U8TGlzdFJlc3BvbnNlPFNlbmRSZXNwb25zZT4+IHtcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnR0VUJywgJy9zZW5kcycsIG51bGwsIHRydWUsIHRydWUpO1xuICAgICAgICByZXR1cm4gbmV3IExpc3RSZXNwb25zZShyLCBTZW5kUmVzcG9uc2UpO1xuICAgIH1cblxuICAgIGFzeW5jIHBvc3RTZW5kKHJlcXVlc3Q6IFNlbmRSZXF1ZXN0KTogUHJvbWlzZTxTZW5kUmVzcG9uc2U+IHtcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnUE9TVCcsICcvc2VuZHMnLCByZXF1ZXN0LCB0cnVlLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIG5ldyBTZW5kUmVzcG9uc2Uocik7XG4gICAgfVxuXG4gICAgYXN5bmMgcG9zdFNlbmRGaWxlKGRhdGE6IEZvcm1EYXRhKTogUHJvbWlzZTxTZW5kUmVzcG9uc2U+IHtcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnUE9TVCcsICcvc2VuZHMvZmlsZScsIGRhdGEsIHRydWUsIHRydWUpO1xuICAgICAgICByZXR1cm4gbmV3IFNlbmRSZXNwb25zZShyKTtcbiAgICB9XG5cbiAgICBhc3luYyBwdXRTZW5kKGlkOiBzdHJpbmcsIHJlcXVlc3Q6IFNlbmRSZXF1ZXN0KTogUHJvbWlzZTxTZW5kUmVzcG9uc2U+IHtcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnUFVUJywgJy9zZW5kcy8nICsgaWQsIHJlcXVlc3QsIHRydWUsIHRydWUpO1xuICAgICAgICByZXR1cm4gbmV3IFNlbmRSZXNwb25zZShyKTtcbiAgICB9XG5cbiAgICBhc3luYyBwdXRTZW5kUmVtb3ZlUGFzc3dvcmQoaWQ6IHN0cmluZyk6IFByb21pc2U8U2VuZFJlc3BvbnNlPiB7XG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ1BVVCcsICcvc2VuZHMvJyArIGlkICsgJy9yZW1vdmUtcGFzc3dvcmQnLCBudWxsLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIG5ldyBTZW5kUmVzcG9uc2Uocik7XG4gICAgfVxuXG4gICAgZGVsZXRlU2VuZChpZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZCgnREVMRVRFJywgJy9zZW5kcy8nICsgaWQsIG51bGwsIHRydWUsIGZhbHNlKTtcbiAgICB9XG5cbiAgICAvLyBDaXBoZXIgQVBJc1xuXG4gICAgYXN5bmMgZ2V0Q2lwaGVyKGlkOiBzdHJpbmcpOiBQcm9taXNlPENpcGhlclJlc3BvbnNlPiB7XG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ0dFVCcsICcvY2lwaGVycy8nICsgaWQsIG51bGwsIHRydWUsIHRydWUpO1xuICAgICAgICByZXR1cm4gbmV3IENpcGhlclJlc3BvbnNlKHIpO1xuICAgIH1cblxuICAgIGFzeW5jIGdldENpcGhlckFkbWluKGlkOiBzdHJpbmcpOiBQcm9taXNlPENpcGhlclJlc3BvbnNlPiB7XG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ0dFVCcsICcvY2lwaGVycy8nICsgaWQgKyAnL2FkbWluJywgbnVsbCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiBuZXcgQ2lwaGVyUmVzcG9uc2Uocik7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0Q2lwaGVyc09yZ2FuaXphdGlvbihvcmdhbml6YXRpb25JZDogc3RyaW5nKTogUHJvbWlzZTxMaXN0UmVzcG9uc2U8Q2lwaGVyUmVzcG9uc2U+PiB7XG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ0dFVCcsICcvY2lwaGVycy9vcmdhbml6YXRpb24tZGV0YWlscz9vcmdhbml6YXRpb25JZD0nICsgb3JnYW5pemF0aW9uSWQsXG4gICAgICAgICAgICBudWxsLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIG5ldyBMaXN0UmVzcG9uc2UociwgQ2lwaGVyUmVzcG9uc2UpO1xuICAgIH1cblxuICAgIGFzeW5jIHBvc3RDaXBoZXIocmVxdWVzdDogQ2lwaGVyUmVxdWVzdCk6IFByb21pc2U8Q2lwaGVyUmVzcG9uc2U+IHtcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnUE9TVCcsICcvY2lwaGVycycsIHJlcXVlc3QsIHRydWUsIHRydWUpO1xuICAgICAgICByZXR1cm4gbmV3IENpcGhlclJlc3BvbnNlKHIpO1xuICAgIH1cblxuICAgIGFzeW5jIHBvc3RDaXBoZXJDcmVhdGUocmVxdWVzdDogQ2lwaGVyQ3JlYXRlUmVxdWVzdCk6IFByb21pc2U8Q2lwaGVyUmVzcG9uc2U+IHtcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnUE9TVCcsICcvY2lwaGVycy9jcmVhdGUnLCByZXF1ZXN0LCB0cnVlLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIG5ldyBDaXBoZXJSZXNwb25zZShyKTtcbiAgICB9XG5cbiAgICBhc3luYyBwb3N0Q2lwaGVyQWRtaW4ocmVxdWVzdDogQ2lwaGVyQ3JlYXRlUmVxdWVzdCk6IFByb21pc2U8Q2lwaGVyUmVzcG9uc2U+IHtcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnUE9TVCcsICcvY2lwaGVycy9hZG1pbicsIHJlcXVlc3QsIHRydWUsIHRydWUpO1xuICAgICAgICByZXR1cm4gbmV3IENpcGhlclJlc3BvbnNlKHIpO1xuICAgIH1cblxuICAgIGFzeW5jIHB1dENpcGhlcihpZDogc3RyaW5nLCByZXF1ZXN0OiBDaXBoZXJSZXF1ZXN0KTogUHJvbWlzZTxDaXBoZXJSZXNwb25zZT4ge1xuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdQVVQnLCAnL2NpcGhlcnMvJyArIGlkLCByZXF1ZXN0LCB0cnVlLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIG5ldyBDaXBoZXJSZXNwb25zZShyKTtcbiAgICB9XG5cbiAgICBhc3luYyBwdXRDaXBoZXJBZG1pbihpZDogc3RyaW5nLCByZXF1ZXN0OiBDaXBoZXJSZXF1ZXN0KTogUHJvbWlzZTxDaXBoZXJSZXNwb25zZT4ge1xuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdQVVQnLCAnL2NpcGhlcnMvJyArIGlkICsgJy9hZG1pbicsIHJlcXVlc3QsIHRydWUsIHRydWUpO1xuICAgICAgICByZXR1cm4gbmV3IENpcGhlclJlc3BvbnNlKHIpO1xuICAgIH1cblxuICAgIGRlbGV0ZUNpcGhlcihpZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZCgnREVMRVRFJywgJy9jaXBoZXJzLycgKyBpZCwgbnVsbCwgdHJ1ZSwgZmFsc2UpO1xuICAgIH1cblxuICAgIGRlbGV0ZUNpcGhlckFkbWluKGlkOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKCdERUxFVEUnLCAnL2NpcGhlcnMvJyArIGlkICsgJy9hZG1pbicsIG51bGwsIHRydWUsIGZhbHNlKTtcbiAgICB9XG5cbiAgICBkZWxldGVNYW55Q2lwaGVycyhyZXF1ZXN0OiBDaXBoZXJCdWxrRGVsZXRlUmVxdWVzdCk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoJ0RFTEVURScsICcvY2lwaGVycycsIHJlcXVlc3QsIHRydWUsIGZhbHNlKTtcbiAgICB9XG5cbiAgICBkZWxldGVNYW55Q2lwaGVyc0FkbWluKHJlcXVlc3Q6IENpcGhlckJ1bGtEZWxldGVSZXF1ZXN0KTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZCgnREVMRVRFJywgJy9jaXBoZXJzL2FkbWluJywgcmVxdWVzdCwgdHJ1ZSwgZmFsc2UpO1xuICAgIH1cblxuICAgIHB1dE1vdmVDaXBoZXJzKHJlcXVlc3Q6IENpcGhlckJ1bGtNb3ZlUmVxdWVzdCk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoJ1BVVCcsICcvY2lwaGVycy9tb3ZlJywgcmVxdWVzdCwgdHJ1ZSwgZmFsc2UpO1xuICAgIH1cblxuICAgIGFzeW5jIHB1dFNoYXJlQ2lwaGVyKGlkOiBzdHJpbmcsIHJlcXVlc3Q6IENpcGhlclNoYXJlUmVxdWVzdCk6IFByb21pc2U8Q2lwaGVyUmVzcG9uc2U+IHtcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnUFVUJywgJy9jaXBoZXJzLycgKyBpZCArICcvc2hhcmUnLCByZXF1ZXN0LCB0cnVlLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIG5ldyBDaXBoZXJSZXNwb25zZShyKTtcbiAgICB9XG5cbiAgICBwdXRTaGFyZUNpcGhlcnMocmVxdWVzdDogQ2lwaGVyQnVsa1NoYXJlUmVxdWVzdCk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoJ1BVVCcsICcvY2lwaGVycy9zaGFyZScsIHJlcXVlc3QsIHRydWUsIGZhbHNlKTtcbiAgICB9XG5cbiAgICBwdXRDaXBoZXJDb2xsZWN0aW9ucyhpZDogc3RyaW5nLCByZXF1ZXN0OiBDaXBoZXJDb2xsZWN0aW9uc1JlcXVlc3QpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKCdQVVQnLCAnL2NpcGhlcnMvJyArIGlkICsgJy9jb2xsZWN0aW9ucycsIHJlcXVlc3QsIHRydWUsIGZhbHNlKTtcbiAgICB9XG5cbiAgICBwdXRDaXBoZXJDb2xsZWN0aW9uc0FkbWluKGlkOiBzdHJpbmcsIHJlcXVlc3Q6IENpcGhlckNvbGxlY3Rpb25zUmVxdWVzdCk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoJ1BVVCcsICcvY2lwaGVycy8nICsgaWQgKyAnL2NvbGxlY3Rpb25zLWFkbWluJywgcmVxdWVzdCwgdHJ1ZSwgZmFsc2UpO1xuICAgIH1cblxuICAgIHBvc3RQdXJnZUNpcGhlcnMocmVxdWVzdDogUGFzc3dvcmRWZXJpZmljYXRpb25SZXF1ZXN0LCBvcmdhbml6YXRpb25JZDogc3RyaW5nID0gbnVsbCk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIGxldCBwYXRoID0gJy9jaXBoZXJzL3B1cmdlJztcbiAgICAgICAgaWYgKG9yZ2FuaXphdGlvbklkICE9IG51bGwpIHtcbiAgICAgICAgICAgIHBhdGggKz0gJz9vcmdhbml6YXRpb25JZD0nICsgb3JnYW5pemF0aW9uSWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZCgnUE9TVCcsIHBhdGgsIHJlcXVlc3QsIHRydWUsIGZhbHNlKTtcbiAgICB9XG5cbiAgICBwb3N0SW1wb3J0Q2lwaGVycyhyZXF1ZXN0OiBJbXBvcnRDaXBoZXJzUmVxdWVzdCk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoJ1BPU1QnLCAnL2NpcGhlcnMvaW1wb3J0JywgcmVxdWVzdCwgdHJ1ZSwgZmFsc2UpO1xuICAgIH1cblxuICAgIHBvc3RJbXBvcnRPcmdhbml6YXRpb25DaXBoZXJzKG9yZ2FuaXphdGlvbklkOiBzdHJpbmcsIHJlcXVlc3Q6IEltcG9ydE9yZ2FuaXphdGlvbkNpcGhlcnNSZXF1ZXN0KTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZCgnUE9TVCcsICcvY2lwaGVycy9pbXBvcnQtb3JnYW5pemF0aW9uP29yZ2FuaXphdGlvbklkPScgKyBvcmdhbml6YXRpb25JZCwgcmVxdWVzdCwgdHJ1ZSwgZmFsc2UpO1xuICAgIH1cblxuICAgIHB1dERlbGV0ZUNpcGhlcihpZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZCgnUFVUJywgJy9jaXBoZXJzLycgKyBpZCArICcvZGVsZXRlJywgbnVsbCwgdHJ1ZSwgZmFsc2UpO1xuICAgIH1cblxuICAgIHB1dERlbGV0ZUNpcGhlckFkbWluKGlkOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKCdQVVQnLCAnL2NpcGhlcnMvJyArIGlkICsgJy9kZWxldGUtYWRtaW4nLCBudWxsLCB0cnVlLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgcHV0RGVsZXRlTWFueUNpcGhlcnMocmVxdWVzdDogQ2lwaGVyQnVsa0RlbGV0ZVJlcXVlc3QpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKCdQVVQnLCAnL2NpcGhlcnMvZGVsZXRlJywgcmVxdWVzdCwgdHJ1ZSwgZmFsc2UpO1xuICAgIH1cblxuICAgIHB1dERlbGV0ZU1hbnlDaXBoZXJzQWRtaW4ocmVxdWVzdDogQ2lwaGVyQnVsa0RlbGV0ZVJlcXVlc3QpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKCdQVVQnLCAnL2NpcGhlcnMvZGVsZXRlLWFkbWluJywgcmVxdWVzdCwgdHJ1ZSwgZmFsc2UpO1xuICAgIH1cblxuICAgIHB1dFJlc3RvcmVDaXBoZXIoaWQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoJ1BVVCcsICcvY2lwaGVycy8nICsgaWQgKyAnL3Jlc3RvcmUnLCBudWxsLCB0cnVlLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgcHV0UmVzdG9yZUNpcGhlckFkbWluKGlkOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKCdQVVQnLCAnL2NpcGhlcnMvJyArIGlkICsgJy9yZXN0b3JlLWFkbWluJywgbnVsbCwgdHJ1ZSwgZmFsc2UpO1xuICAgIH1cblxuICAgIHB1dFJlc3RvcmVNYW55Q2lwaGVycyhyZXF1ZXN0OiBDaXBoZXJCdWxrRGVsZXRlUmVxdWVzdCk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoJ1BVVCcsICcvY2lwaGVycy9yZXN0b3JlJywgcmVxdWVzdCwgdHJ1ZSwgZmFsc2UpO1xuICAgIH1cblxuICAgIC8vIEF0dGFjaG1lbnRzIEFQSXNcblxuICAgIGFzeW5jIHBvc3RDaXBoZXJBdHRhY2htZW50KGlkOiBzdHJpbmcsIGRhdGE6IEZvcm1EYXRhKTogUHJvbWlzZTxDaXBoZXJSZXNwb25zZT4ge1xuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdQT1NUJywgJy9jaXBoZXJzLycgKyBpZCArICcvYXR0YWNobWVudCcsIGRhdGEsIHRydWUsIHRydWUpO1xuICAgICAgICByZXR1cm4gbmV3IENpcGhlclJlc3BvbnNlKHIpO1xuICAgIH1cblxuICAgIGFzeW5jIHBvc3RDaXBoZXJBdHRhY2htZW50QWRtaW4oaWQ6IHN0cmluZywgZGF0YTogRm9ybURhdGEpOiBQcm9taXNlPENpcGhlclJlc3BvbnNlPiB7XG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ1BPU1QnLCAnL2NpcGhlcnMvJyArIGlkICsgJy9hdHRhY2htZW50LWFkbWluJywgZGF0YSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiBuZXcgQ2lwaGVyUmVzcG9uc2Uocik7XG4gICAgfVxuXG4gICAgZGVsZXRlQ2lwaGVyQXR0YWNobWVudChpZDogc3RyaW5nLCBhdHRhY2htZW50SWQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoJ0RFTEVURScsICcvY2lwaGVycy8nICsgaWQgKyAnL2F0dGFjaG1lbnQvJyArIGF0dGFjaG1lbnRJZCwgbnVsbCwgdHJ1ZSwgZmFsc2UpO1xuICAgIH1cblxuICAgIGRlbGV0ZUNpcGhlckF0dGFjaG1lbnRBZG1pbihpZDogc3RyaW5nLCBhdHRhY2htZW50SWQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoJ0RFTEVURScsICcvY2lwaGVycy8nICsgaWQgKyAnL2F0dGFjaG1lbnQvJyArIGF0dGFjaG1lbnRJZCArICcvYWRtaW4nLCBudWxsLCB0cnVlLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgcG9zdFNoYXJlQ2lwaGVyQXR0YWNobWVudChpZDogc3RyaW5nLCBhdHRhY2htZW50SWQ6IHN0cmluZywgZGF0YTogRm9ybURhdGEsXG4gICAgICAgIG9yZ2FuaXphdGlvbklkOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKCdQT1NUJywgJy9jaXBoZXJzLycgKyBpZCArICcvYXR0YWNobWVudC8nICtcbiAgICAgICAgICAgIGF0dGFjaG1lbnRJZCArICcvc2hhcmU/b3JnYW5pemF0aW9uSWQ9JyArIG9yZ2FuaXphdGlvbklkLCBkYXRhLCB0cnVlLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgLy8gQ29sbGVjdGlvbnMgQVBJc1xuXG4gICAgYXN5bmMgZ2V0Q29sbGVjdGlvbkRldGFpbHMob3JnYW5pemF0aW9uSWQ6IHN0cmluZywgaWQ6IHN0cmluZyk6IFByb21pc2U8Q29sbGVjdGlvbkdyb3VwRGV0YWlsc1Jlc3BvbnNlPiB7XG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ0dFVCcsICcvb3JnYW5pemF0aW9ucy8nICsgb3JnYW5pemF0aW9uSWQgKyAnL2NvbGxlY3Rpb25zLycgKyBpZCArICcvZGV0YWlscycsXG4gICAgICAgICAgICBudWxsLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIG5ldyBDb2xsZWN0aW9uR3JvdXBEZXRhaWxzUmVzcG9uc2Uocik7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0VXNlckNvbGxlY3Rpb25zKCk6IFByb21pc2U8TGlzdFJlc3BvbnNlPENvbGxlY3Rpb25SZXNwb25zZT4+IHtcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnR0VUJywgJy9jb2xsZWN0aW9ucycsIG51bGwsIHRydWUsIHRydWUpO1xuICAgICAgICByZXR1cm4gbmV3IExpc3RSZXNwb25zZShyLCBDb2xsZWN0aW9uUmVzcG9uc2UpO1xuICAgIH1cblxuICAgIGFzeW5jIGdldENvbGxlY3Rpb25zKG9yZ2FuaXphdGlvbklkOiBzdHJpbmcpOiBQcm9taXNlPExpc3RSZXNwb25zZTxDb2xsZWN0aW9uUmVzcG9uc2U+PiB7XG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ0dFVCcsICcvb3JnYW5pemF0aW9ucy8nICsgb3JnYW5pemF0aW9uSWQgKyAnL2NvbGxlY3Rpb25zJywgbnVsbCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiBuZXcgTGlzdFJlc3BvbnNlKHIsIENvbGxlY3Rpb25SZXNwb25zZSk7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0Q29sbGVjdGlvblVzZXJzKG9yZ2FuaXphdGlvbklkOiBzdHJpbmcsIGlkOiBzdHJpbmcpOiBQcm9taXNlPFNlbGVjdGlvblJlYWRPbmx5UmVzcG9uc2VbXT4ge1xuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdHRVQnLCAnL29yZ2FuaXphdGlvbnMvJyArIG9yZ2FuaXphdGlvbklkICsgJy9jb2xsZWN0aW9ucy8nICsgaWQgKyAnL3VzZXJzJyxcbiAgICAgICAgICAgIG51bGwsIHRydWUsIHRydWUpO1xuICAgICAgICByZXR1cm4gci5tYXAoKGRyOiBhbnkpID0+IG5ldyBTZWxlY3Rpb25SZWFkT25seVJlc3BvbnNlKGRyKSk7XG4gICAgfVxuXG4gICAgYXN5bmMgcG9zdENvbGxlY3Rpb24ob3JnYW5pemF0aW9uSWQ6IHN0cmluZywgcmVxdWVzdDogQ29sbGVjdGlvblJlcXVlc3QpOiBQcm9taXNlPENvbGxlY3Rpb25SZXNwb25zZT4ge1xuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdQT1NUJywgJy9vcmdhbml6YXRpb25zLycgKyBvcmdhbml6YXRpb25JZCArICcvY29sbGVjdGlvbnMnLCByZXF1ZXN0LCB0cnVlLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIG5ldyBDb2xsZWN0aW9uUmVzcG9uc2Uocik7XG4gICAgfVxuXG4gICAgYXN5bmMgcHV0Q29sbGVjdGlvbihvcmdhbml6YXRpb25JZDogc3RyaW5nLCBpZDogc3RyaW5nLCByZXF1ZXN0OiBDb2xsZWN0aW9uUmVxdWVzdCk6IFByb21pc2U8Q29sbGVjdGlvblJlc3BvbnNlPiB7XG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ1BVVCcsICcvb3JnYW5pemF0aW9ucy8nICsgb3JnYW5pemF0aW9uSWQgKyAnL2NvbGxlY3Rpb25zLycgKyBpZCxcbiAgICAgICAgICAgIHJlcXVlc3QsIHRydWUsIHRydWUpO1xuICAgICAgICByZXR1cm4gbmV3IENvbGxlY3Rpb25SZXNwb25zZShyKTtcbiAgICB9XG5cbiAgICBhc3luYyBwdXRDb2xsZWN0aW9uVXNlcnMob3JnYW5pemF0aW9uSWQ6IHN0cmluZywgaWQ6IHN0cmluZywgcmVxdWVzdDogU2VsZWN0aW9uUmVhZE9ubHlSZXF1ZXN0W10pOiBQcm9taXNlPGFueT4ge1xuICAgICAgICBhd2FpdCB0aGlzLnNlbmQoJ1BVVCcsICcvb3JnYW5pemF0aW9ucy8nICsgb3JnYW5pemF0aW9uSWQgKyAnL2NvbGxlY3Rpb25zLycgKyBpZCArICcvdXNlcnMnLFxuICAgICAgICAgICAgcmVxdWVzdCwgdHJ1ZSwgZmFsc2UpO1xuICAgIH1cblxuICAgIGRlbGV0ZUNvbGxlY3Rpb24ob3JnYW5pemF0aW9uSWQ6IHN0cmluZywgaWQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoJ0RFTEVURScsICcvb3JnYW5pemF0aW9ucy8nICsgb3JnYW5pemF0aW9uSWQgKyAnL2NvbGxlY3Rpb25zLycgKyBpZCwgbnVsbCwgdHJ1ZSwgZmFsc2UpO1xuICAgIH1cblxuICAgIGRlbGV0ZUNvbGxlY3Rpb25Vc2VyKG9yZ2FuaXphdGlvbklkOiBzdHJpbmcsIGlkOiBzdHJpbmcsIG9yZ2FuaXphdGlvblVzZXJJZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZCgnREVMRVRFJyxcbiAgICAgICAgICAgICcvb3JnYW5pemF0aW9ucy8nICsgb3JnYW5pemF0aW9uSWQgKyAnL2NvbGxlY3Rpb25zLycgKyBpZCArICcvdXNlci8nICsgb3JnYW5pemF0aW9uVXNlcklkLFxuICAgICAgICAgICAgbnVsbCwgdHJ1ZSwgZmFsc2UpO1xuICAgIH1cblxuICAgIC8vIEdyb3VwcyBBUElzXG5cbiAgICBhc3luYyBnZXRHcm91cERldGFpbHMob3JnYW5pemF0aW9uSWQ6IHN0cmluZywgaWQ6IHN0cmluZyk6IFByb21pc2U8R3JvdXBEZXRhaWxzUmVzcG9uc2U+IHtcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnR0VUJywgJy9vcmdhbml6YXRpb25zLycgKyBvcmdhbml6YXRpb25JZCArICcvZ3JvdXBzLycgKyBpZCArICcvZGV0YWlscycsXG4gICAgICAgICAgICBudWxsLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIG5ldyBHcm91cERldGFpbHNSZXNwb25zZShyKTtcbiAgICB9XG5cbiAgICBhc3luYyBnZXRHcm91cHMob3JnYW5pemF0aW9uSWQ6IHN0cmluZyk6IFByb21pc2U8TGlzdFJlc3BvbnNlPEdyb3VwUmVzcG9uc2U+PiB7XG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ0dFVCcsICcvb3JnYW5pemF0aW9ucy8nICsgb3JnYW5pemF0aW9uSWQgKyAnL2dyb3VwcycsIG51bGwsIHRydWUsIHRydWUpO1xuICAgICAgICByZXR1cm4gbmV3IExpc3RSZXNwb25zZShyLCBHcm91cFJlc3BvbnNlKTtcbiAgICB9XG5cbiAgICBhc3luYyBnZXRHcm91cFVzZXJzKG9yZ2FuaXphdGlvbklkOiBzdHJpbmcsIGlkOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZ1tdPiB7XG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ0dFVCcsICcvb3JnYW5pemF0aW9ucy8nICsgb3JnYW5pemF0aW9uSWQgKyAnL2dyb3Vwcy8nICsgaWQgKyAnL3VzZXJzJyxcbiAgICAgICAgICAgIG51bGwsIHRydWUsIHRydWUpO1xuICAgICAgICByZXR1cm4gcjtcbiAgICB9XG5cbiAgICBhc3luYyBwb3N0R3JvdXAob3JnYW5pemF0aW9uSWQ6IHN0cmluZywgcmVxdWVzdDogR3JvdXBSZXF1ZXN0KTogUHJvbWlzZTxHcm91cFJlc3BvbnNlPiB7XG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ1BPU1QnLCAnL29yZ2FuaXphdGlvbnMvJyArIG9yZ2FuaXphdGlvbklkICsgJy9ncm91cHMnLCByZXF1ZXN0LCB0cnVlLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIG5ldyBHcm91cFJlc3BvbnNlKHIpO1xuICAgIH1cblxuICAgIGFzeW5jIHB1dEdyb3VwKG9yZ2FuaXphdGlvbklkOiBzdHJpbmcsIGlkOiBzdHJpbmcsIHJlcXVlc3Q6IEdyb3VwUmVxdWVzdCk6IFByb21pc2U8R3JvdXBSZXNwb25zZT4ge1xuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdQVVQnLCAnL29yZ2FuaXphdGlvbnMvJyArIG9yZ2FuaXphdGlvbklkICsgJy9ncm91cHMvJyArIGlkLCByZXF1ZXN0LCB0cnVlLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIG5ldyBHcm91cFJlc3BvbnNlKHIpO1xuICAgIH1cblxuICAgIGFzeW5jIHB1dEdyb3VwVXNlcnMob3JnYW5pemF0aW9uSWQ6IHN0cmluZywgaWQ6IHN0cmluZywgcmVxdWVzdDogc3RyaW5nW10pOiBQcm9taXNlPGFueT4ge1xuICAgICAgICBhd2FpdCB0aGlzLnNlbmQoJ1BVVCcsICcvb3JnYW5pemF0aW9ucy8nICsgb3JnYW5pemF0aW9uSWQgKyAnL2dyb3Vwcy8nICsgaWQgKyAnL3VzZXJzJywgcmVxdWVzdCwgdHJ1ZSwgZmFsc2UpO1xuICAgIH1cblxuICAgIGRlbGV0ZUdyb3VwKG9yZ2FuaXphdGlvbklkOiBzdHJpbmcsIGlkOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKCdERUxFVEUnLCAnL29yZ2FuaXphdGlvbnMvJyArIG9yZ2FuaXphdGlvbklkICsgJy9ncm91cHMvJyArIGlkLCBudWxsLCB0cnVlLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgZGVsZXRlR3JvdXBVc2VyKG9yZ2FuaXphdGlvbklkOiBzdHJpbmcsIGlkOiBzdHJpbmcsIG9yZ2FuaXphdGlvblVzZXJJZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZCgnREVMRVRFJyxcbiAgICAgICAgICAgICcvb3JnYW5pemF0aW9ucy8nICsgb3JnYW5pemF0aW9uSWQgKyAnL2dyb3Vwcy8nICsgaWQgKyAnL3VzZXIvJyArIG9yZ2FuaXphdGlvblVzZXJJZCwgbnVsbCwgdHJ1ZSwgZmFsc2UpO1xuICAgIH1cblxuICAgIC8vIFBvbGljeSBBUElzXG5cbiAgICBhc3luYyBnZXRQb2xpY3kob3JnYW5pemF0aW9uSWQ6IHN0cmluZywgdHlwZTogUG9saWN5VHlwZSk6IFByb21pc2U8UG9saWN5UmVzcG9uc2U+IHtcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnR0VUJywgJy9vcmdhbml6YXRpb25zLycgKyBvcmdhbml6YXRpb25JZCArICcvcG9saWNpZXMvJyArIHR5cGUsIG51bGwsIHRydWUsIHRydWUpO1xuICAgICAgICByZXR1cm4gbmV3IFBvbGljeVJlc3BvbnNlKHIpO1xuICAgIH1cblxuICAgIGFzeW5jIGdldFBvbGljaWVzKG9yZ2FuaXphdGlvbklkOiBzdHJpbmcpOiBQcm9taXNlPExpc3RSZXNwb25zZTxQb2xpY3lSZXNwb25zZT4+IHtcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnR0VUJywgJy9vcmdhbml6YXRpb25zLycgKyBvcmdhbml6YXRpb25JZCArICcvcG9saWNpZXMnLCBudWxsLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIG5ldyBMaXN0UmVzcG9uc2UociwgUG9saWN5UmVzcG9uc2UpO1xuICAgIH1cblxuICAgIGFzeW5jIGdldFBvbGljaWVzQnlUb2tlbihvcmdhbml6YXRpb25JZDogc3RyaW5nLCB0b2tlbjogc3RyaW5nLCBlbWFpbDogc3RyaW5nLCBvcmdhbml6YXRpb25Vc2VySWQ6IHN0cmluZyk6XG4gICAgICAgIFByb21pc2U8TGlzdFJlc3BvbnNlPFBvbGljeVJlc3BvbnNlPj4ge1xuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdHRVQnLCAnL29yZ2FuaXphdGlvbnMvJyArIG9yZ2FuaXphdGlvbklkICsgJy9wb2xpY2llcy90b2tlbj8nICtcbiAgICAgICAgICAgICd0b2tlbj0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHRva2VuKSArICcmZW1haWw9JyArIGVuY29kZVVSSUNvbXBvbmVudChlbWFpbCkgK1xuICAgICAgICAgICAgJyZvcmdhbml6YXRpb25Vc2VySWQ9JyArIG9yZ2FuaXphdGlvblVzZXJJZCwgbnVsbCwgZmFsc2UsIHRydWUpO1xuICAgICAgICByZXR1cm4gbmV3IExpc3RSZXNwb25zZShyLCBQb2xpY3lSZXNwb25zZSk7XG4gICAgfVxuXG4gICAgYXN5bmMgcHV0UG9saWN5KG9yZ2FuaXphdGlvbklkOiBzdHJpbmcsIHR5cGU6IFBvbGljeVR5cGUsIHJlcXVlc3Q6IFBvbGljeVJlcXVlc3QpOiBQcm9taXNlPFBvbGljeVJlc3BvbnNlPiB7XG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ1BVVCcsICcvb3JnYW5pemF0aW9ucy8nICsgb3JnYW5pemF0aW9uSWQgKyAnL3BvbGljaWVzLycgKyB0eXBlLCByZXF1ZXN0LCB0cnVlLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIG5ldyBQb2xpY3lSZXNwb25zZShyKTtcbiAgICB9XG5cbiAgICAvLyBPcmdhbml6YXRpb24gVXNlciBBUElzXG5cbiAgICBhc3luYyBnZXRPcmdhbml6YXRpb25Vc2VyKG9yZ2FuaXphdGlvbklkOiBzdHJpbmcsIGlkOiBzdHJpbmcpOiBQcm9taXNlPE9yZ2FuaXphdGlvblVzZXJEZXRhaWxzUmVzcG9uc2U+IHtcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnR0VUJywgJy9vcmdhbml6YXRpb25zLycgKyBvcmdhbml6YXRpb25JZCArICcvdXNlcnMvJyArIGlkLCBudWxsLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIG5ldyBPcmdhbml6YXRpb25Vc2VyRGV0YWlsc1Jlc3BvbnNlKHIpO1xuICAgIH1cblxuICAgIGFzeW5jIGdldE9yZ2FuaXphdGlvblVzZXJHcm91cHMob3JnYW5pemF0aW9uSWQ6IHN0cmluZywgaWQ6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nW10+IHtcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnR0VUJywgJy9vcmdhbml6YXRpb25zLycgKyBvcmdhbml6YXRpb25JZCArICcvdXNlcnMvJyArIGlkICsgJy9ncm91cHMnLFxuICAgICAgICAgICAgbnVsbCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiByO1xuICAgIH1cblxuICAgIGFzeW5jIGdldE9yZ2FuaXphdGlvblVzZXJzKG9yZ2FuaXphdGlvbklkOiBzdHJpbmcpOiBQcm9taXNlPExpc3RSZXNwb25zZTxPcmdhbml6YXRpb25Vc2VyVXNlckRldGFpbHNSZXNwb25zZT4+IHtcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnR0VUJywgJy9vcmdhbml6YXRpb25zLycgKyBvcmdhbml6YXRpb25JZCArICcvdXNlcnMnLCBudWxsLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIG5ldyBMaXN0UmVzcG9uc2UociwgT3JnYW5pemF0aW9uVXNlclVzZXJEZXRhaWxzUmVzcG9uc2UpO1xuICAgIH1cblxuICAgIHBvc3RPcmdhbml6YXRpb25Vc2VySW52aXRlKG9yZ2FuaXphdGlvbklkOiBzdHJpbmcsIHJlcXVlc3Q6IE9yZ2FuaXphdGlvblVzZXJJbnZpdGVSZXF1ZXN0KTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZCgnUE9TVCcsICcvb3JnYW5pemF0aW9ucy8nICsgb3JnYW5pemF0aW9uSWQgKyAnL3VzZXJzL2ludml0ZScsIHJlcXVlc3QsIHRydWUsIGZhbHNlKTtcbiAgICB9XG5cbiAgICBwb3N0T3JnYW5pemF0aW9uVXNlclJlaW52aXRlKG9yZ2FuaXphdGlvbklkOiBzdHJpbmcsIGlkOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKCdQT1NUJywgJy9vcmdhbml6YXRpb25zLycgKyBvcmdhbml6YXRpb25JZCArICcvdXNlcnMvJyArIGlkICsgJy9yZWludml0ZScsIG51bGwsIHRydWUsIGZhbHNlKTtcbiAgICB9XG5cbiAgICBwb3N0T3JnYW5pemF0aW9uVXNlckFjY2VwdChvcmdhbml6YXRpb25JZDogc3RyaW5nLCBpZDogc3RyaW5nLFxuICAgICAgICByZXF1ZXN0OiBPcmdhbml6YXRpb25Vc2VyQWNjZXB0UmVxdWVzdCk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoJ1BPU1QnLCAnL29yZ2FuaXphdGlvbnMvJyArIG9yZ2FuaXphdGlvbklkICsgJy91c2Vycy8nICsgaWQgKyAnL2FjY2VwdCcsIHJlcXVlc3QsIHRydWUsIGZhbHNlKTtcbiAgICB9XG5cbiAgICBwb3N0T3JnYW5pemF0aW9uVXNlckNvbmZpcm0ob3JnYW5pemF0aW9uSWQ6IHN0cmluZywgaWQ6IHN0cmluZyxcbiAgICAgICAgcmVxdWVzdDogT3JnYW5pemF0aW9uVXNlckNvbmZpcm1SZXF1ZXN0KTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZCgnUE9TVCcsICcvb3JnYW5pemF0aW9ucy8nICsgb3JnYW5pemF0aW9uSWQgKyAnL3VzZXJzLycgKyBpZCArICcvY29uZmlybScsXG4gICAgICAgICAgICByZXF1ZXN0LCB0cnVlLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgcHV0T3JnYW5pemF0aW9uVXNlcihvcmdhbml6YXRpb25JZDogc3RyaW5nLCBpZDogc3RyaW5nLCByZXF1ZXN0OiBPcmdhbml6YXRpb25Vc2VyVXBkYXRlUmVxdWVzdCk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoJ1BVVCcsICcvb3JnYW5pemF0aW9ucy8nICsgb3JnYW5pemF0aW9uSWQgKyAnL3VzZXJzLycgKyBpZCwgcmVxdWVzdCwgdHJ1ZSwgZmFsc2UpO1xuICAgIH1cblxuICAgIHB1dE9yZ2FuaXphdGlvblVzZXJHcm91cHMob3JnYW5pemF0aW9uSWQ6IHN0cmluZywgaWQ6IHN0cmluZyxcbiAgICAgICAgcmVxdWVzdDogT3JnYW5pemF0aW9uVXNlclVwZGF0ZUdyb3Vwc1JlcXVlc3QpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKCdQVVQnLCAnL29yZ2FuaXphdGlvbnMvJyArIG9yZ2FuaXphdGlvbklkICsgJy91c2Vycy8nICsgaWQgKyAnL2dyb3VwcycsIHJlcXVlc3QsIHRydWUsIGZhbHNlKTtcbiAgICB9XG5cbiAgICBkZWxldGVPcmdhbml6YXRpb25Vc2VyKG9yZ2FuaXphdGlvbklkOiBzdHJpbmcsIGlkOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKCdERUxFVEUnLCAnL29yZ2FuaXphdGlvbnMvJyArIG9yZ2FuaXphdGlvbklkICsgJy91c2Vycy8nICsgaWQsIG51bGwsIHRydWUsIGZhbHNlKTtcbiAgICB9XG5cbiAgICAvLyBQbGFuIEFQSXNcblxuICAgIGFzeW5jIGdldFBsYW5zKCk6IFByb21pc2U8TGlzdFJlc3BvbnNlPFBsYW5SZXNwb25zZT4+IHtcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnR0VUJywgJy9wbGFucy8nLCBudWxsLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIG5ldyBMaXN0UmVzcG9uc2UociwgUGxhblJlc3BvbnNlKTtcbiAgICB9XG5cbiAgICBhc3luYyBwb3N0SW1wb3J0RGlyZWN0b3J5KG9yZ2FuaXphdGlvbklkOiBzdHJpbmcsIHJlcXVlc3Q6IEltcG9ydERpcmVjdG9yeVJlcXVlc3QpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKCdQT1NUJywgJy9vcmdhbml6YXRpb25zLycgKyBvcmdhbml6YXRpb25JZCArICcvaW1wb3J0JywgcmVxdWVzdCwgdHJ1ZSwgZmFsc2UpO1xuICAgIH1cblxuICAgIC8vIFNldHRpbmdzIEFQSXNcblxuICAgIGFzeW5jIGdldFNldHRpbmdzRG9tYWlucygpOiBQcm9taXNlPERvbWFpbnNSZXNwb25zZT4ge1xuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdHRVQnLCAnL3NldHRpbmdzL2RvbWFpbnMnLCBudWxsLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIG5ldyBEb21haW5zUmVzcG9uc2Uocik7XG4gICAgfVxuXG4gICAgYXN5bmMgcHV0U2V0dGluZ3NEb21haW5zKHJlcXVlc3Q6IFVwZGF0ZURvbWFpbnNSZXF1ZXN0KTogUHJvbWlzZTxEb21haW5zUmVzcG9uc2U+IHtcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnUFVUJywgJy9zZXR0aW5ncy9kb21haW5zJywgcmVxdWVzdCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiBuZXcgRG9tYWluc1Jlc3BvbnNlKHIpO1xuICAgIH1cblxuICAgIC8vIFN5bmMgQVBJc1xuXG4gICAgYXN5bmMgZ2V0U3luYygpOiBQcm9taXNlPFN5bmNSZXNwb25zZT4ge1xuICAgICAgICBjb25zdCBwYXRoID0gdGhpcy5pc0Rlc2t0b3BDbGllbnQgfHwgdGhpcy5pc1dlYkNsaWVudCA/ICcvc3luYz9leGNsdWRlRG9tYWlucz10cnVlJyA6ICcvc3luYyc7XG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ0dFVCcsIHBhdGgsIG51bGwsIHRydWUsIHRydWUpO1xuICAgICAgICByZXR1cm4gbmV3IFN5bmNSZXNwb25zZShyKTtcbiAgICB9XG5cbiAgICAvLyBUd28tZmFjdG9yIEFQSXNcblxuICAgIGFzeW5jIGdldFR3b0ZhY3RvclByb3ZpZGVycygpOiBQcm9taXNlPExpc3RSZXNwb25zZTxUd29GYWN0b3JQcm92aWRlclJlc3BvbnNlPj4ge1xuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdHRVQnLCAnL3R3by1mYWN0b3InLCBudWxsLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIG5ldyBMaXN0UmVzcG9uc2UociwgVHdvRmFjdG9yUHJvdmlkZXJSZXNwb25zZSk7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0VHdvRmFjdG9yT3JnYW5pemF0aW9uUHJvdmlkZXJzKG9yZ2FuaXphdGlvbklkOiBzdHJpbmcpOiBQcm9taXNlPExpc3RSZXNwb25zZTxUd29GYWN0b3JQcm92aWRlclJlc3BvbnNlPj4ge1xuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdHRVQnLCAnL29yZ2FuaXphdGlvbnMvJyArIG9yZ2FuaXphdGlvbklkICsgJy90d28tZmFjdG9yJywgbnVsbCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiBuZXcgTGlzdFJlc3BvbnNlKHIsIFR3b0ZhY3RvclByb3ZpZGVyUmVzcG9uc2UpO1xuICAgIH1cblxuICAgIGFzeW5jIGdldFR3b0ZhY3RvckF1dGhlbnRpY2F0b3IocmVxdWVzdDogUGFzc3dvcmRWZXJpZmljYXRpb25SZXF1ZXN0KTogUHJvbWlzZTxUd29GYWN0b3JBdXRoZW50aWNhdG9yUmVzcG9uc2U+IHtcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnUE9TVCcsICcvdHdvLWZhY3Rvci9nZXQtYXV0aGVudGljYXRvcicsIHJlcXVlc3QsIHRydWUsIHRydWUpO1xuICAgICAgICByZXR1cm4gbmV3IFR3b0ZhY3RvckF1dGhlbnRpY2F0b3JSZXNwb25zZShyKTtcbiAgICB9XG5cbiAgICBhc3luYyBnZXRUd29GYWN0b3JFbWFpbChyZXF1ZXN0OiBQYXNzd29yZFZlcmlmaWNhdGlvblJlcXVlc3QpOiBQcm9taXNlPFR3b0ZhY3RvckVtYWlsUmVzcG9uc2U+IHtcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnUE9TVCcsICcvdHdvLWZhY3Rvci9nZXQtZW1haWwnLCByZXF1ZXN0LCB0cnVlLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIG5ldyBUd29GYWN0b3JFbWFpbFJlc3BvbnNlKHIpO1xuICAgIH1cblxuICAgIGFzeW5jIGdldFR3b0ZhY3RvckR1byhyZXF1ZXN0OiBQYXNzd29yZFZlcmlmaWNhdGlvblJlcXVlc3QpOiBQcm9taXNlPFR3b0ZhY3RvckR1b1Jlc3BvbnNlPiB7XG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ1BPU1QnLCAnL3R3by1mYWN0b3IvZ2V0LWR1bycsIHJlcXVlc3QsIHRydWUsIHRydWUpO1xuICAgICAgICByZXR1cm4gbmV3IFR3b0ZhY3RvckR1b1Jlc3BvbnNlKHIpO1xuICAgIH1cblxuICAgIGFzeW5jIGdldFR3b0ZhY3Rvck9yZ2FuaXphdGlvbkR1byhvcmdhbml6YXRpb25JZDogc3RyaW5nLFxuICAgICAgICByZXF1ZXN0OiBQYXNzd29yZFZlcmlmaWNhdGlvblJlcXVlc3QpOiBQcm9taXNlPFR3b0ZhY3RvckR1b1Jlc3BvbnNlPiB7XG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ1BPU1QnLCAnL29yZ2FuaXphdGlvbnMvJyArIG9yZ2FuaXphdGlvbklkICsgJy90d28tZmFjdG9yL2dldC1kdW8nLFxuICAgICAgICAgICAgcmVxdWVzdCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiBuZXcgVHdvRmFjdG9yRHVvUmVzcG9uc2Uocik7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0VHdvRmFjdG9yWXViaUtleShyZXF1ZXN0OiBQYXNzd29yZFZlcmlmaWNhdGlvblJlcXVlc3QpOiBQcm9taXNlPFR3b0ZhY3Rvcll1YmlLZXlSZXNwb25zZT4ge1xuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdQT1NUJywgJy90d28tZmFjdG9yL2dldC15dWJpa2V5JywgcmVxdWVzdCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiBuZXcgVHdvRmFjdG9yWXViaUtleVJlc3BvbnNlKHIpO1xuICAgIH1cblxuICAgIGFzeW5jIGdldFR3b0ZhY3RvclUyZihyZXF1ZXN0OiBQYXNzd29yZFZlcmlmaWNhdGlvblJlcXVlc3QpOiBQcm9taXNlPFR3b0ZhY3RvclUyZlJlc3BvbnNlPiB7XG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ1BPU1QnLCAnL3R3by1mYWN0b3IvZ2V0LXUyZicsIHJlcXVlc3QsIHRydWUsIHRydWUpO1xuICAgICAgICByZXR1cm4gbmV3IFR3b0ZhY3RvclUyZlJlc3BvbnNlKHIpO1xuICAgIH1cblxuICAgIGFzeW5jIGdldFR3b0ZhY3RvclUyZkNoYWxsZW5nZShyZXF1ZXN0OiBQYXNzd29yZFZlcmlmaWNhdGlvblJlcXVlc3QpOiBQcm9taXNlPENoYWxsZW5nZVJlc3BvbnNlPiB7XG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ1BPU1QnLCAnL3R3by1mYWN0b3IvZ2V0LXUyZi1jaGFsbGVuZ2UnLCByZXF1ZXN0LCB0cnVlLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIG5ldyBDaGFsbGVuZ2VSZXNwb25zZShyKTtcbiAgICB9XG5cbiAgICBhc3luYyBnZXRUd29GYWN0b3JSZWNvdmVyKHJlcXVlc3Q6IFBhc3N3b3JkVmVyaWZpY2F0aW9uUmVxdWVzdCk6IFByb21pc2U8VHdvRmFjdG9yUmVjb3ZlclJlc3BvbnNlPiB7XG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ1BPU1QnLCAnL3R3by1mYWN0b3IvZ2V0LXJlY292ZXInLCByZXF1ZXN0LCB0cnVlLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIG5ldyBUd29GYWN0b3JSZWNvdmVyUmVzcG9uc2Uocik7XG4gICAgfVxuXG4gICAgYXN5bmMgcHV0VHdvRmFjdG9yQXV0aGVudGljYXRvcihcbiAgICAgICAgcmVxdWVzdDogVXBkYXRlVHdvRmFjdG9yQXV0aGVudGljYXRvclJlcXVlc3QpOiBQcm9taXNlPFR3b0ZhY3RvckF1dGhlbnRpY2F0b3JSZXNwb25zZT4ge1xuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdQVVQnLCAnL3R3by1mYWN0b3IvYXV0aGVudGljYXRvcicsIHJlcXVlc3QsIHRydWUsIHRydWUpO1xuICAgICAgICByZXR1cm4gbmV3IFR3b0ZhY3RvckF1dGhlbnRpY2F0b3JSZXNwb25zZShyKTtcbiAgICB9XG5cbiAgICBhc3luYyBwdXRUd29GYWN0b3JFbWFpbChyZXF1ZXN0OiBVcGRhdGVUd29GYWN0b3JFbWFpbFJlcXVlc3QpOiBQcm9taXNlPFR3b0ZhY3RvckVtYWlsUmVzcG9uc2U+IHtcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnUFVUJywgJy90d28tZmFjdG9yL2VtYWlsJywgcmVxdWVzdCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiBuZXcgVHdvRmFjdG9yRW1haWxSZXNwb25zZShyKTtcbiAgICB9XG5cbiAgICBhc3luYyBwdXRUd29GYWN0b3JEdW8ocmVxdWVzdDogVXBkYXRlVHdvRmFjdG9yRHVvUmVxdWVzdCk6IFByb21pc2U8VHdvRmFjdG9yRHVvUmVzcG9uc2U+IHtcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnUFVUJywgJy90d28tZmFjdG9yL2R1bycsIHJlcXVlc3QsIHRydWUsIHRydWUpO1xuICAgICAgICByZXR1cm4gbmV3IFR3b0ZhY3RvckR1b1Jlc3BvbnNlKHIpO1xuICAgIH1cblxuICAgIGFzeW5jIHB1dFR3b0ZhY3Rvck9yZ2FuaXphdGlvbkR1byhvcmdhbml6YXRpb25JZDogc3RyaW5nLFxuICAgICAgICByZXF1ZXN0OiBVcGRhdGVUd29GYWN0b3JEdW9SZXF1ZXN0KTogUHJvbWlzZTxUd29GYWN0b3JEdW9SZXNwb25zZT4ge1xuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdQVVQnLCAnL29yZ2FuaXphdGlvbnMvJyArIG9yZ2FuaXphdGlvbklkICsgJy90d28tZmFjdG9yL2R1bycsIHJlcXVlc3QsIHRydWUsIHRydWUpO1xuICAgICAgICByZXR1cm4gbmV3IFR3b0ZhY3RvckR1b1Jlc3BvbnNlKHIpO1xuICAgIH1cblxuICAgIGFzeW5jIHB1dFR3b0ZhY3Rvcll1YmlLZXkocmVxdWVzdDogVXBkYXRlVHdvRmFjdG9yWXViaW9PdHBSZXF1ZXN0KTogUHJvbWlzZTxUd29GYWN0b3JZdWJpS2V5UmVzcG9uc2U+IHtcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnUFVUJywgJy90d28tZmFjdG9yL3l1YmlrZXknLCByZXF1ZXN0LCB0cnVlLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIG5ldyBUd29GYWN0b3JZdWJpS2V5UmVzcG9uc2Uocik7XG4gICAgfVxuXG4gICAgYXN5bmMgcHV0VHdvRmFjdG9yVTJmKHJlcXVlc3Q6IFVwZGF0ZVR3b0ZhY3RvclUyZlJlcXVlc3QpOiBQcm9taXNlPFR3b0ZhY3RvclUyZlJlc3BvbnNlPiB7XG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ1BVVCcsICcvdHdvLWZhY3Rvci91MmYnLCByZXF1ZXN0LCB0cnVlLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIG5ldyBUd29GYWN0b3JVMmZSZXNwb25zZShyKTtcbiAgICB9XG5cbiAgICBhc3luYyBkZWxldGVUd29GYWN0b3JVMmYocmVxdWVzdDogVXBkYXRlVHdvRmFjdG9yVTJmRGVsZXRlUmVxdWVzdCk6IFByb21pc2U8VHdvRmFjdG9yVTJmUmVzcG9uc2U+IHtcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnREVMRVRFJywgJy90d28tZmFjdG9yL3UyZicsIHJlcXVlc3QsIHRydWUsIHRydWUpO1xuICAgICAgICByZXR1cm4gbmV3IFR3b0ZhY3RvclUyZlJlc3BvbnNlKHIpO1xuICAgIH1cblxuICAgIGFzeW5jIHB1dFR3b0ZhY3RvckRpc2FibGUocmVxdWVzdDogVHdvRmFjdG9yUHJvdmlkZXJSZXF1ZXN0KTogUHJvbWlzZTxUd29GYWN0b3JQcm92aWRlclJlc3BvbnNlPiB7XG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ1BVVCcsICcvdHdvLWZhY3Rvci9kaXNhYmxlJywgcmVxdWVzdCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiBuZXcgVHdvRmFjdG9yUHJvdmlkZXJSZXNwb25zZShyKTtcbiAgICB9XG5cbiAgICBhc3luYyBwdXRUd29GYWN0b3JPcmdhbml6YXRpb25EaXNhYmxlKG9yZ2FuaXphdGlvbklkOiBzdHJpbmcsXG4gICAgICAgIHJlcXVlc3Q6IFR3b0ZhY3RvclByb3ZpZGVyUmVxdWVzdCk6IFByb21pc2U8VHdvRmFjdG9yUHJvdmlkZXJSZXNwb25zZT4ge1xuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdQVVQnLCAnL29yZ2FuaXphdGlvbnMvJyArIG9yZ2FuaXphdGlvbklkICsgJy90d28tZmFjdG9yL2Rpc2FibGUnLFxuICAgICAgICAgICAgcmVxdWVzdCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiBuZXcgVHdvRmFjdG9yUHJvdmlkZXJSZXNwb25zZShyKTtcbiAgICB9XG5cbiAgICBwb3N0VHdvRmFjdG9yUmVjb3ZlcihyZXF1ZXN0OiBUd29GYWN0b3JSZWNvdmVyeVJlcXVlc3QpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKCdQT1NUJywgJy90d28tZmFjdG9yL3JlY292ZXInLCByZXF1ZXN0LCBmYWxzZSwgZmFsc2UpO1xuICAgIH1cblxuICAgIHBvc3RUd29GYWN0b3JFbWFpbFNldHVwKHJlcXVlc3Q6IFR3b0ZhY3RvckVtYWlsUmVxdWVzdCk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoJ1BPU1QnLCAnL3R3by1mYWN0b3Ivc2VuZC1lbWFpbCcsIHJlcXVlc3QsIHRydWUsIGZhbHNlKTtcbiAgICB9XG5cbiAgICBwb3N0VHdvRmFjdG9yRW1haWwocmVxdWVzdDogVHdvRmFjdG9yRW1haWxSZXF1ZXN0KTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZCgnUE9TVCcsICcvdHdvLWZhY3Rvci9zZW5kLWVtYWlsLWxvZ2luJywgcmVxdWVzdCwgZmFsc2UsIGZhbHNlKTtcbiAgICB9XG5cbiAgICAvLyBPcmdhbml6YXRpb24gQVBJc1xuXG4gICAgYXN5bmMgZ2V0T3JnYW5pemF0aW9uKGlkOiBzdHJpbmcpOiBQcm9taXNlPE9yZ2FuaXphdGlvblJlc3BvbnNlPiB7XG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ0dFVCcsICcvb3JnYW5pemF0aW9ucy8nICsgaWQsIG51bGwsIHRydWUsIHRydWUpO1xuICAgICAgICByZXR1cm4gbmV3IE9yZ2FuaXphdGlvblJlc3BvbnNlKHIpO1xuICAgIH1cblxuICAgIGFzeW5jIGdldE9yZ2FuaXphdGlvbkJpbGxpbmcoaWQ6IHN0cmluZyk6IFByb21pc2U8QmlsbGluZ1Jlc3BvbnNlPiB7XG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ0dFVCcsICcvb3JnYW5pemF0aW9ucy8nICsgaWQgKyAnL2JpbGxpbmcnLCBudWxsLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIG5ldyBCaWxsaW5nUmVzcG9uc2Uocik7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0T3JnYW5pemF0aW9uU3Vic2NyaXB0aW9uKGlkOiBzdHJpbmcpOiBQcm9taXNlPE9yZ2FuaXphdGlvblN1YnNjcmlwdGlvblJlc3BvbnNlPiB7XG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ0dFVCcsICcvb3JnYW5pemF0aW9ucy8nICsgaWQgKyAnL3N1YnNjcmlwdGlvbicsIG51bGwsIHRydWUsIHRydWUpO1xuICAgICAgICByZXR1cm4gbmV3IE9yZ2FuaXphdGlvblN1YnNjcmlwdGlvblJlc3BvbnNlKHIpO1xuICAgIH1cblxuICAgIGFzeW5jIGdldE9yZ2FuaXphdGlvbkxpY2Vuc2UoaWQ6IHN0cmluZywgaW5zdGFsbGF0aW9uSWQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoJ0dFVCcsICcvb3JnYW5pemF0aW9ucy8nICsgaWQgKyAnL2xpY2Vuc2U/aW5zdGFsbGF0aW9uSWQ9JyArIGluc3RhbGxhdGlvbklkLFxuICAgICAgICAgICAgbnVsbCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0T3JnYW5pemF0aW9uVGF4SW5mbyhpZDogc3RyaW5nKTogUHJvbWlzZTxUYXhJbmZvUmVzcG9uc2U+IHtcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnR0VUJywgJy9vcmdhbml6YXRpb25zLycgKyBpZCArICcvdGF4JywgbnVsbCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiBuZXcgVGF4SW5mb1Jlc3BvbnNlKHIpO1xuICAgIH1cblxuICAgIGFzeW5jIHBvc3RPcmdhbml6YXRpb24ocmVxdWVzdDogT3JnYW5pemF0aW9uQ3JlYXRlUmVxdWVzdCk6IFByb21pc2U8T3JnYW5pemF0aW9uUmVzcG9uc2U+IHtcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnUE9TVCcsICcvb3JnYW5pemF0aW9ucycsIHJlcXVlc3QsIHRydWUsIHRydWUpO1xuICAgICAgICByZXR1cm4gbmV3IE9yZ2FuaXphdGlvblJlc3BvbnNlKHIpO1xuICAgIH1cblxuICAgIGFzeW5jIHB1dE9yZ2FuaXphdGlvbihpZDogc3RyaW5nLCByZXF1ZXN0OiBPcmdhbml6YXRpb25VcGRhdGVSZXF1ZXN0KTogUHJvbWlzZTxPcmdhbml6YXRpb25SZXNwb25zZT4ge1xuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdQVVQnLCAnL29yZ2FuaXphdGlvbnMvJyArIGlkLCByZXF1ZXN0LCB0cnVlLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIG5ldyBPcmdhbml6YXRpb25SZXNwb25zZShyKTtcbiAgICB9XG5cbiAgICBhc3luYyBwdXRPcmdhbml6YXRpb25UYXhJbmZvKGlkOiBzdHJpbmcsIHJlcXVlc3Q6IE9yZ2FuaXphdGlvblRheEluZm9VcGRhdGVSZXF1ZXN0KTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZCgnUFVUJywgJy9vcmdhbml6YXRpb25zLycgKyBpZCArICcvdGF4JywgcmVxdWVzdCwgdHJ1ZSwgZmFsc2UpO1xuICAgIH1cblxuICAgIHBvc3RMZWF2ZU9yZ2FuaXphdGlvbihpZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZCgnUE9TVCcsICcvb3JnYW5pemF0aW9ucy8nICsgaWQgKyAnL2xlYXZlJywgbnVsbCwgdHJ1ZSwgZmFsc2UpO1xuICAgIH1cblxuICAgIGFzeW5jIHBvc3RPcmdhbml6YXRpb25MaWNlbnNlKGRhdGE6IEZvcm1EYXRhKTogUHJvbWlzZTxPcmdhbml6YXRpb25SZXNwb25zZT4ge1xuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdQT1NUJywgJy9vcmdhbml6YXRpb25zL2xpY2Vuc2UnLCBkYXRhLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIG5ldyBPcmdhbml6YXRpb25SZXNwb25zZShyKTtcbiAgICB9XG5cbiAgICBhc3luYyBwb3N0T3JnYW5pemF0aW9uTGljZW5zZVVwZGF0ZShpZDogc3RyaW5nLCBkYXRhOiBGb3JtRGF0YSk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoJ1BPU1QnLCAnL29yZ2FuaXphdGlvbnMvJyArIGlkICsgJy9saWNlbnNlJywgZGF0YSwgdHJ1ZSwgZmFsc2UpO1xuICAgIH1cblxuICAgIGFzeW5jIHBvc3RPcmdhbml6YXRpb25BcGlLZXkoaWQ6IHN0cmluZywgcmVxdWVzdDogUGFzc3dvcmRWZXJpZmljYXRpb25SZXF1ZXN0KTogUHJvbWlzZTxBcGlLZXlSZXNwb25zZT4ge1xuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdQT1NUJywgJy9vcmdhbml6YXRpb25zLycgKyBpZCArICcvYXBpLWtleScsIHJlcXVlc3QsIHRydWUsIHRydWUpO1xuICAgICAgICByZXR1cm4gbmV3IEFwaUtleVJlc3BvbnNlKHIpO1xuICAgIH1cblxuICAgIGFzeW5jIHBvc3RPcmdhbml6YXRpb25Sb3RhdGVBcGlLZXkoaWQ6IHN0cmluZywgcmVxdWVzdDogUGFzc3dvcmRWZXJpZmljYXRpb25SZXF1ZXN0KTogUHJvbWlzZTxBcGlLZXlSZXNwb25zZT4ge1xuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdQT1NUJywgJy9vcmdhbml6YXRpb25zLycgKyBpZCArICcvcm90YXRlLWFwaS1rZXknLCByZXF1ZXN0LCB0cnVlLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIG5ldyBBcGlLZXlSZXNwb25zZShyKTtcbiAgICB9XG5cbiAgICBhc3luYyBwb3N0T3JnYW5pemF0aW9uVXBncmFkZShpZDogc3RyaW5nLCByZXF1ZXN0OiBPcmdhbml6YXRpb25VcGdyYWRlUmVxdWVzdCk6IFByb21pc2U8UGF5bWVudFJlc3BvbnNlPiB7XG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ1BPU1QnLCAnL29yZ2FuaXphdGlvbnMvJyArIGlkICsgJy91cGdyYWRlJywgcmVxdWVzdCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiBuZXcgUGF5bWVudFJlc3BvbnNlKHIpO1xuICAgIH1cblxuICAgIGFzeW5jIHBvc3RPcmdhbml6YXRpb25TZWF0KGlkOiBzdHJpbmcsIHJlcXVlc3Q6IFNlYXRSZXF1ZXN0KTogUHJvbWlzZTxQYXltZW50UmVzcG9uc2U+IHtcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnUE9TVCcsICcvb3JnYW5pemF0aW9ucy8nICsgaWQgKyAnL3NlYXQnLCByZXF1ZXN0LCB0cnVlLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIG5ldyBQYXltZW50UmVzcG9uc2Uocik7XG4gICAgfVxuXG4gICAgYXN5bmMgcG9zdE9yZ2FuaXphdGlvblN0b3JhZ2UoaWQ6IHN0cmluZywgcmVxdWVzdDogU3RvcmFnZVJlcXVlc3QpOiBQcm9taXNlPFBheW1lbnRSZXNwb25zZT4ge1xuICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5zZW5kKCdQT1NUJywgJy9vcmdhbml6YXRpb25zLycgKyBpZCArICcvc3RvcmFnZScsIHJlcXVlc3QsIHRydWUsIHRydWUpO1xuICAgICAgICByZXR1cm4gbmV3IFBheW1lbnRSZXNwb25zZShyKTtcbiAgICB9XG5cbiAgICBwb3N0T3JnYW5pemF0aW9uUGF5bWVudChpZDogc3RyaW5nLCByZXF1ZXN0OiBQYXltZW50UmVxdWVzdCk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoJ1BPU1QnLCAnL29yZ2FuaXphdGlvbnMvJyArIGlkICsgJy9wYXltZW50JywgcmVxdWVzdCwgdHJ1ZSwgZmFsc2UpO1xuICAgIH1cblxuICAgIHBvc3RPcmdhbml6YXRpb25WZXJpZnlCYW5rKGlkOiBzdHJpbmcsIHJlcXVlc3Q6IFZlcmlmeUJhbmtSZXF1ZXN0KTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZCgnUE9TVCcsICcvb3JnYW5pemF0aW9ucy8nICsgaWQgKyAnL3ZlcmlmeS1iYW5rJywgcmVxdWVzdCwgdHJ1ZSwgZmFsc2UpO1xuICAgIH1cblxuICAgIHBvc3RPcmdhbml6YXRpb25DYW5jZWwoaWQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbmQoJ1BPU1QnLCAnL29yZ2FuaXphdGlvbnMvJyArIGlkICsgJy9jYW5jZWwnLCBudWxsLCB0cnVlLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgcG9zdE9yZ2FuaXphdGlvblJlaW5zdGF0ZShpZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZCgnUE9TVCcsICcvb3JnYW5pemF0aW9ucy8nICsgaWQgKyAnL3JlaW5zdGF0ZScsIG51bGwsIHRydWUsIGZhbHNlKTtcbiAgICB9XG5cbiAgICBkZWxldGVPcmdhbml6YXRpb24oaWQ6IHN0cmluZywgcmVxdWVzdDogUGFzc3dvcmRWZXJpZmljYXRpb25SZXF1ZXN0KTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VuZCgnREVMRVRFJywgJy9vcmdhbml6YXRpb25zLycgKyBpZCwgcmVxdWVzdCwgdHJ1ZSwgZmFsc2UpO1xuICAgIH1cblxuICAgIC8vIEV2ZW50IEFQSXNcblxuICAgIGFzeW5jIGdldEV2ZW50cyhzdGFydDogc3RyaW5nLCBlbmQ6IHN0cmluZywgdG9rZW46IHN0cmluZyk6IFByb21pc2U8TGlzdFJlc3BvbnNlPEV2ZW50UmVzcG9uc2U+PiB7XG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ0dFVCcsIHRoaXMuYWRkRXZlbnRQYXJhbWV0ZXJzKCcvZXZlbnRzJywgc3RhcnQsIGVuZCwgdG9rZW4pLCBudWxsLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIG5ldyBMaXN0UmVzcG9uc2UociwgRXZlbnRSZXNwb25zZSk7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0RXZlbnRzQ2lwaGVyKGlkOiBzdHJpbmcsIHN0YXJ0OiBzdHJpbmcsIGVuZDogc3RyaW5nLFxuICAgICAgICB0b2tlbjogc3RyaW5nKTogUHJvbWlzZTxMaXN0UmVzcG9uc2U8RXZlbnRSZXNwb25zZT4+IHtcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnR0VUJywgdGhpcy5hZGRFdmVudFBhcmFtZXRlcnMoJy9jaXBoZXJzLycgKyBpZCArICcvZXZlbnRzJywgc3RhcnQsIGVuZCwgdG9rZW4pLFxuICAgICAgICAgICAgbnVsbCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiBuZXcgTGlzdFJlc3BvbnNlKHIsIEV2ZW50UmVzcG9uc2UpO1xuICAgIH1cblxuICAgIGFzeW5jIGdldEV2ZW50c09yZ2FuaXphdGlvbihpZDogc3RyaW5nLCBzdGFydDogc3RyaW5nLCBlbmQ6IHN0cmluZyxcbiAgICAgICAgdG9rZW46IHN0cmluZyk6IFByb21pc2U8TGlzdFJlc3BvbnNlPEV2ZW50UmVzcG9uc2U+PiB7XG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ0dFVCcsIHRoaXMuYWRkRXZlbnRQYXJhbWV0ZXJzKCcvb3JnYW5pemF0aW9ucy8nICsgaWQgKyAnL2V2ZW50cycsIHN0YXJ0LCBlbmQsIHRva2VuKSxcbiAgICAgICAgICAgIG51bGwsIHRydWUsIHRydWUpO1xuICAgICAgICByZXR1cm4gbmV3IExpc3RSZXNwb25zZShyLCBFdmVudFJlc3BvbnNlKTtcbiAgICB9XG5cbiAgICBhc3luYyBnZXRFdmVudHNPcmdhbml6YXRpb25Vc2VyKG9yZ2FuaXphdGlvbklkOiBzdHJpbmcsIGlkOiBzdHJpbmcsXG4gICAgICAgIHN0YXJ0OiBzdHJpbmcsIGVuZDogc3RyaW5nLCB0b2tlbjogc3RyaW5nKTogUHJvbWlzZTxMaXN0UmVzcG9uc2U8RXZlbnRSZXNwb25zZT4+IHtcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnR0VUJyxcbiAgICAgICAgICAgIHRoaXMuYWRkRXZlbnRQYXJhbWV0ZXJzKCcvb3JnYW5pemF0aW9ucy8nICsgb3JnYW5pemF0aW9uSWQgKyAnL3VzZXJzLycgKyBpZCArICcvZXZlbnRzJywgc3RhcnQsIGVuZCwgdG9rZW4pLFxuICAgICAgICAgICAgbnVsbCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiBuZXcgTGlzdFJlc3BvbnNlKHIsIEV2ZW50UmVzcG9uc2UpO1xuICAgIH1cblxuICAgIGFzeW5jIHBvc3RFdmVudHNDb2xsZWN0KHJlcXVlc3Q6IEV2ZW50UmVxdWVzdFtdKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgY29uc3QgYXV0aEhlYWRlciA9IGF3YWl0IHRoaXMuZ2V0QWN0aXZlQmVhcmVyVG9rZW4oKTtcbiAgICAgICAgY29uc3QgaGVhZGVycyA9IG5ldyBIZWFkZXJzKHtcbiAgICAgICAgICAgICdEZXZpY2UtVHlwZSc6IHRoaXMuZGV2aWNlVHlwZSxcbiAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzogJ0JlYXJlciAnICsgYXV0aEhlYWRlcixcbiAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOCcsXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAodGhpcy5jdXN0b21Vc2VyQWdlbnQgIT0gbnVsbCkge1xuICAgICAgICAgICAgaGVhZGVycy5zZXQoJ1VzZXItQWdlbnQnLCB0aGlzLmN1c3RvbVVzZXJBZ2VudCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmZldGNoKG5ldyBSZXF1ZXN0KHRoaXMuZXZlbnRzQmFzZVVybCArICcvY29sbGVjdCcsIHtcbiAgICAgICAgICAgIGNhY2hlOiAnbm8tc3RvcmUnLFxuICAgICAgICAgICAgY3JlZGVudGlhbHM6IHRoaXMuZ2V0Q3JlZGVudGlhbHMoKSxcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkocmVxdWVzdCksXG4gICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgICB9KSk7XG4gICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgIT09IDIwMCkge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KCdFdmVudCBwb3N0IGZhaWxlZC4nKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFVzZXIgQVBJc1xuXG4gICAgYXN5bmMgZ2V0VXNlclB1YmxpY0tleShpZDogc3RyaW5nKTogUHJvbWlzZTxVc2VyS2V5UmVzcG9uc2U+IHtcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnR0VUJywgJy91c2Vycy8nICsgaWQgKyAnL3B1YmxpYy1rZXknLCBudWxsLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIG5ldyBVc2VyS2V5UmVzcG9uc2Uocik7XG4gICAgfVxuXG4gICAgLy8gSElCUCBBUElzXG5cbiAgICBhc3luYyBnZXRIaWJwQnJlYWNoKHVzZXJuYW1lOiBzdHJpbmcpOiBQcm9taXNlPEJyZWFjaEFjY291bnRSZXNwb25zZVtdPiB7XG4gICAgICAgIGNvbnN0IHIgPSBhd2FpdCB0aGlzLnNlbmQoJ0dFVCcsICcvaGlicC9icmVhY2g/dXNlcm5hbWU9JyArIHVzZXJuYW1lLCBudWxsLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIHIubWFwKChhOiBhbnkpID0+IG5ldyBCcmVhY2hBY2NvdW50UmVzcG9uc2UoYSkpO1xuICAgIH1cblxuICAgIC8vIE1pc2NcblxuICAgIGFzeW5jIHBvc3RCaXRQYXlJbnZvaWNlKHJlcXVlc3Q6IEJpdFBheUludm9pY2VSZXF1ZXN0KTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnUE9TVCcsICcvYml0cGF5LWludm9pY2UnLCByZXF1ZXN0LCB0cnVlLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIHIgYXMgc3RyaW5nO1xuICAgIH1cblxuICAgIGFzeW5jIHBvc3RTZXR1cFBheW1lbnQoKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMuc2VuZCgnUE9TVCcsICcvc2V0dXAtcGF5bWVudCcsIG51bGwsIHRydWUsIHRydWUpO1xuICAgICAgICByZXR1cm4gciBhcyBzdHJpbmc7XG4gICAgfVxuXG4gICAgLy8gSGVscGVyc1xuXG4gICAgYXN5bmMgZ2V0QWN0aXZlQmVhcmVyVG9rZW4oKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgbGV0IGFjY2Vzc1Rva2VuID0gYXdhaXQgdGhpcy50b2tlblNlcnZpY2UuZ2V0VG9rZW4oKTtcbiAgICAgICAgaWYgKHRoaXMudG9rZW5TZXJ2aWNlLnRva2VuTmVlZHNSZWZyZXNoKCkpIHtcbiAgICAgICAgICAgIGNvbnN0IHRva2VuUmVzcG9uc2UgPSBhd2FpdCB0aGlzLmRvUmVmcmVzaFRva2VuKCk7XG4gICAgICAgICAgICBhY2Nlc3NUb2tlbiA9IHRva2VuUmVzcG9uc2UuYWNjZXNzVG9rZW47XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFjY2Vzc1Rva2VuO1xuICAgIH1cblxuICAgIGZldGNoKHJlcXVlc3Q6IFJlcXVlc3QpOiBQcm9taXNlPFJlc3BvbnNlPiB7XG4gICAgICAgIGlmIChyZXF1ZXN0Lm1ldGhvZCA9PT0gJ0dFVCcpIHtcbiAgICAgICAgICAgIHJlcXVlc3QuaGVhZGVycy5zZXQoJ0NhY2hlLUNvbnRyb2wnLCAnbm8tc3RvcmUnKTtcbiAgICAgICAgICAgIHJlcXVlc3QuaGVhZGVycy5zZXQoJ1ByYWdtYScsICduby1jYWNoZScpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLm5hdGl2ZUZldGNoKHJlcXVlc3QpO1xuICAgIH1cblxuICAgIG5hdGl2ZUZldGNoKHJlcXVlc3Q6IFJlcXVlc3QpOiBQcm9taXNlPFJlc3BvbnNlPiB7XG4gICAgICAgIHJldHVybiBmZXRjaChyZXF1ZXN0KTtcbiAgICB9XG5cbiAgICBhc3luYyBwcmVWYWxpZGF0ZVNzbyhpZGVudGlmaWVyOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgICAgaWYgKGlkZW50aWZpZXIgPT0gbnVsbCB8fCBpZGVudGlmaWVyID09PSAnJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdPcmdhbml6YXRpb24gSWRlbnRpZmllciB3YXMgbm90IHByb3ZpZGVkLicpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGhlYWRlcnMgPSBuZXcgSGVhZGVycyh7XG4gICAgICAgICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgJ0RldmljZS1UeXBlJzogdGhpcy5kZXZpY2VUeXBlLFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHRoaXMuY3VzdG9tVXNlckFnZW50ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGhlYWRlcnMuc2V0KCdVc2VyLUFnZW50JywgdGhpcy5jdXN0b21Vc2VyQWdlbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcGF0aCA9IGAvYWNjb3VudC9wcmV2YWxpZGF0ZT9kb21haW5IaW50PSR7ZW5jb2RlVVJJQ29tcG9uZW50KGlkZW50aWZpZXIpfWA7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5mZXRjaChuZXcgUmVxdWVzdCh0aGlzLmlkZW50aXR5QmFzZVVybCArIHBhdGgsIHtcbiAgICAgICAgICAgIGNhY2hlOiAnbm8tc3RvcmUnLFxuICAgICAgICAgICAgY3JlZGVudGlhbHM6IHRoaXMuZ2V0Q3JlZGVudGlhbHMoKSxcbiAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICB9KSk7XG5cbiAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGVycm9yID0gYXdhaXQgdGhpcy5oYW5kbGVFcnJvcihyZXNwb25zZSwgZmFsc2UsIHRydWUpO1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgc2VuZChtZXRob2Q6ICdHRVQnIHwgJ1BPU1QnIHwgJ1BVVCcgfCAnREVMRVRFJywgcGF0aDogc3RyaW5nLCBib2R5OiBhbnksXG4gICAgICAgIGF1dGhlZDogYm9vbGVhbiwgaGFzUmVzcG9uc2U6IGJvb2xlYW4pOiBQcm9taXNlPGFueT4ge1xuICAgICAgICBjb25zdCBoZWFkZXJzID0gbmV3IEhlYWRlcnMoe1xuICAgICAgICAgICAgJ0RldmljZS1UeXBlJzogdGhpcy5kZXZpY2VUeXBlLFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHRoaXMuY3VzdG9tVXNlckFnZW50ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGhlYWRlcnMuc2V0KCdVc2VyLUFnZW50JywgdGhpcy5jdXN0b21Vc2VyQWdlbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcmVxdWVzdEluaXQ6IFJlcXVlc3RJbml0ID0ge1xuICAgICAgICAgICAgY2FjaGU6ICduby1zdG9yZScsXG4gICAgICAgICAgICBjcmVkZW50aWFsczogdGhpcy5nZXRDcmVkZW50aWFscygpLFxuICAgICAgICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKGF1dGhlZCkge1xuICAgICAgICAgICAgY29uc3QgYXV0aEhlYWRlciA9IGF3YWl0IHRoaXMuZ2V0QWN0aXZlQmVhcmVyVG9rZW4oKTtcbiAgICAgICAgICAgIGhlYWRlcnMuc2V0KCdBdXRob3JpemF0aW9uJywgJ0JlYXJlciAnICsgYXV0aEhlYWRlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJvZHkgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBib2R5ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHJlcXVlc3RJbml0LmJvZHkgPSBib2R5O1xuICAgICAgICAgICAgICAgIGhlYWRlcnMuc2V0KCdDb250ZW50LVR5cGUnLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PXV0Zi04Jyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBib2R5ID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgIGlmIChib2R5IGluc3RhbmNlb2YgRm9ybURhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdEluaXQuYm9keSA9IGJvZHk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVycy5zZXQoJ0NvbnRlbnQtVHlwZScsICdhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04Jyk7XG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RJbml0LmJvZHkgPSBKU09OLnN0cmluZ2lmeShib2R5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhhc1Jlc3BvbnNlKSB7XG4gICAgICAgICAgICBoZWFkZXJzLnNldCgnQWNjZXB0JywgJ2FwcGxpY2F0aW9uL2pzb24nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlcXVlc3RJbml0LmhlYWRlcnMgPSBoZWFkZXJzO1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuZmV0Y2gobmV3IFJlcXVlc3QodGhpcy5hcGlCYXNlVXJsICsgcGF0aCwgcmVxdWVzdEluaXQpKTtcblxuICAgICAgICBpZiAoaGFzUmVzcG9uc2UgJiYgcmVzcG9uc2Uuc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlSnNvbiA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZUpzb247XG4gICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2Uuc3RhdHVzICE9PSAyMDApIHtcbiAgICAgICAgICAgIGNvbnN0IGVycm9yID0gYXdhaXQgdGhpcy5oYW5kbGVFcnJvcihyZXNwb25zZSwgZmFsc2UsIGF1dGhlZCk7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBoYW5kbGVFcnJvcihyZXNwb25zZTogUmVzcG9uc2UsIHRva2VuRXJyb3I6IGJvb2xlYW4sIGF1dGhlZDogYm9vbGVhbik6IFByb21pc2U8RXJyb3JSZXNwb25zZT4ge1xuICAgICAgICBpZiAoYXV0aGVkICYmICgodG9rZW5FcnJvciAmJiByZXNwb25zZS5zdGF0dXMgPT09IDQwMCkgfHwgcmVzcG9uc2Uuc3RhdHVzID09PSA0MDEgfHwgcmVzcG9uc2Uuc3RhdHVzID09PSA0MDMpKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmxvZ291dENhbGxiYWNrKHRydWUpO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcmVzcG9uc2VKc29uOiBhbnkgPSBudWxsO1xuICAgICAgICBpZiAodGhpcy5pc0pzb25SZXNwb25zZShyZXNwb25zZSkpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlSnNvbiA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXcgRXJyb3JSZXNwb25zZShyZXNwb25zZUpzb24sIHJlc3BvbnNlLnN0YXR1cywgdG9rZW5FcnJvcik7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBkb1JlZnJlc2hUb2tlbigpOiBQcm9taXNlPElkZW50aXR5VG9rZW5SZXNwb25zZT4ge1xuICAgICAgICBjb25zdCByZWZyZXNoVG9rZW4gPSBhd2FpdCB0aGlzLnRva2VuU2VydmljZS5nZXRSZWZyZXNoVG9rZW4oKTtcbiAgICAgICAgaWYgKHJlZnJlc2hUb2tlbiA9PSBudWxsIHx8IHJlZnJlc2hUb2tlbiA9PT0gJycpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGhlYWRlcnMgPSBuZXcgSGVhZGVycyh7XG4gICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD11dGYtOCcsXG4gICAgICAgICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgJ0RldmljZS1UeXBlJzogdGhpcy5kZXZpY2VUeXBlLFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHRoaXMuY3VzdG9tVXNlckFnZW50ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGhlYWRlcnMuc2V0KCdVc2VyLUFnZW50JywgdGhpcy5jdXN0b21Vc2VyQWdlbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZGVjb2RlZFRva2VuID0gdGhpcy50b2tlblNlcnZpY2UuZGVjb2RlVG9rZW4oKTtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmZldGNoKG5ldyBSZXF1ZXN0KHRoaXMuaWRlbnRpdHlCYXNlVXJsICsgJy9jb25uZWN0L3Rva2VuJywge1xuICAgICAgICAgICAgYm9keTogdGhpcy5xc1N0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgZ3JhbnRfdHlwZTogJ3JlZnJlc2hfdG9rZW4nLFxuICAgICAgICAgICAgICAgIGNsaWVudF9pZDogZGVjb2RlZFRva2VuLmNsaWVudF9pZCxcbiAgICAgICAgICAgICAgICByZWZyZXNoX3Rva2VuOiByZWZyZXNoVG9rZW4sXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGNhY2hlOiAnbm8tc3RvcmUnLFxuICAgICAgICAgICAgY3JlZGVudGlhbHM6IHRoaXMuZ2V0Q3JlZGVudGlhbHMoKSxcbiAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgfSkpO1xuXG4gICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2VKc29uID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgICAgICAgY29uc3QgdG9rZW5SZXNwb25zZSA9IG5ldyBJZGVudGl0eVRva2VuUmVzcG9uc2UocmVzcG9uc2VKc29uKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMudG9rZW5TZXJ2aWNlLnNldFRva2Vucyh0b2tlblJlc3BvbnNlLmFjY2Vzc1Rva2VuLCB0b2tlblJlc3BvbnNlLnJlZnJlc2hUb2tlbik7XG4gICAgICAgICAgICByZXR1cm4gdG9rZW5SZXNwb25zZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGVycm9yID0gYXdhaXQgdGhpcy5oYW5kbGVFcnJvcihyZXNwb25zZSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBxc1N0cmluZ2lmeShwYXJhbXM6IGFueSk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhwYXJhbXMpLm1hcCgoa2V5KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KGtleSkgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQocGFyYW1zW2tleV0pO1xuICAgICAgICB9KS5qb2luKCcmJyk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRDcmVkZW50aWFscygpOiBSZXF1ZXN0Q3JlZGVudGlhbHMge1xuICAgICAgICBpZiAodGhpcy5kZXZpY2UgIT09IERldmljZVR5cGUuU2FmYXJpRXh0ZW5zaW9uICYmICghdGhpcy5pc1dlYkNsaWVudCB8fCB0aGlzLnVzaW5nQmFzZVVybCkpIHtcbiAgICAgICAgICAgIHJldHVybiAnaW5jbHVkZSc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFkZEV2ZW50UGFyYW1ldGVycyhiYXNlOiBzdHJpbmcsIHN0YXJ0OiBzdHJpbmcsIGVuZDogc3RyaW5nLCB0b2tlbjogc3RyaW5nKSB7XG4gICAgICAgIGlmIChzdGFydCAhPSBudWxsKSB7XG4gICAgICAgICAgICBiYXNlICs9ICgnP3N0YXJ0PScgKyBzdGFydCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVuZCAhPSBudWxsKSB7XG4gICAgICAgICAgICBiYXNlICs9IChiYXNlLmluZGV4T2YoJz8nKSA+IC0xID8gJyYnIDogJz8nKTtcbiAgICAgICAgICAgIGJhc2UgKz0gKCdlbmQ9JyArIGVuZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRva2VuICE9IG51bGwpIHtcbiAgICAgICAgICAgIGJhc2UgKz0gKGJhc2UuaW5kZXhPZignPycpID4gLTEgPyAnJicgOiAnPycpO1xuICAgICAgICAgICAgYmFzZSArPSAoJ2NvbnRpbnVhdGlvblRva2VuPScgKyB0b2tlbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJhc2U7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpc0pzb25SZXNwb25zZShyZXNwb25zZTogUmVzcG9uc2UpOiBib29sZWFuIHtcbiAgICAgICAgY29uc3QgdHlwZUhlYWRlciA9IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KCdjb250ZW50LXR5cGUnKTtcbiAgICAgICAgcmV0dXJuIHR5cGVIZWFkZXIgIT0gbnVsbCAmJiB0eXBlSGVhZGVyLmluZGV4T2YoJ2FwcGxpY2F0aW9uL2pzb24nKSA+IC0xO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IFV0aWxzIH0gZnJvbSAnLi4vbWlzYy91dGlscyc7XG5cbmltcG9ydCB7IEFwcElkU2VydmljZSBhcyBBcHBJZFNlcnZpY2VBYnN0cmFjdGlvbiB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9hcHBJZC5zZXJ2aWNlJztcbmltcG9ydCB7IFN0b3JhZ2VTZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL3N0b3JhZ2Uuc2VydmljZSc7XG5cbmV4cG9ydCBjbGFzcyBBcHBJZFNlcnZpY2UgaW1wbGVtZW50cyBBcHBJZFNlcnZpY2VBYnN0cmFjdGlvbiB7XG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBzdG9yYWdlU2VydmljZTogU3RvcmFnZVNlcnZpY2UpIHtcbiAgICB9XG5cbiAgICBnZXRBcHBJZCgpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgICAgICByZXR1cm4gdGhpcy5tYWtlQW5kR2V0QXBwSWQoJ2FwcElkJyk7XG4gICAgfVxuXG4gICAgZ2V0QW5vbnltb3VzQXBwSWQoKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWFrZUFuZEdldEFwcElkKCdhbm9ueW1vdXNBcHBJZCcpO1xuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgbWFrZUFuZEdldEFwcElkKGtleTogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IGV4aXN0aW5nSWQgPSBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldDxzdHJpbmc+KGtleSk7XG4gICAgICAgIGlmIChleGlzdGluZ0lkICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBleGlzdGluZ0lkO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZ3VpZCA9IFV0aWxzLm5ld0d1aWQoKTtcbiAgICAgICAgYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5zYXZlKGtleSwgZ3VpZCk7XG4gICAgICAgIHJldHVybiBndWlkO1xuICAgIH1cbn1cbiIsIi8qKlxuICogVXNlIGFzIGEgRGVjb3JhdG9yIG9uIGFzeW5jIGZ1bmN0aW9ucywgaXQgd2lsbCBsaW1pdCBob3cgbWFueSB0aW1lcyB0aGUgZnVuY3Rpb24gY2FuIGJlXG4gKiBpbi1mbGlnaHQgYXQgYSB0aW1lLlxuICpcbiAqIENhbGxzIGJleW9uZCB0aGUgbGltaXQgd2lsbCBiZSBxdWV1ZWQsIGFuZCBydW4gd2hlbiBvbmUgb2YgdGhlIGFjdGl2ZSBjYWxscyBmaW5pc2hlc1xuICovXG5leHBvcnQgZnVuY3Rpb24gdGhyb3R0bGUobGltaXQ6IG51bWJlciwgdGhyb3R0bGVLZXk6IChhcmdzOiBhbnlbXSkgPT4gc3RyaW5nKSB7XG4gICAgcmV0dXJuIDxUPih0YXJnZXQ6IGFueSwgcHJvcGVydHlLZXk6IHN0cmluZyB8IHN5bWJvbCxcbiAgICAgICAgZGVzY3JpcHRvcjogVHlwZWRQcm9wZXJ0eURlc2NyaXB0b3I8KC4uLmFyZ3M6IGFueVtdKSA9PiBQcm9taXNlPFQ+PikgPT4ge1xuICAgICAgICBjb25zdCBvcmlnaW5hbE1ldGhvZDogKCkgPT4gUHJvbWlzZTxUPiA9IGRlc2NyaXB0b3IudmFsdWU7XG4gICAgICAgIGNvbnN0IGFsbFRocm90dGxlcyA9IG5ldyBNYXA8YW55LCBNYXA8c3RyaW5nLCAoKCkgPT4gdm9pZClbXT4+KCk7XG5cbiAgICAgICAgY29uc3QgZ2V0VGhyb3R0bGVzID0gKG9iajogYW55KSA9PiB7XG4gICAgICAgICAgICBsZXQgdGhyb3R0bGVzID0gYWxsVGhyb3R0bGVzLmdldChvYmopO1xuICAgICAgICAgICAgaWYgKHRocm90dGxlcyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRocm90dGxlcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm90dGxlcyA9IG5ldyBNYXA8c3RyaW5nLCAoKCkgPT4gdm9pZClbXT4oKTtcbiAgICAgICAgICAgIGFsbFRocm90dGxlcy5zZXQob2JqLCB0aHJvdHRsZXMpO1xuICAgICAgICAgICAgcmV0dXJuIHRocm90dGxlcztcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uKC4uLmFyZ3M6IGFueVtdKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdGhyb3R0bGVzID0gZ2V0VGhyb3R0bGVzKHRoaXMpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGFyZ3NUaHJvdHRsZUtleSA9IHRocm90dGxlS2V5KGFyZ3MpO1xuICAgICAgICAgICAgICAgIGxldCBxdWV1ZSA9IHRocm90dGxlcy5nZXQoYXJnc1Rocm90dGxlS2V5KTtcbiAgICAgICAgICAgICAgICBpZiAocXVldWUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICB0aHJvdHRsZXMuc2V0KGFyZ3NUaHJvdHRsZUtleSwgcXVldWUpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTxUPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGV4ZWMgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvbkZpbmFsbHkgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVldWUuc3BsaWNlKHF1ZXVlLmluZGV4T2YoZXhlYyksIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChxdWV1ZS5sZW5ndGggPj0gbGltaXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVldWVbbGltaXQgLSAxXSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocXVldWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm90dGxlcy5kZWxldGUoYXJnc1Rocm90dGxlS2V5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRocm90dGxlcy5zaXplID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGxUaHJvdHRsZXMuZGVsZXRlKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsTWV0aG9kLmFwcGx5KHRoaXMsIGFyZ3MpLnRoZW4oKHZhbDogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25GaW5hbGx5KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLmNhdGNoKChlcnI6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uRmluYWxseSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgcXVldWUucHVzaChleGVjKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHF1ZXVlLmxlbmd0aCA8PSBsaW1pdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXhlYygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH07XG59XG4iLCJpbXBvcnQgeyBBcGlTZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL2FwaS5zZXJ2aWNlJztcbmltcG9ydCB7IEF1ZGl0U2VydmljZSBhcyBBdWRpdFNlcnZpY2VBYnN0cmFjdGlvbiB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9hdWRpdC5zZXJ2aWNlJztcbmltcG9ydCB7IENyeXB0b0Z1bmN0aW9uU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9jcnlwdG9GdW5jdGlvbi5zZXJ2aWNlJztcblxuaW1wb3J0IHsgdGhyb3R0bGUgfSBmcm9tICcuLi9taXNjL3Rocm90dGxlJztcbmltcG9ydCB7IFV0aWxzIH0gZnJvbSAnLi4vbWlzYy91dGlscyc7XG5cbmltcG9ydCB7IEJyZWFjaEFjY291bnRSZXNwb25zZSB9IGZyb20gJy4uL21vZGVscy9yZXNwb25zZS9icmVhY2hBY2NvdW50UmVzcG9uc2UnO1xuaW1wb3J0IHsgRXJyb3JSZXNwb25zZSB9IGZyb20gJy4uL21vZGVscy9yZXNwb25zZS9lcnJvclJlc3BvbnNlJztcblxuY29uc3QgUHduZWRQYXNzd29yZHNBcGkgPSAnaHR0cHM6Ly9hcGkucHduZWRwYXNzd29yZHMuY29tL3JhbmdlLyc7XG5cbmV4cG9ydCBjbGFzcyBBdWRpdFNlcnZpY2UgaW1wbGVtZW50cyBBdWRpdFNlcnZpY2VBYnN0cmFjdGlvbiB7XG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBjcnlwdG9GdW5jdGlvblNlcnZpY2U6IENyeXB0b0Z1bmN0aW9uU2VydmljZSwgcHJpdmF0ZSBhcGlTZXJ2aWNlOiBBcGlTZXJ2aWNlKSB7IH1cblxuICAgIEB0aHJvdHRsZSgxMDAsICgpID0+ICdwYXNzd29yZExlYWtlZCcpXG4gICAgYXN5bmMgcGFzc3dvcmRMZWFrZWQocGFzc3dvcmQ6IHN0cmluZyk6IFByb21pc2U8bnVtYmVyPiB7XG4gICAgICAgIGNvbnN0IGhhc2hCeXRlcyA9IGF3YWl0IHRoaXMuY3J5cHRvRnVuY3Rpb25TZXJ2aWNlLmhhc2gocGFzc3dvcmQsICdzaGExJyk7XG4gICAgICAgIGNvbnN0IGhhc2ggPSBVdGlscy5mcm9tQnVmZmVyVG9IZXgoaGFzaEJ5dGVzKS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICBjb25zdCBoYXNoU3RhcnQgPSBoYXNoLnN1YnN0cigwLCA1KTtcbiAgICAgICAgY29uc3QgaGFzaEVuZGluZyA9IGhhc2guc3Vic3RyKDUpO1xuXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5hcGlTZXJ2aWNlLm5hdGl2ZUZldGNoKG5ldyBSZXF1ZXN0KFB3bmVkUGFzc3dvcmRzQXBpICsgaGFzaFN0YXJ0KSk7XG4gICAgICAgIGNvbnN0IGxlYWtlZEhhc2hlcyA9IGF3YWl0IHJlc3BvbnNlLnRleHQoKTtcbiAgICAgICAgY29uc3QgbWF0Y2ggPSBsZWFrZWRIYXNoZXMuc3BsaXQoL1xccj9cXG4vKS5maW5kKCh2KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdi5zcGxpdCgnOicpWzBdID09PSBoYXNoRW5kaW5nO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gbWF0Y2ggIT0gbnVsbCA/IHBhcnNlSW50KG1hdGNoLnNwbGl0KCc6JylbMV0sIDEwKSA6IDA7XG4gICAgfVxuXG4gICAgYXN5bmMgYnJlYWNoZWRBY2NvdW50cyh1c2VybmFtZTogc3RyaW5nKTogUHJvbWlzZTxCcmVhY2hBY2NvdW50UmVzcG9uc2VbXT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuYXBpU2VydmljZS5nZXRIaWJwQnJlYWNoKHVzZXJuYW1lKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBlIGFzIEVycm9yUmVzcG9uc2U7XG4gICAgICAgICAgICBpZiAoZXJyb3Iuc3RhdHVzQ29kZSA9PT0gNDA0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQgeyBDb2xsZWN0aW9uRGV0YWlsc1Jlc3BvbnNlIH0gZnJvbSAnLi4vcmVzcG9uc2UvY29sbGVjdGlvblJlc3BvbnNlJztcblxuZXhwb3J0IGNsYXNzIENvbGxlY3Rpb25EYXRhIHtcbiAgICBpZDogc3RyaW5nO1xuICAgIG9yZ2FuaXphdGlvbklkOiBzdHJpbmc7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIGV4dGVybmFsSWQ6IHN0cmluZztcbiAgICByZWFkT25seTogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKHJlc3BvbnNlOiBDb2xsZWN0aW9uRGV0YWlsc1Jlc3BvbnNlKSB7XG4gICAgICAgIHRoaXMuaWQgPSByZXNwb25zZS5pZDtcbiAgICAgICAgdGhpcy5vcmdhbml6YXRpb25JZCA9IHJlc3BvbnNlLm9yZ2FuaXphdGlvbklkO1xuICAgICAgICB0aGlzLm5hbWUgPSByZXNwb25zZS5uYW1lO1xuICAgICAgICB0aGlzLmV4dGVybmFsSWQgPSByZXNwb25zZS5leHRlcm5hbElkO1xuICAgICAgICB0aGlzLnJlYWRPbmx5ID0gcmVzcG9uc2UucmVhZE9ubHk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgVmlldyB9IGZyb20gJy4vdmlldyc7XG5cbmltcG9ydCB7IENvbGxlY3Rpb24gfSBmcm9tICcuLi9kb21haW4vY29sbGVjdGlvbic7XG5pbXBvcnQgeyBJVHJlZU5vZGVPYmplY3QgfSBmcm9tICcuLi9kb21haW4vdHJlZU5vZGUnO1xuXG5pbXBvcnQgeyBDb2xsZWN0aW9uR3JvdXBEZXRhaWxzUmVzcG9uc2UgfSBmcm9tICcuLi9yZXNwb25zZS9jb2xsZWN0aW9uUmVzcG9uc2UnO1xuXG5leHBvcnQgY2xhc3MgQ29sbGVjdGlvblZpZXcgaW1wbGVtZW50cyBWaWV3LCBJVHJlZU5vZGVPYmplY3Qge1xuICAgIGlkOiBzdHJpbmcgPSBudWxsO1xuICAgIG9yZ2FuaXphdGlvbklkOiBzdHJpbmcgPSBudWxsO1xuICAgIG5hbWU6IHN0cmluZyA9IG51bGw7XG4gICAgZXh0ZXJuYWxJZDogc3RyaW5nID0gbnVsbDtcbiAgICByZWFkT25seTogYm9vbGVhbiA9IG51bGw7XG4gICAgaGlkZVBhc3N3b3JkczogYm9vbGVhbiA9IG51bGw7XG5cbiAgICBjb25zdHJ1Y3RvcihjPzogQ29sbGVjdGlvbiB8IENvbGxlY3Rpb25Hcm91cERldGFpbHNSZXNwb25zZSkge1xuICAgICAgICBpZiAoIWMpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuaWQgPSBjLmlkO1xuICAgICAgICB0aGlzLm9yZ2FuaXphdGlvbklkID0gYy5vcmdhbml6YXRpb25JZDtcbiAgICAgICAgdGhpcy5leHRlcm5hbElkID0gYy5leHRlcm5hbElkO1xuICAgICAgICBpZiAoYyBpbnN0YW5jZW9mIENvbGxlY3Rpb24pIHtcbiAgICAgICAgICAgIHRoaXMucmVhZE9ubHkgPSBjLnJlYWRPbmx5O1xuICAgICAgICAgICAgdGhpcy5oaWRlUGFzc3dvcmRzID0gYy5oaWRlUGFzc3dvcmRzO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQ29sbGVjdGlvbkRhdGEgfSBmcm9tICcuLi9kYXRhL2NvbGxlY3Rpb25EYXRhJztcblxuaW1wb3J0IHsgQ29sbGVjdGlvblZpZXcgfSBmcm9tICcuLi92aWV3L2NvbGxlY3Rpb25WaWV3JztcblxuaW1wb3J0IHsgQ2lwaGVyU3RyaW5nIH0gZnJvbSAnLi9jaXBoZXJTdHJpbmcnO1xuaW1wb3J0IERvbWFpbiBmcm9tICcuL2RvbWFpbkJhc2UnO1xuXG5leHBvcnQgY2xhc3MgQ29sbGVjdGlvbiBleHRlbmRzIERvbWFpbiB7XG4gICAgaWQ6IHN0cmluZztcbiAgICBvcmdhbml6YXRpb25JZDogc3RyaW5nO1xuICAgIG5hbWU6IENpcGhlclN0cmluZztcbiAgICBleHRlcm5hbElkOiBzdHJpbmc7XG4gICAgcmVhZE9ubHk6IGJvb2xlYW47XG4gICAgaGlkZVBhc3N3b3JkczogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKG9iaj86IENvbGxlY3Rpb25EYXRhLCBhbHJlYWR5RW5jcnlwdGVkOiBib29sZWFuID0gZmFsc2UpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgaWYgKG9iaiA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmJ1aWxkRG9tYWluTW9kZWwodGhpcywgb2JqLCB7XG4gICAgICAgICAgICBpZDogbnVsbCxcbiAgICAgICAgICAgIG9yZ2FuaXphdGlvbklkOiBudWxsLFxuICAgICAgICAgICAgbmFtZTogbnVsbCxcbiAgICAgICAgICAgIGV4dGVybmFsSWQ6IG51bGwsXG4gICAgICAgICAgICByZWFkT25seTogbnVsbCxcbiAgICAgICAgICAgIGhpZGVQYXNzd29yZHM6IG51bGwsXG4gICAgICAgIH0sIGFscmVhZHlFbmNyeXB0ZWQsIFsnaWQnLCAnb3JnYW5pemF0aW9uSWQnLCAnZXh0ZXJuYWxJZCcsICdyZWFkT25seScsICdoaWRlUGFzc3dvcmRzJ10pO1xuICAgIH1cblxuICAgIGRlY3J5cHQoKTogUHJvbWlzZTxDb2xsZWN0aW9uVmlldz4ge1xuICAgICAgICByZXR1cm4gdGhpcy5kZWNyeXB0T2JqKG5ldyBDb2xsZWN0aW9uVmlldyh0aGlzKSwge1xuICAgICAgICAgICAgbmFtZTogbnVsbCxcbiAgICAgICAgfSwgdGhpcy5vcmdhbml6YXRpb25JZCk7XG4gICAgfVxufVxuIiwiZXhwb3J0IGNsYXNzIFRyZWVOb2RlPFQgZXh0ZW5kcyBJVHJlZU5vZGVPYmplY3Q+IHtcbiAgICBwYXJlbnQ6IFQ7XG4gICAgbm9kZTogVDtcbiAgICBjaGlsZHJlbjogVHJlZU5vZGU8VD5bXSA9IFtdO1xuXG4gICAgY29uc3RydWN0b3Iobm9kZTogVCwgbmFtZTogc3RyaW5nLCBwYXJlbnQ6IFQpIHtcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICAgIHRoaXMubm9kZSA9IG5vZGU7XG4gICAgICAgIHRoaXMubm9kZS5uYW1lID0gbmFtZTtcbiAgICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVRyZWVOb2RlT2JqZWN0IHtcbiAgICBpZDogc3RyaW5nO1xuICAgIG5hbWU6IHN0cmluZztcbn1cbiIsImltcG9ydCB7XG4gICAgSVRyZWVOb2RlT2JqZWN0LFxuICAgIFRyZWVOb2RlLFxufSBmcm9tICcuLi9tb2RlbHMvZG9tYWluL3RyZWVOb2RlJztcblxuZXhwb3J0IGNsYXNzIFNlcnZpY2VVdGlscyB7XG4gICAgc3RhdGljIG5lc3RlZFRyYXZlcnNlKG5vZGVUcmVlOiBUcmVlTm9kZTxJVHJlZU5vZGVPYmplY3Q+W10sIHBhcnRJbmRleDogbnVtYmVyLCBwYXJ0czogc3RyaW5nW10sXG4gICAgICAgIG9iajogSVRyZWVOb2RlT2JqZWN0LCBwYXJlbnQ6IElUcmVlTm9kZU9iamVjdCwgZGVsaW1pdGVyOiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKHBhcnRzLmxlbmd0aCA8PSBwYXJ0SW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGVuZCA9IHBhcnRJbmRleCA9PT0gcGFydHMubGVuZ3RoIC0gMTtcbiAgICAgICAgY29uc3QgcGFydE5hbWUgPSBwYXJ0c1twYXJ0SW5kZXhdO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZVRyZWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChub2RlVHJlZVtpXS5ub2RlLm5hbWUgIT09IHBhcnRzW3BhcnRJbmRleF0pIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlbmQgJiYgbm9kZVRyZWVbaV0ubm9kZS5pZCAhPT0gb2JqLmlkKSB7XG4gICAgICAgICAgICAgICAgLy8gQW5vdGhlciBub2RlIHdpdGggdGhlIHNhbWUgbmFtZS5cbiAgICAgICAgICAgICAgICBub2RlVHJlZS5wdXNoKG5ldyBUcmVlTm9kZShvYmosIHBhcnROYW1lLCBwYXJlbnQpKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBTZXJ2aWNlVXRpbHMubmVzdGVkVHJhdmVyc2Uobm9kZVRyZWVbaV0uY2hpbGRyZW4sIHBhcnRJbmRleCArIDEsIHBhcnRzLFxuICAgICAgICAgICAgICAgIG9iaiwgbm9kZVRyZWVbaV0ubm9kZSwgZGVsaW1pdGVyKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChub2RlVHJlZS5maWx0ZXIoKG4pID0+IG4ubm9kZS5uYW1lID09PSBwYXJ0TmFtZSkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBpZiAoZW5kKSB7XG4gICAgICAgICAgICAgICAgbm9kZVRyZWUucHVzaChuZXcgVHJlZU5vZGUob2JqLCBwYXJ0TmFtZSwgcGFyZW50KSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbmV3UGFydE5hbWUgPSBwYXJ0c1twYXJ0SW5kZXhdICsgZGVsaW1pdGVyICsgcGFydHNbcGFydEluZGV4ICsgMV07XG4gICAgICAgICAgICBTZXJ2aWNlVXRpbHMubmVzdGVkVHJhdmVyc2Uobm9kZVRyZWUsIDAsIFtuZXdQYXJ0TmFtZSwgLi4ucGFydHMuc2xpY2UocGFydEluZGV4ICsgMildLFxuICAgICAgICAgICAgICAgIG9iaiwgcGFyZW50LCBkZWxpbWl0ZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGljIGdldFRyZWVOb2RlT2JqZWN0KG5vZGVUcmVlOiBUcmVlTm9kZTxJVHJlZU5vZGVPYmplY3Q+W10sIGlkOiBzdHJpbmcpOiBUcmVlTm9kZTxJVHJlZU5vZGVPYmplY3Q+IHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2RlVHJlZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKG5vZGVUcmVlW2ldLm5vZGUuaWQgPT09IGlkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5vZGVUcmVlW2ldO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChub2RlVHJlZVtpXS5jaGlsZHJlbiAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgbm9kZSA9IFNlcnZpY2VVdGlscy5nZXRUcmVlTm9kZU9iamVjdChub2RlVHJlZVtpXS5jaGlsZHJlbiwgaWQpO1xuICAgICAgICAgICAgICAgIGlmIChub2RlICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBub2RlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBDb2xsZWN0aW9uRGF0YSB9IGZyb20gJy4uL21vZGVscy9kYXRhL2NvbGxlY3Rpb25EYXRhJztcblxuaW1wb3J0IHsgQ29sbGVjdGlvbiB9IGZyb20gJy4uL21vZGVscy9kb21haW4vY29sbGVjdGlvbic7XG5pbXBvcnQgeyBUcmVlTm9kZSB9IGZyb20gJy4uL21vZGVscy9kb21haW4vdHJlZU5vZGUnO1xuXG5pbXBvcnQgeyBDb2xsZWN0aW9uVmlldyB9IGZyb20gJy4uL21vZGVscy92aWV3L2NvbGxlY3Rpb25WaWV3JztcblxuaW1wb3J0IHsgQ29sbGVjdGlvblNlcnZpY2UgYXMgQ29sbGVjdGlvblNlcnZpY2VBYnN0cmFjdGlvbiB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9jb2xsZWN0aW9uLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ3J5cHRvU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9jcnlwdG8uc2VydmljZSc7XG5pbXBvcnQgeyBJMThuU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9pMThuLnNlcnZpY2UnO1xuaW1wb3J0IHsgU3RvcmFnZVNlcnZpY2UgfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvc3RvcmFnZS5zZXJ2aWNlJztcbmltcG9ydCB7IFVzZXJTZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL3VzZXIuc2VydmljZSc7XG5cbmltcG9ydCB7IFNlcnZpY2VVdGlscyB9IGZyb20gJy4uL21pc2Mvc2VydmljZVV0aWxzJztcbmltcG9ydCB7IFV0aWxzIH0gZnJvbSAnLi4vbWlzYy91dGlscyc7XG5cbmNvbnN0IEtleXMgPSB7XG4gICAgY29sbGVjdGlvbnNQcmVmaXg6ICdjb2xsZWN0aW9uc18nLFxufTtcbmNvbnN0IE5lc3RpbmdEZWxpbWl0ZXIgPSAnLyc7XG5cbmV4cG9ydCBjbGFzcyBDb2xsZWN0aW9uU2VydmljZSBpbXBsZW1lbnRzIENvbGxlY3Rpb25TZXJ2aWNlQWJzdHJhY3Rpb24ge1xuICAgIGRlY3J5cHRlZENvbGxlY3Rpb25DYWNoZTogQ29sbGVjdGlvblZpZXdbXTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgY3J5cHRvU2VydmljZTogQ3J5cHRvU2VydmljZSwgcHJpdmF0ZSB1c2VyU2VydmljZTogVXNlclNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgc3RvcmFnZVNlcnZpY2U6IFN0b3JhZ2VTZXJ2aWNlLCBwcml2YXRlIGkxOG5TZXJ2aWNlOiBJMThuU2VydmljZSkge1xuICAgIH1cblxuICAgIGNsZWFyQ2FjaGUoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZGVjcnlwdGVkQ29sbGVjdGlvbkNhY2hlID0gbnVsbDtcbiAgICB9XG5cbiAgICBhc3luYyBlbmNyeXB0KG1vZGVsOiBDb2xsZWN0aW9uVmlldyk6IFByb21pc2U8Q29sbGVjdGlvbj4ge1xuICAgICAgICBpZiAobW9kZWwub3JnYW5pemF0aW9uSWQgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb2xsZWN0aW9uIGhhcyBubyBvcmdhbml6YXRpb24gaWQuJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qga2V5ID0gYXdhaXQgdGhpcy5jcnlwdG9TZXJ2aWNlLmdldE9yZ0tleShtb2RlbC5vcmdhbml6YXRpb25JZCk7XG4gICAgICAgIGlmIChrZXkgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBrZXkgZm9yIHRoaXMgY29sbGVjdGlvblxcJ3Mgb3JnYW5pemF0aW9uLicpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvbGxlY3Rpb24gPSBuZXcgQ29sbGVjdGlvbigpO1xuICAgICAgICBjb2xsZWN0aW9uLmlkID0gbW9kZWwuaWQ7XG4gICAgICAgIGNvbGxlY3Rpb24ub3JnYW5pemF0aW9uSWQgPSBtb2RlbC5vcmdhbml6YXRpb25JZDtcbiAgICAgICAgY29sbGVjdGlvbi5yZWFkT25seSA9IG1vZGVsLnJlYWRPbmx5O1xuICAgICAgICBjb2xsZWN0aW9uLm5hbWUgPSBhd2FpdCB0aGlzLmNyeXB0b1NlcnZpY2UuZW5jcnlwdChtb2RlbC5uYW1lLCBrZXkpO1xuICAgICAgICByZXR1cm4gY29sbGVjdGlvbjtcbiAgICB9XG5cbiAgICBhc3luYyBkZWNyeXB0TWFueShjb2xsZWN0aW9uczogQ29sbGVjdGlvbltdKTogUHJvbWlzZTxDb2xsZWN0aW9uVmlld1tdPiB7XG4gICAgICAgIGlmIChjb2xsZWN0aW9ucyA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGVjQ29sbGVjdGlvbnM6IENvbGxlY3Rpb25WaWV3W10gPSBbXTtcbiAgICAgICAgY29uc3QgcHJvbWlzZXM6IFByb21pc2U8YW55PltdID0gW107XG4gICAgICAgIGNvbGxlY3Rpb25zLmZvckVhY2goKGNvbGxlY3Rpb24pID0+IHtcbiAgICAgICAgICAgIHByb21pc2VzLnB1c2goY29sbGVjdGlvbi5kZWNyeXB0KCkudGhlbigoYykgPT4gZGVjQ29sbGVjdGlvbnMucHVzaChjKSkpO1xuICAgICAgICB9KTtcbiAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xuICAgICAgICByZXR1cm4gZGVjQ29sbGVjdGlvbnMuc29ydChVdGlscy5nZXRTb3J0RnVuY3Rpb24odGhpcy5pMThuU2VydmljZSwgJ25hbWUnKSk7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0KGlkOiBzdHJpbmcpOiBQcm9taXNlPENvbGxlY3Rpb24+IHtcbiAgICAgICAgY29uc3QgdXNlcklkID0gYXdhaXQgdGhpcy51c2VyU2VydmljZS5nZXRVc2VySWQoKTtcbiAgICAgICAgY29uc3QgY29sbGVjdGlvbnMgPSBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldDx7IFtpZDogc3RyaW5nXTogQ29sbGVjdGlvbkRhdGE7IH0+KFxuICAgICAgICAgICAgS2V5cy5jb2xsZWN0aW9uc1ByZWZpeCArIHVzZXJJZCk7XG4gICAgICAgIGlmIChjb2xsZWN0aW9ucyA9PSBudWxsIHx8ICFjb2xsZWN0aW9ucy5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ldyBDb2xsZWN0aW9uKGNvbGxlY3Rpb25zW2lkXSk7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0QWxsKCk6IFByb21pc2U8Q29sbGVjdGlvbltdPiB7XG4gICAgICAgIGNvbnN0IHVzZXJJZCA9IGF3YWl0IHRoaXMudXNlclNlcnZpY2UuZ2V0VXNlcklkKCk7XG4gICAgICAgIGNvbnN0IGNvbGxlY3Rpb25zID0gYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5nZXQ8eyBbaWQ6IHN0cmluZ106IENvbGxlY3Rpb25EYXRhOyB9PihcbiAgICAgICAgICAgIEtleXMuY29sbGVjdGlvbnNQcmVmaXggKyB1c2VySWQpO1xuICAgICAgICBjb25zdCByZXNwb25zZTogQ29sbGVjdGlvbltdID0gW107XG4gICAgICAgIGZvciAoY29uc3QgaWQgaW4gY29sbGVjdGlvbnMpIHtcbiAgICAgICAgICAgIGlmIChjb2xsZWN0aW9ucy5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICAgICAgICAgICAgICByZXNwb25zZS5wdXNoKG5ldyBDb2xsZWN0aW9uKGNvbGxlY3Rpb25zW2lkXSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9XG5cbiAgICBhc3luYyBnZXRBbGxEZWNyeXB0ZWQoKTogUHJvbWlzZTxDb2xsZWN0aW9uVmlld1tdPiB7XG4gICAgICAgIGlmICh0aGlzLmRlY3J5cHRlZENvbGxlY3Rpb25DYWNoZSAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kZWNyeXB0ZWRDb2xsZWN0aW9uQ2FjaGU7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBoYXNLZXkgPSBhd2FpdCB0aGlzLmNyeXB0b1NlcnZpY2UuaGFzS2V5KCk7XG4gICAgICAgIGlmICghaGFzS2V5KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGtleS4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGNvbGxlY3Rpb25zID0gYXdhaXQgdGhpcy5nZXRBbGwoKTtcbiAgICAgICAgdGhpcy5kZWNyeXB0ZWRDb2xsZWN0aW9uQ2FjaGUgPSBhd2FpdCB0aGlzLmRlY3J5cHRNYW55KGNvbGxlY3Rpb25zKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVjcnlwdGVkQ29sbGVjdGlvbkNhY2hlO1xuICAgIH1cblxuICAgIGFzeW5jIGdldEFsbE5lc3RlZChjb2xsZWN0aW9uczogQ29sbGVjdGlvblZpZXdbXSA9IG51bGwpOiBQcm9taXNlPFRyZWVOb2RlPENvbGxlY3Rpb25WaWV3PltdPiB7XG4gICAgICAgIGlmIChjb2xsZWN0aW9ucyA9PSBudWxsKSB7XG4gICAgICAgICAgICBjb2xsZWN0aW9ucyA9IGF3YWl0IHRoaXMuZ2V0QWxsRGVjcnlwdGVkKCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgbm9kZXM6IFRyZWVOb2RlPENvbGxlY3Rpb25WaWV3PltdID0gW107XG4gICAgICAgIGNvbGxlY3Rpb25zLmZvckVhY2goKGMpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNvbGxlY3Rpb25Db3B5ID0gbmV3IENvbGxlY3Rpb25WaWV3KCk7XG4gICAgICAgICAgICBjb2xsZWN0aW9uQ29weS5pZCA9IGMuaWQ7XG4gICAgICAgICAgICBjb2xsZWN0aW9uQ29weS5vcmdhbml6YXRpb25JZCA9IGMub3JnYW5pemF0aW9uSWQ7XG4gICAgICAgICAgICBjb25zdCBwYXJ0cyA9IGMubmFtZSAhPSBudWxsID8gYy5uYW1lLnJlcGxhY2UoL15cXC8rfFxcLyskL2csICcnKS5zcGxpdChOZXN0aW5nRGVsaW1pdGVyKSA6IFtdO1xuICAgICAgICAgICAgU2VydmljZVV0aWxzLm5lc3RlZFRyYXZlcnNlKG5vZGVzLCAwLCBwYXJ0cywgY29sbGVjdGlvbkNvcHksIG51bGwsIE5lc3RpbmdEZWxpbWl0ZXIpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG5vZGVzO1xuICAgIH1cblxuICAgIGFzeW5jIGdldE5lc3RlZChpZDogc3RyaW5nKTogUHJvbWlzZTxUcmVlTm9kZTxDb2xsZWN0aW9uVmlldz4+IHtcbiAgICAgICAgY29uc3QgY29sbGVjdGlvbnMgPSBhd2FpdCB0aGlzLmdldEFsbE5lc3RlZCgpO1xuICAgICAgICByZXR1cm4gU2VydmljZVV0aWxzLmdldFRyZWVOb2RlT2JqZWN0KGNvbGxlY3Rpb25zLCBpZCkgYXMgVHJlZU5vZGU8Q29sbGVjdGlvblZpZXc+O1xuICAgIH1cblxuICAgIGFzeW5jIHVwc2VydChjb2xsZWN0aW9uOiBDb2xsZWN0aW9uRGF0YSB8IENvbGxlY3Rpb25EYXRhW10pOiBQcm9taXNlPGFueT4ge1xuICAgICAgICBjb25zdCB1c2VySWQgPSBhd2FpdCB0aGlzLnVzZXJTZXJ2aWNlLmdldFVzZXJJZCgpO1xuICAgICAgICBsZXQgY29sbGVjdGlvbnMgPSBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldDx7IFtpZDogc3RyaW5nXTogQ29sbGVjdGlvbkRhdGE7IH0+KFxuICAgICAgICAgICAgS2V5cy5jb2xsZWN0aW9uc1ByZWZpeCArIHVzZXJJZCk7XG4gICAgICAgIGlmIChjb2xsZWN0aW9ucyA9PSBudWxsKSB7XG4gICAgICAgICAgICBjb2xsZWN0aW9ucyA9IHt9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbGxlY3Rpb24gaW5zdGFuY2VvZiBDb2xsZWN0aW9uRGF0YSkge1xuICAgICAgICAgICAgY29uc3QgYyA9IGNvbGxlY3Rpb24gYXMgQ29sbGVjdGlvbkRhdGE7XG4gICAgICAgICAgICBjb2xsZWN0aW9uc1tjLmlkXSA9IGM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAoY29sbGVjdGlvbiBhcyBDb2xsZWN0aW9uRGF0YVtdKS5mb3JFYWNoKChjKSA9PiB7XG4gICAgICAgICAgICAgICAgY29sbGVjdGlvbnNbYy5pZF0gPSBjO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLnNhdmUoS2V5cy5jb2xsZWN0aW9uc1ByZWZpeCArIHVzZXJJZCwgY29sbGVjdGlvbnMpO1xuICAgICAgICB0aGlzLmRlY3J5cHRlZENvbGxlY3Rpb25DYWNoZSA9IG51bGw7XG4gICAgfVxuXG4gICAgYXN5bmMgcmVwbGFjZShjb2xsZWN0aW9uczogeyBbaWQ6IHN0cmluZ106IENvbGxlY3Rpb25EYXRhOyB9KTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgY29uc3QgdXNlcklkID0gYXdhaXQgdGhpcy51c2VyU2VydmljZS5nZXRVc2VySWQoKTtcbiAgICAgICAgYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5zYXZlKEtleXMuY29sbGVjdGlvbnNQcmVmaXggKyB1c2VySWQsIGNvbGxlY3Rpb25zKTtcbiAgICAgICAgdGhpcy5kZWNyeXB0ZWRDb2xsZWN0aW9uQ2FjaGUgPSBudWxsO1xuICAgIH1cblxuICAgIGFzeW5jIGNsZWFyKHVzZXJJZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5yZW1vdmUoS2V5cy5jb2xsZWN0aW9uc1ByZWZpeCArIHVzZXJJZCk7XG4gICAgICAgIHRoaXMuZGVjcnlwdGVkQ29sbGVjdGlvbkNhY2hlID0gbnVsbDtcbiAgICB9XG5cbiAgICBhc3luYyBkZWxldGUoaWQ6IHN0cmluZyB8IHN0cmluZ1tdKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgY29uc3QgdXNlcklkID0gYXdhaXQgdGhpcy51c2VyU2VydmljZS5nZXRVc2VySWQoKTtcbiAgICAgICAgY29uc3QgY29sbGVjdGlvbnMgPSBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldDx7IFtpZDogc3RyaW5nXTogQ29sbGVjdGlvbkRhdGE7IH0+KFxuICAgICAgICAgICAgS2V5cy5jb2xsZWN0aW9uc1ByZWZpeCArIHVzZXJJZCk7XG4gICAgICAgIGlmIChjb2xsZWN0aW9ucyA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGlkID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgY29uc3QgaSA9IGlkIGFzIHN0cmluZztcbiAgICAgICAgICAgIGRlbGV0ZSBjb2xsZWN0aW9uc1tpZF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAoaWQgYXMgc3RyaW5nW10pLmZvckVhY2goKGkpID0+IHtcbiAgICAgICAgICAgICAgICBkZWxldGUgY29sbGVjdGlvbnNbaV07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2Uuc2F2ZShLZXlzLmNvbGxlY3Rpb25zUHJlZml4ICsgdXNlcklkLCBjb2xsZWN0aW9ucyk7XG4gICAgICAgIHRoaXMuZGVjcnlwdGVkQ29sbGVjdGlvbkNhY2hlID0gbnVsbDtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBDcnlwdG9TZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL2NyeXB0by5zZXJ2aWNlJztcblxuZXhwb3J0IGNsYXNzIENvbnRhaW5lclNlcnZpY2Uge1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgY3J5cHRvU2VydmljZTogQ3J5cHRvU2VydmljZSkge1xuICAgIH1cblxuICAgIC8vIGRlcHJlY2F0ZWQsIHVzZSBhdHRhY2hUb0dsb2JhbCBpbnN0ZWFkXG4gICAgYXR0YWNoVG9XaW5kb3cod2luOiBhbnkpIHtcbiAgICAgICAgdGhpcy5hdHRhY2hUb0dsb2JhbCh3aW4pO1xuICAgIH1cblxuICAgIGF0dGFjaFRvR2xvYmFsKGdsb2JhbDogYW55KSB7XG4gICAgICAgIGlmICghZ2xvYmFsLmJpdHdhcmRlbkNvbnRhaW5lclNlcnZpY2UpIHtcbiAgICAgICAgICAgIGdsb2JhbC5iaXR3YXJkZW5Db250YWluZXJTZXJ2aWNlID0gdGhpcztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldENyeXB0b1NlcnZpY2UoKTogQ3J5cHRvU2VydmljZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNyeXB0b1NlcnZpY2U7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgU3ltbWV0cmljQ3J5cHRvS2V5IH0gZnJvbSAnLi9zeW1tZXRyaWNDcnlwdG9LZXknO1xuXG5leHBvcnQgY2xhc3MgRW5jcnlwdGVkT2JqZWN0IHtcbiAgICBpdjogQXJyYXlCdWZmZXI7XG4gICAgZGF0YTogQXJyYXlCdWZmZXI7XG4gICAgbWFjOiBBcnJheUJ1ZmZlcjtcbiAgICBrZXk6IFN5bW1ldHJpY0NyeXB0b0tleTtcbn1cbiIsIi8vIEVGRidzIExvbmcgV29yZGxpc3QgZnJvbSBodHRwczovL3d3dy5lZmYub3JnL2RpY2VcbmV4cG9ydCBjb25zdCBFRUZMb25nV29yZExpc3QgPSBbXG4gICAgJ2FiYWN1cycsXG4gICAgJ2FiZG9tZW4nLFxuICAgICdhYmRvbWluYWwnLFxuICAgICdhYmlkZScsXG4gICAgJ2FiaWRpbmcnLFxuICAgICdhYmlsaXR5JyxcbiAgICAnYWJsYXplJyxcbiAgICAnYWJsZScsXG4gICAgJ2Fibm9ybWFsJyxcbiAgICAnYWJyYXNpb24nLFxuICAgICdhYnJhc2l2ZScsXG4gICAgJ2FicmVhc3QnLFxuICAgICdhYnJpZGdlJyxcbiAgICAnYWJyb2FkJyxcbiAgICAnYWJydXB0bHknLFxuICAgICdhYnNlbmNlJyxcbiAgICAnYWJzZW50ZWUnLFxuICAgICdhYnNlbnRseScsXG4gICAgJ2Fic2ludGhlJyxcbiAgICAnYWJzb2x1dGUnLFxuICAgICdhYnNvbHZlJyxcbiAgICAnYWJzdGFpbicsXG4gICAgJ2Fic3RyYWN0JyxcbiAgICAnYWJzdXJkJyxcbiAgICAnYWNjZW50JyxcbiAgICAnYWNjbGFpbScsXG4gICAgJ2FjY2xpbWF0ZScsXG4gICAgJ2FjY29tcGFueScsXG4gICAgJ2FjY291bnQnLFxuICAgICdhY2N1cmFjeScsXG4gICAgJ2FjY3VyYXRlJyxcbiAgICAnYWNjdXN0b20nLFxuICAgICdhY2V0b25lJyxcbiAgICAnYWNoaW5lc3MnLFxuICAgICdhY2hpbmcnLFxuICAgICdhY2lkJyxcbiAgICAnYWNvcm4nLFxuICAgICdhY3F1YWludCcsXG4gICAgJ2FjcXVpcmUnLFxuICAgICdhY3JlJyxcbiAgICAnYWNyb2JhdCcsXG4gICAgJ2Fjcm9ueW0nLFxuICAgICdhY3RpbmcnLFxuICAgICdhY3Rpb24nLFxuICAgICdhY3RpdmF0ZScsXG4gICAgJ2FjdGl2YXRvcicsXG4gICAgJ2FjdGl2ZScsXG4gICAgJ2FjdGl2aXNtJyxcbiAgICAnYWN0aXZpc3QnLFxuICAgICdhY3Rpdml0eScsXG4gICAgJ2FjdHJlc3MnLFxuICAgICdhY3RzJyxcbiAgICAnYWN1dGVseScsXG4gICAgJ2FjdXRlbmVzcycsXG4gICAgJ2FlcmF0aW9uJyxcbiAgICAnYWVyb2JpY3MnLFxuICAgICdhZXJvc29sJyxcbiAgICAnYWVyb3NwYWNlJyxcbiAgICAnYWZhcicsXG4gICAgJ2FmZmFpcicsXG4gICAgJ2FmZmVjdGVkJyxcbiAgICAnYWZmZWN0aW5nJyxcbiAgICAnYWZmZWN0aW9uJyxcbiAgICAnYWZmaWRhdml0JyxcbiAgICAnYWZmaWxpYXRlJyxcbiAgICAnYWZmaXJtJyxcbiAgICAnYWZmaXgnLFxuICAgICdhZmZsaWN0ZWQnLFxuICAgICdhZmZsdWVudCcsXG4gICAgJ2FmZm9yZCcsXG4gICAgJ2FmZnJvbnQnLFxuICAgICdhZmxhbWUnLFxuICAgICdhZmxvYXQnLFxuICAgICdhZmx1dHRlcicsXG4gICAgJ2Fmb290JyxcbiAgICAnYWZyYWlkJyxcbiAgICAnYWZ0ZXJnbG93JyxcbiAgICAnYWZ0ZXJsaWZlJyxcbiAgICAnYWZ0ZXJtYXRoJyxcbiAgICAnYWZ0ZXJtb3N0JyxcbiAgICAnYWZ0ZXJub29uJyxcbiAgICAnYWdlZCcsXG4gICAgJ2FnZWxlc3MnLFxuICAgICdhZ2VuY3knLFxuICAgICdhZ2VuZGEnLFxuICAgICdhZ2VudCcsXG4gICAgJ2FnZ3JlZ2F0ZScsXG4gICAgJ2FnaGFzdCcsXG4gICAgJ2FnaWxlJyxcbiAgICAnYWdpbGl0eScsXG4gICAgJ2FnaW5nJyxcbiAgICAnYWdub3N0aWMnLFxuICAgICdhZ29uaXplJyxcbiAgICAnYWdvbml6aW5nJyxcbiAgICAnYWdvbnknLFxuICAgICdhZ3JlZWFibGUnLFxuICAgICdhZ3JlZWFibHknLFxuICAgICdhZ3JlZWQnLFxuICAgICdhZ3JlZWluZycsXG4gICAgJ2FncmVlbWVudCcsXG4gICAgJ2Fncm91bmQnLFxuICAgICdhaGVhZCcsXG4gICAgJ2Fob3knLFxuICAgICdhaWRlJyxcbiAgICAnYWlkcycsXG4gICAgJ2FpbScsXG4gICAgJ2FqYXInLFxuICAgICdhbGFiYXN0ZXInLFxuICAgICdhbGFybScsXG4gICAgJ2FsYmF0cm9zcycsXG4gICAgJ2FsYnVtJyxcbiAgICAnYWxmYWxmYScsXG4gICAgJ2FsZ2VicmEnLFxuICAgICdhbGdvcml0aG0nLFxuICAgICdhbGlhcycsXG4gICAgJ2FsaWJpJyxcbiAgICAnYWxpZW5hYmxlJyxcbiAgICAnYWxpZW5hdGUnLFxuICAgICdhbGllbnMnLFxuICAgICdhbGlrZScsXG4gICAgJ2FsaXZlJyxcbiAgICAnYWxrYWxpbmUnLFxuICAgICdhbGthbGl6ZScsXG4gICAgJ2FsbWFuYWMnLFxuICAgICdhbG1pZ2h0eScsXG4gICAgJ2FsbW9zdCcsXG4gICAgJ2Fsb2UnLFxuICAgICdhbG9mdCcsXG4gICAgJ2Fsb2hhJyxcbiAgICAnYWxvbmUnLFxuICAgICdhbG9uZ3NpZGUnLFxuICAgICdhbG9vZicsXG4gICAgJ2FscGhhYmV0JyxcbiAgICAnYWxyaWdodCcsXG4gICAgJ2FsdGhvdWdoJyxcbiAgICAnYWx0aXR1ZGUnLFxuICAgICdhbHRvJyxcbiAgICAnYWx1bWludW0nLFxuICAgICdhbHVtbmknLFxuICAgICdhbHdheXMnLFxuICAgICdhbWFyZXR0bycsXG4gICAgJ2FtYXplJyxcbiAgICAnYW1hemluZ2x5JyxcbiAgICAnYW1iZXInLFxuICAgICdhbWJpYW5jZScsXG4gICAgJ2FtYmlndWl0eScsXG4gICAgJ2FtYmlndW91cycsXG4gICAgJ2FtYml0aW9uJyxcbiAgICAnYW1iaXRpb3VzJyxcbiAgICAnYW1idWxhbmNlJyxcbiAgICAnYW1idXNoJyxcbiAgICAnYW1lbmRhYmxlJyxcbiAgICAnYW1lbmRtZW50JyxcbiAgICAnYW1lbmRzJyxcbiAgICAnYW1lbml0eScsXG4gICAgJ2FtaWFibGUnLFxuICAgICdhbWljYWJseScsXG4gICAgJ2FtaWQnLFxuICAgICdhbWlnbycsXG4gICAgJ2FtaW5vJyxcbiAgICAnYW1pc3MnLFxuICAgICdhbW1vbmlhJyxcbiAgICAnYW1tb25pdW0nLFxuICAgICdhbW5lc3R5JyxcbiAgICAnYW1uaW90aWMnLFxuICAgICdhbW9uZycsXG4gICAgJ2Ftb3VudCcsXG4gICAgJ2FtcGVyYWdlJyxcbiAgICAnYW1wbGUnLFxuICAgICdhbXBsaWZpZXInLFxuICAgICdhbXBsaWZ5JyxcbiAgICAnYW1wbHknLFxuICAgICdhbXVjaycsXG4gICAgJ2FtdWxldCcsXG4gICAgJ2FtdXNhYmxlJyxcbiAgICAnYW11c2VkJyxcbiAgICAnYW11c2VtZW50JyxcbiAgICAnYW11c2VyJyxcbiAgICAnYW11c2luZycsXG4gICAgJ2FuYWNvbmRhJyxcbiAgICAnYW5hZXJvYmljJyxcbiAgICAnYW5hZ3JhbScsXG4gICAgJ2FuYXRvbWlzdCcsXG4gICAgJ2FuYXRvbXknLFxuICAgICdhbmNob3InLFxuICAgICdhbmNob3Z5JyxcbiAgICAnYW5jaWVudCcsXG4gICAgJ2FuZHJvaWQnLFxuICAgICdhbmVtaWEnLFxuICAgICdhbmVtaWMnLFxuICAgICdhbmV1cmlzbScsXG4gICAgJ2FuZXcnLFxuICAgICdhbmdlbGZpc2gnLFxuICAgICdhbmdlbGljJyxcbiAgICAnYW5nZXInLFxuICAgICdhbmdsZWQnLFxuICAgICdhbmdsZXInLFxuICAgICdhbmdsZXMnLFxuICAgICdhbmdsaW5nJyxcbiAgICAnYW5ncmlseScsXG4gICAgJ2FuZ3JpbmVzcycsXG4gICAgJ2FuZ3Vpc2hlZCcsXG4gICAgJ2FuZ3VsYXInLFxuICAgICdhbmltYWwnLFxuICAgICdhbmltYXRlJyxcbiAgICAnYW5pbWF0aW5nJyxcbiAgICAnYW5pbWF0aW9uJyxcbiAgICAnYW5pbWF0b3InLFxuICAgICdhbmltZScsXG4gICAgJ2FuaW1vc2l0eScsXG4gICAgJ2Fua2xlJyxcbiAgICAnYW5uZXgnLFxuICAgICdhbm5vdGF0ZScsXG4gICAgJ2Fubm91bmNlcicsXG4gICAgJ2Fubm95aW5nJyxcbiAgICAnYW5udWFsbHknLFxuICAgICdhbm51aXR5JyxcbiAgICAnYW5vaW50ZXInLFxuICAgICdhbm90aGVyJyxcbiAgICAnYW5zd2VyaW5nJyxcbiAgICAnYW50YWNpZCcsXG4gICAgJ2FudGFyY3RpYycsXG4gICAgJ2FudGVhdGVyJyxcbiAgICAnYW50ZWxvcGUnLFxuICAgICdhbnRlbm5hZScsXG4gICAgJ2FudGhlbScsXG4gICAgJ2FudGhpbGwnLFxuICAgICdhbnRob2xvZ3knLFxuICAgICdhbnRpYm9keScsXG4gICAgJ2FudGljcycsXG4gICAgJ2FudGlkb3RlJyxcbiAgICAnYW50aWhlcm8nLFxuICAgICdhbnRpcXVlbHknLFxuICAgICdhbnRpcXVlcycsXG4gICAgJ2FudGlxdWl0eScsXG4gICAgJ2FudGlydXN0JyxcbiAgICAnYW50aXRveGljJyxcbiAgICAnYW50aXRydXN0JyxcbiAgICAnYW50aXZpcmFsJyxcbiAgICAnYW50aXZpcnVzJyxcbiAgICAnYW50bGVyJyxcbiAgICAnYW50b255bScsXG4gICAgJ2FudHN5JyxcbiAgICAnYW52aWwnLFxuICAgICdhbnlib2R5JyxcbiAgICAnYW55aG93JyxcbiAgICAnYW55bW9yZScsXG4gICAgJ2FueW9uZScsXG4gICAgJ2FueXBsYWNlJyxcbiAgICAnYW55dGhpbmcnLFxuICAgICdhbnl0aW1lJyxcbiAgICAnYW55d2F5JyxcbiAgICAnYW55d2hlcmUnLFxuICAgICdhb3J0YScsXG4gICAgJ2FwYWNoZScsXG4gICAgJ2Fwb3N0bGUnLFxuICAgICdhcHBlYWxpbmcnLFxuICAgICdhcHBlYXInLFxuICAgICdhcHBlYXNlJyxcbiAgICAnYXBwZWFzaW5nJyxcbiAgICAnYXBwZW5kYWdlJyxcbiAgICAnYXBwZW5kaXgnLFxuICAgICdhcHBldGl0ZScsXG4gICAgJ2FwcGV0aXplcicsXG4gICAgJ2FwcGxhdWQnLFxuICAgICdhcHBsYXVzZScsXG4gICAgJ2FwcGxlJyxcbiAgICAnYXBwbGlhbmNlJyxcbiAgICAnYXBwbGljYW50JyxcbiAgICAnYXBwbGllZCcsXG4gICAgJ2FwcGx5JyxcbiAgICAnYXBwb2ludGVlJyxcbiAgICAnYXBwcmFpc2FsJyxcbiAgICAnYXBwcmFpc2VyJyxcbiAgICAnYXBwcmVoZW5kJyxcbiAgICAnYXBwcm9hY2gnLFxuICAgICdhcHByb3ZhbCcsXG4gICAgJ2FwcHJvdmUnLFxuICAgICdhcHJpY290JyxcbiAgICAnYXByaWwnLFxuICAgICdhcHJvbicsXG4gICAgJ2FwdGl0dWRlJyxcbiAgICAnYXB0bHknLFxuICAgICdhcXVhJyxcbiAgICAnYXF1ZWR1Y3QnLFxuICAgICdhcmJpdHJhcnknLFxuICAgICdhcmJpdHJhdGUnLFxuICAgICdhcmRlbnRseScsXG4gICAgJ2FyZWEnLFxuICAgICdhcmVuYScsXG4gICAgJ2FyZ3VhYmxlJyxcbiAgICAnYXJndWFibHknLFxuICAgICdhcmd1ZScsXG4gICAgJ2FyaXNlJyxcbiAgICAnYXJtYWRpbGxvJyxcbiAgICAnYXJtYmFuZCcsXG4gICAgJ2FybWNoYWlyJyxcbiAgICAnYXJtZWQnLFxuICAgICdhcm1mdWwnLFxuICAgICdhcm1ob2xlJyxcbiAgICAnYXJtaW5nJyxcbiAgICAnYXJtbGVzcycsXG4gICAgJ2FybW9pcmUnLFxuICAgICdhcm1vcmVkJyxcbiAgICAnYXJtb3J5JyxcbiAgICAnYXJtcmVzdCcsXG4gICAgJ2FybXknLFxuICAgICdhcm9tYScsXG4gICAgJ2Fyb3NlJyxcbiAgICAnYXJvdW5kJyxcbiAgICAnYXJvdXNhbCcsXG4gICAgJ2FycmFuZ2UnLFxuICAgICdhcnJheScsXG4gICAgJ2FycmVzdCcsXG4gICAgJ2Fycml2YWwnLFxuICAgICdhcnJpdmUnLFxuICAgICdhcnJvZ2FuY2UnLFxuICAgICdhcnJvZ2FudCcsXG4gICAgJ2Fyc29uJyxcbiAgICAnYXJ0JyxcbiAgICAnYXNjZW5kJyxcbiAgICAnYXNjZW5zaW9uJyxcbiAgICAnYXNjZW50JyxcbiAgICAnYXNjZXJ0YWluJyxcbiAgICAnYXNoYW1lZCcsXG4gICAgJ2FzaGVuJyxcbiAgICAnYXNoZXMnLFxuICAgICdhc2h5JyxcbiAgICAnYXNpZGUnLFxuICAgICdhc2tldycsXG4gICAgJ2FzbGVlcCcsXG4gICAgJ2FzcGFyYWd1cycsXG4gICAgJ2FzcGVjdCcsXG4gICAgJ2FzcGlyYXRlJyxcbiAgICAnYXNwaXJlJyxcbiAgICAnYXNwaXJpbicsXG4gICAgJ2FzdG9uaXNoJyxcbiAgICAnYXN0b3VuZCcsXG4gICAgJ2FzdHJpZGUnLFxuICAgICdhc3Ryb2xvZ3knLFxuICAgICdhc3Ryb25hdXQnLFxuICAgICdhc3Ryb25vbXknLFxuICAgICdhc3R1dGUnLFxuICAgICdhdGxhbnRpYycsXG4gICAgJ2F0bGFzJyxcbiAgICAnYXRvbScsXG4gICAgJ2F0b25hYmxlJyxcbiAgICAnYXRvcCcsXG4gICAgJ2F0cml1bScsXG4gICAgJ2F0cm9jaW91cycsXG4gICAgJ2F0cm9waHknLFxuICAgICdhdHRhY2gnLFxuICAgICdhdHRhaW4nLFxuICAgICdhdHRlbXB0JyxcbiAgICAnYXR0ZW5kYW50JyxcbiAgICAnYXR0ZW5kZWUnLFxuICAgICdhdHRlbnRpb24nLFxuICAgICdhdHRlbnRpdmUnLFxuICAgICdhdHRlc3QnLFxuICAgICdhdHRpYycsXG4gICAgJ2F0dGlyZScsXG4gICAgJ2F0dGl0dWRlJyxcbiAgICAnYXR0cmFjdG9yJyxcbiAgICAnYXR0cmlidXRlJyxcbiAgICAnYXR5cGljYWwnLFxuICAgICdhdWN0aW9uJyxcbiAgICAnYXVkYWNpb3VzJyxcbiAgICAnYXVkYWNpdHknLFxuICAgICdhdWRpYmxlJyxcbiAgICAnYXVkaWJseScsXG4gICAgJ2F1ZGllbmNlJyxcbiAgICAnYXVkaW8nLFxuICAgICdhdWRpdGlvbicsXG4gICAgJ2F1Z21lbnRlZCcsXG4gICAgJ2F1Z3VzdCcsXG4gICAgJ2F1dGhlbnRpYycsXG4gICAgJ2F1dGhvcicsXG4gICAgJ2F1dGlzbScsXG4gICAgJ2F1dGlzdGljJyxcbiAgICAnYXV0b2dyYXBoJyxcbiAgICAnYXV0b21ha2VyJyxcbiAgICAnYXV0b21hdGVkJyxcbiAgICAnYXV0b21hdGljJyxcbiAgICAnYXV0b3BpbG90JyxcbiAgICAnYXZhaWxhYmxlJyxcbiAgICAnYXZhbGFuY2hlJyxcbiAgICAnYXZhdGFyJyxcbiAgICAnYXZlbmdlJyxcbiAgICAnYXZlbmdpbmcnLFxuICAgICdhdmVudWUnLFxuICAgICdhdmVyYWdlJyxcbiAgICAnYXZlcnNpb24nLFxuICAgICdhdmVydCcsXG4gICAgJ2F2aWF0aW9uJyxcbiAgICAnYXZpYXRvcicsXG4gICAgJ2F2aWQnLFxuICAgICdhdm9pZCcsXG4gICAgJ2F3YWl0JyxcbiAgICAnYXdha2VuJyxcbiAgICAnYXdhcmQnLFxuICAgICdhd2FyZScsXG4gICAgJ2F3aGlsZScsXG4gICAgJ2F3a3dhcmQnLFxuICAgICdhd25pbmcnLFxuICAgICdhd29rZScsXG4gICAgJ2F3cnknLFxuICAgICdheGlzJyxcbiAgICAnYmFiYmxlJyxcbiAgICAnYmFiYmxpbmcnLFxuICAgICdiYWJpZWQnLFxuICAgICdiYWJvb24nLFxuICAgICdiYWNrYWNoZScsXG4gICAgJ2JhY2tib2FyZCcsXG4gICAgJ2JhY2tib25lZCcsXG4gICAgJ2JhY2tkcm9wJyxcbiAgICAnYmFja2VkJyxcbiAgICAnYmFja2VyJyxcbiAgICAnYmFja2ZpZWxkJyxcbiAgICAnYmFja2ZpcmUnLFxuICAgICdiYWNraGFuZCcsXG4gICAgJ2JhY2tpbmcnLFxuICAgICdiYWNrbGFuZHMnLFxuICAgICdiYWNrbGFzaCcsXG4gICAgJ2JhY2tsZXNzJyxcbiAgICAnYmFja2xpZ2h0JyxcbiAgICAnYmFja2xpdCcsXG4gICAgJ2JhY2tsb2cnLFxuICAgICdiYWNrcGFjaycsXG4gICAgJ2JhY2twZWRhbCcsXG4gICAgJ2JhY2tyZXN0JyxcbiAgICAnYmFja3Jvb20nLFxuICAgICdiYWNrc2hpZnQnLFxuICAgICdiYWNrc2lkZScsXG4gICAgJ2JhY2tzbGlkJyxcbiAgICAnYmFja3NwYWNlJyxcbiAgICAnYmFja3NwaW4nLFxuICAgICdiYWNrc3RhYicsXG4gICAgJ2JhY2tzdGFnZScsXG4gICAgJ2JhY2t0YWxrJyxcbiAgICAnYmFja3RyYWNrJyxcbiAgICAnYmFja3VwJyxcbiAgICAnYmFja3dhcmQnLFxuICAgICdiYWNrd2FzaCcsXG4gICAgJ2JhY2t3YXRlcicsXG4gICAgJ2JhY2t5YXJkJyxcbiAgICAnYmFjb24nLFxuICAgICdiYWN0ZXJpYScsXG4gICAgJ2JhY3Rlcml1bScsXG4gICAgJ2JhZGFzcycsXG4gICAgJ2JhZGdlJyxcbiAgICAnYmFkbGFuZCcsXG4gICAgJ2JhZGx5JyxcbiAgICAnYmFkbmVzcycsXG4gICAgJ2JhZmZsZScsXG4gICAgJ2JhZmZsaW5nJyxcbiAgICAnYmFnZWwnLFxuICAgICdiYWdmdWwnLFxuICAgICdiYWdnYWdlJyxcbiAgICAnYmFnZ2VkJyxcbiAgICAnYmFnZ2llJyxcbiAgICAnYmFnZ2luZXNzJyxcbiAgICAnYmFnZ2luZycsXG4gICAgJ2JhZ2d5JyxcbiAgICAnYmFncGlwZScsXG4gICAgJ2JhZ3VldHRlJyxcbiAgICAnYmFrZWQnLFxuICAgICdiYWtlcnknLFxuICAgICdiYWtlc2hvcCcsXG4gICAgJ2Jha2luZycsXG4gICAgJ2JhbGFuY2UnLFxuICAgICdiYWxhbmNpbmcnLFxuICAgICdiYWxjb255JyxcbiAgICAnYmFsbXknLFxuICAgICdiYWxzYW1pYycsXG4gICAgJ2JhbWJvbycsXG4gICAgJ2JhbmFuYScsXG4gICAgJ2JhbmlzaCcsXG4gICAgJ2JhbmlzdGVyJyxcbiAgICAnYmFuam8nLFxuICAgICdiYW5rYWJsZScsXG4gICAgJ2Jhbmtib29rJyxcbiAgICAnYmFua2VkJyxcbiAgICAnYmFua2VyJyxcbiAgICAnYmFua2luZycsXG4gICAgJ2Jhbmtub3RlJyxcbiAgICAnYmFua3JvbGwnLFxuICAgICdiYW5uZXInLFxuICAgICdiYW5uaXN0ZXInLFxuICAgICdiYW5zaGVlJyxcbiAgICAnYmFudGVyJyxcbiAgICAnYmFyYmVjdWUnLFxuICAgICdiYXJiZWQnLFxuICAgICdiYXJiZWxsJyxcbiAgICAnYmFyYmVyJyxcbiAgICAnYmFyY29kZScsXG4gICAgJ2JhcmdlJyxcbiAgICAnYmFyZ3JhcGgnLFxuICAgICdiYXJpc3RhJyxcbiAgICAnYmFyaXRvbmUnLFxuICAgICdiYXJsZXknLFxuICAgICdiYXJtYWlkJyxcbiAgICAnYmFybWFuJyxcbiAgICAnYmFybicsXG4gICAgJ2Jhcm9tZXRlcicsXG4gICAgJ2JhcnJhY2snLFxuICAgICdiYXJyYWN1ZGEnLFxuICAgICdiYXJyZWwnLFxuICAgICdiYXJyZXR0ZScsXG4gICAgJ2JhcnJpY2FkZScsXG4gICAgJ2JhcnJpZXInLFxuICAgICdiYXJzdG9vbCcsXG4gICAgJ2JhcnRlbmRlcicsXG4gICAgJ2JhcnRlcmVyJyxcbiAgICAnYmFzaCcsXG4gICAgJ2Jhc2ljYWxseScsXG4gICAgJ2Jhc2ljcycsXG4gICAgJ2Jhc2lsJyxcbiAgICAnYmFzaW4nLFxuICAgICdiYXNpcycsXG4gICAgJ2Jhc2tldCcsXG4gICAgJ2JhdGJveScsXG4gICAgJ2JhdGNoJyxcbiAgICAnYmF0aCcsXG4gICAgJ2JhdG9uJyxcbiAgICAnYmF0cycsXG4gICAgJ2JhdHRhbGlvbicsXG4gICAgJ2JhdHRlcmVkJyxcbiAgICAnYmF0dGVyaW5nJyxcbiAgICAnYmF0dGVyeScsXG4gICAgJ2JhdHRpbmcnLFxuICAgICdiYXR0bGUnLFxuICAgICdiYXVibGUnLFxuICAgICdiYXpvb2thJyxcbiAgICAnYmxhYmJlcicsXG4gICAgJ2JsYWRkZXInLFxuICAgICdibGFkZScsXG4gICAgJ2JsYWgnLFxuICAgICdibGFtZScsXG4gICAgJ2JsYW1pbmcnLFxuICAgICdibGFuY2hpbmcnLFxuICAgICdibGFuZG5lc3MnLFxuICAgICdibGFuaycsXG4gICAgJ2JsYXNwaGVtZScsXG4gICAgJ2JsYXNwaGVteScsXG4gICAgJ2JsYXN0JyxcbiAgICAnYmxhdGFuY3knLFxuICAgICdibGF0YW50bHknLFxuICAgICdibGF6ZXInLFxuICAgICdibGF6aW5nJyxcbiAgICAnYmxlYWNoJyxcbiAgICAnYmxlYWsnLFxuICAgICdibGVlcCcsXG4gICAgJ2JsZW1pc2gnLFxuICAgICdibGVuZCcsXG4gICAgJ2JsZXNzJyxcbiAgICAnYmxpZ2h0ZWQnLFxuICAgICdibGltcCcsXG4gICAgJ2JsaW5nJyxcbiAgICAnYmxpbmtlZCcsXG4gICAgJ2JsaW5rZXInLFxuICAgICdibGlua2luZycsXG4gICAgJ2JsaW5rcycsXG4gICAgJ2JsaXAnLFxuICAgICdibGlzc2Z1bCcsXG4gICAgJ2JsaXR6JyxcbiAgICAnYmxpenphcmQnLFxuICAgICdibG9hdGVkJyxcbiAgICAnYmxvYXRpbmcnLFxuICAgICdibG9iJyxcbiAgICAnYmxvZycsXG4gICAgJ2Jsb29tZXJzJyxcbiAgICAnYmxvb21pbmcnLFxuICAgICdibG9vcGVyJyxcbiAgICAnYmxvdCcsXG4gICAgJ2Jsb3VzZScsXG4gICAgJ2JsdWJiZXInLFxuICAgICdibHVmZicsXG4gICAgJ2JsdWlzaCcsXG4gICAgJ2JsdW5kZXJlcicsXG4gICAgJ2JsdW50JyxcbiAgICAnYmx1cmInLFxuICAgICdibHVycmVkJyxcbiAgICAnYmx1cnJ5JyxcbiAgICAnYmx1cnQnLFxuICAgICdibHVzaCcsXG4gICAgJ2JsdXN0ZXJ5JyxcbiAgICAnYm9hc3RlcicsXG4gICAgJ2JvYXN0ZnVsJyxcbiAgICAnYm9hc3RpbmcnLFxuICAgICdib2F0JyxcbiAgICAnYm9iYmVkJyxcbiAgICAnYm9iYmluZycsXG4gICAgJ2JvYmJsZScsXG4gICAgJ2JvYmNhdCcsXG4gICAgJ2JvYnNsZWQnLFxuICAgICdib2J0YWlsJyxcbiAgICAnYm9kYWNpb3VzJyxcbiAgICAnYm9keScsXG4gICAgJ2JvZ2dlZCcsXG4gICAgJ2JvZ2dsZScsXG4gICAgJ2JvZ3VzJyxcbiAgICAnYm9pbCcsXG4gICAgJ2JvaycsXG4gICAgJ2JvbHN0ZXInLFxuICAgICdib2x0JyxcbiAgICAnYm9uYW56YScsXG4gICAgJ2JvbmRlZCcsXG4gICAgJ2JvbmRpbmcnLFxuICAgICdib25kbGVzcycsXG4gICAgJ2JvbmVkJyxcbiAgICAnYm9uZWhlYWQnLFxuICAgICdib25lbGVzcycsXG4gICAgJ2JvbmVsaWtlJyxcbiAgICAnYm9uZXknLFxuICAgICdib25maXJlJyxcbiAgICAnYm9ubmV0JyxcbiAgICAnYm9uc2FpJyxcbiAgICAnYm9udXMnLFxuICAgICdib255JyxcbiAgICAnYm9vZ2V5bWFuJyxcbiAgICAnYm9vZ2llbWFuJyxcbiAgICAnYm9vaycsXG4gICAgJ2Jvb25kb2NrcycsXG4gICAgJ2Jvb3RlZCcsXG4gICAgJ2Jvb3RoJyxcbiAgICAnYm9vdGllJyxcbiAgICAnYm9vdGluZycsXG4gICAgJ2Jvb3RsYWNlJyxcbiAgICAnYm9vdGxlZycsXG4gICAgJ2Jvb3RzJyxcbiAgICAnYm9venknLFxuICAgICdib3JheCcsXG4gICAgJ2JvcmluZycsXG4gICAgJ2Jvcm91Z2gnLFxuICAgICdib3Jyb3dlcicsXG4gICAgJ2JvcnJvd2luZycsXG4gICAgJ2Jvc3MnLFxuICAgICdib3RhbmljYWwnLFxuICAgICdib3RhbmlzdCcsXG4gICAgJ2JvdGFueScsXG4gICAgJ2JvdGNoJyxcbiAgICAnYm90aCcsXG4gICAgJ2JvdHRsZScsXG4gICAgJ2JvdHRsaW5nJyxcbiAgICAnYm90dG9tJyxcbiAgICAnYm91bmNlJyxcbiAgICAnYm91bmNpbmcnLFxuICAgICdib3VuY3knLFxuICAgICdib3VuZGluZycsXG4gICAgJ2JvdW5kbGVzcycsXG4gICAgJ2JvdW50aWZ1bCcsXG4gICAgJ2JvdmluZScsXG4gICAgJ2JveGNhcicsXG4gICAgJ2JveGVyJyxcbiAgICAnYm94aW5nJyxcbiAgICAnYm94bGlrZScsXG4gICAgJ2JveHknLFxuICAgICdicmVhY2gnLFxuICAgICdicmVhdGgnLFxuICAgICdicmVlY2hlcycsXG4gICAgJ2JyZWVjaGluZycsXG4gICAgJ2JyZWVkZXInLFxuICAgICdicmVlZGluZycsXG4gICAgJ2JyZWV6ZScsXG4gICAgJ2JyZWV6eScsXG4gICAgJ2JyZXRocmVuJyxcbiAgICAnYnJld2VyeScsXG4gICAgJ2JyZXdpbmcnLFxuICAgICdicmlhcicsXG4gICAgJ2JyaWJlJyxcbiAgICAnYnJpY2snLFxuICAgICdicmlkZScsXG4gICAgJ2JyaWRnZWQnLFxuICAgICdicmlnYWRlJyxcbiAgICAnYnJpZ2h0JyxcbiAgICAnYnJpbGxpYW50JyxcbiAgICAnYnJpbScsXG4gICAgJ2JyaW5nJyxcbiAgICAnYnJpbmsnLFxuICAgICdicmlza2V0JyxcbiAgICAnYnJpc2tseScsXG4gICAgJ2JyaXNrbmVzcycsXG4gICAgJ2JyaXN0bGUnLFxuICAgICdicml0dGxlJyxcbiAgICAnYnJvYWRiYW5kJyxcbiAgICAnYnJvYWRjYXN0JyxcbiAgICAnYnJvYWRlbicsXG4gICAgJ2Jyb2FkbHknLFxuICAgICdicm9hZG5lc3MnLFxuICAgICdicm9hZHNpZGUnLFxuICAgICdicm9hZHdheXMnLFxuICAgICdicm9pbGVyJyxcbiAgICAnYnJvaWxpbmcnLFxuICAgICdicm9rZW4nLFxuICAgICdicm9rZXInLFxuICAgICdicm9uY2hpYWwnLFxuICAgICdicm9uY28nLFxuICAgICdicm9uemUnLFxuICAgICdicm9uemluZycsXG4gICAgJ2Jyb29rJyxcbiAgICAnYnJvb20nLFxuICAgICdicm91Z2h0JyxcbiAgICAnYnJvd2JlYXQnLFxuICAgICdicm93bm5vc2UnLFxuICAgICdicm93c2UnLFxuICAgICdicm93c2luZycsXG4gICAgJ2JydWlzaW5nJyxcbiAgICAnYnJ1bmNoJyxcbiAgICAnYnJ1bmV0dGUnLFxuICAgICdicnVudCcsXG4gICAgJ2JydXNoJyxcbiAgICAnYnJ1c3NlbHMnLFxuICAgICdicnV0ZScsXG4gICAgJ2JydXRpc2hseScsXG4gICAgJ2J1YmJsZScsXG4gICAgJ2J1YmJsaW5nJyxcbiAgICAnYnViYmx5JyxcbiAgICAnYnVjY2FuZWVyJyxcbiAgICAnYnVja2VkJyxcbiAgICAnYnVja2V0JyxcbiAgICAnYnVja2xlJyxcbiAgICAnYnVja3Nob3QnLFxuICAgICdidWNrc2tpbicsXG4gICAgJ2J1Y2t0b290aCcsXG4gICAgJ2J1Y2t3aGVhdCcsXG4gICAgJ2J1ZGRoaXNtJyxcbiAgICAnYnVkZGhpc3QnLFxuICAgICdidWRkaW5nJyxcbiAgICAnYnVkZHknLFxuICAgICdidWRnZXQnLFxuICAgICdidWZmYWxvJyxcbiAgICAnYnVmZmVkJyxcbiAgICAnYnVmZmVyJyxcbiAgICAnYnVmZmluZycsXG4gICAgJ2J1ZmZvb24nLFxuICAgICdidWdneScsXG4gICAgJ2J1bGInLFxuICAgICdidWxnZScsXG4gICAgJ2J1bGdpbmVzcycsXG4gICAgJ2J1bGd1cicsXG4gICAgJ2J1bGsnLFxuICAgICdidWxsZG9nJyxcbiAgICAnYnVsbGRvemVyJyxcbiAgICAnYnVsbGZpZ2h0JyxcbiAgICAnYnVsbGZyb2cnLFxuICAgICdidWxsaG9ybicsXG4gICAgJ2J1bGxpb24nLFxuICAgICdidWxsaXNoJyxcbiAgICAnYnVsbHBlbicsXG4gICAgJ2J1bGxyaW5nJyxcbiAgICAnYnVsbHNleWUnLFxuICAgICdidWxsd2hpcCcsXG4gICAgJ2J1bGx5JyxcbiAgICAnYnVuY2gnLFxuICAgICdidW5kbGUnLFxuICAgICdidW5nZWUnLFxuICAgICdidW5pb24nLFxuICAgICdidW5rYmVkJyxcbiAgICAnYnVua2hvdXNlJyxcbiAgICAnYnVua21hdGUnLFxuICAgICdidW5ueScsXG4gICAgJ2J1bnQnLFxuICAgICdidXNib3knLFxuICAgICdidXNoJyxcbiAgICAnYnVzaWx5JyxcbiAgICAnYnVzbG9hZCcsXG4gICAgJ2J1c3QnLFxuICAgICdidXN5Ym9keScsXG4gICAgJ2J1enonLFxuICAgICdjYWJhbmEnLFxuICAgICdjYWJiYWdlJyxcbiAgICAnY2FiYmllJyxcbiAgICAnY2FiZHJpdmVyJyxcbiAgICAnY2FibGUnLFxuICAgICdjYWJvb3NlJyxcbiAgICAnY2FjaGUnLFxuICAgICdjYWNrbGUnLFxuICAgICdjYWN0aScsXG4gICAgJ2NhY3R1cycsXG4gICAgJ2NhZGRpZScsXG4gICAgJ2NhZGR5JyxcbiAgICAnY2FkZXQnLFxuICAgICdjYWRpbGxhYycsXG4gICAgJ2NhZG1pdW0nLFxuICAgICdjYWdlJyxcbiAgICAnY2Fob290cycsXG4gICAgJ2Nha2UnLFxuICAgICdjYWxhbWFyaScsXG4gICAgJ2NhbGFtaXR5JyxcbiAgICAnY2FsY2l1bScsXG4gICAgJ2NhbGN1bGF0ZScsXG4gICAgJ2NhbGN1bHVzJyxcbiAgICAnY2FsaWJlcicsXG4gICAgJ2NhbGlicmF0ZScsXG4gICAgJ2NhbG0nLFxuICAgICdjYWxvcmljJyxcbiAgICAnY2Fsb3JpZScsXG4gICAgJ2NhbHpvbmUnLFxuICAgICdjYW1jb3JkZXInLFxuICAgICdjYW1lbycsXG4gICAgJ2NhbWVyYScsXG4gICAgJ2NhbWlzb2xlJyxcbiAgICAnY2FtcGVyJyxcbiAgICAnY2FtcGZpcmUnLFxuICAgICdjYW1waW5nJyxcbiAgICAnY2FtcHNpdGUnLFxuICAgICdjYW1wdXMnLFxuICAgICdjYW5hbCcsXG4gICAgJ2NhbmFyeScsXG4gICAgJ2NhbmNlbCcsXG4gICAgJ2NhbmRpZWQnLFxuICAgICdjYW5kbGUnLFxuICAgICdjYW5keScsXG4gICAgJ2NhbmUnLFxuICAgICdjYW5pbmUnLFxuICAgICdjYW5pc3RlcicsXG4gICAgJ2Nhbm5hYmlzJyxcbiAgICAnY2FubmVkJyxcbiAgICAnY2FubmluZycsXG4gICAgJ2Nhbm5vbicsXG4gICAgJ2Nhbm5vdCcsXG4gICAgJ2Nhbm9sYScsXG4gICAgJ2Nhbm9uJyxcbiAgICAnY2Fub3BlbmVyJyxcbiAgICAnY2Fub3B5JyxcbiAgICAnY2FudGVlbicsXG4gICAgJ2NhbnlvbicsXG4gICAgJ2NhcGFibGUnLFxuICAgICdjYXBhYmx5JyxcbiAgICAnY2FwYWNpdHknLFxuICAgICdjYXBlJyxcbiAgICAnY2FwaWxsYXJ5JyxcbiAgICAnY2FwaXRhbCcsXG4gICAgJ2NhcGl0b2wnLFxuICAgICdjYXBwZWQnLFxuICAgICdjYXByaWNvcm4nLFxuICAgICdjYXBzaXplJyxcbiAgICAnY2Fwc3VsZScsXG4gICAgJ2NhcHRpb24nLFxuICAgICdjYXB0aXZhdGUnLFxuICAgICdjYXB0aXZlJyxcbiAgICAnY2FwdGl2aXR5JyxcbiAgICAnY2FwdHVyZScsXG4gICAgJ2NhcmFtZWwnLFxuICAgICdjYXJhdCcsXG4gICAgJ2NhcmF2YW4nLFxuICAgICdjYXJib24nLFxuICAgICdjYXJkYm9hcmQnLFxuICAgICdjYXJkZWQnLFxuICAgICdjYXJkaWFjJyxcbiAgICAnY2FyZGlnYW4nLFxuICAgICdjYXJkaW5hbCcsXG4gICAgJ2NhcmRzdG9jaycsXG4gICAgJ2NhcmVmdWxseScsXG4gICAgJ2NhcmVnaXZlcicsXG4gICAgJ2NhcmVsZXNzJyxcbiAgICAnY2FyZXNzJyxcbiAgICAnY2FyZXRha2VyJyxcbiAgICAnY2FyZ28nLFxuICAgICdjYXJpbmcnLFxuICAgICdjYXJsZXNzJyxcbiAgICAnY2FybG9hZCcsXG4gICAgJ2Nhcm1ha2VyJyxcbiAgICAnY2FybmFnZScsXG4gICAgJ2Nhcm5hdGlvbicsXG4gICAgJ2Nhcm5pdmFsJyxcbiAgICAnY2Fybml2b3JlJyxcbiAgICAnY2Fyb2wnLFxuICAgICdjYXJwZW50ZXInLFxuICAgICdjYXJwZW50cnknLFxuICAgICdjYXJwb29sJyxcbiAgICAnY2FycG9ydCcsXG4gICAgJ2NhcnJpZWQnLFxuICAgICdjYXJyb3QnLFxuICAgICdjYXJyb3VzZWwnLFxuICAgICdjYXJyeScsXG4gICAgJ2NhcnRlbCcsXG4gICAgJ2NhcnRsb2FkJyxcbiAgICAnY2FydG9uJyxcbiAgICAnY2FydG9vbicsXG4gICAgJ2NhcnRyaWRnZScsXG4gICAgJ2NhcnR3aGVlbCcsXG4gICAgJ2NhcnZlJyxcbiAgICAnY2FydmluZycsXG4gICAgJ2Nhcndhc2gnLFxuICAgICdjYXNjYWRlJyxcbiAgICAnY2FzZScsXG4gICAgJ2Nhc2gnLFxuICAgICdjYXNpbmcnLFxuICAgICdjYXNpbm8nLFxuICAgICdjYXNrZXQnLFxuICAgICdjYXNzZXR0ZScsXG4gICAgJ2Nhc3VhbGx5JyxcbiAgICAnY2FzdWFsdHknLFxuICAgICdjYXRhY29tYicsXG4gICAgJ2NhdGFsb2cnLFxuICAgICdjYXRhbHlzdCcsXG4gICAgJ2NhdGFseXplJyxcbiAgICAnY2F0YXB1bHQnLFxuICAgICdjYXRhcmFjdCcsXG4gICAgJ2NhdGF0b25pYycsXG4gICAgJ2NhdGNhbGwnLFxuICAgICdjYXRjaGFibGUnLFxuICAgICdjYXRjaGVyJyxcbiAgICAnY2F0Y2hpbmcnLFxuICAgICdjYXRjaHknLFxuICAgICdjYXRlcmVyJyxcbiAgICAnY2F0ZXJpbmcnLFxuICAgICdjYXRmaWdodCcsXG4gICAgJ2NhdGZpc2gnLFxuICAgICdjYXRoZWRyYWwnLFxuICAgICdjYXRob3VzZScsXG4gICAgJ2NhdGxpa2UnLFxuICAgICdjYXRuYXAnLFxuICAgICdjYXRuaXAnLFxuICAgICdjYXRzdXAnLFxuICAgICdjYXR0YWlsJyxcbiAgICAnY2F0dGlzaGx5JyxcbiAgICAnY2F0dGxlJyxcbiAgICAnY2F0dHknLFxuICAgICdjYXR3YWxrJyxcbiAgICAnY2F1Y2FzaWFuJyxcbiAgICAnY2F1Y3VzJyxcbiAgICAnY2F1c2FsJyxcbiAgICAnY2F1c2F0aW9uJyxcbiAgICAnY2F1c2UnLFxuICAgICdjYXVzaW5nJyxcbiAgICAnY2F1dGVyaXplJyxcbiAgICAnY2F1dGlvbicsXG4gICAgJ2NhdXRpb3VzJyxcbiAgICAnY2F2YWxpZXInLFxuICAgICdjYXZhbHJ5JyxcbiAgICAnY2F2aWFyJyxcbiAgICAnY2F2aXR5JyxcbiAgICAnY2VkYXInLFxuICAgICdjZWxlcnknLFxuICAgICdjZWxlc3RpYWwnLFxuICAgICdjZWxpYmFjeScsXG4gICAgJ2NlbGliYXRlJyxcbiAgICAnY2VsdGljJyxcbiAgICAnY2VtZW50JyxcbiAgICAnY2Vuc3VzJyxcbiAgICAnY2VyYW1pY3MnLFxuICAgICdjZXJlbW9ueScsXG4gICAgJ2NlcnRhaW5seScsXG4gICAgJ2NlcnRhaW50eScsXG4gICAgJ2NlcnRpZmllZCcsXG4gICAgJ2NlcnRpZnknLFxuICAgICdjZXNhcmVhbicsXG4gICAgJ2Nlc3Nwb29sJyxcbiAgICAnY2hhZmUnLFxuICAgICdjaGFmZmluZycsXG4gICAgJ2NoYWluJyxcbiAgICAnY2hhaXInLFxuICAgICdjaGFsaWNlJyxcbiAgICAnY2hhbGxlbmdlJyxcbiAgICAnY2hhbWJlcicsXG4gICAgJ2NoYW1vbWlsZScsXG4gICAgJ2NoYW1waW9uJyxcbiAgICAnY2hhbmNlJyxcbiAgICAnY2hhbmdlJyxcbiAgICAnY2hhbm5lbCcsXG4gICAgJ2NoYW50JyxcbiAgICAnY2hhb3MnLFxuICAgICdjaGFwZXJvbmUnLFxuICAgICdjaGFwbGFpbicsXG4gICAgJ2NoYXBwZWQnLFxuICAgICdjaGFwcycsXG4gICAgJ2NoYXB0ZXInLFxuICAgICdjaGFyYWN0ZXInLFxuICAgICdjaGFyYnJvaWwnLFxuICAgICdjaGFyY29hbCcsXG4gICAgJ2NoYXJnZXInLFxuICAgICdjaGFyZ2luZycsXG4gICAgJ2NoYXJpb3QnLFxuICAgICdjaGFyaXR5JyxcbiAgICAnY2hhcm0nLFxuICAgICdjaGFycmVkJyxcbiAgICAnY2hhcnRlcicsXG4gICAgJ2NoYXJ0aW5nJyxcbiAgICAnY2hhc2UnLFxuICAgICdjaGFzaW5nJyxcbiAgICAnY2hhc3RlJyxcbiAgICAnY2hhc3Rpc2UnLFxuICAgICdjaGFzdGl0eScsXG4gICAgJ2NoYXRyb29tJyxcbiAgICAnY2hhdHRlcicsXG4gICAgJ2NoYXR0aW5nJyxcbiAgICAnY2hhdHR5JyxcbiAgICAnY2hlYXRpbmcnLFxuICAgICdjaGVkZGFyJyxcbiAgICAnY2hlZWsnLFxuICAgICdjaGVlcicsXG4gICAgJ2NoZWVzZScsXG4gICAgJ2NoZWVzeScsXG4gICAgJ2NoZWYnLFxuICAgICdjaGVtaWNhbHMnLFxuICAgICdjaGVtaXN0JyxcbiAgICAnY2hlbW8nLFxuICAgICdjaGVyaXNoZXInLFxuICAgICdjaGVydWInLFxuICAgICdjaGVzcycsXG4gICAgJ2NoZXN0JyxcbiAgICAnY2hldnJvbicsXG4gICAgJ2NoZXZ5JyxcbiAgICAnY2hld2FibGUnLFxuICAgICdjaGV3ZXInLFxuICAgICdjaGV3aW5nJyxcbiAgICAnY2hld3knLFxuICAgICdjaGllZicsXG4gICAgJ2NoaWh1YWh1YScsXG4gICAgJ2NoaWxkY2FyZScsXG4gICAgJ2NoaWxkaG9vZCcsXG4gICAgJ2NoaWxkaXNoJyxcbiAgICAnY2hpbGRsZXNzJyxcbiAgICAnY2hpbGRsaWtlJyxcbiAgICAnY2hpbGknLFxuICAgICdjaGlsbCcsXG4gICAgJ2NoaW1wJyxcbiAgICAnY2hpcCcsXG4gICAgJ2NoaXJwaW5nJyxcbiAgICAnY2hpcnB5JyxcbiAgICAnY2hpdGNoYXQnLFxuICAgICdjaGl2YWxyeScsXG4gICAgJ2NoaXZlJyxcbiAgICAnY2hsb3JpZGUnLFxuICAgICdjaGxvcmluZScsXG4gICAgJ2Nob2ljZScsXG4gICAgJ2Nob2tlaG9sZCcsXG4gICAgJ2Nob2tpbmcnLFxuICAgICdjaG9tcCcsXG4gICAgJ2Nob29zZXInLFxuICAgICdjaG9vc2luZycsXG4gICAgJ2Nob29zeScsXG4gICAgJ2Nob3AnLFxuICAgICdjaG9zZW4nLFxuICAgICdjaG93ZGVyJyxcbiAgICAnY2hvd3RpbWUnLFxuICAgICdjaHJvbWUnLFxuICAgICdjaHViYnknLFxuICAgICdjaHVjaycsXG4gICAgJ2NodWcnLFxuICAgICdjaHVtbXknLFxuICAgICdjaHVtcCcsXG4gICAgJ2NodW5rJyxcbiAgICAnY2h1cm4nLFxuICAgICdjaHV0ZScsXG4gICAgJ2NpZGVyJyxcbiAgICAnY2lsYW50cm8nLFxuICAgICdjaW5jaCcsXG4gICAgJ2NpbmVtYScsXG4gICAgJ2Npbm5hbW9uJyxcbiAgICAnY2lyY2xlJyxcbiAgICAnY2lyY2xpbmcnLFxuICAgICdjaXJjdWxhcicsXG4gICAgJ2NpcmN1bGF0ZScsXG4gICAgJ2NpcmN1cycsXG4gICAgJ2NpdGFibGUnLFxuICAgICdjaXRhZGVsJyxcbiAgICAnY2l0YXRpb24nLFxuICAgICdjaXRpemVuJyxcbiAgICAnY2l0cmljJyxcbiAgICAnY2l0cnVzJyxcbiAgICAnY2l0eScsXG4gICAgJ2NpdmljJyxcbiAgICAnY2l2aWwnLFxuICAgICdjbGFkJyxcbiAgICAnY2xhaW0nLFxuICAgICdjbGFtYmFrZScsXG4gICAgJ2NsYW1teScsXG4gICAgJ2NsYW1vcicsXG4gICAgJ2NsYW1wJyxcbiAgICAnY2xhbXNoZWxsJyxcbiAgICAnY2xhbmcnLFxuICAgICdjbGFua2luZycsXG4gICAgJ2NsYXBwZWQnLFxuICAgICdjbGFwcGVyJyxcbiAgICAnY2xhcHBpbmcnLFxuICAgICdjbGFyaWZ5JyxcbiAgICAnY2xhcmluZXQnLFxuICAgICdjbGFyaXR5JyxcbiAgICAnY2xhc2gnLFxuICAgICdjbGFzcCcsXG4gICAgJ2NsYXNzJyxcbiAgICAnY2xhdHRlcicsXG4gICAgJ2NsYXVzZScsXG4gICAgJ2NsYXZpY2xlJyxcbiAgICAnY2xhdycsXG4gICAgJ2NsYXknLFxuICAgICdjbGVhbicsXG4gICAgJ2NsZWFyJyxcbiAgICAnY2xlYXQnLFxuICAgICdjbGVhdmVyJyxcbiAgICAnY2xlZnQnLFxuICAgICdjbGVuY2gnLFxuICAgICdjbGVyZ3ltYW4nLFxuICAgICdjbGVyaWNhbCcsXG4gICAgJ2NsZXJrJyxcbiAgICAnY2xldmVyJyxcbiAgICAnY2xpY2tlcicsXG4gICAgJ2NsaWVudCcsXG4gICAgJ2NsaW1hdGUnLFxuICAgICdjbGltYXRpYycsXG4gICAgJ2NsaW5nJyxcbiAgICAnY2xpbmljJyxcbiAgICAnY2xpbmtpbmcnLFxuICAgICdjbGlwJyxcbiAgICAnY2xpcXVlJyxcbiAgICAnY2xvYWsnLFxuICAgICdjbG9iYmVyJyxcbiAgICAnY2xvY2snLFxuICAgICdjbG9uZScsXG4gICAgJ2Nsb25pbmcnLFxuICAgICdjbG9zYWJsZScsXG4gICAgJ2Nsb3N1cmUnLFxuICAgICdjbG90aGVzJyxcbiAgICAnY2xvdGhpbmcnLFxuICAgICdjbG91ZCcsXG4gICAgJ2Nsb3ZlcicsXG4gICAgJ2NsdWJiZWQnLFxuICAgICdjbHViYmluZycsXG4gICAgJ2NsdWJob3VzZScsXG4gICAgJ2NsdW1wJyxcbiAgICAnY2x1bXNpbHknLFxuICAgICdjbHVtc3knLFxuICAgICdjbHVua3knLFxuICAgICdjbHVzdGVyZWQnLFxuICAgICdjbHV0Y2gnLFxuICAgICdjbHV0dGVyJyxcbiAgICAnY29hY2gnLFxuICAgICdjb2FndWxhbnQnLFxuICAgICdjb2FzdGFsJyxcbiAgICAnY29hc3RlcicsXG4gICAgJ2NvYXN0aW5nJyxcbiAgICAnY29hc3RsYW5kJyxcbiAgICAnY29hc3RsaW5lJyxcbiAgICAnY29hdCcsXG4gICAgJ2NvYXV0aG9yJyxcbiAgICAnY29iYWx0JyxcbiAgICAnY29iYmxlcicsXG4gICAgJ2NvYndlYicsXG4gICAgJ2NvY29hJyxcbiAgICAnY29jb251dCcsXG4gICAgJ2NvZCcsXG4gICAgJ2NvZWRpdG9yJyxcbiAgICAnY29lcmNlJyxcbiAgICAnY29leGlzdCcsXG4gICAgJ2NvZmZlZScsXG4gICAgJ2NvZm91bmRlcicsXG4gICAgJ2NvZ25pdGlvbicsXG4gICAgJ2NvZ25pdGl2ZScsXG4gICAgJ2NvZ3doZWVsJyxcbiAgICAnY29oZXJlbmNlJyxcbiAgICAnY29oZXJlbnQnLFxuICAgICdjb2hlc2l2ZScsXG4gICAgJ2NvaWwnLFxuICAgICdjb2tlJyxcbiAgICAnY29sYScsXG4gICAgJ2NvbGQnLFxuICAgICdjb2xlc2xhdycsXG4gICAgJ2NvbGlzZXVtJyxcbiAgICAnY29sbGFnZScsXG4gICAgJ2NvbGxhcHNlJyxcbiAgICAnY29sbGFyJyxcbiAgICAnY29sbGVjdGVkJyxcbiAgICAnY29sbGVjdG9yJyxcbiAgICAnY29sbGlkZScsXG4gICAgJ2NvbGxpZScsXG4gICAgJ2NvbGxpc2lvbicsXG4gICAgJ2NvbG9uaWFsJyxcbiAgICAnY29sb25pc3QnLFxuICAgICdjb2xvbml6ZScsXG4gICAgJ2NvbG9ueScsXG4gICAgJ2NvbG9zc2FsJyxcbiAgICAnY29sdCcsXG4gICAgJ2NvbWEnLFxuICAgICdjb21lJyxcbiAgICAnY29tZm9ydCcsXG4gICAgJ2NvbWZ5JyxcbiAgICAnY29taWMnLFxuICAgICdjb21pbmcnLFxuICAgICdjb21tYScsXG4gICAgJ2NvbW1lbmNlJyxcbiAgICAnY29tbWVuZCcsXG4gICAgJ2NvbW1lbnQnLFxuICAgICdjb21tZXJjZScsXG4gICAgJ2NvbW1vZGUnLFxuICAgICdjb21tb2RpdHknLFxuICAgICdjb21tb2RvcmUnLFxuICAgICdjb21tb24nLFxuICAgICdjb21tb3Rpb24nLFxuICAgICdjb21tdXRlJyxcbiAgICAnY29tbXV0aW5nJyxcbiAgICAnY29tcGFjdGVkJyxcbiAgICAnY29tcGFjdGVyJyxcbiAgICAnY29tcGFjdGx5JyxcbiAgICAnY29tcGFjdG9yJyxcbiAgICAnY29tcGFuaW9uJyxcbiAgICAnY29tcGFueScsXG4gICAgJ2NvbXBhcmUnLFxuICAgICdjb21wZWwnLFxuICAgICdjb21waWxlJyxcbiAgICAnY29tcGx5JyxcbiAgICAnY29tcG9uZW50JyxcbiAgICAnY29tcG9zZWQnLFxuICAgICdjb21wb3NlcicsXG4gICAgJ2NvbXBvc2l0ZScsXG4gICAgJ2NvbXBvc3QnLFxuICAgICdjb21wb3N1cmUnLFxuICAgICdjb21wb3VuZCcsXG4gICAgJ2NvbXByZXNzJyxcbiAgICAnY29tcHJpc2VkJyxcbiAgICAnY29tcHV0ZXInLFxuICAgICdjb21wdXRpbmcnLFxuICAgICdjb21yYWRlJyxcbiAgICAnY29uY2F2ZScsXG4gICAgJ2NvbmNlYWwnLFxuICAgICdjb25jZWRlZCcsXG4gICAgJ2NvbmNlcHQnLFxuICAgICdjb25jZXJuZWQnLFxuICAgICdjb25jZXJ0JyxcbiAgICAnY29uY2gnLFxuICAgICdjb25jaWVyZ2UnLFxuICAgICdjb25jaXNlJyxcbiAgICAnY29uY2x1ZGUnLFxuICAgICdjb25jcmV0ZScsXG4gICAgJ2NvbmN1cicsXG4gICAgJ2NvbmRlbnNlJyxcbiAgICAnY29uZGltZW50JyxcbiAgICAnY29uZGl0aW9uJyxcbiAgICAnY29uZG9uZScsXG4gICAgJ2NvbmR1Y2l2ZScsXG4gICAgJ2NvbmR1Y3RvcicsXG4gICAgJ2NvbmR1aXQnLFxuICAgICdjb25lJyxcbiAgICAnY29uZmVzcycsXG4gICAgJ2NvbmZldHRpJyxcbiAgICAnY29uZmlkYW50JyxcbiAgICAnY29uZmlkZW50JyxcbiAgICAnY29uZmlkZXInLFxuICAgICdjb25maWRpbmcnLFxuICAgICdjb25maWd1cmUnLFxuICAgICdjb25maW5lZCcsXG4gICAgJ2NvbmZpbmluZycsXG4gICAgJ2NvbmZpcm0nLFxuICAgICdjb25mbGljdCcsXG4gICAgJ2NvbmZvcm0nLFxuICAgICdjb25mb3VuZCcsXG4gICAgJ2NvbmZyb250JyxcbiAgICAnY29uZnVzZWQnLFxuICAgICdjb25mdXNpbmcnLFxuICAgICdjb25mdXNpb24nLFxuICAgICdjb25nZW5pYWwnLFxuICAgICdjb25nZXN0ZWQnLFxuICAgICdjb25ncmF0cycsXG4gICAgJ2NvbmdyZXNzJyxcbiAgICAnY29uaWNhbCcsXG4gICAgJ2NvbmpvaW5lZCcsXG4gICAgJ2Nvbmp1cmUnLFxuICAgICdjb25qdXJvcicsXG4gICAgJ2Nvbm5lY3RlZCcsXG4gICAgJ2Nvbm5lY3RvcicsXG4gICAgJ2NvbnNlbnN1cycsXG4gICAgJ2NvbnNlbnQnLFxuICAgICdjb25zb2xlJyxcbiAgICAnY29uc29saW5nJyxcbiAgICAnY29uc29uYW50JyxcbiAgICAnY29uc3RhYmxlJyxcbiAgICAnY29uc3RhbnQnLFxuICAgICdjb25zdHJhaW4nLFxuICAgICdjb25zdHJpY3QnLFxuICAgICdjb25zdHJ1Y3QnLFxuICAgICdjb25zdWx0JyxcbiAgICAnY29uc3VtZXInLFxuICAgICdjb25zdW1pbmcnLFxuICAgICdjb250YWN0JyxcbiAgICAnY29udGFpbmVyJyxcbiAgICAnY29udGVtcHQnLFxuICAgICdjb250ZW5kJyxcbiAgICAnY29udGVudGVkJyxcbiAgICAnY29udGVudGx5JyxcbiAgICAnY29udGVudHMnLFxuICAgICdjb250ZXN0JyxcbiAgICAnY29udGV4dCcsXG4gICAgJ2NvbnRvcnQnLFxuICAgICdjb250b3VyJyxcbiAgICAnY29udHJpdGUnLFxuICAgICdjb250cm9sJyxcbiAgICAnY29udHVzaW9uJyxcbiAgICAnY29udmVuZScsXG4gICAgJ2NvbnZlbnQnLFxuICAgICdjb3BhcnRuZXInLFxuICAgICdjb3BlJyxcbiAgICAnY29waWVkJyxcbiAgICAnY29waWVyJyxcbiAgICAnY29waWxvdCcsXG4gICAgJ2NvcGluZycsXG4gICAgJ2NvcGlvdXMnLFxuICAgICdjb3BwZXInLFxuICAgICdjb3B5JyxcbiAgICAnY29yYWwnLFxuICAgICdjb3JrJyxcbiAgICAnY29ybmJhbGwnLFxuICAgICdjb3JuYnJlYWQnLFxuICAgICdjb3JuY29iJyxcbiAgICAnY29ybmVhJyxcbiAgICAnY29ybmVkJyxcbiAgICAnY29ybmVyJyxcbiAgICAnY29ybmZpZWxkJyxcbiAgICAnY29ybmZsYWtlJyxcbiAgICAnY29ybmh1c2snLFxuICAgICdjb3JubWVhbCcsXG4gICAgJ2Nvcm5zdGFsaycsXG4gICAgJ2Nvcm55JyxcbiAgICAnY29yb25hcnknLFxuICAgICdjb3JvbmVyJyxcbiAgICAnY29ycG9yYWwnLFxuICAgICdjb3Jwb3JhdGUnLFxuICAgICdjb3JyYWwnLFxuICAgICdjb3JyZWN0JyxcbiAgICAnY29ycmlkb3InLFxuICAgICdjb3Jyb2RlJyxcbiAgICAnY29ycm9kaW5nJyxcbiAgICAnY29ycm9zaXZlJyxcbiAgICAnY29yc2FnZScsXG4gICAgJ2NvcnNldCcsXG4gICAgJ2NvcnRleCcsXG4gICAgJ2Nvc2lnbmVyJyxcbiAgICAnY29zbWV0aWNzJyxcbiAgICAnY29zbWljJyxcbiAgICAnY29zbW9zJyxcbiAgICAnY29zcG9uc29yJyxcbiAgICAnY29zdCcsXG4gICAgJ2NvdHRhZ2UnLFxuICAgICdjb3R0b24nLFxuICAgICdjb3VjaCcsXG4gICAgJ2NvdWdoJyxcbiAgICAnY291bGQnLFxuICAgICdjb3VudGFibGUnLFxuICAgICdjb3VudGRvd24nLFxuICAgICdjb3VudGluZycsXG4gICAgJ2NvdW50bGVzcycsXG4gICAgJ2NvdW50cnknLFxuICAgICdjb3VudHknLFxuICAgICdjb3VyaWVyJyxcbiAgICAnY292ZW5hbnQnLFxuICAgICdjb3ZlcicsXG4gICAgJ2NvdmV0ZWQnLFxuICAgICdjb3ZldGluZycsXG4gICAgJ2NveW5lc3MnLFxuICAgICdjb3ppbHknLFxuICAgICdjb3ppbmVzcycsXG4gICAgJ2NvenknLFxuICAgICdjcmFiYmluZycsXG4gICAgJ2NyYWJncmFzcycsXG4gICAgJ2NyYWJsaWtlJyxcbiAgICAnY3JhYm1lYXQnLFxuICAgICdjcmFkbGUnLFxuICAgICdjcmFkbGluZycsXG4gICAgJ2NyYWZ0ZXInLFxuICAgICdjcmFmdGlseScsXG4gICAgJ2NyYWZ0c21hbicsXG4gICAgJ2NyYWZ0d29yaycsXG4gICAgJ2NyYWZ0eScsXG4gICAgJ2NyYW1wJyxcbiAgICAnY3JhbmJlcnJ5JyxcbiAgICAnY3JhbmUnLFxuICAgICdjcmFuaWFsJyxcbiAgICAnY3Jhbml1bScsXG4gICAgJ2NyYW5rJyxcbiAgICAnY3JhdGUnLFxuICAgICdjcmF2ZScsXG4gICAgJ2NyYXZpbmcnLFxuICAgICdjcmF3ZmlzaCcsXG4gICAgJ2NyYXdsZXJzJyxcbiAgICAnY3Jhd2xpbmcnLFxuICAgICdjcmF5ZmlzaCcsXG4gICAgJ2NyYXlvbicsXG4gICAgJ2NyYXplZCcsXG4gICAgJ2NyYXppbHknLFxuICAgICdjcmF6aW5lc3MnLFxuICAgICdjcmF6eScsXG4gICAgJ2NyZWFtZWQnLFxuICAgICdjcmVhbWVyJyxcbiAgICAnY3JlYW1saWtlJyxcbiAgICAnY3JlYXNlJyxcbiAgICAnY3JlYXNpbmcnLFxuICAgICdjcmVhdGFibGUnLFxuICAgICdjcmVhdGUnLFxuICAgICdjcmVhdGlvbicsXG4gICAgJ2NyZWF0aXZlJyxcbiAgICAnY3JlYXR1cmUnLFxuICAgICdjcmVkaWJsZScsXG4gICAgJ2NyZWRpYmx5JyxcbiAgICAnY3JlZGl0JyxcbiAgICAnY3JlZWQnLFxuICAgICdjcmVtZScsXG4gICAgJ2NyZW9sZScsXG4gICAgJ2NyZXBlJyxcbiAgICAnY3JlcHQnLFxuICAgICdjcmVzY2VudCcsXG4gICAgJ2NyZXN0ZWQnLFxuICAgICdjcmVzdGluZycsXG4gICAgJ2NyZXN0bGVzcycsXG4gICAgJ2NyZXZpY2UnLFxuICAgICdjcmV3bGVzcycsXG4gICAgJ2NyZXdtYW4nLFxuICAgICdjcmV3bWF0ZScsXG4gICAgJ2NyaWInLFxuICAgICdjcmlja2V0JyxcbiAgICAnY3JpZWQnLFxuICAgICdjcmllcicsXG4gICAgJ2NyaW1wJyxcbiAgICAnY3JpbXNvbicsXG4gICAgJ2NyaW5nZScsXG4gICAgJ2NyaW5naW5nJyxcbiAgICAnY3JpbmtsZScsXG4gICAgJ2NyaW5rbHknLFxuICAgICdjcmlzcGVkJyxcbiAgICAnY3Jpc3BpbmcnLFxuICAgICdjcmlzcGx5JyxcbiAgICAnY3Jpc3BuZXNzJyxcbiAgICAnY3Jpc3B5JyxcbiAgICAnY3JpdGVyaWEnLFxuICAgICdjcml0dGVyJyxcbiAgICAnY3JvYWsnLFxuICAgICdjcm9jaycsXG4gICAgJ2Nyb29rJyxcbiAgICAnY3Jvb24nLFxuICAgICdjcm9wJyxcbiAgICAnY3Jvc3MnLFxuICAgICdjcm91Y2gnLFxuICAgICdjcm91dG9uJyxcbiAgICAnY3Jvd2JhcicsXG4gICAgJ2Nyb3dkJyxcbiAgICAnY3Jvd24nLFxuICAgICdjcnVjaWFsJyxcbiAgICAnY3J1ZGVseScsXG4gICAgJ2NydWRlbmVzcycsXG4gICAgJ2NydWVsbHknLFxuICAgICdjcnVlbG5lc3MnLFxuICAgICdjcnVlbHR5JyxcbiAgICAnY3J1bWInLFxuICAgICdjcnVtbWllc3QnLFxuICAgICdjcnVtbXknLFxuICAgICdjcnVtcGV0JyxcbiAgICAnY3J1bXBsZWQnLFxuICAgICdjcnVuY2hlcicsXG4gICAgJ2NydW5jaGluZycsXG4gICAgJ2NydW5jaHknLFxuICAgICdjcnVzYWRlcicsXG4gICAgJ2NydXNoYWJsZScsXG4gICAgJ2NydXNoZWQnLFxuICAgICdjcnVzaGVyJyxcbiAgICAnY3J1c2hpbmcnLFxuICAgICdjcnVzdCcsXG4gICAgJ2NydXgnLFxuICAgICdjcnlpbmcnLFxuICAgICdjcnlwdGljJyxcbiAgICAnY3J5c3RhbCcsXG4gICAgJ2N1YmJ5aG9sZScsXG4gICAgJ2N1YmUnLFxuICAgICdjdWJpY2FsJyxcbiAgICAnY3ViaWNsZScsXG4gICAgJ2N1Y3VtYmVyJyxcbiAgICAnY3VkZGxlJyxcbiAgICAnY3VkZGx5JyxcbiAgICAnY3VmZmxpbmsnLFxuICAgICdjdWxpbmFyeScsXG4gICAgJ2N1bG1pbmF0ZScsXG4gICAgJ2N1bHBhYmxlJyxcbiAgICAnY3VscHJpdCcsXG4gICAgJ2N1bHRpdmF0ZScsXG4gICAgJ2N1bHR1cmFsJyxcbiAgICAnY3VsdHVyZScsXG4gICAgJ2N1cGJlYXJlcicsXG4gICAgJ2N1cGNha2UnLFxuICAgICdjdXBpZCcsXG4gICAgJ2N1cHBlZCcsXG4gICAgJ2N1cHBpbmcnLFxuICAgICdjdXJhYmxlJyxcbiAgICAnY3VyYXRvcicsXG4gICAgJ2N1cmRsZScsXG4gICAgJ2N1cmUnLFxuICAgICdjdXJmZXcnLFxuICAgICdjdXJpbmcnLFxuICAgICdjdXJsZWQnLFxuICAgICdjdXJsZXInLFxuICAgICdjdXJsaW5lc3MnLFxuICAgICdjdXJsaW5nJyxcbiAgICAnY3VybHknLFxuICAgICdjdXJyeScsXG4gICAgJ2N1cnNlJyxcbiAgICAnY3Vyc2l2ZScsXG4gICAgJ2N1cnNvcicsXG4gICAgJ2N1cnRhaW4nLFxuICAgICdjdXJ0bHknLFxuICAgICdjdXJ0c3knLFxuICAgICdjdXJ2YXR1cmUnLFxuICAgICdjdXJ2ZScsXG4gICAgJ2N1cnZ5JyxcbiAgICAnY3VzaHknLFxuICAgICdjdXNwJyxcbiAgICAnY3Vzc2VkJyxcbiAgICAnY3VzdGFyZCcsXG4gICAgJ2N1c3RvZGlhbicsXG4gICAgJ2N1c3RvZHknLFxuICAgICdjdXN0b21hcnknLFxuICAgICdjdXN0b21lcicsXG4gICAgJ2N1c3RvbWl6ZScsXG4gICAgJ2N1c3RvbXMnLFxuICAgICdjdXQnLFxuICAgICdjeWNsZScsXG4gICAgJ2N5Y2xpYycsXG4gICAgJ2N5Y2xpbmcnLFxuICAgICdjeWNsaXN0JyxcbiAgICAnY3lsaW5kZXInLFxuICAgICdjeW1iYWwnLFxuICAgICdjeXRvcGxhc20nLFxuICAgICdjeXRvcGxhc3QnLFxuICAgICdkYWInLFxuICAgICdkYWQnLFxuICAgICdkYWZmb2RpbCcsXG4gICAgJ2RhZ2dlcicsXG4gICAgJ2RhaWx5JyxcbiAgICAnZGFpbnRpbHknLFxuICAgICdkYWludHknLFxuICAgICdkYWlyeScsXG4gICAgJ2RhaXN5JyxcbiAgICAnZGFsbHlpbmcnLFxuICAgICdkYW5jZScsXG4gICAgJ2RhbmNpbmcnLFxuICAgICdkYW5kZWxpb24nLFxuICAgICdkYW5kZXInLFxuICAgICdkYW5kcnVmZicsXG4gICAgJ2RhbmR5JyxcbiAgICAnZGFuZ2VyJyxcbiAgICAnZGFuZ2xlJyxcbiAgICAnZGFuZ2xpbmcnLFxuICAgICdkYXJlZGV2aWwnLFxuICAgICdkYXJlcycsXG4gICAgJ2RhcmluZ2x5JyxcbiAgICAnZGFya2VuZWQnLFxuICAgICdkYXJrZW5pbmcnLFxuICAgICdkYXJraXNoJyxcbiAgICAnZGFya25lc3MnLFxuICAgICdkYXJrcm9vbScsXG4gICAgJ2RhcmxpbmcnLFxuICAgICdkYXJuJyxcbiAgICAnZGFydCcsXG4gICAgJ2RhcndpbmlzbScsXG4gICAgJ2Rhc2gnLFxuICAgICdkYXN0YXJkbHknLFxuICAgICdkYXRhJyxcbiAgICAnZGF0ZWJvb2snLFxuICAgICdkYXRpbmcnLFxuICAgICdkYXVnaHRlcicsXG4gICAgJ2RhdW50aW5nJyxcbiAgICAnZGF3ZGxlcicsXG4gICAgJ2Rhd24nLFxuICAgICdkYXliZWQnLFxuICAgICdkYXlicmVhaycsXG4gICAgJ2RheWNhcmUnLFxuICAgICdkYXlkcmVhbScsXG4gICAgJ2RheWxpZ2h0JyxcbiAgICAnZGF5bG9uZycsXG4gICAgJ2RheXJvb20nLFxuICAgICdkYXl0aW1lJyxcbiAgICAnZGF6emxlcicsXG4gICAgJ2RhenpsaW5nJyxcbiAgICAnZGVhY29uJyxcbiAgICAnZGVhZmVuaW5nJyxcbiAgICAnZGVhZm5lc3MnLFxuICAgICdkZWFsZXInLFxuICAgICdkZWFsaW5nJyxcbiAgICAnZGVhbG1ha2VyJyxcbiAgICAnZGVhbHQnLFxuICAgICdkZWFuJyxcbiAgICAnZGViYXRhYmxlJyxcbiAgICAnZGViYXRlJyxcbiAgICAnZGViYXRpbmcnLFxuICAgICdkZWJpdCcsXG4gICAgJ2RlYnJpZWYnLFxuICAgICdkZWJ0bGVzcycsXG4gICAgJ2RlYnRvcicsXG4gICAgJ2RlYnVnJyxcbiAgICAnZGVidW5rJyxcbiAgICAnZGVjYWRlJyxcbiAgICAnZGVjYWYnLFxuICAgICdkZWNhbCcsXG4gICAgJ2RlY2F0aGxvbicsXG4gICAgJ2RlY2F5JyxcbiAgICAnZGVjZWFzZWQnLFxuICAgICdkZWNlaXQnLFxuICAgICdkZWNlaXZlcicsXG4gICAgJ2RlY2VpdmluZycsXG4gICAgJ2RlY2VtYmVyJyxcbiAgICAnZGVjZW5jeScsXG4gICAgJ2RlY2VudCcsXG4gICAgJ2RlY2VwdGlvbicsXG4gICAgJ2RlY2VwdGl2ZScsXG4gICAgJ2RlY2liZWwnLFxuICAgICdkZWNpZGFibGUnLFxuICAgICdkZWNpbWFsJyxcbiAgICAnZGVjaW1ldGVyJyxcbiAgICAnZGVjaXBoZXInLFxuICAgICdkZWNrJyxcbiAgICAnZGVjbGFyZWQnLFxuICAgICdkZWNsaW5lJyxcbiAgICAnZGVjb2RlJyxcbiAgICAnZGVjb21wb3NlJyxcbiAgICAnZGVjb3JhdGVkJyxcbiAgICAnZGVjb3JhdG9yJyxcbiAgICAnZGVjb3knLFxuICAgICdkZWNyZWFzZScsXG4gICAgJ2RlY3JlZScsXG4gICAgJ2RlZGljYXRlJyxcbiAgICAnZGVkaWNhdG9yJyxcbiAgICAnZGVkdWNlJyxcbiAgICAnZGVkdWN0JyxcbiAgICAnZGVlZCcsXG4gICAgJ2RlZW0nLFxuICAgICdkZWVwZW4nLFxuICAgICdkZWVwbHknLFxuICAgICdkZWVwbmVzcycsXG4gICAgJ2RlZmFjZScsXG4gICAgJ2RlZmFjaW5nJyxcbiAgICAnZGVmYW1lJyxcbiAgICAnZGVmYXVsdCcsXG4gICAgJ2RlZmVhdCcsXG4gICAgJ2RlZmVjdGlvbicsXG4gICAgJ2RlZmVjdGl2ZScsXG4gICAgJ2RlZmVuZGFudCcsXG4gICAgJ2RlZmVuZGVyJyxcbiAgICAnZGVmZW5zZScsXG4gICAgJ2RlZmVuc2l2ZScsXG4gICAgJ2RlZmVycmFsJyxcbiAgICAnZGVmZXJyZWQnLFxuICAgICdkZWZpYW5jZScsXG4gICAgJ2RlZmlhbnQnLFxuICAgICdkZWZpbGUnLFxuICAgICdkZWZpbGluZycsXG4gICAgJ2RlZmluZScsXG4gICAgJ2RlZmluaXRlJyxcbiAgICAnZGVmbGF0ZScsXG4gICAgJ2RlZmxhdGlvbicsXG4gICAgJ2RlZmxhdG9yJyxcbiAgICAnZGVmbGVjdGVkJyxcbiAgICAnZGVmbGVjdG9yJyxcbiAgICAnZGVmb2cnLFxuICAgICdkZWZvcmVzdCcsXG4gICAgJ2RlZnJhdWQnLFxuICAgICdkZWZyb3N0JyxcbiAgICAnZGVmdGx5JyxcbiAgICAnZGVmdXNlJyxcbiAgICAnZGVmeScsXG4gICAgJ2RlZ3JhZGVkJyxcbiAgICAnZGVncmFkaW5nJyxcbiAgICAnZGVncmVhc2UnLFxuICAgICdkZWdyZWUnLFxuICAgICdkZWh5ZHJhdGUnLFxuICAgICdkZWl0eScsXG4gICAgJ2RlamVjdGVkJyxcbiAgICAnZGVsYXknLFxuICAgICdkZWxlZ2F0ZScsXG4gICAgJ2RlbGVnYXRvcicsXG4gICAgJ2RlbGV0ZScsXG4gICAgJ2RlbGV0aW9uJyxcbiAgICAnZGVsaWNhY3knLFxuICAgICdkZWxpY2F0ZScsXG4gICAgJ2RlbGljaW91cycsXG4gICAgJ2RlbGlnaHRlZCcsXG4gICAgJ2RlbGlyaW91cycsXG4gICAgJ2RlbGlyaXVtJyxcbiAgICAnZGVsaXZlcmVyJyxcbiAgICAnZGVsaXZlcnknLFxuICAgICdkZWxvdXNlJyxcbiAgICAnZGVsdGEnLFxuICAgICdkZWx1Z2UnLFxuICAgICdkZWx1c2lvbicsXG4gICAgJ2RlbHV4ZScsXG4gICAgJ2RlbWFuZGluZycsXG4gICAgJ2RlbWVhbmluZycsXG4gICAgJ2RlbWVhbm9yJyxcbiAgICAnZGVtaXNlJyxcbiAgICAnZGVtb2NyYWN5JyxcbiAgICAnZGVtb2NyYXQnLFxuICAgICdkZW1vdGUnLFxuICAgICdkZW1vdGlvbicsXG4gICAgJ2RlbXlzdGlmeScsXG4gICAgJ2RlbmF0dXJlZCcsXG4gICAgJ2RlbmlhYmxlJyxcbiAgICAnZGVuaWFsJyxcbiAgICAnZGVuaW0nLFxuICAgICdkZW5vdGUnLFxuICAgICdkZW5zZScsXG4gICAgJ2RlbnNpdHknLFxuICAgICdkZW50YWwnLFxuICAgICdkZW50aXN0JyxcbiAgICAnZGVudHVyZScsXG4gICAgJ2RlbnknLFxuICAgICdkZW9kb3JhbnQnLFxuICAgICdkZW9kb3JpemUnLFxuICAgICdkZXBhcnRlZCcsXG4gICAgJ2RlcGFydHVyZScsXG4gICAgJ2RlcGljdCcsXG4gICAgJ2RlcGxldGUnLFxuICAgICdkZXBsZXRpb24nLFxuICAgICdkZXBsb3JlZCcsXG4gICAgJ2RlcGxveScsXG4gICAgJ2RlcG9ydCcsXG4gICAgJ2RlcG9zZScsXG4gICAgJ2RlcHJhdmVkJyxcbiAgICAnZGVwcmF2aXR5JyxcbiAgICAnZGVwcmVjYXRlJyxcbiAgICAnZGVwcmVzcycsXG4gICAgJ2RlcHJpdmUnLFxuICAgICdkZXB0aCcsXG4gICAgJ2RlcHV0aXplJyxcbiAgICAnZGVwdXR5JyxcbiAgICAnZGVyYWlsJyxcbiAgICAnZGVyYW5nZWQnLFxuICAgICdkZXJieScsXG4gICAgJ2Rlcml2ZWQnLFxuICAgICdkZXNlY3JhdGUnLFxuICAgICdkZXNlcnZlJyxcbiAgICAnZGVzZXJ2aW5nJyxcbiAgICAnZGVzaWduYXRlJyxcbiAgICAnZGVzaWduZWQnLFxuICAgICdkZXNpZ25lcicsXG4gICAgJ2Rlc2lnbmluZycsXG4gICAgJ2Rlc2tib3VuZCcsXG4gICAgJ2Rlc2t0b3AnLFxuICAgICdkZXNrd29yaycsXG4gICAgJ2Rlc29sYXRlJyxcbiAgICAnZGVzcGFpcicsXG4gICAgJ2Rlc3Bpc2UnLFxuICAgICdkZXNwaXRlJyxcbiAgICAnZGVzdGlueScsXG4gICAgJ2Rlc3RpdHV0ZScsXG4gICAgJ2Rlc3RydWN0JyxcbiAgICAnZGV0YWNoZWQnLFxuICAgICdkZXRhaWwnLFxuICAgICdkZXRlY3Rpb24nLFxuICAgICdkZXRlY3RpdmUnLFxuICAgICdkZXRlY3RvcicsXG4gICAgJ2RldGVudGlvbicsXG4gICAgJ2RldGVyZ2VudCcsXG4gICAgJ2RldGVzdCcsXG4gICAgJ2RldG9uYXRlJyxcbiAgICAnZGV0b25hdG9yJyxcbiAgICAnZGV0b3hpZnknLFxuICAgICdkZXRyYWN0JyxcbiAgICAnZGV1Y2UnLFxuICAgICdkZXZhbHVlJyxcbiAgICAnZGV2aWFuY3knLFxuICAgICdkZXZpYW50JyxcbiAgICAnZGV2aWF0ZScsXG4gICAgJ2RldmlhdGlvbicsXG4gICAgJ2RldmlhdG9yJyxcbiAgICAnZGV2aWNlJyxcbiAgICAnZGV2aW91cycsXG4gICAgJ2Rldm90ZWRseScsXG4gICAgJ2Rldm90ZWUnLFxuICAgICdkZXZvdGlvbicsXG4gICAgJ2Rldm91cmVyJyxcbiAgICAnZGV2b3VyaW5nJyxcbiAgICAnZGV2b3V0bHknLFxuICAgICdkZXh0ZXJpdHknLFxuICAgICdkZXh0ZXJvdXMnLFxuICAgICdkaWFiZXRlcycsXG4gICAgJ2RpYWJldGljJyxcbiAgICAnZGlhYm9saWMnLFxuICAgICdkaWFnbm9zZXMnLFxuICAgICdkaWFnbm9zaXMnLFxuICAgICdkaWFncmFtJyxcbiAgICAnZGlhbCcsXG4gICAgJ2RpYW1ldGVyJyxcbiAgICAnZGlhcGVyJyxcbiAgICAnZGlhcGhyYWdtJyxcbiAgICAnZGlhcnknLFxuICAgICdkaWNlJyxcbiAgICAnZGljaW5nJyxcbiAgICAnZGljdGF0ZScsXG4gICAgJ2RpY3RhdGlvbicsXG4gICAgJ2RpY3RhdG9yJyxcbiAgICAnZGlmZmljdWx0JyxcbiAgICAnZGlmZnVzZWQnLFxuICAgICdkaWZmdXNlcicsXG4gICAgJ2RpZmZ1c2lvbicsXG4gICAgJ2RpZmZ1c2l2ZScsXG4gICAgJ2RpZycsXG4gICAgJ2RpbGF0aW9uJyxcbiAgICAnZGlsaWdlbmNlJyxcbiAgICAnZGlsaWdlbnQnLFxuICAgICdkaWxsJyxcbiAgICAnZGlsdXRlJyxcbiAgICAnZGltZScsXG4gICAgJ2RpbWluaXNoJyxcbiAgICAnZGltbHknLFxuICAgICdkaW1tZWQnLFxuICAgICdkaW1tZXInLFxuICAgICdkaW1uZXNzJyxcbiAgICAnZGltcGxlJyxcbiAgICAnZGluZXInLFxuICAgICdkaW5nYmF0JyxcbiAgICAnZGluZ2h5JyxcbiAgICAnZGluZ2luZXNzJyxcbiAgICAnZGluZ28nLFxuICAgICdkaW5neScsXG4gICAgJ2RpbmluZycsXG4gICAgJ2Rpbm5lcicsXG4gICAgJ2Rpb2Nlc2UnLFxuICAgICdkaW94aWRlJyxcbiAgICAnZGlwbG9tYScsXG4gICAgJ2RpcHBlZCcsXG4gICAgJ2RpcHBlcicsXG4gICAgJ2RpcHBpbmcnLFxuICAgICdkaXJlY3RlZCcsXG4gICAgJ2RpcmVjdGlvbicsXG4gICAgJ2RpcmVjdGl2ZScsXG4gICAgJ2RpcmVjdGx5JyxcbiAgICAnZGlyZWN0b3J5JyxcbiAgICAnZGlyZW5lc3MnLFxuICAgICdkaXJ0aW5lc3MnLFxuICAgICdkaXNhYmxlZCcsXG4gICAgJ2Rpc2FncmVlJyxcbiAgICAnZGlzYWxsb3cnLFxuICAgICdkaXNhcm0nLFxuICAgICdkaXNhcnJheScsXG4gICAgJ2Rpc2FzdGVyJyxcbiAgICAnZGlzYmFuZCcsXG4gICAgJ2Rpc2JlbGllZicsXG4gICAgJ2Rpc2J1cnNlJyxcbiAgICAnZGlzY2FyZCcsXG4gICAgJ2Rpc2Nlcm4nLFxuICAgICdkaXNjaGFyZ2UnLFxuICAgICdkaXNjbG9zZScsXG4gICAgJ2Rpc2NvbG9yJyxcbiAgICAnZGlzY291bnQnLFxuICAgICdkaXNjb3Vyc2UnLFxuICAgICdkaXNjb3ZlcicsXG4gICAgJ2Rpc2N1c3MnLFxuICAgICdkaXNkYWluJyxcbiAgICAnZGlzZW5nYWdlJyxcbiAgICAnZGlzZmlndXJlJyxcbiAgICAnZGlzZ3JhY2UnLFxuICAgICdkaXNoJyxcbiAgICAnZGlzaW5mZWN0JyxcbiAgICAnZGlzam9pbicsXG4gICAgJ2Rpc2snLFxuICAgICdkaXNsaWtlJyxcbiAgICAnZGlzbGlraW5nJyxcbiAgICAnZGlzbG9jYXRlJyxcbiAgICAnZGlzbG9kZ2UnLFxuICAgICdkaXNsb3lhbCcsXG4gICAgJ2Rpc21hbnRsZScsXG4gICAgJ2Rpc21heScsXG4gICAgJ2Rpc21pc3MnLFxuICAgICdkaXNtb3VudCcsXG4gICAgJ2Rpc29iZXknLFxuICAgICdkaXNvcmRlcicsXG4gICAgJ2Rpc293bicsXG4gICAgJ2Rpc3BhcmF0ZScsXG4gICAgJ2Rpc3Bhcml0eScsXG4gICAgJ2Rpc3BhdGNoJyxcbiAgICAnZGlzcGVuc2UnLFxuICAgICdkaXNwZXJzYWwnLFxuICAgICdkaXNwZXJzZWQnLFxuICAgICdkaXNwZXJzZXInLFxuICAgICdkaXNwbGFjZScsXG4gICAgJ2Rpc3BsYXknLFxuICAgICdkaXNwbGVhc2UnLFxuICAgICdkaXNwb3NhbCcsXG4gICAgJ2Rpc3Bvc2UnLFxuICAgICdkaXNwcm92ZScsXG4gICAgJ2Rpc3B1dGUnLFxuICAgICdkaXNyZWdhcmQnLFxuICAgICdkaXNydXB0JyxcbiAgICAnZGlzc3VhZGUnLFxuICAgICdkaXN0YW5jZScsXG4gICAgJ2Rpc3RhbnQnLFxuICAgICdkaXN0YXN0ZScsXG4gICAgJ2Rpc3RpbGwnLFxuICAgICdkaXN0aW5jdCcsXG4gICAgJ2Rpc3RvcnQnLFxuICAgICdkaXN0cmFjdCcsXG4gICAgJ2Rpc3RyZXNzJyxcbiAgICAnZGlzdHJpY3QnLFxuICAgICdkaXN0cnVzdCcsXG4gICAgJ2RpdGNoJyxcbiAgICAnZGl0dG8nLFxuICAgICdkaXR6eScsXG4gICAgJ2RpdmlkYWJsZScsXG4gICAgJ2RpdmlkZWQnLFxuICAgICdkaXZpZGVuZCcsXG4gICAgJ2RpdmlkZXJzJyxcbiAgICAnZGl2aWRpbmcnLFxuICAgICdkaXZpbmVseScsXG4gICAgJ2RpdmluZycsXG4gICAgJ2RpdmluaXR5JyxcbiAgICAnZGl2aXNpYmxlJyxcbiAgICAnZGl2aXNpYmx5JyxcbiAgICAnZGl2aXNpb24nLFxuICAgICdkaXZpc2l2ZScsXG4gICAgJ2Rpdm9yY2VlJyxcbiAgICAnZGl6emluZXNzJyxcbiAgICAnZGl6enknLFxuICAgICdkb2FibGUnLFxuICAgICdkb2NpbGUnLFxuICAgICdkb2NrJyxcbiAgICAnZG9jdHJpbmUnLFxuICAgICdkb2N1bWVudCcsXG4gICAgJ2RvZGdlJyxcbiAgICAnZG9kZ3knLFxuICAgICdkb2lseScsXG4gICAgJ2RvaW5nJyxcbiAgICAnZG9sZScsXG4gICAgJ2RvbGxhcicsXG4gICAgJ2RvbGxob3VzZScsXG4gICAgJ2RvbGxvcCcsXG4gICAgJ2RvbGx5JyxcbiAgICAnZG9scGhpbicsXG4gICAgJ2RvbWFpbicsXG4gICAgJ2RvbWVsaWtlJyxcbiAgICAnZG9tZXN0aWMnLFxuICAgICdkb21pbmlvbicsXG4gICAgJ2RvbWlub2VzJyxcbiAgICAnZG9uYXRlZCcsXG4gICAgJ2RvbmF0aW9uJyxcbiAgICAnZG9uYXRvcicsXG4gICAgJ2Rvbm9yJyxcbiAgICAnZG9udXQnLFxuICAgICdkb29kbGUnLFxuICAgICdkb29yYmVsbCcsXG4gICAgJ2Rvb3JmcmFtZScsXG4gICAgJ2Rvb3Jrbm9iJyxcbiAgICAnZG9vcm1hbicsXG4gICAgJ2Rvb3JtYXQnLFxuICAgICdkb29ybmFpbCcsXG4gICAgJ2Rvb3Jwb3N0JyxcbiAgICAnZG9vcnN0ZXAnLFxuICAgICdkb29yc3RvcCcsXG4gICAgJ2Rvb3J3YXknLFxuICAgICdkb296eScsXG4gICAgJ2RvcmsnLFxuICAgICdkb3JtaXRvcnknLFxuICAgICdkb3JzYWwnLFxuICAgICdkb3NhZ2UnLFxuICAgICdkb3NlJyxcbiAgICAnZG90dGVkJyxcbiAgICAnZG91YmxpbmcnLFxuICAgICdkb3VjaGUnLFxuICAgICdkb3ZlJyxcbiAgICAnZG93bicsXG4gICAgJ2Rvd3J5JyxcbiAgICAnZG96ZScsXG4gICAgJ2RyYWInLFxuICAgICdkcmFnZ2luZycsXG4gICAgJ2RyYWdvbmZseScsXG4gICAgJ2RyYWdvbmlzaCcsXG4gICAgJ2RyYWdzdGVyJyxcbiAgICAnZHJhaW5hYmxlJyxcbiAgICAnZHJhaW5hZ2UnLFxuICAgICdkcmFpbmVkJyxcbiAgICAnZHJhaW5lcicsXG4gICAgJ2RyYWlucGlwZScsXG4gICAgJ2RyYW1hdGljJyxcbiAgICAnZHJhbWF0aXplJyxcbiAgICAnZHJhbmsnLFxuICAgICdkcmFwZXJ5JyxcbiAgICAnZHJhc3RpYycsXG4gICAgJ2RyYXcnLFxuICAgICdkcmVhZGVkJyxcbiAgICAnZHJlYWRmdWwnLFxuICAgICdkcmVhZGxvY2snLFxuICAgICdkcmVhbWJvYXQnLFxuICAgICdkcmVhbWlseScsXG4gICAgJ2RyZWFtbGFuZCcsXG4gICAgJ2RyZWFtbGVzcycsXG4gICAgJ2RyZWFtbGlrZScsXG4gICAgJ2RyZWFtdCcsXG4gICAgJ2RyZWFteScsXG4gICAgJ2RyZWFyaWx5JyxcbiAgICAnZHJlYXJ5JyxcbiAgICAnZHJlbmNoJyxcbiAgICAnZHJlc3MnLFxuICAgICdkcmV3JyxcbiAgICAnZHJpYmJsZScsXG4gICAgJ2RyaWVkJyxcbiAgICAnZHJpZXInLFxuICAgICdkcmlmdCcsXG4gICAgJ2RyaWxsZXInLFxuICAgICdkcmlsbGluZycsXG4gICAgJ2RyaW5rYWJsZScsXG4gICAgJ2RyaW5raW5nJyxcbiAgICAnZHJpcHBpbmcnLFxuICAgICdkcmlwcHknLFxuICAgICdkcml2YWJsZScsXG4gICAgJ2RyaXZlbicsXG4gICAgJ2RyaXZlcicsXG4gICAgJ2RyaXZld2F5JyxcbiAgICAnZHJpdmluZycsXG4gICAgJ2RyaXp6bGUnLFxuICAgICdkcml6emx5JyxcbiAgICAnZHJvbmUnLFxuICAgICdkcm9vbCcsXG4gICAgJ2Ryb29wJyxcbiAgICAnZHJvcC1kb3duJyxcbiAgICAnZHJvcGJveCcsXG4gICAgJ2Ryb3BraWNrJyxcbiAgICAnZHJvcGxldCcsXG4gICAgJ2Ryb3BvdXQnLFxuICAgICdkcm9wcGVyJyxcbiAgICAnZHJvdmUnLFxuICAgICdkcm93bicsXG4gICAgJ2Ryb3dzaWx5JyxcbiAgICAnZHJ1ZGdlJyxcbiAgICAnZHJ1bScsXG4gICAgJ2RyeScsXG4gICAgJ2R1YmJlZCcsXG4gICAgJ2R1YmlvdXNseScsXG4gICAgJ2R1Y2hlc3MnLFxuICAgICdkdWNrYmlsbCcsXG4gICAgJ2R1Y2tpbmcnLFxuICAgICdkdWNrbGluZycsXG4gICAgJ2R1Y2t0YWlsJyxcbiAgICAnZHVja3knLFxuICAgICdkdWN0JyxcbiAgICAnZHVkZScsXG4gICAgJ2R1ZmZlbCcsXG4gICAgJ2R1Z291dCcsXG4gICAgJ2R1aCcsXG4gICAgJ2R1a2UnLFxuICAgICdkdWxsZXInLFxuICAgICdkdWxsbmVzcycsXG4gICAgJ2R1bHknLFxuICAgICdkdW1waW5nJyxcbiAgICAnZHVtcGxpbmcnLFxuICAgICdkdW1wc3RlcicsXG4gICAgJ2R1bycsXG4gICAgJ2R1cGUnLFxuICAgICdkdXBsZXgnLFxuICAgICdkdXBsaWNhdGUnLFxuICAgICdkdXBsaWNpdHknLFxuICAgICdkdXJhYmxlJyxcbiAgICAnZHVyYWJseScsXG4gICAgJ2R1cmF0aW9uJyxcbiAgICAnZHVyZXNzJyxcbiAgICAnZHVyaW5nJyxcbiAgICAnZHVzaycsXG4gICAgJ2R1c3QnLFxuICAgICdkdXRpZnVsJyxcbiAgICAnZHV0eScsXG4gICAgJ2R1dmV0JyxcbiAgICAnZHdhcmYnLFxuICAgICdkd2VlYicsXG4gICAgJ2R3ZWxsZWQnLFxuICAgICdkd2VsbGVyJyxcbiAgICAnZHdlbGxpbmcnLFxuICAgICdkd2luZGxlJyxcbiAgICAnZHdpbmRsaW5nJyxcbiAgICAnZHluYW1pYycsXG4gICAgJ2R5bmFtaXRlJyxcbiAgICAnZHluYXN0eScsXG4gICAgJ2R5c2xleGlhJyxcbiAgICAnZHlzbGV4aWMnLFxuICAgICdlYWNoJyxcbiAgICAnZWFnbGUnLFxuICAgICdlYXJhY2hlJyxcbiAgICAnZWFyZHJ1bScsXG4gICAgJ2VhcmZsYXAnLFxuICAgICdlYXJmdWwnLFxuICAgICdlYXJsb2JlJyxcbiAgICAnZWFybHknLFxuICAgICdlYXJtYXJrJyxcbiAgICAnZWFybXVmZicsXG4gICAgJ2VhcnBob25lJyxcbiAgICAnZWFycGllY2UnLFxuICAgICdlYXJwbHVncycsXG4gICAgJ2VhcnJpbmcnLFxuICAgICdlYXJzaG90JyxcbiAgICAnZWFydGhlbicsXG4gICAgJ2VhcnRobGlrZScsXG4gICAgJ2VhcnRobGluZycsXG4gICAgJ2VhcnRobHknLFxuICAgICdlYXJ0aHdvcm0nLFxuICAgICdlYXJ0aHknLFxuICAgICdlYXJ3aWcnLFxuICAgICdlYXNlZnVsJyxcbiAgICAnZWFzZWwnLFxuICAgICdlYXNpZXN0JyxcbiAgICAnZWFzaWx5JyxcbiAgICAnZWFzaW5lc3MnLFxuICAgICdlYXNpbmcnLFxuICAgICdlYXN0Ym91bmQnLFxuICAgICdlYXN0Y29hc3QnLFxuICAgICdlYXN0ZXInLFxuICAgICdlYXN0d2FyZCcsXG4gICAgJ2VhdGFibGUnLFxuICAgICdlYXRlbicsXG4gICAgJ2VhdGVyeScsXG4gICAgJ2VhdGluZycsXG4gICAgJ2VhdHMnLFxuICAgICdlYmF5JyxcbiAgICAnZWJvbnknLFxuICAgICdlYm9vaycsXG4gICAgJ2VjYXJkJyxcbiAgICAnZWNjZW50cmljJyxcbiAgICAnZWNobycsXG4gICAgJ2VjbGFpcicsXG4gICAgJ2VjbGlwc2UnLFxuICAgICdlY29sb2dpc3QnLFxuICAgICdlY29sb2d5JyxcbiAgICAnZWNvbm9taWMnLFxuICAgICdlY29ub21pc3QnLFxuICAgICdlY29ub215JyxcbiAgICAnZWNvc3BoZXJlJyxcbiAgICAnZWNvc3lzdGVtJyxcbiAgICAnZWRnZScsXG4gICAgJ2VkZ2luZXNzJyxcbiAgICAnZWRnaW5nJyxcbiAgICAnZWRneScsXG4gICAgJ2VkaXRpb24nLFxuICAgICdlZGl0b3InLFxuICAgICdlZHVjYXRlZCcsXG4gICAgJ2VkdWNhdGlvbicsXG4gICAgJ2VkdWNhdG9yJyxcbiAgICAnZWVsJyxcbiAgICAnZWZmZWN0aXZlJyxcbiAgICAnZWZmZWN0cycsXG4gICAgJ2VmZmljaWVudCcsXG4gICAgJ2VmZm9ydCcsXG4gICAgJ2VnZ2JlYXRlcicsXG4gICAgJ2VnZ2luZycsXG4gICAgJ2VnZ25vZycsXG4gICAgJ2VnZ3BsYW50JyxcbiAgICAnZWdnc2hlbGwnLFxuICAgICdlZ29tYW5pYWMnLFxuICAgICdlZ290aXNtJyxcbiAgICAnZWdvdGlzdGljJyxcbiAgICAnZWl0aGVyJyxcbiAgICAnZWplY3QnLFxuICAgICdlbGFib3JhdGUnLFxuICAgICdlbGFzdGljJyxcbiAgICAnZWxhdGVkJyxcbiAgICAnZWxib3cnLFxuICAgICdlbGRlcmNhcmUnLFxuICAgICdlbGRlcmx5JyxcbiAgICAnZWxkZXN0JyxcbiAgICAnZWxlY3RhYmxlJyxcbiAgICAnZWxlY3Rpb24nLFxuICAgICdlbGVjdGl2ZScsXG4gICAgJ2VsZXBoYW50JyxcbiAgICAnZWxldmF0ZScsXG4gICAgJ2VsZXZhdGluZycsXG4gICAgJ2VsZXZhdGlvbicsXG4gICAgJ2VsZXZhdG9yJyxcbiAgICAnZWxldmVuJyxcbiAgICAnZWxmJyxcbiAgICAnZWxpZ2libGUnLFxuICAgICdlbGlnaWJseScsXG4gICAgJ2VsaW1pbmF0ZScsXG4gICAgJ2VsaXRlJyxcbiAgICAnZWxpdGlzbScsXG4gICAgJ2VsaXhpcicsXG4gICAgJ2VsaycsXG4gICAgJ2VsbGlwc2UnLFxuICAgICdlbGxpcHRpYycsXG4gICAgJ2VsbScsXG4gICAgJ2Vsb25nYXRlZCcsXG4gICAgJ2Vsb3BlJyxcbiAgICAnZWxvcXVlbmNlJyxcbiAgICAnZWxvcXVlbnQnLFxuICAgICdlbHNld2hlcmUnLFxuICAgICdlbHVkZScsXG4gICAgJ2VsdXNpdmUnLFxuICAgICdlbHZlcycsXG4gICAgJ2VtYWlsJyxcbiAgICAnZW1iYXJnbycsXG4gICAgJ2VtYmFyaycsXG4gICAgJ2VtYmFzc3knLFxuICAgICdlbWJhdHRsZWQnLFxuICAgICdlbWJlbGxpc2gnLFxuICAgICdlbWJlcicsXG4gICAgJ2VtYmV6emxlJyxcbiAgICAnZW1ibGF6ZScsXG4gICAgJ2VtYmxlbScsXG4gICAgJ2VtYm9keScsXG4gICAgJ2VtYm9saXNtJyxcbiAgICAnZW1ib3NzJyxcbiAgICAnZW1icm9pZGVyJyxcbiAgICAnZW1jZWUnLFxuICAgICdlbWVyYWxkJyxcbiAgICAnZW1lcmdlbmN5JyxcbiAgICAnZW1pc3Npb24nLFxuICAgICdlbWl0JyxcbiAgICAnZW1vdGUnLFxuICAgICdlbW90aWNvbicsXG4gICAgJ2Vtb3Rpb24nLFxuICAgICdlbXBhdGhpYycsXG4gICAgJ2VtcGF0aHknLFxuICAgICdlbXBlcm9yJyxcbiAgICAnZW1waGFzZXMnLFxuICAgICdlbXBoYXNpcycsXG4gICAgJ2VtcGhhc2l6ZScsXG4gICAgJ2VtcGhhdGljJyxcbiAgICAnZW1waXJpY2FsJyxcbiAgICAnZW1wbG95ZWQnLFxuICAgICdlbXBsb3llZScsXG4gICAgJ2VtcGxveWVyJyxcbiAgICAnZW1wb3JpdW0nLFxuICAgICdlbXBvd2VyJyxcbiAgICAnZW1wdGllcicsXG4gICAgJ2VtcHRpbmVzcycsXG4gICAgJ2VtcHR5JyxcbiAgICAnZW11JyxcbiAgICAnZW5hYmxlJyxcbiAgICAnZW5hY3RtZW50JyxcbiAgICAnZW5hbWVsJyxcbiAgICAnZW5jaGFudGVkJyxcbiAgICAnZW5jaGlsYWRhJyxcbiAgICAnZW5jaXJjbGUnLFxuICAgICdlbmNsb3NlJyxcbiAgICAnZW5jbG9zdXJlJyxcbiAgICAnZW5jb2RlJyxcbiAgICAnZW5jb3JlJyxcbiAgICAnZW5jb3VudGVyJyxcbiAgICAnZW5jb3VyYWdlJyxcbiAgICAnZW5jcm9hY2gnLFxuICAgICdlbmNydXN0JyxcbiAgICAnZW5jcnlwdCcsXG4gICAgJ2VuZGFuZ2VyJyxcbiAgICAnZW5kZWFyZWQnLFxuICAgICdlbmRlYXJpbmcnLFxuICAgICdlbmRlZCcsXG4gICAgJ2VuZGluZycsXG4gICAgJ2VuZGxlc3MnLFxuICAgICdlbmRub3RlJyxcbiAgICAnZW5kb2NyaW5lJyxcbiAgICAnZW5kb3JwaGluJyxcbiAgICAnZW5kb3JzZScsXG4gICAgJ2VuZG93bWVudCcsXG4gICAgJ2VuZHBvaW50JyxcbiAgICAnZW5kdXJhYmxlJyxcbiAgICAnZW5kdXJhbmNlJyxcbiAgICAnZW5kdXJpbmcnLFxuICAgICdlbmVyZ2V0aWMnLFxuICAgICdlbmVyZ2l6ZScsXG4gICAgJ2VuZXJneScsXG4gICAgJ2VuZm9yY2VkJyxcbiAgICAnZW5mb3JjZXInLFxuICAgICdlbmdhZ2VkJyxcbiAgICAnZW5nYWdpbmcnLFxuICAgICdlbmdpbmUnLFxuICAgICdlbmdvcmdlJyxcbiAgICAnZW5ncmF2ZWQnLFxuICAgICdlbmdyYXZlcicsXG4gICAgJ2VuZ3JhdmluZycsXG4gICAgJ2VuZ3Jvc3MnLFxuICAgICdlbmd1bGYnLFxuICAgICdlbmhhbmNlJyxcbiAgICAnZW5pZ21hdGljJyxcbiAgICAnZW5qb3lhYmxlJyxcbiAgICAnZW5qb3lhYmx5JyxcbiAgICAnZW5qb3llcicsXG4gICAgJ2Vuam95aW5nJyxcbiAgICAnZW5qb3ltZW50JyxcbiAgICAnZW5sYXJnZWQnLFxuICAgICdlbmxhcmdpbmcnLFxuICAgICdlbmxpZ2h0ZW4nLFxuICAgICdlbmxpc3RlZCcsXG4gICAgJ2VucXVpcmVyJyxcbiAgICAnZW5yYWdlJyxcbiAgICAnZW5yaWNoJyxcbiAgICAnZW5yb2xsJyxcbiAgICAnZW5zbGF2ZScsXG4gICAgJ2Vuc25hcmUnLFxuICAgICdlbnN1cmUnLFxuICAgICdlbnRhaWwnLFxuICAgICdlbnRhbmdsZWQnLFxuICAgICdlbnRlcmluZycsXG4gICAgJ2VudGVydGFpbicsXG4gICAgJ2VudGljaW5nJyxcbiAgICAnZW50aXJlJyxcbiAgICAnZW50aXRsZScsXG4gICAgJ2VudGl0eScsXG4gICAgJ2VudG9tYicsXG4gICAgJ2VudG91cmFnZScsXG4gICAgJ2VudHJhcCcsXG4gICAgJ2VudHJlZScsXG4gICAgJ2VudHJlbmNoJyxcbiAgICAnZW50cnVzdCcsXG4gICAgJ2VudHJ5d2F5JyxcbiAgICAnZW50d2luZScsXG4gICAgJ2VudW5jaWF0ZScsXG4gICAgJ2VudmVsb3BlJyxcbiAgICAnZW52aWFibGUnLFxuICAgICdlbnZpYWJseScsXG4gICAgJ2VudmlvdXMnLFxuICAgICdlbnZpc2lvbicsXG4gICAgJ2Vudm95JyxcbiAgICAnZW52eScsXG4gICAgJ2VuenltZScsXG4gICAgJ2VwaWMnLFxuICAgICdlcGlkZW1pYycsXG4gICAgJ2VwaWRlcm1hbCcsXG4gICAgJ2VwaWRlcm1pcycsXG4gICAgJ2VwaWR1cmFsJyxcbiAgICAnZXBpbGVwc3knLFxuICAgICdlcGlsZXB0aWMnLFxuICAgICdlcGlsb2d1ZScsXG4gICAgJ2VwaXBoYW55JyxcbiAgICAnZXBpc29kZScsXG4gICAgJ2VxdWFsJyxcbiAgICAnZXF1YXRlJyxcbiAgICAnZXF1YXRpb24nLFxuICAgICdlcXVhdG9yJyxcbiAgICAnZXF1aW5veCcsXG4gICAgJ2VxdWlwbWVudCcsXG4gICAgJ2VxdWl0eScsXG4gICAgJ2VxdWl2b2NhbCcsXG4gICAgJ2VyYWRpY2F0ZScsXG4gICAgJ2VyYXNhYmxlJyxcbiAgICAnZXJhc2VkJyxcbiAgICAnZXJhc2VyJyxcbiAgICAnZXJhc3VyZScsXG4gICAgJ2VyZ29ub21pYycsXG4gICAgJ2VycmFuZCcsXG4gICAgJ2VycmFudCcsXG4gICAgJ2VycmF0aWMnLFxuICAgICdlcnJvcicsXG4gICAgJ2VydXB0JyxcbiAgICAnZXNjYWxhdGUnLFxuICAgICdlc2NhbGF0b3InLFxuICAgICdlc2NhcGFibGUnLFxuICAgICdlc2NhcGFkZScsXG4gICAgJ2VzY2FwaXN0JyxcbiAgICAnZXNjYXJnb3QnLFxuICAgICdlc2tpbW8nLFxuICAgICdlc29waGFndXMnLFxuICAgICdlc3Bpb25hZ2UnLFxuICAgICdlc3ByZXNzbycsXG4gICAgJ2VzcXVpcmUnLFxuICAgICdlc3NheScsXG4gICAgJ2Vzc2VuY2UnLFxuICAgICdlc3NlbnRpYWwnLFxuICAgICdlc3RhYmxpc2gnLFxuICAgICdlc3RhdGUnLFxuICAgICdlc3RlZW1lZCcsXG4gICAgJ2VzdGltYXRlJyxcbiAgICAnZXN0aW1hdG9yJyxcbiAgICAnZXN0cmFuZ2VkJyxcbiAgICAnZXN0cm9nZW4nLFxuICAgICdldGNoaW5nJyxcbiAgICAnZXRlcm5hbCcsXG4gICAgJ2V0ZXJuaXR5JyxcbiAgICAnZXRoYW5vbCcsXG4gICAgJ2V0aGVyJyxcbiAgICAnZXRoaWNhbGx5JyxcbiAgICAnZXRoaWNzJyxcbiAgICAnZXVwaGVtaXNtJyxcbiAgICAnZXZhY3VhdGUnLFxuICAgICdldmFjdWVlJyxcbiAgICAnZXZhZGUnLFxuICAgICdldmFsdWF0ZScsXG4gICAgJ2V2YWx1YXRvcicsXG4gICAgJ2V2YXBvcmF0ZScsXG4gICAgJ2V2YXNpb24nLFxuICAgICdldmFzaXZlJyxcbiAgICAnZXZlbicsXG4gICAgJ2V2ZXJnbGFkZScsXG4gICAgJ2V2ZXJncmVlbicsXG4gICAgJ2V2ZXJ5Ym9keScsXG4gICAgJ2V2ZXJ5ZGF5JyxcbiAgICAnZXZlcnlvbmUnLFxuICAgICdldmljdCcsXG4gICAgJ2V2aWRlbmNlJyxcbiAgICAnZXZpZGVudCcsXG4gICAgJ2V2aWwnLFxuICAgICdldm9rZScsXG4gICAgJ2V2b2x1dGlvbicsXG4gICAgJ2V2b2x2ZScsXG4gICAgJ2V4YWN0JyxcbiAgICAnZXhhbHRlZCcsXG4gICAgJ2V4YW1wbGUnLFxuICAgICdleGNhdmF0ZScsXG4gICAgJ2V4Y2F2YXRvcicsXG4gICAgJ2V4Y2VlZGluZycsXG4gICAgJ2V4Y2VwdGlvbicsXG4gICAgJ2V4Y2VzcycsXG4gICAgJ2V4Y2hhbmdlJyxcbiAgICAnZXhjaXRhYmxlJyxcbiAgICAnZXhjaXRpbmcnLFxuICAgICdleGNsYWltJyxcbiAgICAnZXhjbHVkZScsXG4gICAgJ2V4Y2x1ZGluZycsXG4gICAgJ2V4Y2x1c2lvbicsXG4gICAgJ2V4Y2x1c2l2ZScsXG4gICAgJ2V4Y3JldGlvbicsXG4gICAgJ2V4Y3JldG9yeScsXG4gICAgJ2V4Y3Vyc2lvbicsXG4gICAgJ2V4Y3VzYWJsZScsXG4gICAgJ2V4Y3VzYWJseScsXG4gICAgJ2V4Y3VzZScsXG4gICAgJ2V4ZW1wbGFyeScsXG4gICAgJ2V4ZW1wbGlmeScsXG4gICAgJ2V4ZW1wdGlvbicsXG4gICAgJ2V4ZXJjaXNlcicsXG4gICAgJ2V4ZXJ0JyxcbiAgICAnZXhlcycsXG4gICAgJ2V4Zm9saWF0ZScsXG4gICAgJ2V4aGFsZScsXG4gICAgJ2V4aGF1c3QnLFxuICAgICdleGh1bWUnLFxuICAgICdleGlsZScsXG4gICAgJ2V4aXN0aW5nJyxcbiAgICAnZXhpdCcsXG4gICAgJ2V4b2R1cycsXG4gICAgJ2V4b25lcmF0ZScsXG4gICAgJ2V4b3JjaXNtJyxcbiAgICAnZXhvcmNpc3QnLFxuICAgICdleHBhbmQnLFxuICAgICdleHBhbnNlJyxcbiAgICAnZXhwYW5zaW9uJyxcbiAgICAnZXhwYW5zaXZlJyxcbiAgICAnZXhwZWN0YW50JyxcbiAgICAnZXhwZWRpdGVkJyxcbiAgICAnZXhwZWRpdGVyJyxcbiAgICAnZXhwZWwnLFxuICAgICdleHBlbmQnLFxuICAgICdleHBlbnNlcycsXG4gICAgJ2V4cGVuc2l2ZScsXG4gICAgJ2V4cGVydCcsXG4gICAgJ2V4cGlyZScsXG4gICAgJ2V4cGlyaW5nJyxcbiAgICAnZXhwbGFpbicsXG4gICAgJ2V4cGxldGl2ZScsXG4gICAgJ2V4cGxpY2l0JyxcbiAgICAnZXhwbG9kZScsXG4gICAgJ2V4cGxvaXQnLFxuICAgICdleHBsb3JlJyxcbiAgICAnZXhwbG9yaW5nJyxcbiAgICAnZXhwb25lbnQnLFxuICAgICdleHBvcnRlcicsXG4gICAgJ2V4cG9zYWJsZScsXG4gICAgJ2V4cG9zZScsXG4gICAgJ2V4cG9zdXJlJyxcbiAgICAnZXhwcmVzcycsXG4gICAgJ2V4cHVsc2lvbicsXG4gICAgJ2V4cXVpc2l0ZScsXG4gICAgJ2V4dGVuZGVkJyxcbiAgICAnZXh0ZW5kaW5nJyxcbiAgICAnZXh0ZW50JyxcbiAgICAnZXh0ZW51YXRlJyxcbiAgICAnZXh0ZXJpb3InLFxuICAgICdleHRlcm5hbCcsXG4gICAgJ2V4dGluY3QnLFxuICAgICdleHRvcnRpb24nLFxuICAgICdleHRyYWRpdGUnLFxuICAgICdleHRyYXMnLFxuICAgICdleHRyb3ZlcnQnLFxuICAgICdleHRydWRlJyxcbiAgICAnZXh0cnVkaW5nJyxcbiAgICAnZXh1YmVyYW50JyxcbiAgICAnZmFibGUnLFxuICAgICdmYWJyaWMnLFxuICAgICdmYWJ1bG91cycsXG4gICAgJ2ZhY2Vib29rJyxcbiAgICAnZmFjZWNsb3RoJyxcbiAgICAnZmFjZWRvd24nLFxuICAgICdmYWNlbGVzcycsXG4gICAgJ2ZhY2VsaWZ0JyxcbiAgICAnZmFjZXBsYXRlJyxcbiAgICAnZmFjZXRlZCcsXG4gICAgJ2ZhY2lhbCcsXG4gICAgJ2ZhY2lsaXR5JyxcbiAgICAnZmFjaW5nJyxcbiAgICAnZmFjc2ltaWxlJyxcbiAgICAnZmFjdGlvbicsXG4gICAgJ2ZhY3RvaWQnLFxuICAgICdmYWN0b3InLFxuICAgICdmYWN0c2hlZXQnLFxuICAgICdmYWN0dWFsJyxcbiAgICAnZmFjdWx0eScsXG4gICAgJ2ZhZGUnLFxuICAgICdmYWRpbmcnLFxuICAgICdmYWlsaW5nJyxcbiAgICAnZmFsY29uJyxcbiAgICAnZmFsbCcsXG4gICAgJ2ZhbHNlJyxcbiAgICAnZmFsc2lmeScsXG4gICAgJ2ZhbWUnLFxuICAgICdmYW1pbGlhcicsXG4gICAgJ2ZhbWlseScsXG4gICAgJ2ZhbWluZScsXG4gICAgJ2ZhbWlzaGVkJyxcbiAgICAnZmFuYXRpYycsXG4gICAgJ2ZhbmNpZWQnLFxuICAgICdmYW5jaW5lc3MnLFxuICAgICdmYW5jeScsXG4gICAgJ2ZhbmZhcmUnLFxuICAgICdmYW5nJyxcbiAgICAnZmFubmluZycsXG4gICAgJ2ZhbnRhc2l6ZScsXG4gICAgJ2ZhbnRhc3RpYycsXG4gICAgJ2ZhbnRhc3knLFxuICAgICdmYXNjaXNtJyxcbiAgICAnZmFzdGJhbGwnLFxuICAgICdmYXN0ZXInLFxuICAgICdmYXN0aW5nJyxcbiAgICAnZmFzdG5lc3MnLFxuICAgICdmYXVjZXQnLFxuICAgICdmYXZvcmFibGUnLFxuICAgICdmYXZvcmFibHknLFxuICAgICdmYXZvcmVkJyxcbiAgICAnZmF2b3JpbmcnLFxuICAgICdmYXZvcml0ZScsXG4gICAgJ2ZheCcsXG4gICAgJ2ZlYXN0JyxcbiAgICAnZmVkZXJhbCcsXG4gICAgJ2ZlZG9yYScsXG4gICAgJ2ZlZWJsZScsXG4gICAgJ2ZlZWQnLFxuICAgICdmZWVsJyxcbiAgICAnZmVpc3R5JyxcbiAgICAnZmVsaW5lJyxcbiAgICAnZmVsdC10aXAnLFxuICAgICdmZW1pbmluZScsXG4gICAgJ2ZlbWluaXNtJyxcbiAgICAnZmVtaW5pc3QnLFxuICAgICdmZW1pbml6ZScsXG4gICAgJ2ZlbXVyJyxcbiAgICAnZmVuY2UnLFxuICAgICdmZW5jaW5nJyxcbiAgICAnZmVuZGVyJyxcbiAgICAnZmVybWVudCcsXG4gICAgJ2Zlcm5saWtlJyxcbiAgICAnZmVyb2Npb3VzJyxcbiAgICAnZmVyb2NpdHknLFxuICAgICdmZXJyZXQnLFxuICAgICdmZXJyaXMnLFxuICAgICdmZXJyeScsXG4gICAgJ2ZlcnZvcicsXG4gICAgJ2Zlc3RlcicsXG4gICAgJ2Zlc3RpdmFsJyxcbiAgICAnZmVzdGl2ZScsXG4gICAgJ2Zlc3Rpdml0eScsXG4gICAgJ2ZldGFsJyxcbiAgICAnZmV0Y2gnLFxuICAgICdmZXZlcicsXG4gICAgJ2ZpYmVyJyxcbiAgICAnZmljdGlvbicsXG4gICAgJ2ZpZGRsZScsXG4gICAgJ2ZpZGRsaW5nJyxcbiAgICAnZmlkZWxpdHknLFxuICAgICdmaWRnZXRpbmcnLFxuICAgICdmaWRnZXR5JyxcbiAgICAnZmlmdGVlbicsXG4gICAgJ2ZpZnRoJyxcbiAgICAnZmlmdGlldGgnLFxuICAgICdmaWZ0eScsXG4gICAgJ2ZpZ21lbnQnLFxuICAgICdmaWd1cmUnLFxuICAgICdmaWd1cmluZScsXG4gICAgJ2ZpbGluZycsXG4gICAgJ2ZpbGxlZCcsXG4gICAgJ2ZpbGxlcicsXG4gICAgJ2ZpbGxpbmcnLFxuICAgICdmaWxtJyxcbiAgICAnZmlsdGVyJyxcbiAgICAnZmlsdGgnLFxuICAgICdmaWx0cmF0ZScsXG4gICAgJ2ZpbmFsZScsXG4gICAgJ2ZpbmFsaXN0JyxcbiAgICAnZmluYWxpemUnLFxuICAgICdmaW5hbGx5JyxcbiAgICAnZmluYW5jZScsXG4gICAgJ2ZpbmFuY2lhbCcsXG4gICAgJ2ZpbmNoJyxcbiAgICAnZmluZW5lc3MnLFxuICAgICdmaW5lcicsXG4gICAgJ2Zpbmlja3knLFxuICAgICdmaW5pc2hlZCcsXG4gICAgJ2ZpbmlzaGVyJyxcbiAgICAnZmluaXNoaW5nJyxcbiAgICAnZmluaXRlJyxcbiAgICAnZmlubGVzcycsXG4gICAgJ2Zpbmxpa2UnLFxuICAgICdmaXNjYWxseScsXG4gICAgJ2ZpdCcsXG4gICAgJ2ZpdmUnLFxuICAgICdmbGFjY2lkJyxcbiAgICAnZmxhZ21hbicsXG4gICAgJ2ZsYWdwb2xlJyxcbiAgICAnZmxhZ3NoaXAnLFxuICAgICdmbGFnc3RpY2snLFxuICAgICdmbGFnc3RvbmUnLFxuICAgICdmbGFpbCcsXG4gICAgJ2ZsYWtpbHknLFxuICAgICdmbGFreScsXG4gICAgJ2ZsYW1lJyxcbiAgICAnZmxhbW1hYmxlJyxcbiAgICAnZmxhbmtlZCcsXG4gICAgJ2ZsYW5raW5nJyxcbiAgICAnZmxhbm5lbHMnLFxuICAgICdmbGFwJyxcbiAgICAnZmxhcmluZycsXG4gICAgJ2ZsYXNoYmFjaycsXG4gICAgJ2ZsYXNoYnVsYicsXG4gICAgJ2ZsYXNoY2FyZCcsXG4gICAgJ2ZsYXNoaWx5JyxcbiAgICAnZmxhc2hpbmcnLFxuICAgICdmbGFzaHknLFxuICAgICdmbGFzaycsXG4gICAgJ2ZsYXRiZWQnLFxuICAgICdmbGF0Zm9vdCcsXG4gICAgJ2ZsYXRseScsXG4gICAgJ2ZsYXRuZXNzJyxcbiAgICAnZmxhdHRlbicsXG4gICAgJ2ZsYXR0ZXJlZCcsXG4gICAgJ2ZsYXR0ZXJlcicsXG4gICAgJ2ZsYXR0ZXJ5JyxcbiAgICAnZmxhdHRvcCcsXG4gICAgJ2ZsYXR3YXJlJyxcbiAgICAnZmxhdHdvcm0nLFxuICAgICdmbGF2b3JlZCcsXG4gICAgJ2ZsYXZvcmZ1bCcsXG4gICAgJ2ZsYXZvcmluZycsXG4gICAgJ2ZsYXhzZWVkJyxcbiAgICAnZmxlZCcsXG4gICAgJ2ZsZXNoZWQnLFxuICAgICdmbGVzaHknLFxuICAgICdmbGljaycsXG4gICAgJ2ZsaWVyJyxcbiAgICAnZmxpZ2h0JyxcbiAgICAnZmxpbmNoJyxcbiAgICAnZmxpbmcnLFxuICAgICdmbGludCcsXG4gICAgJ2ZsaXAnLFxuICAgICdmbGlydCcsXG4gICAgJ2Zsb2F0JyxcbiAgICAnZmxvY2snLFxuICAgICdmbG9nZ2luZycsXG4gICAgJ2Zsb3AnLFxuICAgICdmbG9yYWwnLFxuICAgICdmbG9yaXN0JyxcbiAgICAnZmxvc3MnLFxuICAgICdmbG91bmRlcicsXG4gICAgJ2ZseWFibGUnLFxuICAgICdmbHlhd2F5JyxcbiAgICAnZmx5ZXInLFxuICAgICdmbHlpbmcnLFxuICAgICdmbHlvdmVyJyxcbiAgICAnZmx5cGFwZXInLFxuICAgICdmb2FtJyxcbiAgICAnZm9lJyxcbiAgICAnZm9nJyxcbiAgICAnZm9pbCcsXG4gICAgJ2ZvbGljJyxcbiAgICAnZm9saycsXG4gICAgJ2ZvbGxpY2xlJyxcbiAgICAnZm9sbG93JyxcbiAgICAnZm9uZGxpbmcnLFxuICAgICdmb25kbHknLFxuICAgICdmb25kbmVzcycsXG4gICAgJ2ZvbmR1ZScsXG4gICAgJ2ZvbnQnLFxuICAgICdmb29kJyxcbiAgICAnZm9vbCcsXG4gICAgJ2Zvb3RhZ2UnLFxuICAgICdmb290YmFsbCcsXG4gICAgJ2Zvb3RiYXRoJyxcbiAgICAnZm9vdGJvYXJkJyxcbiAgICAnZm9vdGVyJyxcbiAgICAnZm9vdGdlYXInLFxuICAgICdmb290aGlsbCcsXG4gICAgJ2Zvb3Rob2xkJyxcbiAgICAnZm9vdGluZycsXG4gICAgJ2Zvb3RsZXNzJyxcbiAgICAnZm9vdG1hbicsXG4gICAgJ2Zvb3Rub3RlJyxcbiAgICAnZm9vdHBhZCcsXG4gICAgJ2Zvb3RwYXRoJyxcbiAgICAnZm9vdHByaW50JyxcbiAgICAnZm9vdHJlc3QnLFxuICAgICdmb290c2llJyxcbiAgICAnZm9vdHNvcmUnLFxuICAgICdmb290d2VhcicsXG4gICAgJ2Zvb3R3b3JrJyxcbiAgICAnZm9zc2lsJyxcbiAgICAnZm9zdGVyJyxcbiAgICAnZm91bmRlcicsXG4gICAgJ2ZvdW5kaW5nJyxcbiAgICAnZm91bnRhaW4nLFxuICAgICdmb3gnLFxuICAgICdmb3llcicsXG4gICAgJ2ZyYWN0aW9uJyxcbiAgICAnZnJhY3R1cmUnLFxuICAgICdmcmFnaWxlJyxcbiAgICAnZnJhZ2lsaXR5JyxcbiAgICAnZnJhZ21lbnQnLFxuICAgICdmcmFncmFuY2UnLFxuICAgICdmcmFncmFudCcsXG4gICAgJ2ZyYWlsJyxcbiAgICAnZnJhbWUnLFxuICAgICdmcmFtaW5nJyxcbiAgICAnZnJhbnRpYycsXG4gICAgJ2ZyYXRlcm5hbCcsXG4gICAgJ2ZyYXllZCcsXG4gICAgJ2ZyYXlpbmcnLFxuICAgICdmcmF5cycsXG4gICAgJ2ZyZWNrbGVkJyxcbiAgICAnZnJlY2tsZXMnLFxuICAgICdmcmVlYmFzZScsXG4gICAgJ2ZyZWViZWUnLFxuICAgICdmcmVlYmllJyxcbiAgICAnZnJlZWRvbScsXG4gICAgJ2ZyZWVmYWxsJyxcbiAgICAnZnJlZWhhbmQnLFxuICAgICdmcmVlaW5nJyxcbiAgICAnZnJlZWxvYWQnLFxuICAgICdmcmVlbHknLFxuICAgICdmcmVlbWFzb24nLFxuICAgICdmcmVlbmVzcycsXG4gICAgJ2ZyZWVzdHlsZScsXG4gICAgJ2ZyZWV3YXJlJyxcbiAgICAnZnJlZXdheScsXG4gICAgJ2ZyZWV3aWxsJyxcbiAgICAnZnJlZXphYmxlJyxcbiAgICAnZnJlZXppbmcnLFxuICAgICdmcmVpZ2h0JyxcbiAgICAnZnJlbmNoJyxcbiAgICAnZnJlbnppZWQnLFxuICAgICdmcmVuenknLFxuICAgICdmcmVxdWVuY3knLFxuICAgICdmcmVxdWVudCcsXG4gICAgJ2ZyZXNoJyxcbiAgICAnZnJldGZ1bCcsXG4gICAgJ2ZyZXR0ZWQnLFxuICAgICdmcmljdGlvbicsXG4gICAgJ2ZyaWRheScsXG4gICAgJ2ZyaWRnZScsXG4gICAgJ2ZyaWVkJyxcbiAgICAnZnJpZW5kJyxcbiAgICAnZnJpZ2h0ZW4nLFxuICAgICdmcmlnaHRmdWwnLFxuICAgICdmcmlnaWRpdHknLFxuICAgICdmcmlnaWRseScsXG4gICAgJ2ZyaWxsJyxcbiAgICAnZnJpbmdlJyxcbiAgICAnZnJpc2JlZScsXG4gICAgJ2ZyaXNrJyxcbiAgICAnZnJpdHRlcicsXG4gICAgJ2ZyaXZvbG91cycsXG4gICAgJ2Zyb2xpYycsXG4gICAgJ2Zyb20nLFxuICAgICdmcm9udCcsXG4gICAgJ2Zyb3N0Yml0ZScsXG4gICAgJ2Zyb3N0ZWQnLFxuICAgICdmcm9zdGlseScsXG4gICAgJ2Zyb3N0aW5nJyxcbiAgICAnZnJvc3RsaWtlJyxcbiAgICAnZnJvc3R5JyxcbiAgICAnZnJvdGgnLFxuICAgICdmcm93bicsXG4gICAgJ2Zyb3plbicsXG4gICAgJ2ZydWN0b3NlJyxcbiAgICAnZnJ1Z2FsaXR5JyxcbiAgICAnZnJ1Z2FsbHknLFxuICAgICdmcnVpdCcsXG4gICAgJ2ZydXN0cmF0ZScsXG4gICAgJ2ZyeWluZycsXG4gICAgJ2dhYicsXG4gICAgJ2dhZmZlJyxcbiAgICAnZ2FnJyxcbiAgICAnZ2FpbmZ1bGx5JyxcbiAgICAnZ2FpbmluZycsXG4gICAgJ2dhaW5zJyxcbiAgICAnZ2FsYScsXG4gICAgJ2dhbGxhbnRseScsXG4gICAgJ2dhbGxlcmlhJyxcbiAgICAnZ2FsbGVyeScsXG4gICAgJ2dhbGxleScsXG4gICAgJ2dhbGxvbicsXG4gICAgJ2dhbGxvd3MnLFxuICAgICdnYWxsc3RvbmUnLFxuICAgICdnYWxvcmUnLFxuICAgICdnYWx2YW5pemUnLFxuICAgICdnYW1ibGluZycsXG4gICAgJ2dhbWUnLFxuICAgICdnYW1pbmcnLFxuICAgICdnYW1tYScsXG4gICAgJ2dhbmRlcicsXG4gICAgJ2dhbmdseScsXG4gICAgJ2dhbmdyZW5lJyxcbiAgICAnZ2FuZ3dheScsXG4gICAgJ2dhcCcsXG4gICAgJ2dhcmFnZScsXG4gICAgJ2dhcmJhZ2UnLFxuICAgICdnYXJkZW4nLFxuICAgICdnYXJnbGUnLFxuICAgICdnYXJsYW5kJyxcbiAgICAnZ2FybGljJyxcbiAgICAnZ2FybWVudCcsXG4gICAgJ2dhcm5ldCcsXG4gICAgJ2dhcm5pc2gnLFxuICAgICdnYXJ0ZXInLFxuICAgICdnYXMnLFxuICAgICdnYXRoZXJlcicsXG4gICAgJ2dhdGhlcmluZycsXG4gICAgJ2dhdGluZycsXG4gICAgJ2dhdWdpbmcnLFxuICAgICdnYXVudGxldCcsXG4gICAgJ2dhdXplJyxcbiAgICAnZ2F2ZScsXG4gICAgJ2dhd2snLFxuICAgICdnYXppbmcnLFxuICAgICdnZWFyJyxcbiAgICAnZ2Vja28nLFxuICAgICdnZWVrJyxcbiAgICAnZ2VpZ2VyJyxcbiAgICAnZ2VtJyxcbiAgICAnZ2VuZGVyJyxcbiAgICAnZ2VuZXJpYycsXG4gICAgJ2dlbmVyb3VzJyxcbiAgICAnZ2VuZXRpY3MnLFxuICAgICdnZW5yZScsXG4gICAgJ2dlbnRpbGUnLFxuICAgICdnZW50bGVtYW4nLFxuICAgICdnZW50bHknLFxuICAgICdnZW50cycsXG4gICAgJ2dlb2dyYXBoeScsXG4gICAgJ2dlb2xvZ2ljJyxcbiAgICAnZ2VvbG9naXN0JyxcbiAgICAnZ2VvbG9neScsXG4gICAgJ2dlb21ldHJpYycsXG4gICAgJ2dlb21ldHJ5JyxcbiAgICAnZ2VyYW5pdW0nLFxuICAgICdnZXJiaWwnLFxuICAgICdnZXJpYXRyaWMnLFxuICAgICdnZXJtaWNpZGUnLFxuICAgICdnZXJtaW5hdGUnLFxuICAgICdnZXJtbGVzcycsXG4gICAgJ2dlcm1wcm9vZicsXG4gICAgJ2dlc3RhdGUnLFxuICAgICdnZXN0YXRpb24nLFxuICAgICdnZXN0dXJlJyxcbiAgICAnZ2V0YXdheScsXG4gICAgJ2dldHRpbmcnLFxuICAgICdnZXR1cCcsXG4gICAgJ2dpYW50JyxcbiAgICAnZ2liYmVyaXNoJyxcbiAgICAnZ2libGV0JyxcbiAgICAnZ2lkZGlseScsXG4gICAgJ2dpZGRpbmVzcycsXG4gICAgJ2dpZGR5JyxcbiAgICAnZ2lmdCcsXG4gICAgJ2dpZ2FieXRlJyxcbiAgICAnZ2lnYWhlcnR6JyxcbiAgICAnZ2lnYW50aWMnLFxuICAgICdnaWdnbGUnLFxuICAgICdnaWdnbGluZycsXG4gICAgJ2dpZ2dseScsXG4gICAgJ2dpZ29sbycsXG4gICAgJ2dpbGxlZCcsXG4gICAgJ2dpbGxzJyxcbiAgICAnZ2ltbWljaycsXG4gICAgJ2dpcmRsZScsXG4gICAgJ2dpdmVhd2F5JyxcbiAgICAnZ2l2ZW4nLFxuICAgICdnaXZlcicsXG4gICAgJ2dpdmluZycsXG4gICAgJ2dpem1vJyxcbiAgICAnZ2l6emFyZCcsXG4gICAgJ2dsYWNpYWwnLFxuICAgICdnbGFjaWVyJyxcbiAgICAnZ2xhZGUnLFxuICAgICdnbGFkaWF0b3InLFxuICAgICdnbGFkbHknLFxuICAgICdnbGFtb3JvdXMnLFxuICAgICdnbGFtb3VyJyxcbiAgICAnZ2xhbmNlJyxcbiAgICAnZ2xhbmNpbmcnLFxuICAgICdnbGFuZHVsYXInLFxuICAgICdnbGFyZScsXG4gICAgJ2dsYXJpbmcnLFxuICAgICdnbGFzcycsXG4gICAgJ2dsYXVjb21hJyxcbiAgICAnZ2xhemluZycsXG4gICAgJ2dsZWFtaW5nJyxcbiAgICAnZ2xlZWZ1bCcsXG4gICAgJ2dsaWRlcicsXG4gICAgJ2dsaWRpbmcnLFxuICAgICdnbGltbWVyJyxcbiAgICAnZ2xpbXBzZScsXG4gICAgJ2dsaXN0ZW4nLFxuICAgICdnbGl0Y2gnLFxuICAgICdnbGl0dGVyJyxcbiAgICAnZ2xpdHp5JyxcbiAgICAnZ2xvYXRlcicsXG4gICAgJ2dsb2F0aW5nJyxcbiAgICAnZ2xvb21pbHknLFxuICAgICdnbG9vbXknLFxuICAgICdnbG9yaWZpZWQnLFxuICAgICdnbG9yaWZpZXInLFxuICAgICdnbG9yaWZ5JyxcbiAgICAnZ2xvcmlvdXMnLFxuICAgICdnbG9yeScsXG4gICAgJ2dsb3NzJyxcbiAgICAnZ2xvdmUnLFxuICAgICdnbG93aW5nJyxcbiAgICAnZ2xvd3dvcm0nLFxuICAgICdnbHVjb3NlJyxcbiAgICAnZ2x1ZScsXG4gICAgJ2dsdXRlbicsXG4gICAgJ2dsdXRpbm91cycsXG4gICAgJ2dsdXR0b24nLFxuICAgICdnbmFybHknLFxuICAgICdnbmF0JyxcbiAgICAnZ29hbCcsXG4gICAgJ2dvYXRza2luJyxcbiAgICAnZ29lcycsXG4gICAgJ2dvZ2dsZXMnLFxuICAgICdnb2luZycsXG4gICAgJ2dvbGRmaXNoJyxcbiAgICAnZ29sZG1pbmUnLFxuICAgICdnb2xkc21pdGgnLFxuICAgICdnb2xmJyxcbiAgICAnZ29saWF0aCcsXG4gICAgJ2dvbmFkJyxcbiAgICAnZ29uZG9sYScsXG4gICAgJ2dvbmUnLFxuICAgICdnb25nJyxcbiAgICAnZ29vZCcsXG4gICAgJ2dvb2V5JyxcbiAgICAnZ29vZmJhbGwnLFxuICAgICdnb29maW5lc3MnLFxuICAgICdnb29meScsXG4gICAgJ2dvb2dsZScsXG4gICAgJ2dvb24nLFxuICAgICdnb3BoZXInLFxuICAgICdnb3JlJyxcbiAgICAnZ29yZ2VkJyxcbiAgICAnZ29yZ2VvdXMnLFxuICAgICdnb3J5JyxcbiAgICAnZ29zbGluZycsXG4gICAgJ2dvc3NpcCcsXG4gICAgJ2dvdGhpYycsXG4gICAgJ2dvdHRlbicsXG4gICAgJ2dvdXQnLFxuICAgICdnb3duJyxcbiAgICAnZ3JhYicsXG4gICAgJ2dyYWNlZnVsJyxcbiAgICAnZ3JhY2VsZXNzJyxcbiAgICAnZ3JhY2lvdXMnLFxuICAgICdncmFkYXRpb24nLFxuICAgICdncmFkZWQnLFxuICAgICdncmFkZXInLFxuICAgICdncmFkaWVudCcsXG4gICAgJ2dyYWRpbmcnLFxuICAgICdncmFkdWFsbHknLFxuICAgICdncmFkdWF0ZScsXG4gICAgJ2dyYWZmaXRpJyxcbiAgICAnZ3JhZnRlZCcsXG4gICAgJ2dyYWZ0aW5nJyxcbiAgICAnZ3JhaW4nLFxuICAgICdncmFuZGRhZCcsXG4gICAgJ2dyYW5ka2lkJyxcbiAgICAnZ3JhbmRseScsXG4gICAgJ2dyYW5kbWEnLFxuICAgICdncmFuZHBhJyxcbiAgICAnZ3JhbmRzb24nLFxuICAgICdncmFuaXRlJyxcbiAgICAnZ3Jhbm55JyxcbiAgICAnZ3Jhbm9sYScsXG4gICAgJ2dyYW50JyxcbiAgICAnZ3JhbnVsYXInLFxuICAgICdncmFwZScsXG4gICAgJ2dyYXBoJyxcbiAgICAnZ3JhcHBsZScsXG4gICAgJ2dyYXBwbGluZycsXG4gICAgJ2dyYXNwJyxcbiAgICAnZ3Jhc3MnLFxuICAgICdncmF0aWZpZWQnLFxuICAgICdncmF0aWZ5JyxcbiAgICAnZ3JhdGluZycsXG4gICAgJ2dyYXRpdHVkZScsXG4gICAgJ2dyYXR1aXR5JyxcbiAgICAnZ3JhdmVsJyxcbiAgICAnZ3JhdmVuZXNzJyxcbiAgICAnZ3JhdmVzJyxcbiAgICAnZ3JhdmV5YXJkJyxcbiAgICAnZ3Jhdml0YXRlJyxcbiAgICAnZ3Jhdml0eScsXG4gICAgJ2dyYXZ5JyxcbiAgICAnZ3JheScsXG4gICAgJ2dyYXppbmcnLFxuICAgICdncmVhc2lseScsXG4gICAgJ2dyZWVkaWx5JyxcbiAgICAnZ3JlZWRsZXNzJyxcbiAgICAnZ3JlZWR5JyxcbiAgICAnZ3JlZW4nLFxuICAgICdncmVldGVyJyxcbiAgICAnZ3JlZXRpbmcnLFxuICAgICdncmV3JyxcbiAgICAnZ3JleWhvdW5kJyxcbiAgICAnZ3JpZCcsXG4gICAgJ2dyaWVmJyxcbiAgICAnZ3JpZXZhbmNlJyxcbiAgICAnZ3JpZXZpbmcnLFxuICAgICdncmlldm91cycsXG4gICAgJ2dyaWxsJyxcbiAgICAnZ3JpbWFjZScsXG4gICAgJ2dyaW1hY2luZycsXG4gICAgJ2dyaW1lJyxcbiAgICAnZ3JpbWluZXNzJyxcbiAgICAnZ3JpbXknLFxuICAgICdncmluY2gnLFxuICAgICdncmlubmluZycsXG4gICAgJ2dyaXAnLFxuICAgICdncmlzdGxlJyxcbiAgICAnZ3JpdCcsXG4gICAgJ2dyb2dnaWx5JyxcbiAgICAnZ3JvZ2d5JyxcbiAgICAnZ3JvaW4nLFxuICAgICdncm9vbScsXG4gICAgJ2dyb292ZScsXG4gICAgJ2dyb292aW5nJyxcbiAgICAnZ3Jvb3Z5JyxcbiAgICAnZ3JvcGUnLFxuICAgICdncm91bmQnLFxuICAgICdncm91cGVkJyxcbiAgICAnZ3JvdXQnLFxuICAgICdncm92ZScsXG4gICAgJ2dyb3dlcicsXG4gICAgJ2dyb3dpbmcnLFxuICAgICdncm93bCcsXG4gICAgJ2dydWInLFxuICAgICdncnVkZ2UnLFxuICAgICdncnVkZ2luZycsXG4gICAgJ2dydWVsaW5nJyxcbiAgICAnZ3J1ZmZseScsXG4gICAgJ2dydW1ibGUnLFxuICAgICdncnVtYmxpbmcnLFxuICAgICdncnVtYmx5JyxcbiAgICAnZ3J1bXBpbHknLFxuICAgICdncnVuZ2UnLFxuICAgICdncnVudCcsXG4gICAgJ2d1YWNhbW9sZScsXG4gICAgJ2d1aWRhYmxlJyxcbiAgICAnZ3VpZGFuY2UnLFxuICAgICdndWlkZScsXG4gICAgJ2d1aWRpbmcnLFxuICAgICdndWlsZWxlc3MnLFxuICAgICdndWlzZScsXG4gICAgJ2d1bGYnLFxuICAgICdndWxsaWJsZScsXG4gICAgJ2d1bGx5JyxcbiAgICAnZ3VscCcsXG4gICAgJ2d1bWJhbGwnLFxuICAgICdndW1kcm9wJyxcbiAgICAnZ3VtbWluZXNzJyxcbiAgICAnZ3VtbWluZycsXG4gICAgJ2d1bW15JyxcbiAgICAnZ3VyZ2xlJyxcbiAgICAnZ3VyZ2xpbmcnLFxuICAgICdndXJ1JyxcbiAgICAnZ3VzaCcsXG4gICAgJ2d1c3RvJyxcbiAgICAnZ3VzdHknLFxuICAgICdndXRsZXNzJyxcbiAgICAnZ3V0cycsXG4gICAgJ2d1dHRlcicsXG4gICAgJ2d1eScsXG4gICAgJ2d1enpsZXInLFxuICAgICdneXJhdGlvbicsXG4gICAgJ2hhYml0YWJsZScsXG4gICAgJ2hhYml0YW50JyxcbiAgICAnaGFiaXRhdCcsXG4gICAgJ2hhYml0dWFsJyxcbiAgICAnaGFja2VkJyxcbiAgICAnaGFja2VyJyxcbiAgICAnaGFja2luZycsXG4gICAgJ2hhY2tzYXcnLFxuICAgICdoYWQnLFxuICAgICdoYWdnbGVyJyxcbiAgICAnaGFpa3UnLFxuICAgICdoYWxmJyxcbiAgICAnaGFsb2dlbicsXG4gICAgJ2hhbHQnLFxuICAgICdoYWx2ZWQnLFxuICAgICdoYWx2ZXMnLFxuICAgICdoYW1idXJnZXInLFxuICAgICdoYW1sZXQnLFxuICAgICdoYW1tb2NrJyxcbiAgICAnaGFtcGVyJyxcbiAgICAnaGFtc3RlcicsXG4gICAgJ2hhbXN0cmluZycsXG4gICAgJ2hhbmRiYWcnLFxuICAgICdoYW5kYmFsbCcsXG4gICAgJ2hhbmRib29rJyxcbiAgICAnaGFuZGJyYWtlJyxcbiAgICAnaGFuZGNhcnQnLFxuICAgICdoYW5kY2xhcCcsXG4gICAgJ2hhbmRjbGFzcCcsXG4gICAgJ2hhbmRjcmFmdCcsXG4gICAgJ2hhbmRjdWZmJyxcbiAgICAnaGFuZGVkJyxcbiAgICAnaGFuZGZ1bCcsXG4gICAgJ2hhbmRncmlwJyxcbiAgICAnaGFuZGd1bicsXG4gICAgJ2hhbmRoZWxkJyxcbiAgICAnaGFuZGluZXNzJyxcbiAgICAnaGFuZGl3b3JrJyxcbiAgICAnaGFuZGxlYmFyJyxcbiAgICAnaGFuZGxlZCcsXG4gICAgJ2hhbmRsZXInLFxuICAgICdoYW5kbGluZycsXG4gICAgJ2hhbmRtYWRlJyxcbiAgICAnaGFuZG9mZicsXG4gICAgJ2hhbmRwaWNrJyxcbiAgICAnaGFuZHByaW50JyxcbiAgICAnaGFuZHJhaWwnLFxuICAgICdoYW5kc2F3JyxcbiAgICAnaGFuZHNldCcsXG4gICAgJ2hhbmRzZnJlZScsXG4gICAgJ2hhbmRzaGFrZScsXG4gICAgJ2hhbmRzdGFuZCcsXG4gICAgJ2hhbmR3YXNoJyxcbiAgICAnaGFuZHdvcmsnLFxuICAgICdoYW5kd292ZW4nLFxuICAgICdoYW5kd3JpdGUnLFxuICAgICdoYW5keW1hbicsXG4gICAgJ2hhbmduYWlsJyxcbiAgICAnaGFuZ291dCcsXG4gICAgJ2hhbmdvdmVyJyxcbiAgICAnaGFuZ3VwJyxcbiAgICAnaGFua2VyaW5nJyxcbiAgICAnaGFua2llJyxcbiAgICAnaGFua3knLFxuICAgICdoYXBoYXphcmQnLFxuICAgICdoYXBwZW5pbmcnLFxuICAgICdoYXBwaWVyJyxcbiAgICAnaGFwcGllc3QnLFxuICAgICdoYXBwaWx5JyxcbiAgICAnaGFwcGluZXNzJyxcbiAgICAnaGFwcHknLFxuICAgICdoYXJib3InLFxuICAgICdoYXJkY29weScsXG4gICAgJ2hhcmRjb3JlJyxcbiAgICAnaGFyZGNvdmVyJyxcbiAgICAnaGFyZGRpc2snLFxuICAgICdoYXJkZW5lZCcsXG4gICAgJ2hhcmRlbmVyJyxcbiAgICAnaGFyZGVuaW5nJyxcbiAgICAnaGFyZGhhdCcsXG4gICAgJ2hhcmRoZWFkJyxcbiAgICAnaGFyZGluZXNzJyxcbiAgICAnaGFyZGx5JyxcbiAgICAnaGFyZG5lc3MnLFxuICAgICdoYXJkc2hpcCcsXG4gICAgJ2hhcmR3YXJlJyxcbiAgICAnaGFyZHdpcmVkJyxcbiAgICAnaGFyZHdvb2QnLFxuICAgICdoYXJkeScsXG4gICAgJ2hhcm1mdWwnLFxuICAgICdoYXJtbGVzcycsXG4gICAgJ2hhcm1vbmljYScsXG4gICAgJ2hhcm1vbmljcycsXG4gICAgJ2hhcm1vbml6ZScsXG4gICAgJ2hhcm1vbnknLFxuICAgICdoYXJuZXNzJyxcbiAgICAnaGFycGlzdCcsXG4gICAgJ2hhcnNoJyxcbiAgICAnaGFydmVzdCcsXG4gICAgJ2hhc2gnLFxuICAgICdoYXNzbGUnLFxuICAgICdoYXN0ZScsXG4gICAgJ2hhc3RpbHknLFxuICAgICdoYXN0aW5lc3MnLFxuICAgICdoYXN0eScsXG4gICAgJ2hhdGJveCcsXG4gICAgJ2hhdGNoYmFjaycsXG4gICAgJ2hhdGNoZXJ5JyxcbiAgICAnaGF0Y2hldCcsXG4gICAgJ2hhdGNoaW5nJyxcbiAgICAnaGF0Y2hsaW5nJyxcbiAgICAnaGF0ZScsXG4gICAgJ2hhdGxlc3MnLFxuICAgICdoYXRyZWQnLFxuICAgICdoYXVudCcsXG4gICAgJ2hhdmVuJyxcbiAgICAnaGF6YXJkJyxcbiAgICAnaGF6ZWxudXQnLFxuICAgICdoYXppbHknLFxuICAgICdoYXppbmVzcycsXG4gICAgJ2hhemluZycsXG4gICAgJ2hhenknLFxuICAgICdoZWFkYWNoZScsXG4gICAgJ2hlYWRiYW5kJyxcbiAgICAnaGVhZGJvYXJkJyxcbiAgICAnaGVhZGNvdW50JyxcbiAgICAnaGVhZGRyZXNzJyxcbiAgICAnaGVhZGVkJyxcbiAgICAnaGVhZGVyJyxcbiAgICAnaGVhZGZpcnN0JyxcbiAgICAnaGVhZGdlYXInLFxuICAgICdoZWFkaW5nJyxcbiAgICAnaGVhZGxhbXAnLFxuICAgICdoZWFkbGVzcycsXG4gICAgJ2hlYWRsb2NrJyxcbiAgICAnaGVhZHBob25lJyxcbiAgICAnaGVhZHBpZWNlJyxcbiAgICAnaGVhZHJlc3QnLFxuICAgICdoZWFkcm9vbScsXG4gICAgJ2hlYWRzY2FyZicsXG4gICAgJ2hlYWRzZXQnLFxuICAgICdoZWFkc21hbicsXG4gICAgJ2hlYWRzdGFuZCcsXG4gICAgJ2hlYWRzdG9uZScsXG4gICAgJ2hlYWR3YXknLFxuICAgICdoZWFkd2VhcicsXG4gICAgJ2hlYXAnLFxuICAgICdoZWF0JyxcbiAgICAnaGVhdmUnLFxuICAgICdoZWF2aWx5JyxcbiAgICAnaGVhdmluZXNzJyxcbiAgICAnaGVhdmluZycsXG4gICAgJ2hlZGdlJyxcbiAgICAnaGVkZ2luZycsXG4gICAgJ2hlZnRpbmVzcycsXG4gICAgJ2hlZnR5JyxcbiAgICAnaGVsaXVtJyxcbiAgICAnaGVsbWV0JyxcbiAgICAnaGVscGVyJyxcbiAgICAnaGVscGZ1bCcsXG4gICAgJ2hlbHBpbmcnLFxuICAgICdoZWxwbGVzcycsXG4gICAgJ2hlbHBsaW5lJyxcbiAgICAnaGVtbG9jaycsXG4gICAgJ2hlbXN0aXRjaCcsXG4gICAgJ2hlbmNlJyxcbiAgICAnaGVuY2htYW4nLFxuICAgICdoZW5uYScsXG4gICAgJ2hlcmFsZCcsXG4gICAgJ2hlcmJhbCcsXG4gICAgJ2hlcmJpY2lkZScsXG4gICAgJ2hlcmJzJyxcbiAgICAnaGVyaXRhZ2UnLFxuICAgICdoZXJtaXQnLFxuICAgICdoZXJvaWNzJyxcbiAgICAnaGVyb2lzbScsXG4gICAgJ2hlcnJpbmcnLFxuICAgICdoZXJzZWxmJyxcbiAgICAnaGVydHonLFxuICAgICdoZXNpdGFuY3knLFxuICAgICdoZXNpdGFudCcsXG4gICAgJ2hlc2l0YXRlJyxcbiAgICAnaGV4YWdvbicsXG4gICAgJ2hleGFncmFtJyxcbiAgICAnaHViY2FwJyxcbiAgICAnaHVkZGxlJyxcbiAgICAnaHVkZGxpbmcnLFxuICAgICdodWZmJyxcbiAgICAnaHVnJyxcbiAgICAnaHVsYScsXG4gICAgJ2h1bGsnLFxuICAgICdodWxsJyxcbiAgICAnaHVtYW4nLFxuICAgICdodW1ibGUnLFxuICAgICdodW1ibGluZycsXG4gICAgJ2h1bWJseScsXG4gICAgJ2h1bWlkJyxcbiAgICAnaHVtaWxpYXRlJyxcbiAgICAnaHVtaWxpdHknLFxuICAgICdodW1taW5nJyxcbiAgICAnaHVtbXVzJyxcbiAgICAnaHVtb25nb3VzJyxcbiAgICAnaHVtb3Jpc3QnLFxuICAgICdodW1vcmxlc3MnLFxuICAgICdodW1vcm91cycsXG4gICAgJ2h1bXBiYWNrJyxcbiAgICAnaHVtcGVkJyxcbiAgICAnaHVtdmVlJyxcbiAgICAnaHVuY2hiYWNrJyxcbiAgICAnaHVuZHJlZHRoJyxcbiAgICAnaHVuZ2VyJyxcbiAgICAnaHVuZ3JpbHknLFxuICAgICdodW5ncnknLFxuICAgICdodW5rJyxcbiAgICAnaHVudGVyJyxcbiAgICAnaHVudGluZycsXG4gICAgJ2h1bnRyZXNzJyxcbiAgICAnaHVudHNtYW4nLFxuICAgICdodXJkbGUnLFxuICAgICdodXJsZWQnLFxuICAgICdodXJsZXInLFxuICAgICdodXJsaW5nJyxcbiAgICAnaHVycmF5JyxcbiAgICAnaHVycmljYW5lJyxcbiAgICAnaHVycmllZCcsXG4gICAgJ2h1cnJ5JyxcbiAgICAnaHVydCcsXG4gICAgJ2h1c2JhbmQnLFxuICAgICdodXNoJyxcbiAgICAnaHVza2VkJyxcbiAgICAnaHVza2luZXNzJyxcbiAgICAnaHV0JyxcbiAgICAnaHlicmlkJyxcbiAgICAnaHlkcmFudCcsXG4gICAgJ2h5ZHJhdGVkJyxcbiAgICAnaHlkcmF0aW9uJyxcbiAgICAnaHlkcm9nZW4nLFxuICAgICdoeWRyb3hpZGUnLFxuICAgICdoeXBlcmxpbmsnLFxuICAgICdoeXBlcnRleHQnLFxuICAgICdoeXBoZW4nLFxuICAgICdoeXBub3NlcycsXG4gICAgJ2h5cG5vc2lzJyxcbiAgICAnaHlwbm90aWMnLFxuICAgICdoeXBub3Rpc20nLFxuICAgICdoeXBub3Rpc3QnLFxuICAgICdoeXBub3RpemUnLFxuICAgICdoeXBvY3Jpc3knLFxuICAgICdoeXBvY3JpdGUnLFxuICAgICdpYnVwcm9mZW4nLFxuICAgICdpY2UnLFxuICAgICdpY2luZXNzJyxcbiAgICAnaWNpbmcnLFxuICAgICdpY2t5JyxcbiAgICAnaWNvbicsXG4gICAgJ2ljeScsXG4gICAgJ2lkZWFsaXNtJyxcbiAgICAnaWRlYWxpc3QnLFxuICAgICdpZGVhbGl6ZScsXG4gICAgJ2lkZWFsbHknLFxuICAgICdpZGVhbG5lc3MnLFxuICAgICdpZGVudGljYWwnLFxuICAgICdpZGVudGlmeScsXG4gICAgJ2lkZW50aXR5JyxcbiAgICAnaWRlb2xvZ3knLFxuICAgICdpZGlvY3knLFxuICAgICdpZGlvbScsXG4gICAgJ2lkbHknLFxuICAgICdpZ2xvbycsXG4gICAgJ2lnbml0aW9uJyxcbiAgICAnaWdub3JlJyxcbiAgICAnaWd1YW5hJyxcbiAgICAnaWxsaWNpdGx5JyxcbiAgICAnaWxsdXNpb24nLFxuICAgICdpbGx1c2l2ZScsXG4gICAgJ2ltYWdlJyxcbiAgICAnaW1hZ2luYXJ5JyxcbiAgICAnaW1hZ2luZXMnLFxuICAgICdpbWFnaW5nJyxcbiAgICAnaW1iZWNpbGUnLFxuICAgICdpbWl0YXRlJyxcbiAgICAnaW1pdGF0aW9uJyxcbiAgICAnaW1tYXR1cmUnLFxuICAgICdpbW1lcnNlJyxcbiAgICAnaW1tZXJzaW9uJyxcbiAgICAnaW1taW5lbnQnLFxuICAgICdpbW1vYmlsZScsXG4gICAgJ2ltbW9kZXN0JyxcbiAgICAnaW1tb3JhbGx5JyxcbiAgICAnaW1tb3J0YWwnLFxuICAgICdpbW1vdmFibGUnLFxuICAgICdpbW1vdmFibHknLFxuICAgICdpbW11bml0eScsXG4gICAgJ2ltbXVuaXplJyxcbiAgICAnaW1wYWlyZWQnLFxuICAgICdpbXBhbGUnLFxuICAgICdpbXBhcnQnLFxuICAgICdpbXBhdGllbnQnLFxuICAgICdpbXBlYWNoJyxcbiAgICAnaW1wZWRpbmcnLFxuICAgICdpbXBlbmRpbmcnLFxuICAgICdpbXBlcmZlY3QnLFxuICAgICdpbXBlcmlhbCcsXG4gICAgJ2ltcGlzaCcsXG4gICAgJ2ltcGxhbnQnLFxuICAgICdpbXBsZW1lbnQnLFxuICAgICdpbXBsaWNhdGUnLFxuICAgICdpbXBsaWNpdCcsXG4gICAgJ2ltcGxvZGUnLFxuICAgICdpbXBsb3Npb24nLFxuICAgICdpbXBsb3NpdmUnLFxuICAgICdpbXBseScsXG4gICAgJ2ltcG9saXRlJyxcbiAgICAnaW1wb3J0YW50JyxcbiAgICAnaW1wb3J0ZXInLFxuICAgICdpbXBvc2UnLFxuICAgICdpbXBvc2luZycsXG4gICAgJ2ltcG90ZW5jZScsXG4gICAgJ2ltcG90ZW5jeScsXG4gICAgJ2ltcG90ZW50JyxcbiAgICAnaW1wb3VuZCcsXG4gICAgJ2ltcHJlY2lzZScsXG4gICAgJ2ltcHJpbnQnLFxuICAgICdpbXByaXNvbicsXG4gICAgJ2ltcHJvbXB0dScsXG4gICAgJ2ltcHJvcGVyJyxcbiAgICAnaW1wcm92ZScsXG4gICAgJ2ltcHJvdmluZycsXG4gICAgJ2ltcHJvdmlzZScsXG4gICAgJ2ltcHJ1ZGVudCcsXG4gICAgJ2ltcHVsc2UnLFxuICAgICdpbXB1bHNpdmUnLFxuICAgICdpbXB1cmUnLFxuICAgICdpbXB1cml0eScsXG4gICAgJ2lvZGluZScsXG4gICAgJ2lvZGl6ZScsXG4gICAgJ2lvbicsXG4gICAgJ2lwYWQnLFxuICAgICdpcGhvbmUnLFxuICAgICdpcG9kJyxcbiAgICAnaXJhdGUnLFxuICAgICdpcmsnLFxuICAgICdpcm9uJyxcbiAgICAnaXJyZWd1bGFyJyxcbiAgICAnaXJyaWdhdGUnLFxuICAgICdpcnJpdGFibGUnLFxuICAgICdpcnJpdGFibHknLFxuICAgICdpcnJpdGFudCcsXG4gICAgJ2lycml0YXRlJyxcbiAgICAnaXNsYW1pYycsXG4gICAgJ2lzbGFtaXN0JyxcbiAgICAnaXNvbGF0ZWQnLFxuICAgICdpc29sYXRpbmcnLFxuICAgICdpc29sYXRpb24nLFxuICAgICdpc290b3BlJyxcbiAgICAnaXNzdWUnLFxuICAgICdpc3N1aW5nJyxcbiAgICAnaXRhbGljaXplJyxcbiAgICAnaXRhbGljcycsXG4gICAgJ2l0ZW0nLFxuICAgICdpdGluZXJhcnknLFxuICAgICdpdHVuZXMnLFxuICAgICdpdm9yeScsXG4gICAgJ2l2eScsXG4gICAgJ2phYicsXG4gICAgJ2phY2thbCcsXG4gICAgJ2phY2tldCcsXG4gICAgJ2phY2trbmlmZScsXG4gICAgJ2phY2twb3QnLFxuICAgICdqYWlsYmlyZCcsXG4gICAgJ2phaWxicmVhaycsXG4gICAgJ2phaWxlcicsXG4gICAgJ2phaWxob3VzZScsXG4gICAgJ2phbGFwZW5vJyxcbiAgICAnamFtJyxcbiAgICAnamFuaXRvcicsXG4gICAgJ2phbnVhcnknLFxuICAgICdqYXJnb24nLFxuICAgICdqYXJyaW5nJyxcbiAgICAnamFzbWluZScsXG4gICAgJ2phdW5kaWNlJyxcbiAgICAnamF1bnQnLFxuICAgICdqYXZhJyxcbiAgICAnamF3ZWQnLFxuICAgICdqYXdsZXNzJyxcbiAgICAnamF3bGluZScsXG4gICAgJ2phd3MnLFxuICAgICdqYXliaXJkJyxcbiAgICAnamF5d2Fsa2VyJyxcbiAgICAnamF6eicsXG4gICAgJ2plZXAnLFxuICAgICdqZWVyaW5nbHknLFxuICAgICdqZWxsaWVkJyxcbiAgICAnamVsbHknLFxuICAgICdqZXJzZXknLFxuICAgICdqZXN0ZXInLFxuICAgICdqZXQnLFxuICAgICdqaWZmeScsXG4gICAgJ2ppZ3NhdycsXG4gICAgJ2ppbW15JyxcbiAgICAnamluZ2xlJyxcbiAgICAnamluZ2xpbmcnLFxuICAgICdqaW54JyxcbiAgICAnaml0dGVycycsXG4gICAgJ2ppdHRlcnknLFxuICAgICdqb2InLFxuICAgICdqb2NrZXknLFxuICAgICdqb2Nrc3RyYXAnLFxuICAgICdqb2dnZXInLFxuICAgICdqb2dnaW5nJyxcbiAgICAnam9obicsXG4gICAgJ2pvaW5pbmcnLFxuICAgICdqb2tlc3RlcicsXG4gICAgJ2pva2luZ2x5JyxcbiAgICAnam9sbGluZXNzJyxcbiAgICAnam9sbHknLFxuICAgICdqb2x0JyxcbiAgICAnam90JyxcbiAgICAnam92aWFsJyxcbiAgICAnam95ZnVsbHknLFxuICAgICdqb3lsZXNzbHknLFxuICAgICdqb3lvdXMnLFxuICAgICdqb3lyaWRlJyxcbiAgICAnam95c3RpY2snLFxuICAgICdqdWJpbGFuY2UnLFxuICAgICdqdWJpbGFudCcsXG4gICAgJ2p1ZGdlJyxcbiAgICAnanVkZ2luZ2x5JyxcbiAgICAnanVkaWNpYWwnLFxuICAgICdqdWRpY2lhcnknLFxuICAgICdqdWRvJyxcbiAgICAnanVnZ2xlJyxcbiAgICAnanVnZ2xpbmcnLFxuICAgICdqdWd1bGFyJyxcbiAgICAnanVpY2UnLFxuICAgICdqdWljaW5lc3MnLFxuICAgICdqdWljeScsXG4gICAgJ2p1aml0c3UnLFxuICAgICdqdWtlYm94JyxcbiAgICAnanVseScsXG4gICAgJ2p1bWJsZScsXG4gICAgJ2p1bWJvJyxcbiAgICAnanVtcCcsXG4gICAgJ2p1bmN0aW9uJyxcbiAgICAnanVuY3R1cmUnLFxuICAgICdqdW5lJyxcbiAgICAnanVuaW9yJyxcbiAgICAnanVuaXBlcicsXG4gICAgJ2p1bmtpZScsXG4gICAgJ2p1bmttYW4nLFxuICAgICdqdW5reWFyZCcsXG4gICAgJ2p1cmlzdCcsXG4gICAgJ2p1cm9yJyxcbiAgICAnanVyeScsXG4gICAgJ2p1c3RpY2UnLFxuICAgICdqdXN0aWZpZXInLFxuICAgICdqdXN0aWZ5JyxcbiAgICAnanVzdGx5JyxcbiAgICAnanVzdG5lc3MnLFxuICAgICdqdXZlbmlsZScsXG4gICAgJ2thYm9iJyxcbiAgICAna2FuZ2Fyb28nLFxuICAgICdrYXJhb2tlJyxcbiAgICAna2FyYXRlJyxcbiAgICAna2FybWEnLFxuICAgICdrZWJhYicsXG4gICAgJ2tlZW5seScsXG4gICAgJ2tlZW5uZXNzJyxcbiAgICAna2VlcCcsXG4gICAgJ2tlZycsXG4gICAgJ2tlbHAnLFxuICAgICdrZW5uZWwnLFxuICAgICdrZXB0JyxcbiAgICAna2VyY2hpZWYnLFxuICAgICdrZXJvc2VuZScsXG4gICAgJ2tldHRsZScsXG4gICAgJ2tpY2snLFxuICAgICdraWxuJyxcbiAgICAna2lsb2J5dGUnLFxuICAgICdraWxvZ3JhbScsXG4gICAgJ2tpbG9tZXRlcicsXG4gICAgJ2tpbG93YXR0JyxcbiAgICAna2lsdCcsXG4gICAgJ2tpbW9ubycsXG4gICAgJ2tpbmRsZScsXG4gICAgJ2tpbmRsaW5nJyxcbiAgICAna2luZGx5JyxcbiAgICAna2luZG5lc3MnLFxuICAgICdraW5kcmVkJyxcbiAgICAna2luZXRpYycsXG4gICAgJ2tpbmZvbGsnLFxuICAgICdraW5nJyxcbiAgICAna2luc2hpcCcsXG4gICAgJ2tpbnNtYW4nLFxuICAgICdraW5zd29tYW4nLFxuICAgICdraXNzYWJsZScsXG4gICAgJ2tpc3NlcicsXG4gICAgJ2tpc3NpbmcnLFxuICAgICdraXRjaGVuJyxcbiAgICAna2l0ZScsXG4gICAgJ2tpdHRlbicsXG4gICAgJ2tpdHR5JyxcbiAgICAna2l3aScsXG4gICAgJ2tsZWVuZXgnLFxuICAgICdrbmFwc2FjaycsXG4gICAgJ2tuZWUnLFxuICAgICdrbmVsdCcsXG4gICAgJ2tuaWNrZXJzJyxcbiAgICAna25vbGwnLFxuICAgICdrb2FsYScsXG4gICAgJ2tvb2t5JyxcbiAgICAna29zaGVyJyxcbiAgICAna3J5cHRvbicsXG4gICAgJ2t1ZG9zJyxcbiAgICAna3VuZycsXG4gICAgJ2xhYm9yZWQnLFxuICAgICdsYWJvcmVyJyxcbiAgICAnbGFib3JpbmcnLFxuICAgICdsYWJvcmlvdXMnLFxuICAgICdsYWJyYWRvcicsXG4gICAgJ2xhZGRlcicsXG4gICAgJ2xhZGllcycsXG4gICAgJ2xhZGxlJyxcbiAgICAnbGFkeWJ1ZycsXG4gICAgJ2xhZHlsaWtlJyxcbiAgICAnbGFnZ2VkJyxcbiAgICAnbGFnZ2luZycsXG4gICAgJ2xhZ29vbicsXG4gICAgJ2xhaXInLFxuICAgICdsYWtlJyxcbiAgICAnbGFuY2UnLFxuICAgICdsYW5kZWQnLFxuICAgICdsYW5kZmFsbCcsXG4gICAgJ2xhbmRmaWxsJyxcbiAgICAnbGFuZGluZycsXG4gICAgJ2xhbmRsYWR5JyxcbiAgICAnbGFuZGxlc3MnLFxuICAgICdsYW5kbGluZScsXG4gICAgJ2xhbmRsb3JkJyxcbiAgICAnbGFuZG1hcmsnLFxuICAgICdsYW5kbWFzcycsXG4gICAgJ2xhbmRtaW5lJyxcbiAgICAnbGFuZG93bmVyJyxcbiAgICAnbGFuZHNjYXBlJyxcbiAgICAnbGFuZHNpZGUnLFxuICAgICdsYW5kc2xpZGUnLFxuICAgICdsYW5ndWFnZScsXG4gICAgJ2xhbmtpbmVzcycsXG4gICAgJ2xhbmt5JyxcbiAgICAnbGFudGVybicsXG4gICAgJ2xhcGRvZycsXG4gICAgJ2xhcGVsJyxcbiAgICAnbGFwcGVkJyxcbiAgICAnbGFwcGluZycsXG4gICAgJ2xhcHRvcCcsXG4gICAgJ2xhcmQnLFxuICAgICdsYXJnZScsXG4gICAgJ2xhcmsnLFxuICAgICdsYXNoJyxcbiAgICAnbGFzc28nLFxuICAgICdsYXN0JyxcbiAgICAnbGF0Y2gnLFxuICAgICdsYXRlJyxcbiAgICAnbGF0aGVyJyxcbiAgICAnbGF0aXR1ZGUnLFxuICAgICdsYXRyaW5lJyxcbiAgICAnbGF0dGVyJyxcbiAgICAnbGF0dGljZWQnLFxuICAgICdsYXVuY2gnLFxuICAgICdsYXVuZGVyJyxcbiAgICAnbGF1bmRyeScsXG4gICAgJ2xhdXJlbCcsXG4gICAgJ2xhdmVuZGVyJyxcbiAgICAnbGF2aXNoJyxcbiAgICAnbGF4YXRpdmUnLFxuICAgICdsYXppbHknLFxuICAgICdsYXppbmVzcycsXG4gICAgJ2xhenknLFxuICAgICdsZWN0dXJlcicsXG4gICAgJ2xlZnQnLFxuICAgICdsZWdhY3knLFxuICAgICdsZWdhbCcsXG4gICAgJ2xlZ2VuZCcsXG4gICAgJ2xlZ2dlZCcsXG4gICAgJ2xlZ2dpbmdzJyxcbiAgICAnbGVnaWJsZScsXG4gICAgJ2xlZ2libHknLFxuICAgICdsZWdpc2xhdGUnLFxuICAgICdsZWdvJyxcbiAgICAnbGVncm9vbScsXG4gICAgJ2xlZ3VtZScsXG4gICAgJ2xlZ3dhcm1lcicsXG4gICAgJ2xlZ3dvcmsnLFxuICAgICdsZW1vbicsXG4gICAgJ2xlbmQnLFxuICAgICdsZW5ndGgnLFxuICAgICdsZW5zJyxcbiAgICAnbGVudCcsXG4gICAgJ2xlb3RhcmQnLFxuICAgICdsZXNzZXInLFxuICAgICdsZXRkb3duJyxcbiAgICAnbGV0aGFyZ2ljJyxcbiAgICAnbGV0aGFyZ3knLFxuICAgICdsZXR0ZXInLFxuICAgICdsZXR0dWNlJyxcbiAgICAnbGV2ZWwnLFxuICAgICdsZXZlcmFnZScsXG4gICAgJ2xldmVycycsXG4gICAgJ2xldml0YXRlJyxcbiAgICAnbGV2aXRhdG9yJyxcbiAgICAnbGlhYmlsaXR5JyxcbiAgICAnbGlhYmxlJyxcbiAgICAnbGliZXJ0eScsXG4gICAgJ2xpYnJhcmlhbicsXG4gICAgJ2xpYnJhcnknLFxuICAgICdsaWNraW5nJyxcbiAgICAnbGljb3JpY2UnLFxuICAgICdsaWQnLFxuICAgICdsaWZlJyxcbiAgICAnbGlmdGVyJyxcbiAgICAnbGlmdGluZycsXG4gICAgJ2xpZnRvZmYnLFxuICAgICdsaWdhbWVudCcsXG4gICAgJ2xpa2VseScsXG4gICAgJ2xpa2VuZXNzJyxcbiAgICAnbGlrZXdpc2UnLFxuICAgICdsaWtpbmcnLFxuICAgICdsaWxhYycsXG4gICAgJ2xpbGx5JyxcbiAgICAnbGlseScsXG4gICAgJ2xpbWInLFxuICAgICdsaW1lYWRlJyxcbiAgICAnbGltZWxpZ2h0JyxcbiAgICAnbGltZXMnLFxuICAgICdsaW1pdCcsXG4gICAgJ2xpbXBpbmcnLFxuICAgICdsaW1wbmVzcycsXG4gICAgJ2xpbmUnLFxuICAgICdsaW5nbycsXG4gICAgJ2xpbmd1aW5pJyxcbiAgICAnbGluZ3Vpc3QnLFxuICAgICdsaW5pbmcnLFxuICAgICdsaW5rZWQnLFxuICAgICdsaW5vbGV1bScsXG4gICAgJ2xpbnNlZWQnLFxuICAgICdsaW50JyxcbiAgICAnbGlvbicsXG4gICAgJ2xpcCcsXG4gICAgJ2xpcXVlZnknLFxuICAgICdsaXF1ZXVyJyxcbiAgICAnbGlxdWlkJyxcbiAgICAnbGlzcCcsXG4gICAgJ2xpc3QnLFxuICAgICdsaXRpZ2F0ZScsXG4gICAgJ2xpdGlnYXRvcicsXG4gICAgJ2xpdG11cycsXG4gICAgJ2xpdHRlcicsXG4gICAgJ2xpdHRsZScsXG4gICAgJ2xpdmFibGUnLFxuICAgICdsaXZlZCcsXG4gICAgJ2xpdmVseScsXG4gICAgJ2xpdmVyJyxcbiAgICAnbGl2ZXN0b2NrJyxcbiAgICAnbGl2aWRseScsXG4gICAgJ2xpdmluZycsXG4gICAgJ2xpemFyZCcsXG4gICAgJ2x1YnJpY2FudCcsXG4gICAgJ2x1YnJpY2F0ZScsXG4gICAgJ2x1Y2lkJyxcbiAgICAnbHVja2lseScsXG4gICAgJ2x1Y2tpbmVzcycsXG4gICAgJ2x1Y2tsZXNzJyxcbiAgICAnbHVjcmF0aXZlJyxcbiAgICAnbHVkaWNyb3VzJyxcbiAgICAnbHVnZ2VkJyxcbiAgICAnbHVrZXdhcm0nLFxuICAgICdsdWxsYWJ5JyxcbiAgICAnbHVtYmVyJyxcbiAgICAnbHVtaW5hbmNlJyxcbiAgICAnbHVtaW5vdXMnLFxuICAgICdsdW1waW5lc3MnLFxuICAgICdsdW1waW5nJyxcbiAgICAnbHVtcGlzaCcsXG4gICAgJ2x1bmFjeScsXG4gICAgJ2x1bmFyJyxcbiAgICAnbHVuY2hib3gnLFxuICAgICdsdW5jaGVvbicsXG4gICAgJ2x1bmNocm9vbScsXG4gICAgJ2x1bmNodGltZScsXG4gICAgJ2x1bmcnLFxuICAgICdsdXJjaCcsXG4gICAgJ2x1cmUnLFxuICAgICdsdXJpZG5lc3MnLFxuICAgICdsdXJrJyxcbiAgICAnbHVzaGx5JyxcbiAgICAnbHVzaG5lc3MnLFxuICAgICdsdXN0ZXInLFxuICAgICdsdXN0ZnVsbHknLFxuICAgICdsdXN0aWx5JyxcbiAgICAnbHVzdGluZXNzJyxcbiAgICAnbHVzdHJvdXMnLFxuICAgICdsdXN0eScsXG4gICAgJ2x1eHVyaW91cycsXG4gICAgJ2x1eHVyeScsXG4gICAgJ2x5aW5nJyxcbiAgICAnbHlyaWNhbGx5JyxcbiAgICAnbHlyaWNpc20nLFxuICAgICdseXJpY2lzdCcsXG4gICAgJ2x5cmljcycsXG4gICAgJ21hY2FyZW5hJyxcbiAgICAnbWFjYXJvbmknLFxuICAgICdtYWNhdycsXG4gICAgJ21hY2UnLFxuICAgICdtYWNoaW5lJyxcbiAgICAnbWFjaGluaXN0JyxcbiAgICAnbWFnYXppbmUnLFxuICAgICdtYWdlbnRhJyxcbiAgICAnbWFnZ290JyxcbiAgICAnbWFnaWNhbCcsXG4gICAgJ21hZ2ljaWFuJyxcbiAgICAnbWFnbWEnLFxuICAgICdtYWduZXNpdW0nLFxuICAgICdtYWduZXRpYycsXG4gICAgJ21hZ25ldGlzbScsXG4gICAgJ21hZ25ldGl6ZScsXG4gICAgJ21hZ25pZmllcicsXG4gICAgJ21hZ25pZnknLFxuICAgICdtYWduaXR1ZGUnLFxuICAgICdtYWdub2xpYScsXG4gICAgJ21haG9nYW55JyxcbiAgICAnbWFpbWVkJyxcbiAgICAnbWFqZXN0aWMnLFxuICAgICdtYWplc3R5JyxcbiAgICAnbWFqb3JldHRlJyxcbiAgICAnbWFqb3JpdHknLFxuICAgICdtYWtlb3ZlcicsXG4gICAgJ21ha2VyJyxcbiAgICAnbWFrZXNoaWZ0JyxcbiAgICAnbWFraW5nJyxcbiAgICAnbWFsZm9ybWVkJyxcbiAgICAnbWFsdCcsXG4gICAgJ21hbWEnLFxuICAgICdtYW1tYWwnLFxuICAgICdtYW1tYXJ5JyxcbiAgICAnbWFtbW9ncmFtJyxcbiAgICAnbWFuYWdlcicsXG4gICAgJ21hbmFnaW5nJyxcbiAgICAnbWFuYXRlZScsXG4gICAgJ21hbmRhcmluJyxcbiAgICAnbWFuZGF0ZScsXG4gICAgJ21hbmRhdG9yeScsXG4gICAgJ21hbmRvbGluJyxcbiAgICAnbWFuZ2VyJyxcbiAgICAnbWFuZ2xlJyxcbiAgICAnbWFuZ28nLFxuICAgICdtYW5neScsXG4gICAgJ21hbmhhbmRsZScsXG4gICAgJ21hbmhvbGUnLFxuICAgICdtYW5ob29kJyxcbiAgICAnbWFuaHVudCcsXG4gICAgJ21hbmljb3R0aScsXG4gICAgJ21hbmljdXJlJyxcbiAgICAnbWFuaWZlc3RvJyxcbiAgICAnbWFuaWxhJyxcbiAgICAnbWFua2luZCcsXG4gICAgJ21hbmxpa2UnLFxuICAgICdtYW5saW5lc3MnLFxuICAgICdtYW5seScsXG4gICAgJ21hbm1hZGUnLFxuICAgICdtYW5uZWQnLFxuICAgICdtYW5uaXNoJyxcbiAgICAnbWFub3InLFxuICAgICdtYW5wb3dlcicsXG4gICAgJ21hbnRpcycsXG4gICAgJ21hbnRyYScsXG4gICAgJ21hbnVhbCcsXG4gICAgJ21hbnknLFxuICAgICdtYXAnLFxuICAgICdtYXJhdGhvbicsXG4gICAgJ21hcmF1ZGluZycsXG4gICAgJ21hcmJsZWQnLFxuICAgICdtYXJibGVzJyxcbiAgICAnbWFyYmxpbmcnLFxuICAgICdtYXJjaCcsXG4gICAgJ21hcmRpJyxcbiAgICAnbWFyZ2FyaW5lJyxcbiAgICAnbWFyZ2FyaXRhJyxcbiAgICAnbWFyZ2luJyxcbiAgICAnbWFyaWdvbGQnLFxuICAgICdtYXJpbmEnLFxuICAgICdtYXJpbmUnLFxuICAgICdtYXJpdGFsJyxcbiAgICAnbWFyaXRpbWUnLFxuICAgICdtYXJsaW4nLFxuICAgICdtYXJtYWxhZGUnLFxuICAgICdtYXJvb24nLFxuICAgICdtYXJyaWVkJyxcbiAgICAnbWFycm93JyxcbiAgICAnbWFycnknLFxuICAgICdtYXJzaGxhbmQnLFxuICAgICdtYXJzaHknLFxuICAgICdtYXJzdXBpYWwnLFxuICAgICdtYXJ2ZWxvdXMnLFxuICAgICdtYXJ4aXNtJyxcbiAgICAnbWFzY290JyxcbiAgICAnbWFzY3VsaW5lJyxcbiAgICAnbWFzaGVkJyxcbiAgICAnbWFzaGluZycsXG4gICAgJ21hc3NhZ2VyJyxcbiAgICAnbWFzc2VzJyxcbiAgICAnbWFzc2l2ZScsXG4gICAgJ21hc3RpZmYnLFxuICAgICdtYXRhZG9yJyxcbiAgICAnbWF0Y2hib29rJyxcbiAgICAnbWF0Y2hib3gnLFxuICAgICdtYXRjaGVyJyxcbiAgICAnbWF0Y2hpbmcnLFxuICAgICdtYXRjaGxlc3MnLFxuICAgICdtYXRlcmlhbCcsXG4gICAgJ21hdGVybmFsJyxcbiAgICAnbWF0ZXJuaXR5JyxcbiAgICAnbWF0aCcsXG4gICAgJ21hdGluZycsXG4gICAgJ21hdHJpYXJjaCcsXG4gICAgJ21hdHJpbW9ueScsXG4gICAgJ21hdHJpeCcsXG4gICAgJ21hdHJvbicsXG4gICAgJ21hdHRlZCcsXG4gICAgJ21hdHRlcicsXG4gICAgJ21hdHVyZWx5JyxcbiAgICAnbWF0dXJpbmcnLFxuICAgICdtYXR1cml0eScsXG4gICAgJ21hdXZlJyxcbiAgICAnbWF2ZXJpY2snLFxuICAgICdtYXhpbWl6ZScsXG4gICAgJ21heGltdW0nLFxuICAgICdtYXliZScsXG4gICAgJ21heWRheScsXG4gICAgJ21heWZsb3dlcicsXG4gICAgJ21vYW5lcicsXG4gICAgJ21vYW5pbmcnLFxuICAgICdtb2JpbGUnLFxuICAgICdtb2JpbGl0eScsXG4gICAgJ21vYmlsaXplJyxcbiAgICAnbW9ic3RlcicsXG4gICAgJ21vY2hhJyxcbiAgICAnbW9ja2VyJyxcbiAgICAnbW9ja3VwJyxcbiAgICAnbW9kaWZpZWQnLFxuICAgICdtb2RpZnknLFxuICAgICdtb2R1bGFyJyxcbiAgICAnbW9kdWxhdG9yJyxcbiAgICAnbW9kdWxlJyxcbiAgICAnbW9pc3RlbicsXG4gICAgJ21vaXN0bmVzcycsXG4gICAgJ21vaXN0dXJlJyxcbiAgICAnbW9sYXInLFxuICAgICdtb2xhc3NlcycsXG4gICAgJ21vbGQnLFxuICAgICdtb2xlY3VsYXInLFxuICAgICdtb2xlY3VsZScsXG4gICAgJ21vbGVoaWxsJyxcbiAgICAnbW9sbHVzaycsXG4gICAgJ21vbScsXG4gICAgJ21vbmFzdGVyeScsXG4gICAgJ21vbmRheScsXG4gICAgJ21vbmV0YXJ5JyxcbiAgICAnbW9uZXRpemUnLFxuICAgICdtb25leWJhZ3MnLFxuICAgICdtb25leWxlc3MnLFxuICAgICdtb25leXdpc2UnLFxuICAgICdtb25nb29zZScsXG4gICAgJ21vbmdyZWwnLFxuICAgICdtb25pdG9yJyxcbiAgICAnbW9ua2hvb2QnLFxuICAgICdtb25vZ2FteScsXG4gICAgJ21vbm9ncmFtJyxcbiAgICAnbW9ub2xvZ3VlJyxcbiAgICAnbW9ub3BvbHknLFxuICAgICdtb25vcmFpbCcsXG4gICAgJ21vbm90b25lJyxcbiAgICAnbW9ub3R5cGUnLFxuICAgICdtb25veGlkZScsXG4gICAgJ21vbnNpZXVyJyxcbiAgICAnbW9uc29vbicsXG4gICAgJ21vbnN0cm91cycsXG4gICAgJ21vbnRobHknLFxuICAgICdtb251bWVudCcsXG4gICAgJ21vb2NoZXInLFxuICAgICdtb29kaW5lc3MnLFxuICAgICdtb29keScsXG4gICAgJ21vb2luZycsXG4gICAgJ21vb25iZWFtJyxcbiAgICAnbW9vbmVkJyxcbiAgICAnbW9vbmxpZ2h0JyxcbiAgICAnbW9vbmxpa2UnLFxuICAgICdtb29ubGl0JyxcbiAgICAnbW9vbnJpc2UnLFxuICAgICdtb29uc2NhcGUnLFxuICAgICdtb29uc2hpbmUnLFxuICAgICdtb29uc3RvbmUnLFxuICAgICdtb29ud2FsaycsXG4gICAgJ21vcCcsXG4gICAgJ21vcmFsZScsXG4gICAgJ21vcmFsaXR5JyxcbiAgICAnbW9yYWxseScsXG4gICAgJ21vcmJpZGl0eScsXG4gICAgJ21vcmJpZGx5JyxcbiAgICAnbW9ycGhpbmUnLFxuICAgICdtb3JwaGluZycsXG4gICAgJ21vcnNlJyxcbiAgICAnbW9ydGFsaXR5JyxcbiAgICAnbW9ydGFsbHknLFxuICAgICdtb3J0aWNpYW4nLFxuICAgICdtb3J0aWZpZWQnLFxuICAgICdtb3J0aWZ5JyxcbiAgICAnbW9ydHVhcnknLFxuICAgICdtb3NhaWMnLFxuICAgICdtb3NzeScsXG4gICAgJ21vc3QnLFxuICAgICdtb3RoYmFsbCcsXG4gICAgJ21vdGhwcm9vZicsXG4gICAgJ21vdGlvbicsXG4gICAgJ21vdGl2YXRlJyxcbiAgICAnbW90aXZhdG9yJyxcbiAgICAnbW90aXZlJyxcbiAgICAnbW90b2Nyb3NzJyxcbiAgICAnbW90b3InLFxuICAgICdtb3R0bycsXG4gICAgJ21vdW50YWJsZScsXG4gICAgJ21vdW50YWluJyxcbiAgICAnbW91bnRlZCcsXG4gICAgJ21vdW50aW5nJyxcbiAgICAnbW91cm5lcicsXG4gICAgJ21vdXJuZnVsJyxcbiAgICAnbW91c2UnLFxuICAgICdtb3VzaW5lc3MnLFxuICAgICdtb3VzdGFjaGUnLFxuICAgICdtb3VzeScsXG4gICAgJ21vdXRoJyxcbiAgICAnbW92YWJsZScsXG4gICAgJ21vdmUnLFxuICAgICdtb3ZpZScsXG4gICAgJ21vdmluZycsXG4gICAgJ21vd2VyJyxcbiAgICAnbW93aW5nJyxcbiAgICAnbXVjaCcsXG4gICAgJ211Y2snLFxuICAgICdtdWQnLFxuICAgICdtdWcnLFxuICAgICdtdWxiZXJyeScsXG4gICAgJ211bGNoJyxcbiAgICAnbXVsZScsXG4gICAgJ211bGxlZCcsXG4gICAgJ211bGxldHMnLFxuICAgICdtdWx0aXBsZScsXG4gICAgJ211bHRpcGx5JyxcbiAgICAnbXVsdGl0YXNrJyxcbiAgICAnbXVsdGl0dWRlJyxcbiAgICAnbXVtYmxlJyxcbiAgICAnbXVtYmxpbmcnLFxuICAgICdtdW1ibycsXG4gICAgJ211bW1pZmllZCcsXG4gICAgJ211bW1pZnknLFxuICAgICdtdW1teScsXG4gICAgJ211bXBzJyxcbiAgICAnbXVuY2hraW4nLFxuICAgICdtdW5kYW5lJyxcbiAgICAnbXVuaWNpcGFsJyxcbiAgICAnbXVwcGV0JyxcbiAgICAnbXVyYWwnLFxuICAgICdtdXJraW5lc3MnLFxuICAgICdtdXJreScsXG4gICAgJ211cm11cmluZycsXG4gICAgJ211c2N1bGFyJyxcbiAgICAnbXVzZXVtJyxcbiAgICAnbXVzaGlseScsXG4gICAgJ211c2hpbmVzcycsXG4gICAgJ211c2hyb29tJyxcbiAgICAnbXVzaHknLFxuICAgICdtdXNpYycsXG4gICAgJ211c2tldCcsXG4gICAgJ211c2tpbmVzcycsXG4gICAgJ211c2t5JyxcbiAgICAnbXVzdGFuZycsXG4gICAgJ211c3RhcmQnLFxuICAgICdtdXN0ZXInLFxuICAgICdtdXN0aW5lc3MnLFxuICAgICdtdXN0eScsXG4gICAgJ211dGFibGUnLFxuICAgICdtdXRhdGUnLFxuICAgICdtdXRhdGlvbicsXG4gICAgJ211dGUnLFxuICAgICdtdXRpbGF0ZWQnLFxuICAgICdtdXRpbGF0b3InLFxuICAgICdtdXRpbnknLFxuICAgICdtdXR0JyxcbiAgICAnbXV0dWFsJyxcbiAgICAnbXV6emxlJyxcbiAgICAnbXlzZWxmJyxcbiAgICAnbXlzcGFjZScsXG4gICAgJ215c3RpZmllZCcsXG4gICAgJ215c3RpZnknLFxuICAgICdteXRoJyxcbiAgICAnbmFjaG8nLFxuICAgICduYWcnLFxuICAgICduYWlsJyxcbiAgICAnbmFtZScsXG4gICAgJ25hbWluZycsXG4gICAgJ25hbm55JyxcbiAgICAnbmFub21ldGVyJyxcbiAgICAnbmFwZScsXG4gICAgJ25hcGtpbicsXG4gICAgJ25hcHBlZCcsXG4gICAgJ25hcHBpbmcnLFxuICAgICduYXBweScsXG4gICAgJ25hcnJvdycsXG4gICAgJ25hc3RpbHknLFxuICAgICduYXN0aW5lc3MnLFxuICAgICduYXRpb25hbCcsXG4gICAgJ25hdGl2ZScsXG4gICAgJ25hdGl2aXR5JyxcbiAgICAnbmF0dXJhbCcsXG4gICAgJ25hdHVyZScsXG4gICAgJ25hdHVyaXN0JyxcbiAgICAnbmF1dGljYWwnLFxuICAgICduYXZpZ2F0ZScsXG4gICAgJ25hdmlnYXRvcicsXG4gICAgJ25hdnknLFxuICAgICduZWFyYnknLFxuICAgICduZWFyZXN0JyxcbiAgICAnbmVhcmx5JyxcbiAgICAnbmVhcm5lc3MnLFxuICAgICduZWF0bHknLFxuICAgICduZWF0bmVzcycsXG4gICAgJ25lYnVsYScsXG4gICAgJ25lYnVsaXplcicsXG4gICAgJ25lY3RhcicsXG4gICAgJ25lZ2F0ZScsXG4gICAgJ25lZ2F0aW9uJyxcbiAgICAnbmVnYXRpdmUnLFxuICAgICduZWdsZWN0b3InLFxuICAgICduZWdsaWdlZScsXG4gICAgJ25lZ2xpZ2VudCcsXG4gICAgJ25lZ290aWF0ZScsXG4gICAgJ25lbWVzZXMnLFxuICAgICduZW1lc2lzJyxcbiAgICAnbmVvbicsXG4gICAgJ25lcGhldycsXG4gICAgJ25lcmQnLFxuICAgICduZXJ2b3VzJyxcbiAgICAnbmVydnknLFxuICAgICduZXN0JyxcbiAgICAnbmV0JyxcbiAgICAnbmV1cm9sb2d5JyxcbiAgICAnbmV1cm9uJyxcbiAgICAnbmV1cm9zaXMnLFxuICAgICduZXVyb3RpYycsXG4gICAgJ25ldXRlcicsXG4gICAgJ25ldXRyb24nLFxuICAgICduZXZlcicsXG4gICAgJ25leHQnLFxuICAgICduaWJibGUnLFxuICAgICduaWNrbmFtZScsXG4gICAgJ25pY290aW5lJyxcbiAgICAnbmllY2UnLFxuICAgICduaWZ0eScsXG4gICAgJ25pbWJsZScsXG4gICAgJ25pbWJseScsXG4gICAgJ25pbmV0ZWVuJyxcbiAgICAnbmluZXRpZXRoJyxcbiAgICAnbmluamEnLFxuICAgICduaW50ZW5kbycsXG4gICAgJ25pbnRoJyxcbiAgICAnbnVjbGVhcicsXG4gICAgJ251Y2xlaScsXG4gICAgJ251Y2xldXMnLFxuICAgICdudWdnZXQnLFxuICAgICdudWxsaWZ5JyxcbiAgICAnbnVtYmVyJyxcbiAgICAnbnVtYmluZycsXG4gICAgJ251bWJseScsXG4gICAgJ251bWJuZXNzJyxcbiAgICAnbnVtZXJhbCcsXG4gICAgJ251bWVyYXRlJyxcbiAgICAnbnVtZXJhdG9yJyxcbiAgICAnbnVtZXJpYycsXG4gICAgJ251bWVyb3VzJyxcbiAgICAnbnVwdGlhbHMnLFxuICAgICdudXJzZXJ5JyxcbiAgICAnbnVyc2luZycsXG4gICAgJ251cnR1cmUnLFxuICAgICdudXRjYXNlJyxcbiAgICAnbnV0bGlrZScsXG4gICAgJ251dG1lZycsXG4gICAgJ251dHJpZW50JyxcbiAgICAnbnV0c2hlbGwnLFxuICAgICdudXR0aW5lc3MnLFxuICAgICdudXR0eScsXG4gICAgJ251enpsZScsXG4gICAgJ255bG9uJyxcbiAgICAnb2FmJyxcbiAgICAnb2FrJyxcbiAgICAnb2FzaXMnLFxuICAgICdvYXQnLFxuICAgICdvYmVkaWVuY2UnLFxuICAgICdvYmVkaWVudCcsXG4gICAgJ29iaXR1YXJ5JyxcbiAgICAnb2JqZWN0JyxcbiAgICAnb2JsaWdhdGUnLFxuICAgICdvYmxpZ2VkJyxcbiAgICAnb2JsaXZpb24nLFxuICAgICdvYmxpdmlvdXMnLFxuICAgICdvYmxvbmcnLFxuICAgICdvYm5veGlvdXMnLFxuICAgICdvYm9lJyxcbiAgICAnb2JzY3VyZScsXG4gICAgJ29ic2N1cml0eScsXG4gICAgJ29ic2VydmFudCcsXG4gICAgJ29ic2VydmVyJyxcbiAgICAnb2JzZXJ2aW5nJyxcbiAgICAnb2JzZXNzZWQnLFxuICAgICdvYnNlc3Npb24nLFxuICAgICdvYnNlc3NpdmUnLFxuICAgICdvYnNvbGV0ZScsXG4gICAgJ29ic3RhY2xlJyxcbiAgICAnb2JzdGluYXRlJyxcbiAgICAnb2JzdHJ1Y3QnLFxuICAgICdvYnRhaW4nLFxuICAgICdvYnRydXNpdmUnLFxuICAgICdvYnR1c2UnLFxuICAgICdvYnZpb3VzJyxcbiAgICAnb2NjdWx0aXN0JyxcbiAgICAnb2NjdXBhbmN5JyxcbiAgICAnb2NjdXBhbnQnLFxuICAgICdvY2N1cGllcicsXG4gICAgJ29jY3VweScsXG4gICAgJ29jZWFuJyxcbiAgICAnb2NlbG90JyxcbiAgICAnb2N0YWdvbicsXG4gICAgJ29jdGFuZScsXG4gICAgJ29jdG9iZXInLFxuICAgICdvY3RvcHVzJyxcbiAgICAnb2dsZScsXG4gICAgJ29pbCcsXG4gICAgJ29pbmsnLFxuICAgICdvaW50bWVudCcsXG4gICAgJ29rYXknLFxuICAgICdvbGQnLFxuICAgICdvbGl2ZScsXG4gICAgJ29seW1waWNzJyxcbiAgICAnb21lZ2EnLFxuICAgICdvbWVuJyxcbiAgICAnb21pbm91cycsXG4gICAgJ29taXNzaW9uJyxcbiAgICAnb21pdCcsXG4gICAgJ29tbml2b3JlJyxcbiAgICAnb25ib2FyZCcsXG4gICAgJ29uY29taW5nJyxcbiAgICAnb25nb2luZycsXG4gICAgJ29uaW9uJyxcbiAgICAnb25saW5lJyxcbiAgICAnb25sb29rZXInLFxuICAgICdvbmx5JyxcbiAgICAnb25zY3JlZW4nLFxuICAgICdvbnNldCcsXG4gICAgJ29uc2hvcmUnLFxuICAgICdvbnNsYXVnaHQnLFxuICAgICdvbnN0YWdlJyxcbiAgICAnb250bycsXG4gICAgJ29ud2FyZCcsXG4gICAgJ29ueXgnLFxuICAgICdvb3BzJyxcbiAgICAnb296ZScsXG4gICAgJ29venknLFxuICAgICdvcGFjaXR5JyxcbiAgICAnb3BhbCcsXG4gICAgJ29wZW4nLFxuICAgICdvcGVyYWJsZScsXG4gICAgJ29wZXJhdGUnLFxuICAgICdvcGVyYXRpbmcnLFxuICAgICdvcGVyYXRpb24nLFxuICAgICdvcGVyYXRpdmUnLFxuICAgICdvcGVyYXRvcicsXG4gICAgJ29waXVtJyxcbiAgICAnb3Bvc3N1bScsXG4gICAgJ29wcG9uZW50JyxcbiAgICAnb3Bwb3NlJyxcbiAgICAnb3Bwb3NpbmcnLFxuICAgICdvcHBvc2l0ZScsXG4gICAgJ29wcHJlc3NlZCcsXG4gICAgJ29wcHJlc3NvcicsXG4gICAgJ29wdCcsXG4gICAgJ29wdWxlbnRseScsXG4gICAgJ29zbW9zaXMnLFxuICAgICdvdGhlcicsXG4gICAgJ290dGVyJyxcbiAgICAnb3VjaCcsXG4gICAgJ291Z2h0JyxcbiAgICAnb3VuY2UnLFxuICAgICdvdXRhZ2UnLFxuICAgICdvdXRiYWNrJyxcbiAgICAnb3V0YmlkJyxcbiAgICAnb3V0Ym9hcmQnLFxuICAgICdvdXRib3VuZCcsXG4gICAgJ291dGJyZWFrJyxcbiAgICAnb3V0YnVyc3QnLFxuICAgICdvdXRjYXN0JyxcbiAgICAnb3V0Y2xhc3MnLFxuICAgICdvdXRjb21lJyxcbiAgICAnb3V0ZGF0ZWQnLFxuICAgICdvdXRkb29ycycsXG4gICAgJ291dGVyJyxcbiAgICAnb3V0ZmllbGQnLFxuICAgICdvdXRmaXQnLFxuICAgICdvdXRmbGFuaycsXG4gICAgJ291dGdvaW5nJyxcbiAgICAnb3V0Z3JvdycsXG4gICAgJ291dGhvdXNlJyxcbiAgICAnb3V0aW5nJyxcbiAgICAnb3V0bGFzdCcsXG4gICAgJ291dGxldCcsXG4gICAgJ291dGxpbmUnLFxuICAgICdvdXRsb29rJyxcbiAgICAnb3V0bHlpbmcnLFxuICAgICdvdXRtYXRjaCcsXG4gICAgJ291dG1vc3QnLFxuICAgICdvdXRudW1iZXInLFxuICAgICdvdXRwbGF5ZWQnLFxuICAgICdvdXRwb3N0JyxcbiAgICAnb3V0cG91cicsXG4gICAgJ291dHB1dCcsXG4gICAgJ291dHJhZ2UnLFxuICAgICdvdXRyYW5rJyxcbiAgICAnb3V0cmVhY2gnLFxuICAgICdvdXRyaWdodCcsXG4gICAgJ291dHNjb3JlJyxcbiAgICAnb3V0c2VsbCcsXG4gICAgJ291dHNoaW5lJyxcbiAgICAnb3V0c2hvb3QnLFxuICAgICdvdXRzaWRlcicsXG4gICAgJ291dHNraXJ0cycsXG4gICAgJ291dHNtYXJ0JyxcbiAgICAnb3V0c291cmNlJyxcbiAgICAnb3V0c3Bva2VuJyxcbiAgICAnb3V0dGFrZXMnLFxuICAgICdvdXR0aGluaycsXG4gICAgJ291dHdhcmQnLFxuICAgICdvdXR3ZWlnaCcsXG4gICAgJ291dHdpdCcsXG4gICAgJ292YWwnLFxuICAgICdvdmFyeScsXG4gICAgJ292ZW4nLFxuICAgICdvdmVyYWN0JyxcbiAgICAnb3ZlcmFsbCcsXG4gICAgJ292ZXJhcmNoJyxcbiAgICAnb3ZlcmJpZCcsXG4gICAgJ292ZXJiaWxsJyxcbiAgICAnb3ZlcmJpdGUnLFxuICAgICdvdmVyYmxvd24nLFxuICAgICdvdmVyYm9hcmQnLFxuICAgICdvdmVyYm9vaycsXG4gICAgJ292ZXJidWlsdCcsXG4gICAgJ292ZXJjYXN0JyxcbiAgICAnb3ZlcmNvYXQnLFxuICAgICdvdmVyY29tZScsXG4gICAgJ292ZXJjb29rJyxcbiAgICAnb3ZlcmNyb3dkJyxcbiAgICAnb3ZlcmRyYWZ0JyxcbiAgICAnb3ZlcmRyYXduJyxcbiAgICAnb3ZlcmRyZXNzJyxcbiAgICAnb3ZlcmRyaXZlJyxcbiAgICAnb3ZlcmR1ZScsXG4gICAgJ292ZXJlYWdlcicsXG4gICAgJ292ZXJlYXRlcicsXG4gICAgJ292ZXJleGVydCcsXG4gICAgJ292ZXJmZWQnLFxuICAgICdvdmVyZmVlZCcsXG4gICAgJ292ZXJmaWxsJyxcbiAgICAnb3ZlcmZsb3cnLFxuICAgICdvdmVyZnVsbCcsXG4gICAgJ292ZXJncm93bicsXG4gICAgJ292ZXJoYW5kJyxcbiAgICAnb3ZlcmhhbmcnLFxuICAgICdvdmVyaGF1bCcsXG4gICAgJ292ZXJoZWFkJyxcbiAgICAnb3ZlcmhlYXInLFxuICAgICdvdmVyaGVhdCcsXG4gICAgJ292ZXJodW5nJyxcbiAgICAnb3ZlcmpveWVkJyxcbiAgICAnb3ZlcmtpbGwnLFxuICAgICdvdmVybGFib3InLFxuICAgICdvdmVybGFpZCcsXG4gICAgJ292ZXJsYXAnLFxuICAgICdvdmVybGF5JyxcbiAgICAnb3ZlcmxvYWQnLFxuICAgICdvdmVybG9vaycsXG4gICAgJ292ZXJsb3JkJyxcbiAgICAnb3Zlcmx5aW5nJyxcbiAgICAnb3Zlcm5pZ2h0JyxcbiAgICAnb3ZlcnBhc3MnLFxuICAgICdvdmVycGF5JyxcbiAgICAnb3ZlcnBsYW50JyxcbiAgICAnb3ZlcnBsYXknLFxuICAgICdvdmVycG93ZXInLFxuICAgICdvdmVycHJpY2UnLFxuICAgICdvdmVycmF0ZScsXG4gICAgJ292ZXJyZWFjaCcsXG4gICAgJ292ZXJyZWFjdCcsXG4gICAgJ292ZXJyaWRlJyxcbiAgICAnb3ZlcnJpcGUnLFxuICAgICdvdmVycnVsZScsXG4gICAgJ292ZXJydW4nLFxuICAgICdvdmVyc2hvb3QnLFxuICAgICdvdmVyc2hvdCcsXG4gICAgJ292ZXJzaWdodCcsXG4gICAgJ292ZXJzaXplZCcsXG4gICAgJ292ZXJzbGVlcCcsXG4gICAgJ292ZXJzb2xkJyxcbiAgICAnb3ZlcnNwZW5kJyxcbiAgICAnb3ZlcnN0YXRlJyxcbiAgICAnb3ZlcnN0YXknLFxuICAgICdvdmVyc3RlcCcsXG4gICAgJ292ZXJzdG9jaycsXG4gICAgJ292ZXJzdHVmZicsXG4gICAgJ292ZXJzd2VldCcsXG4gICAgJ292ZXJ0YWtlJyxcbiAgICAnb3ZlcnRocm93JyxcbiAgICAnb3ZlcnRpbWUnLFxuICAgICdvdmVydGx5JyxcbiAgICAnb3ZlcnRvbmUnLFxuICAgICdvdmVydHVyZScsXG4gICAgJ292ZXJ0dXJuJyxcbiAgICAnb3ZlcnVzZScsXG4gICAgJ292ZXJ2YWx1ZScsXG4gICAgJ292ZXJ2aWV3JyxcbiAgICAnb3ZlcndyaXRlJyxcbiAgICAnb3dsJyxcbiAgICAnb3hmb3JkJyxcbiAgICAnb3hpZGFudCcsXG4gICAgJ294aWRhdGlvbicsXG4gICAgJ294aWRpemUnLFxuICAgICdveGlkaXppbmcnLFxuICAgICdveHlnZW4nLFxuICAgICdveHltb3JvbicsXG4gICAgJ295c3RlcicsXG4gICAgJ296b25lJyxcbiAgICAncGFjZWQnLFxuICAgICdwYWNlbWFrZXInLFxuICAgICdwYWNpZmljJyxcbiAgICAncGFjaWZpZXInLFxuICAgICdwYWNpZmlzbScsXG4gICAgJ3BhY2lmaXN0JyxcbiAgICAncGFjaWZ5JyxcbiAgICAncGFkZGVkJyxcbiAgICAncGFkZGluZycsXG4gICAgJ3BhZGRsZScsXG4gICAgJ3BhZGRsaW5nJyxcbiAgICAncGFkbG9jaycsXG4gICAgJ3BhZ2FuJyxcbiAgICAncGFnZXInLFxuICAgICdwYWdpbmcnLFxuICAgICdwYWphbWFzJyxcbiAgICAncGFsYWNlJyxcbiAgICAncGFsYXRhYmxlJyxcbiAgICAncGFsbScsXG4gICAgJ3BhbHBhYmxlJyxcbiAgICAncGFscGl0YXRlJyxcbiAgICAncGFsdHJ5JyxcbiAgICAncGFtcGVyZWQnLFxuICAgICdwYW1wZXJlcicsXG4gICAgJ3BhbXBlcnMnLFxuICAgICdwYW1waGxldCcsXG4gICAgJ3BhbmFtYScsXG4gICAgJ3BhbmNha2UnLFxuICAgICdwYW5jcmVhcycsXG4gICAgJ3BhbmRhJyxcbiAgICAncGFuZGVtaWMnLFxuICAgICdwYW5nJyxcbiAgICAncGFuaGFuZGxlJyxcbiAgICAncGFuaWMnLFxuICAgICdwYW5uaW5nJyxcbiAgICAncGFub3JhbWEnLFxuICAgICdwYW5vcmFtaWMnLFxuICAgICdwYW50aGVyJyxcbiAgICAncGFudG9taW1lJyxcbiAgICAncGFudHJ5JyxcbiAgICAncGFudHMnLFxuICAgICdwYW50eWhvc2UnLFxuICAgICdwYXBhcmF6emknLFxuICAgICdwYXBheWEnLFxuICAgICdwYXBlcicsXG4gICAgJ3BhcHJpa2EnLFxuICAgICdwYXB5cnVzJyxcbiAgICAncGFyYWJvbGEnLFxuICAgICdwYXJhY2h1dGUnLFxuICAgICdwYXJhZGUnLFxuICAgICdwYXJhZG94JyxcbiAgICAncGFyYWdyYXBoJyxcbiAgICAncGFyYWtlZXQnLFxuICAgICdwYXJhbGVnYWwnLFxuICAgICdwYXJhbHlzZXMnLFxuICAgICdwYXJhbHlzaXMnLFxuICAgICdwYXJhbHl6ZScsXG4gICAgJ3BhcmFtZWRpYycsXG4gICAgJ3BhcmFtZXRlcicsXG4gICAgJ3BhcmFtb3VudCcsXG4gICAgJ3BhcmFzYWlsJyxcbiAgICAncGFyYXNpdGUnLFxuICAgICdwYXJhc2l0aWMnLFxuICAgICdwYXJjZWwnLFxuICAgICdwYXJjaGVkJyxcbiAgICAncGFyY2htZW50JyxcbiAgICAncGFyZG9uJyxcbiAgICAncGFyaXNoJyxcbiAgICAncGFya2EnLFxuICAgICdwYXJraW5nJyxcbiAgICAncGFya3dheScsXG4gICAgJ3BhcmxvcicsXG4gICAgJ3Bhcm1lc2FuJyxcbiAgICAncGFyb2xlJyxcbiAgICAncGFycm90JyxcbiAgICAncGFyc2xleScsXG4gICAgJ3BhcnNuaXAnLFxuICAgICdwYXJ0YWtlJyxcbiAgICAncGFydGVkJyxcbiAgICAncGFydGluZycsXG4gICAgJ3BhcnRpdGlvbicsXG4gICAgJ3BhcnRseScsXG4gICAgJ3BhcnRuZXInLFxuICAgICdwYXJ0cmlkZ2UnLFxuICAgICdwYXJ0eScsXG4gICAgJ3Bhc3NhYmxlJyxcbiAgICAncGFzc2FibHknLFxuICAgICdwYXNzYWdlJyxcbiAgICAncGFzc2NvZGUnLFxuICAgICdwYXNzZW5nZXInLFxuICAgICdwYXNzZXJieScsXG4gICAgJ3Bhc3NpbmcnLFxuICAgICdwYXNzaW9uJyxcbiAgICAncGFzc2l2ZScsXG4gICAgJ3Bhc3NpdmlzbScsXG4gICAgJ3Bhc3NvdmVyJyxcbiAgICAncGFzc3BvcnQnLFxuICAgICdwYXNzd29yZCcsXG4gICAgJ3Bhc3RhJyxcbiAgICAncGFzdGVkJyxcbiAgICAncGFzdGVsJyxcbiAgICAncGFzdGltZScsXG4gICAgJ3Bhc3RvcicsXG4gICAgJ3Bhc3RyYW1pJyxcbiAgICAncGFzdHVyZScsXG4gICAgJ3Bhc3R5JyxcbiAgICAncGF0Y2h3b3JrJyxcbiAgICAncGF0Y2h5JyxcbiAgICAncGF0ZXJuYWwnLFxuICAgICdwYXRlcm5pdHknLFxuICAgICdwYXRoJyxcbiAgICAncGF0aWVuY2UnLFxuICAgICdwYXRpZW50JyxcbiAgICAncGF0aW8nLFxuICAgICdwYXRyaWFyY2gnLFxuICAgICdwYXRyaW90JyxcbiAgICAncGF0cm9sJyxcbiAgICAncGF0cm9uYWdlJyxcbiAgICAncGF0cm9uaXplJyxcbiAgICAncGF1cGVyJyxcbiAgICAncGF2ZW1lbnQnLFxuICAgICdwYXZlcicsXG4gICAgJ3BhdmVzdG9uZScsXG4gICAgJ3BhdmlsaW9uJyxcbiAgICAncGF2aW5nJyxcbiAgICAncGF3aW5nJyxcbiAgICAncGF5YWJsZScsXG4gICAgJ3BheWJhY2snLFxuICAgICdwYXljaGVjaycsXG4gICAgJ3BheWRheScsXG4gICAgJ3BheWVlJyxcbiAgICAncGF5ZXInLFxuICAgICdwYXlpbmcnLFxuICAgICdwYXltZW50JyxcbiAgICAncGF5cGhvbmUnLFxuICAgICdwYXlyb2xsJyxcbiAgICAncGViYmxlJyxcbiAgICAncGViYmx5JyxcbiAgICAncGVjYW4nLFxuICAgICdwZWN0aW4nLFxuICAgICdwZWN1bGlhcicsXG4gICAgJ3BlZGRsaW5nJyxcbiAgICAncGVkaWF0cmljJyxcbiAgICAncGVkaWN1cmUnLFxuICAgICdwZWRpZ3JlZScsXG4gICAgJ3BlZG9tZXRlcicsXG4gICAgJ3BlZ2JvYXJkJyxcbiAgICAncGVsaWNhbicsXG4gICAgJ3BlbGxldCcsXG4gICAgJ3BlbHQnLFxuICAgICdwZWx2aXMnLFxuICAgICdwZW5hbGl6ZScsXG4gICAgJ3BlbmFsdHknLFxuICAgICdwZW5jaWwnLFxuICAgICdwZW5kYW50JyxcbiAgICAncGVuZGluZycsXG4gICAgJ3BlbmhvbGRlcicsXG4gICAgJ3BlbmtuaWZlJyxcbiAgICAncGVubmFudCcsXG4gICAgJ3Blbm5pbGVzcycsXG4gICAgJ3Blbm55JyxcbiAgICAncGVucGFsJyxcbiAgICAncGVuc2lvbicsXG4gICAgJ3BlbnRhZ29uJyxcbiAgICAncGVudGFncmFtJyxcbiAgICAncGVwJyxcbiAgICAncGVyY2VpdmUnLFxuICAgICdwZXJjZW50JyxcbiAgICAncGVyY2gnLFxuICAgICdwZXJjb2xhdGUnLFxuICAgICdwZXJlbm5pYWwnLFxuICAgICdwZXJmZWN0ZWQnLFxuICAgICdwZXJmZWN0bHknLFxuICAgICdwZXJmdW1lJyxcbiAgICAncGVyaXNjb3BlJyxcbiAgICAncGVyaXNoJyxcbiAgICAncGVyanVyZXInLFxuICAgICdwZXJqdXJ5JyxcbiAgICAncGVya2luZXNzJyxcbiAgICAncGVya3knLFxuICAgICdwZXJtJyxcbiAgICAncGVyb3hpZGUnLFxuICAgICdwZXJwZXR1YWwnLFxuICAgICdwZXJwbGV4ZWQnLFxuICAgICdwZXJzZWN1dGUnLFxuICAgICdwZXJzZXZlcmUnLFxuICAgICdwZXJzdWFkZWQnLFxuICAgICdwZXJzdWFkZXInLFxuICAgICdwZXNreScsXG4gICAgJ3Blc28nLFxuICAgICdwZXNzaW1pc20nLFxuICAgICdwZXNzaW1pc3QnLFxuICAgICdwZXN0ZXInLFxuICAgICdwZXN0aWNpZGUnLFxuICAgICdwZXRhbCcsXG4gICAgJ3BldGl0ZScsXG4gICAgJ3BldGl0aW9uJyxcbiAgICAncGV0cmknLFxuICAgICdwZXRyb2xldW0nLFxuICAgICdwZXR0ZWQnLFxuICAgICdwZXR0aWNvYXQnLFxuICAgICdwZXR0aW5lc3MnLFxuICAgICdwZXR0eScsXG4gICAgJ3BldHVuaWEnLFxuICAgICdwaGFudG9tJyxcbiAgICAncGhvYmlhJyxcbiAgICAncGhvZW5peCcsXG4gICAgJ3Bob25lYm9vaycsXG4gICAgJ3Bob25leScsXG4gICAgJ3Bob25pY3MnLFxuICAgICdwaG9uaW5lc3MnLFxuICAgICdwaG9ueScsXG4gICAgJ3Bob3NwaGF0ZScsXG4gICAgJ3Bob3RvJyxcbiAgICAncGhyYXNlJyxcbiAgICAncGhyYXNpbmcnLFxuICAgICdwbGFjYXJkJyxcbiAgICAncGxhY2F0ZScsXG4gICAgJ3BsYWNpZGx5JyxcbiAgICAncGxhbmsnLFxuICAgICdwbGFubmVyJyxcbiAgICAncGxhbnQnLFxuICAgICdwbGFzbWEnLFxuICAgICdwbGFzdGVyJyxcbiAgICAncGxhc3RpYycsXG4gICAgJ3BsYXRlZCcsXG4gICAgJ3BsYXRmb3JtJyxcbiAgICAncGxhdGluZycsXG4gICAgJ3BsYXRpbnVtJyxcbiAgICAncGxhdG9uaWMnLFxuICAgICdwbGF0dGVyJyxcbiAgICAncGxhdHlwdXMnLFxuICAgICdwbGF1c2libGUnLFxuICAgICdwbGF1c2libHknLFxuICAgICdwbGF5YWJsZScsXG4gICAgJ3BsYXliYWNrJyxcbiAgICAncGxheWVyJyxcbiAgICAncGxheWZ1bCcsXG4gICAgJ3BsYXlncm91cCcsXG4gICAgJ3BsYXlob3VzZScsXG4gICAgJ3BsYXlpbmcnLFxuICAgICdwbGF5bGlzdCcsXG4gICAgJ3BsYXltYWtlcicsXG4gICAgJ3BsYXltYXRlJyxcbiAgICAncGxheW9mZicsXG4gICAgJ3BsYXlwZW4nLFxuICAgICdwbGF5cm9vbScsXG4gICAgJ3BsYXlzZXQnLFxuICAgICdwbGF5dGhpbmcnLFxuICAgICdwbGF5dGltZScsXG4gICAgJ3BsYXphJyxcbiAgICAncGxlYWRpbmcnLFxuICAgICdwbGVhdCcsXG4gICAgJ3BsZWRnZScsXG4gICAgJ3BsZW50aWZ1bCcsXG4gICAgJ3BsZW50eScsXG4gICAgJ3BsZXRob3JhJyxcbiAgICAncGxleGlnbGFzJyxcbiAgICAncGxpYWJsZScsXG4gICAgJ3Bsb2QnLFxuICAgICdwbG9wJyxcbiAgICAncGxvdCcsXG4gICAgJ3Bsb3cnLFxuICAgICdwbG95JyxcbiAgICAncGx1Y2snLFxuICAgICdwbHVnJyxcbiAgICAncGx1bmRlcicsXG4gICAgJ3BsdW5naW5nJyxcbiAgICAncGx1cmFsJyxcbiAgICAncGx1cycsXG4gICAgJ3BsdXRvbml1bScsXG4gICAgJ3BseXdvb2QnLFxuICAgICdwb2FjaCcsXG4gICAgJ3BvZCcsXG4gICAgJ3BvZW0nLFxuICAgICdwb2V0JyxcbiAgICAncG9nbycsXG4gICAgJ3BvaW50ZWQnLFxuICAgICdwb2ludGVyJyxcbiAgICAncG9pbnRpbmcnLFxuICAgICdwb2ludGxlc3MnLFxuICAgICdwb2ludHknLFxuICAgICdwb2lzZScsXG4gICAgJ3BvaXNvbicsXG4gICAgJ3Bva2VyJyxcbiAgICAncG9raW5nJyxcbiAgICAncG9sYXInLFxuICAgICdwb2xpY2UnLFxuICAgICdwb2xpY3knLFxuICAgICdwb2xpbycsXG4gICAgJ3BvbGlzaCcsXG4gICAgJ3BvbGl0ZWx5JyxcbiAgICAncG9sa2EnLFxuICAgICdwb2xvJyxcbiAgICAncG9seWVzdGVyJyxcbiAgICAncG9seWdvbicsXG4gICAgJ3BvbHlncmFwaCcsXG4gICAgJ3BvbHltZXInLFxuICAgICdwb25jaG8nLFxuICAgICdwb25kJyxcbiAgICAncG9ueScsXG4gICAgJ3BvcGNvcm4nLFxuICAgICdwb3BlJyxcbiAgICAncG9wbGFyJyxcbiAgICAncG9wcGVyJyxcbiAgICAncG9wcHknLFxuICAgICdwb3BzaWNsZScsXG4gICAgJ3BvcHVsYWNlJyxcbiAgICAncG9wdWxhcicsXG4gICAgJ3BvcHVsYXRlJyxcbiAgICAncG9yY3VwaW5lJyxcbiAgICAncG9yaycsXG4gICAgJ3Bvcm91cycsXG4gICAgJ3BvcnJpZGdlJyxcbiAgICAncG9ydGFibGUnLFxuICAgICdwb3J0YWwnLFxuICAgICdwb3J0Zm9saW8nLFxuICAgICdwb3J0aG9sZScsXG4gICAgJ3BvcnRpb24nLFxuICAgICdwb3J0bHknLFxuICAgICdwb3J0c2lkZScsXG4gICAgJ3Bvc2VyJyxcbiAgICAncG9zaCcsXG4gICAgJ3Bvc2luZycsXG4gICAgJ3Bvc3NpYmxlJyxcbiAgICAncG9zc2libHknLFxuICAgICdwb3NzdW0nLFxuICAgICdwb3N0YWdlJyxcbiAgICAncG9zdGFsJyxcbiAgICAncG9zdGJveCcsXG4gICAgJ3Bvc3RjYXJkJyxcbiAgICAncG9zdGVkJyxcbiAgICAncG9zdGVyJyxcbiAgICAncG9zdGluZycsXG4gICAgJ3Bvc3RuYXNhbCcsXG4gICAgJ3Bvc3R1cmUnLFxuICAgICdwb3N0d2FyJyxcbiAgICAncG91Y2gnLFxuICAgICdwb3VuY2UnLFxuICAgICdwb3VuY2luZycsXG4gICAgJ3BvdW5kJyxcbiAgICAncG91cmluZycsXG4gICAgJ3BvdXQnLFxuICAgICdwb3dkZXJlZCcsXG4gICAgJ3Bvd2RlcmluZycsXG4gICAgJ3Bvd2RlcnknLFxuICAgICdwb3dlcicsXG4gICAgJ3Bvd3dvdycsXG4gICAgJ3BveCcsXG4gICAgJ3ByYWlzaW5nJyxcbiAgICAncHJhbmNlJyxcbiAgICAncHJhbmNpbmcnLFxuICAgICdwcmFua2VyJyxcbiAgICAncHJhbmtpc2gnLFxuICAgICdwcmFua3N0ZXInLFxuICAgICdwcmF5ZXInLFxuICAgICdwcmF5aW5nJyxcbiAgICAncHJlYWNoZXInLFxuICAgICdwcmVhY2hpbmcnLFxuICAgICdwcmVhY2h5JyxcbiAgICAncHJlYW1ibGUnLFxuICAgICdwcmVjaW5jdCcsXG4gICAgJ3ByZWNpc2UnLFxuICAgICdwcmVjaXNpb24nLFxuICAgICdwcmVjb29rJyxcbiAgICAncHJlY3V0JyxcbiAgICAncHJlZGF0b3InLFxuICAgICdwcmVkZWZpbmUnLFxuICAgICdwcmVkaWN0JyxcbiAgICAncHJlZmFjZScsXG4gICAgJ3ByZWZpeCcsXG4gICAgJ3ByZWZsaWdodCcsXG4gICAgJ3ByZWZvcm1lZCcsXG4gICAgJ3ByZWdhbWUnLFxuICAgICdwcmVnbmFuY3knLFxuICAgICdwcmVnbmFudCcsXG4gICAgJ3ByZWhlYXRlZCcsXG4gICAgJ3ByZWxhdW5jaCcsXG4gICAgJ3ByZWxhdycsXG4gICAgJ3ByZWx1ZGUnLFxuICAgICdwcmVtaWVyZScsXG4gICAgJ3ByZW1pc2VzJyxcbiAgICAncHJlbWl1bScsXG4gICAgJ3ByZW5hdGFsJyxcbiAgICAncHJlb2NjdXB5JyxcbiAgICAncHJlb3JkZXInLFxuICAgICdwcmVwYWlkJyxcbiAgICAncHJlcGF5JyxcbiAgICAncHJlcGxhbicsXG4gICAgJ3ByZXBweScsXG4gICAgJ3ByZXNjaG9vbCcsXG4gICAgJ3ByZXNjcmliZScsXG4gICAgJ3ByZXNlYXNvbicsXG4gICAgJ3ByZXNldCcsXG4gICAgJ3ByZXNob3cnLFxuICAgICdwcmVzaWRlbnQnLFxuICAgICdwcmVzb2FrJyxcbiAgICAncHJlc3MnLFxuICAgICdwcmVzdW1lJyxcbiAgICAncHJlc3VtaW5nJyxcbiAgICAncHJldGVlbicsXG4gICAgJ3ByZXRlbmRlZCcsXG4gICAgJ3ByZXRlbmRlcicsXG4gICAgJ3ByZXRlbnNlJyxcbiAgICAncHJldGV4dCcsXG4gICAgJ3ByZXR0eScsXG4gICAgJ3ByZXR6ZWwnLFxuICAgICdwcmV2YWlsJyxcbiAgICAncHJldmFsZW50JyxcbiAgICAncHJldmVudCcsXG4gICAgJ3ByZXZpZXcnLFxuICAgICdwcmV2aW91cycsXG4gICAgJ3ByZXdhcicsXG4gICAgJ3ByZXdhc2hlZCcsXG4gICAgJ3ByaWRlZnVsJyxcbiAgICAncHJpZWQnLFxuICAgICdwcmltYWwnLFxuICAgICdwcmltYXJpbHknLFxuICAgICdwcmltYXJ5JyxcbiAgICAncHJpbWF0ZScsXG4gICAgJ3ByaW1lcicsXG4gICAgJ3ByaW1wJyxcbiAgICAncHJpbmNlc3MnLFxuICAgICdwcmludCcsXG4gICAgJ3ByaW9yJyxcbiAgICAncHJpc20nLFxuICAgICdwcmlzb24nLFxuICAgICdwcmlzc3knLFxuICAgICdwcmlzdGluZScsXG4gICAgJ3ByaXZhY3knLFxuICAgICdwcml2YXRlJyxcbiAgICAncHJpdmF0aXplJyxcbiAgICAncHJpemUnLFxuICAgICdwcm9hY3RpdmUnLFxuICAgICdwcm9iYWJsZScsXG4gICAgJ3Byb2JhYmx5JyxcbiAgICAncHJvYmF0aW9uJyxcbiAgICAncHJvYmUnLFxuICAgICdwcm9iaW5nJyxcbiAgICAncHJvYmlvdGljJyxcbiAgICAncHJvYmxlbScsXG4gICAgJ3Byb2NlZHVyZScsXG4gICAgJ3Byb2Nlc3MnLFxuICAgICdwcm9jbGFpbScsXG4gICAgJ3Byb2NyZWF0ZScsXG4gICAgJ3Byb2N1cmVyJyxcbiAgICAncHJvZGlnYWwnLFxuICAgICdwcm9kaWd5JyxcbiAgICAncHJvZHVjZScsXG4gICAgJ3Byb2R1Y3QnLFxuICAgICdwcm9mYW5lJyxcbiAgICAncHJvZmFuaXR5JyxcbiAgICAncHJvZmVzc2VkJyxcbiAgICAncHJvZmVzc29yJyxcbiAgICAncHJvZmlsZScsXG4gICAgJ3Byb2ZvdW5kJyxcbiAgICAncHJvZnVzZWx5JyxcbiAgICAncHJvZ2VueScsXG4gICAgJ3Byb2dub3NpcycsXG4gICAgJ3Byb2dyYW0nLFxuICAgICdwcm9ncmVzcycsXG4gICAgJ3Byb2plY3RvcicsXG4gICAgJ3Byb2xvZ3VlJyxcbiAgICAncHJvbG9uZ2VkJyxcbiAgICAncHJvbWVuYWRlJyxcbiAgICAncHJvbWluZW50JyxcbiAgICAncHJvbW90ZXInLFxuICAgICdwcm9tb3Rpb24nLFxuICAgICdwcm9tcHRlcicsXG4gICAgJ3Byb21wdGx5JyxcbiAgICAncHJvbmUnLFxuICAgICdwcm9uZycsXG4gICAgJ3Byb25vdW5jZScsXG4gICAgJ3Byb250bycsXG4gICAgJ3Byb29maW5nJyxcbiAgICAncHJvb2ZyZWFkJyxcbiAgICAncHJvb2ZzJyxcbiAgICAncHJvcGVsbGVyJyxcbiAgICAncHJvcGVybHknLFxuICAgICdwcm9wZXJ0eScsXG4gICAgJ3Byb3BvbmVudCcsXG4gICAgJ3Byb3Bvc2FsJyxcbiAgICAncHJvcG9zZScsXG4gICAgJ3Byb3BzJyxcbiAgICAncHJvcmF0ZScsXG4gICAgJ3Byb3RlY3RvcicsXG4gICAgJ3Byb3RlZ2VlJyxcbiAgICAncHJvdG9uJyxcbiAgICAncHJvdG90eXBlJyxcbiAgICAncHJvdG96b2FuJyxcbiAgICAncHJvdHJhY3QnLFxuICAgICdwcm90cnVkZScsXG4gICAgJ3Byb3VkJyxcbiAgICAncHJvdmFibGUnLFxuICAgICdwcm92ZWQnLFxuICAgICdwcm92ZW4nLFxuICAgICdwcm92aWRlZCcsXG4gICAgJ3Byb3ZpZGVyJyxcbiAgICAncHJvdmlkaW5nJyxcbiAgICAncHJvdmluY2UnLFxuICAgICdwcm92aW5nJyxcbiAgICAncHJvdm9rZScsXG4gICAgJ3Byb3Zva2luZycsXG4gICAgJ3Byb3ZvbG9uZScsXG4gICAgJ3Byb3dlc3MnLFxuICAgICdwcm93bGVyJyxcbiAgICAncHJvd2xpbmcnLFxuICAgICdwcm94aW1pdHknLFxuICAgICdwcm94eScsXG4gICAgJ3Byb3phYycsXG4gICAgJ3BydWRlJyxcbiAgICAncHJ1ZGlzaGx5JyxcbiAgICAncHJ1bmUnLFxuICAgICdwcnVuaW5nJyxcbiAgICAncHJ5JyxcbiAgICAncHN5Y2hpYycsXG4gICAgJ3B1YmxpYycsXG4gICAgJ3B1Ymxpc2hlcicsXG4gICAgJ3B1Y2tlcicsXG4gICAgJ3B1ZWJsbycsXG4gICAgJ3B1ZycsXG4gICAgJ3B1bGwnLFxuICAgICdwdWxtb25hcnknLFxuICAgICdwdWxwJyxcbiAgICAncHVsc2F0ZScsXG4gICAgJ3B1bHNlJyxcbiAgICAncHVsdmVyaXplJyxcbiAgICAncHVtYScsXG4gICAgJ3B1bWljZScsXG4gICAgJ3B1bW1lbCcsXG4gICAgJ3B1bmNoJyxcbiAgICAncHVuY3R1YWwnLFxuICAgICdwdW5jdHVhdGUnLFxuICAgICdwdW5jdHVyZWQnLFxuICAgICdwdW5nZW50JyxcbiAgICAncHVuaXNoZXInLFxuICAgICdwdW5rJyxcbiAgICAncHVwaWwnLFxuICAgICdwdXBwZXQnLFxuICAgICdwdXBweScsXG4gICAgJ3B1cmNoYXNlJyxcbiAgICAncHVyZWJsb29kJyxcbiAgICAncHVyZWJyZWQnLFxuICAgICdwdXJlbHknLFxuICAgICdwdXJlbmVzcycsXG4gICAgJ3B1cmdhdG9yeScsXG4gICAgJ3B1cmdlJyxcbiAgICAncHVyZ2luZycsXG4gICAgJ3B1cmlmaWVyJyxcbiAgICAncHVyaWZ5JyxcbiAgICAncHVyaXN0JyxcbiAgICAncHVyaXRhbicsXG4gICAgJ3B1cml0eScsXG4gICAgJ3B1cnBsZScsXG4gICAgJ3B1cnBsaXNoJyxcbiAgICAncHVycG9zZWx5JyxcbiAgICAncHVycicsXG4gICAgJ3B1cnNlJyxcbiAgICAncHVyc3VhYmxlJyxcbiAgICAncHVyc3VhbnQnLFxuICAgICdwdXJzdWl0JyxcbiAgICAncHVydmV5b3InLFxuICAgICdwdXNoY2FydCcsXG4gICAgJ3B1c2hjaGFpcicsXG4gICAgJ3B1c2hlcicsXG4gICAgJ3B1c2hpbmVzcycsXG4gICAgJ3B1c2hpbmcnLFxuICAgICdwdXNob3ZlcicsXG4gICAgJ3B1c2hwaW4nLFxuICAgICdwdXNodXAnLFxuICAgICdwdXNoeScsXG4gICAgJ3B1dGRvd24nLFxuICAgICdwdXR0JyxcbiAgICAncHV6emxlJyxcbiAgICAncHV6emxpbmcnLFxuICAgICdweXJhbWlkJyxcbiAgICAncHlyb21hbmlhJyxcbiAgICAncHl0aG9uJyxcbiAgICAncXVhY2snLFxuICAgICdxdWFkcmFudCcsXG4gICAgJ3F1YWlsJyxcbiAgICAncXVhaW50bHknLFxuICAgICdxdWFrZScsXG4gICAgJ3F1YWtpbmcnLFxuICAgICdxdWFsaWZpZWQnLFxuICAgICdxdWFsaWZpZXInLFxuICAgICdxdWFsaWZ5JyxcbiAgICAncXVhbGl0eScsXG4gICAgJ3F1YWxtJyxcbiAgICAncXVhbnR1bScsXG4gICAgJ3F1YXJyZWwnLFxuICAgICdxdWFycnknLFxuICAgICdxdWFydGVyZWQnLFxuICAgICdxdWFydGVybHknLFxuICAgICdxdWFydGVycycsXG4gICAgJ3F1YXJ0ZXQnLFxuICAgICdxdWVuY2gnLFxuICAgICdxdWVyeScsXG4gICAgJ3F1aWNrZW4nLFxuICAgICdxdWlja2x5JyxcbiAgICAncXVpY2tuZXNzJyxcbiAgICAncXVpY2tzYW5kJyxcbiAgICAncXVpY2tzdGVwJyxcbiAgICAncXVpZXQnLFxuICAgICdxdWlsbCcsXG4gICAgJ3F1aWx0JyxcbiAgICAncXVpbnRldCcsXG4gICAgJ3F1aW50dXBsZScsXG4gICAgJ3F1aXJrJyxcbiAgICAncXVpdCcsXG4gICAgJ3F1aXZlcicsXG4gICAgJ3F1aXp6aWNhbCcsXG4gICAgJ3F1b3RhYmxlJyxcbiAgICAncXVvdGF0aW9uJyxcbiAgICAncXVvdGUnLFxuICAgICdyYWJpZCcsXG4gICAgJ3JhY2UnLFxuICAgICdyYWNpbmcnLFxuICAgICdyYWNpc20nLFxuICAgICdyYWNrJyxcbiAgICAncmFjb29uJyxcbiAgICAncmFkYXInLFxuICAgICdyYWRpYWwnLFxuICAgICdyYWRpYW5jZScsXG4gICAgJ3JhZGlhbnRseScsXG4gICAgJ3JhZGlhdGVkJyxcbiAgICAncmFkaWF0aW9uJyxcbiAgICAncmFkaWF0b3InLFxuICAgICdyYWRpbycsXG4gICAgJ3JhZGlzaCcsXG4gICAgJ3JhZmZsZScsXG4gICAgJ3JhZnQnLFxuICAgICdyYWdlJyxcbiAgICAncmFnZ2VkJyxcbiAgICAncmFnaW5nJyxcbiAgICAncmFnd2VlZCcsXG4gICAgJ3JhaWRlcicsXG4gICAgJ3JhaWxjYXInLFxuICAgICdyYWlsaW5nJyxcbiAgICAncmFpbHJvYWQnLFxuICAgICdyYWlsd2F5JyxcbiAgICAncmFpc2luJyxcbiAgICAncmFrZScsXG4gICAgJ3Jha2luZycsXG4gICAgJ3JhbGx5JyxcbiAgICAncmFtYmxlJyxcbiAgICAncmFtYmxpbmcnLFxuICAgICdyYW1wJyxcbiAgICAncmFtcm9kJyxcbiAgICAncmFuY2gnLFxuICAgICdyYW5jaWRpdHknLFxuICAgICdyYW5kb20nLFxuICAgICdyYW5nZWQnLFxuICAgICdyYW5nZXInLFxuICAgICdyYW5naW5nJyxcbiAgICAncmFua2VkJyxcbiAgICAncmFua2luZycsXG4gICAgJ3JhbnNhY2snLFxuICAgICdyYW50aW5nJyxcbiAgICAncmFudHMnLFxuICAgICdyYXJlJyxcbiAgICAncmFyaXR5JyxcbiAgICAncmFzY2FsJyxcbiAgICAncmFzaCcsXG4gICAgJ3Jhc3BpbmcnLFxuICAgICdyYXZhZ2UnLFxuICAgICdyYXZlbicsXG4gICAgJ3JhdmluZScsXG4gICAgJ3JhdmluZycsXG4gICAgJ3JhdmlvbGknLFxuICAgICdyYXZpc2hpbmcnLFxuICAgICdyZWFic29yYicsXG4gICAgJ3JlYWNoJyxcbiAgICAncmVhY3F1aXJlJyxcbiAgICAncmVhY3Rpb24nLFxuICAgICdyZWFjdGl2ZScsXG4gICAgJ3JlYWN0b3InLFxuICAgICdyZWFmZmlybScsXG4gICAgJ3JlYW0nLFxuICAgICdyZWFuYWx5emUnLFxuICAgICdyZWFwcGVhcicsXG4gICAgJ3JlYXBwbHknLFxuICAgICdyZWFwcG9pbnQnLFxuICAgICdyZWFwcHJvdmUnLFxuICAgICdyZWFycmFuZ2UnLFxuICAgICdyZWFydmlldycsXG4gICAgJ3JlYXNvbicsXG4gICAgJ3JlYXNzaWduJyxcbiAgICAncmVhc3N1cmUnLFxuICAgICdyZWF0dGFjaCcsXG4gICAgJ3JlYXdha2UnLFxuICAgICdyZWJhbGFuY2UnLFxuICAgICdyZWJhdGUnLFxuICAgICdyZWJlbCcsXG4gICAgJ3JlYmlydGgnLFxuICAgICdyZWJvb3QnLFxuICAgICdyZWJvcm4nLFxuICAgICdyZWJvdW5kJyxcbiAgICAncmVidWZmJyxcbiAgICAncmVidWlsZCcsXG4gICAgJ3JlYnVpbHQnLFxuICAgICdyZWJ1cmlhbCcsXG4gICAgJ3JlYnV0dGFsJyxcbiAgICAncmVjYWxsJyxcbiAgICAncmVjYW50JyxcbiAgICAncmVjYXB0dXJlJyxcbiAgICAncmVjYXN0JyxcbiAgICAncmVjZWRlJyxcbiAgICAncmVjZW50JyxcbiAgICAncmVjZXNzJyxcbiAgICAncmVjaGFyZ2VyJyxcbiAgICAncmVjaXBpZW50JyxcbiAgICAncmVjaXRhbCcsXG4gICAgJ3JlY2l0ZScsXG4gICAgJ3JlY2tsZXNzJyxcbiAgICAncmVjbGFpbScsXG4gICAgJ3JlY2xpbmVyJyxcbiAgICAncmVjbGluaW5nJyxcbiAgICAncmVjbHVzZScsXG4gICAgJ3JlY2x1c2l2ZScsXG4gICAgJ3JlY29nbml6ZScsXG4gICAgJ3JlY29pbCcsXG4gICAgJ3JlY29sbGVjdCcsXG4gICAgJ3JlY29sb3InLFxuICAgICdyZWNvbmNpbGUnLFxuICAgICdyZWNvbmZpcm0nLFxuICAgICdyZWNvbnZlbmUnLFxuICAgICdyZWNvcHknLFxuICAgICdyZWNvcmQnLFxuICAgICdyZWNvdW50JyxcbiAgICAncmVjb3VwJyxcbiAgICAncmVjb3ZlcnknLFxuICAgICdyZWNyZWF0ZScsXG4gICAgJ3JlY3RhbCcsXG4gICAgJ3JlY3RhbmdsZScsXG4gICAgJ3JlY3RpZmllZCcsXG4gICAgJ3JlY3RpZnknLFxuICAgICdyZWN5Y2xlZCcsXG4gICAgJ3JlY3ljbGVyJyxcbiAgICAncmVjeWNsaW5nJyxcbiAgICAncmVlbWVyZ2UnLFxuICAgICdyZWVuYWN0JyxcbiAgICAncmVlbnRlcicsXG4gICAgJ3JlZW50cnknLFxuICAgICdyZWV4YW1pbmUnLFxuICAgICdyZWZlcmFibGUnLFxuICAgICdyZWZlcmVlJyxcbiAgICAncmVmZXJlbmNlJyxcbiAgICAncmVmaWxsJyxcbiAgICAncmVmaW5hbmNlJyxcbiAgICAncmVmaW5lZCcsXG4gICAgJ3JlZmluZXJ5JyxcbiAgICAncmVmaW5pbmcnLFxuICAgICdyZWZpbmlzaCcsXG4gICAgJ3JlZmxlY3RlZCcsXG4gICAgJ3JlZmxlY3RvcicsXG4gICAgJ3JlZmxleCcsXG4gICAgJ3JlZmx1eCcsXG4gICAgJ3JlZm9jdXMnLFxuICAgICdyZWZvbGQnLFxuICAgICdyZWZvcmVzdCcsXG4gICAgJ3JlZm9ybWF0JyxcbiAgICAncmVmb3JtZWQnLFxuICAgICdyZWZvcm1lcicsXG4gICAgJ3JlZm9ybWlzdCcsXG4gICAgJ3JlZnJhY3QnLFxuICAgICdyZWZyYWluJyxcbiAgICAncmVmcmVlemUnLFxuICAgICdyZWZyZXNoJyxcbiAgICAncmVmcmllZCcsXG4gICAgJ3JlZnVlbGluZycsXG4gICAgJ3JlZnVuZCcsXG4gICAgJ3JlZnVyYmlzaCcsXG4gICAgJ3JlZnVybmlzaCcsXG4gICAgJ3JlZnVzYWwnLFxuICAgICdyZWZ1c2UnLFxuICAgICdyZWZ1c2luZycsXG4gICAgJ3JlZnV0YWJsZScsXG4gICAgJ3JlZnV0ZScsXG4gICAgJ3JlZ2FpbicsXG4gICAgJ3JlZ2FsaWEnLFxuICAgICdyZWdhbGx5JyxcbiAgICAncmVnZ2FlJyxcbiAgICAncmVnaW1lJyxcbiAgICAncmVnaW9uJyxcbiAgICAncmVnaXN0ZXInLFxuICAgICdyZWdpc3RyYXInLFxuICAgICdyZWdpc3RyeScsXG4gICAgJ3JlZ3Jlc3MnLFxuICAgICdyZWdyZXRmdWwnLFxuICAgICdyZWdyb3VwJyxcbiAgICAncmVndWxhcicsXG4gICAgJ3JlZ3VsYXRlJyxcbiAgICAncmVndWxhdG9yJyxcbiAgICAncmVoYWInLFxuICAgICdyZWhlYXQnLFxuICAgICdyZWhpcmUnLFxuICAgICdyZWh5ZHJhdGUnLFxuICAgICdyZWltYnVyc2UnLFxuICAgICdyZWlzc3VlJyxcbiAgICAncmVpdGVyYXRlJyxcbiAgICAncmVqb2ljZScsXG4gICAgJ3Jlam9pY2luZycsXG4gICAgJ3Jlam9pbicsXG4gICAgJ3Jla2luZGxlJyxcbiAgICAncmVsYXBzZScsXG4gICAgJ3JlbGFwc2luZycsXG4gICAgJ3JlbGF0YWJsZScsXG4gICAgJ3JlbGF0ZWQnLFxuICAgICdyZWxhdGlvbicsXG4gICAgJ3JlbGF0aXZlJyxcbiAgICAncmVsYXgnLFxuICAgICdyZWxheScsXG4gICAgJ3JlbGVhcm4nLFxuICAgICdyZWxlYXNlJyxcbiAgICAncmVsZW50aW5nJyxcbiAgICAncmVsaWFibGUnLFxuICAgICdyZWxpYWJseScsXG4gICAgJ3JlbGlhbmNlJyxcbiAgICAncmVsaWFudCcsXG4gICAgJ3JlbGljJyxcbiAgICAncmVsaWV2ZScsXG4gICAgJ3JlbGlldmluZycsXG4gICAgJ3JlbGlnaHQnLFxuICAgICdyZWxpc2gnLFxuICAgICdyZWxpdmUnLFxuICAgICdyZWxvYWQnLFxuICAgICdyZWxvY2F0ZScsXG4gICAgJ3JlbG9jaycsXG4gICAgJ3JlbHVjdGFudCcsXG4gICAgJ3JlbHknLFxuICAgICdyZW1ha2UnLFxuICAgICdyZW1hcmsnLFxuICAgICdyZW1hcnJ5JyxcbiAgICAncmVtYXRjaCcsXG4gICAgJ3JlbWVkaWFsJyxcbiAgICAncmVtZWR5JyxcbiAgICAncmVtZW1iZXInLFxuICAgICdyZW1pbmRlcicsXG4gICAgJ3JlbWluZGZ1bCcsXG4gICAgJ3JlbWlzc2lvbicsXG4gICAgJ3JlbWl4JyxcbiAgICAncmVtbmFudCcsXG4gICAgJ3JlbW9kZWxlcicsXG4gICAgJ3JlbW9sZCcsXG4gICAgJ3JlbW9yc2UnLFxuICAgICdyZW1vdGUnLFxuICAgICdyZW1vdmFibGUnLFxuICAgICdyZW1vdmFsJyxcbiAgICAncmVtb3ZlZCcsXG4gICAgJ3JlbW92ZXInLFxuICAgICdyZW1vdmluZycsXG4gICAgJ3JlbmFtZScsXG4gICAgJ3JlbmRlcmVyJyxcbiAgICAncmVuZGVyaW5nJyxcbiAgICAncmVuZGl0aW9uJyxcbiAgICAncmVuZWdhZGUnLFxuICAgICdyZW5ld2FibGUnLFxuICAgICdyZW5ld2FibHknLFxuICAgICdyZW5ld2FsJyxcbiAgICAncmVuZXdlZCcsXG4gICAgJ3Jlbm91bmNlJyxcbiAgICAncmVub3ZhdGUnLFxuICAgICdyZW5vdmF0b3InLFxuICAgICdyZW50YWJsZScsXG4gICAgJ3JlbnRhbCcsXG4gICAgJ3JlbnRlZCcsXG4gICAgJ3JlbnRlcicsXG4gICAgJ3Jlb2NjdXB5JyxcbiAgICAncmVvY2N1cicsXG4gICAgJ3Jlb3BlbicsXG4gICAgJ3Jlb3JkZXInLFxuICAgICdyZXBhY2thZ2UnLFxuICAgICdyZXBhY2tpbmcnLFxuICAgICdyZXBhaW50JyxcbiAgICAncmVwYWlyJyxcbiAgICAncmVwYXZlJyxcbiAgICAncmVwYXlpbmcnLFxuICAgICdyZXBheW1lbnQnLFxuICAgICdyZXBlYWwnLFxuICAgICdyZXBlYXRlZCcsXG4gICAgJ3JlcGVhdGVyJyxcbiAgICAncmVwZW50JyxcbiAgICAncmVwaHJhc2UnLFxuICAgICdyZXBsYWNlJyxcbiAgICAncmVwbGF5JyxcbiAgICAncmVwbGljYScsXG4gICAgJ3JlcGx5JyxcbiAgICAncmVwb3J0ZXInLFxuICAgICdyZXBvc2UnLFxuICAgICdyZXBvc3Nlc3MnLFxuICAgICdyZXBvc3QnLFxuICAgICdyZXByZXNzZWQnLFxuICAgICdyZXByaW1hbmQnLFxuICAgICdyZXByaW50JyxcbiAgICAncmVwcmlzZScsXG4gICAgJ3JlcHJvYWNoJyxcbiAgICAncmVwcm9jZXNzJyxcbiAgICAncmVwcm9kdWNlJyxcbiAgICAncmVwcm9ncmFtJyxcbiAgICAncmVwcycsXG4gICAgJ3JlcHRpbGUnLFxuICAgICdyZXB0aWxpYW4nLFxuICAgICdyZXB1Z25hbnQnLFxuICAgICdyZXB1bHNpb24nLFxuICAgICdyZXB1bHNpdmUnLFxuICAgICdyZXB1cnBvc2UnLFxuICAgICdyZXB1dGFibGUnLFxuICAgICdyZXB1dGFibHknLFxuICAgICdyZXF1ZXN0JyxcbiAgICAncmVxdWlyZScsXG4gICAgJ3JlcXVpc2l0ZScsXG4gICAgJ3Jlcm91dGUnLFxuICAgICdyZXJ1bicsXG4gICAgJ3Jlc2FsZScsXG4gICAgJ3Jlc2FtcGxlJyxcbiAgICAncmVzY3VlcicsXG4gICAgJ3Jlc2VhbCcsXG4gICAgJ3Jlc2VhcmNoJyxcbiAgICAncmVzZWxlY3QnLFxuICAgICdyZXNlbGxlcicsXG4gICAgJ3Jlc2VtYmxlJyxcbiAgICAncmVzZW5kJyxcbiAgICAncmVzZW50JyxcbiAgICAncmVzZXQnLFxuICAgICdyZXNoYXBlJyxcbiAgICAncmVzaG9vdCcsXG4gICAgJ3Jlc2h1ZmZsZScsXG4gICAgJ3Jlc2lkZW5jZScsXG4gICAgJ3Jlc2lkZW5jeScsXG4gICAgJ3Jlc2lkZW50JyxcbiAgICAncmVzaWR1YWwnLFxuICAgICdyZXNpZHVlJyxcbiAgICAncmVzaWduZWQnLFxuICAgICdyZXNpbGllbnQnLFxuICAgICdyZXNpc3RhbnQnLFxuICAgICdyZXNpc3RpbmcnLFxuICAgICdyZXNpemUnLFxuICAgICdyZXNvbHV0ZScsXG4gICAgJ3Jlc29sdmVkJyxcbiAgICAncmVzb25hbnQnLFxuICAgICdyZXNvbmF0ZScsXG4gICAgJ3Jlc29ydCcsXG4gICAgJ3Jlc291cmNlJyxcbiAgICAncmVzcGVjdCcsXG4gICAgJ3Jlc3VibWl0JyxcbiAgICAncmVzdWx0JyxcbiAgICAncmVzdW1lJyxcbiAgICAncmVzdXBwbHknLFxuICAgICdyZXN1cmZhY2UnLFxuICAgICdyZXN1cnJlY3QnLFxuICAgICdyZXRhaWwnLFxuICAgICdyZXRhaW5lcicsXG4gICAgJ3JldGFpbmluZycsXG4gICAgJ3JldGFrZScsXG4gICAgJ3JldGFsaWF0ZScsXG4gICAgJ3JldGVudGlvbicsXG4gICAgJ3JldGhpbmsnLFxuICAgICdyZXRpbmFsJyxcbiAgICAncmV0aXJlZCcsXG4gICAgJ3JldGlyZWUnLFxuICAgICdyZXRpcmluZycsXG4gICAgJ3JldG9sZCcsXG4gICAgJ3JldG9vbCcsXG4gICAgJ3JldG9ydGVkJyxcbiAgICAncmV0b3VjaCcsXG4gICAgJ3JldHJhY2UnLFxuICAgICdyZXRyYWN0JyxcbiAgICAncmV0cmFpbicsXG4gICAgJ3JldHJlYWQnLFxuICAgICdyZXRyZWF0JyxcbiAgICAncmV0cmlhbCcsXG4gICAgJ3JldHJpZXZhbCcsXG4gICAgJ3JldHJpZXZlcicsXG4gICAgJ3JldHJ5JyxcbiAgICAncmV0dXJuJyxcbiAgICAncmV0eWluZycsXG4gICAgJ3JldHlwZScsXG4gICAgJ3JldW5pb24nLFxuICAgICdyZXVuaXRlJyxcbiAgICAncmV1c2FibGUnLFxuICAgICdyZXVzZScsXG4gICAgJ3JldmVhbCcsXG4gICAgJ3JldmVsZXInLFxuICAgICdyZXZlbmdlJyxcbiAgICAncmV2ZW51ZScsXG4gICAgJ3JldmVyYicsXG4gICAgJ3JldmVyZWQnLFxuICAgICdyZXZlcmVuY2UnLFxuICAgICdyZXZlcmVuZCcsXG4gICAgJ3JldmVyc2FsJyxcbiAgICAncmV2ZXJzZScsXG4gICAgJ3JldmVyc2luZycsXG4gICAgJ3JldmVyc2lvbicsXG4gICAgJ3JldmVydCcsXG4gICAgJ3JldmlzYWJsZScsXG4gICAgJ3JldmlzZScsXG4gICAgJ3JldmlzaW9uJyxcbiAgICAncmV2aXNpdCcsXG4gICAgJ3Jldml2YWJsZScsXG4gICAgJ3Jldml2YWwnLFxuICAgICdyZXZpdmVyJyxcbiAgICAncmV2aXZpbmcnLFxuICAgICdyZXZvY2FibGUnLFxuICAgICdyZXZva2UnLFxuICAgICdyZXZvbHQnLFxuICAgICdyZXZvbHZlcicsXG4gICAgJ3Jldm9sdmluZycsXG4gICAgJ3Jld2FyZCcsXG4gICAgJ3Jld2FzaCcsXG4gICAgJ3Jld2luZCcsXG4gICAgJ3Jld2lyZScsXG4gICAgJ3Jld29yZCcsXG4gICAgJ3Jld29yaycsXG4gICAgJ3Jld3JhcCcsXG4gICAgJ3Jld3JpdGUnLFxuICAgICdyaHltZScsXG4gICAgJ3JpYmJvbicsXG4gICAgJ3JpYmNhZ2UnLFxuICAgICdyaWNlJyxcbiAgICAncmljaGVzJyxcbiAgICAncmljaGx5JyxcbiAgICAncmljaG5lc3MnLFxuICAgICdyaWNrZXR5JyxcbiAgICAncmljb3R0YScsXG4gICAgJ3JpZGRhbmNlJyxcbiAgICAncmlkZGVuJyxcbiAgICAncmlkZScsXG4gICAgJ3JpZGluZycsXG4gICAgJ3JpZmxpbmcnLFxuICAgICdyaWZ0JyxcbiAgICAncmlnZ2luZycsXG4gICAgJ3JpZ2lkJyxcbiAgICAncmlnb3InLFxuICAgICdyaW1sZXNzJyxcbiAgICAncmltbWVkJyxcbiAgICAncmluZCcsXG4gICAgJ3JpbmsnLFxuICAgICdyaW5zZScsXG4gICAgJ3JpbnNpbmcnLFxuICAgICdyaW90JyxcbiAgICAncmlwY29yZCcsXG4gICAgJ3JpcGVuZXNzJyxcbiAgICAncmlwZW5pbmcnLFxuICAgICdyaXBwaW5nJyxcbiAgICAncmlwcGxlJyxcbiAgICAncmlwcGxpbmcnLFxuICAgICdyaXB0aWRlJyxcbiAgICAncmlzZScsXG4gICAgJ3Jpc2luZycsXG4gICAgJ3Jpc2snLFxuICAgICdyaXNvdHRvJyxcbiAgICAncml0YWxpbicsXG4gICAgJ3JpdHp5JyxcbiAgICAncml2YWwnLFxuICAgICdyaXZlcmJhbmsnLFxuICAgICdyaXZlcmJlZCcsXG4gICAgJ3JpdmVyYm9hdCcsXG4gICAgJ3JpdmVyc2lkZScsXG4gICAgJ3JpdmV0ZXInLFxuICAgICdyaXZldGluZycsXG4gICAgJ3JvYW1lcicsXG4gICAgJ3JvYW1pbmcnLFxuICAgICdyb2FzdCcsXG4gICAgJ3JvYmJpbmcnLFxuICAgICdyb2JlJyxcbiAgICAncm9iaW4nLFxuICAgICdyb2JvdGljcycsXG4gICAgJ3JvYnVzdCcsXG4gICAgJ3JvY2tiYW5kJyxcbiAgICAncm9ja2VyJyxcbiAgICAncm9ja2V0JyxcbiAgICAncm9ja2Zpc2gnLFxuICAgICdyb2NraW5lc3MnLFxuICAgICdyb2NraW5nJyxcbiAgICAncm9ja2xpa2UnLFxuICAgICdyb2Nrc2xpZGUnLFxuICAgICdyb2Nrc3RhcicsXG4gICAgJ3JvY2t5JyxcbiAgICAncm9ndWUnLFxuICAgICdyb21hbicsXG4gICAgJ3JvbXAnLFxuICAgICdyb3BlJyxcbiAgICAncm9waW5nJyxcbiAgICAncm9zdGVyJyxcbiAgICAncm9zeScsXG4gICAgJ3JvdHRlbicsXG4gICAgJ3JvdHRpbmcnLFxuICAgICdyb3R1bmRhJyxcbiAgICAncm91bGV0dGUnLFxuICAgICdyb3VuZGluZycsXG4gICAgJ3JvdW5kaXNoJyxcbiAgICAncm91bmRuZXNzJyxcbiAgICAncm91bmR1cCcsXG4gICAgJ3JvdW5kd29ybScsXG4gICAgJ3JvdXRpbmUnLFxuICAgICdyb3V0aW5nJyxcbiAgICAncm92ZXInLFxuICAgICdyb3ZpbmcnLFxuICAgICdyb3lhbCcsXG4gICAgJ3J1YmJlZCcsXG4gICAgJ3J1YmJlcicsXG4gICAgJ3J1YmJpbmcnLFxuICAgICdydWJibGUnLFxuICAgICdydWJkb3duJyxcbiAgICAncnVieScsXG4gICAgJ3J1Y2t1cycsXG4gICAgJ3J1ZGRlcicsXG4gICAgJ3J1ZycsXG4gICAgJ3J1aW5lZCcsXG4gICAgJ3J1bGUnLFxuICAgICdydW1ibGUnLFxuICAgICdydW1ibGluZycsXG4gICAgJ3J1bW1hZ2UnLFxuICAgICdydW1vcicsXG4gICAgJ3J1bmFyb3VuZCcsXG4gICAgJ3J1bmRvd24nLFxuICAgICdydW5uZXInLFxuICAgICdydW5uaW5nJyxcbiAgICAncnVubnknLFxuICAgICdydW50JyxcbiAgICAncnVud2F5JyxcbiAgICAncnVwdHVyZScsXG4gICAgJ3J1cmFsJyxcbiAgICAncnVzZScsXG4gICAgJ3J1c2gnLFxuICAgICdydXN0JyxcbiAgICAncnV0JyxcbiAgICAnc2FiYmF0aCcsXG4gICAgJ3NhYm90YWdlJyxcbiAgICAnc2FjcmFtZW50JyxcbiAgICAnc2FjcmVkJyxcbiAgICAnc2FjcmlmaWNlJyxcbiAgICAnc2FkZGVuJyxcbiAgICAnc2FkZGxlYmFnJyxcbiAgICAnc2FkZGxlZCcsXG4gICAgJ3NhZGRsaW5nJyxcbiAgICAnc2FkbHknLFxuICAgICdzYWRuZXNzJyxcbiAgICAnc2FmYXJpJyxcbiAgICAnc2FmZWd1YXJkJyxcbiAgICAnc2FmZWhvdXNlJyxcbiAgICAnc2FmZWx5JyxcbiAgICAnc2FmZW5lc3MnLFxuICAgICdzYWZmcm9uJyxcbiAgICAnc2FnYScsXG4gICAgJ3NhZ2UnLFxuICAgICdzYWdnaW5nJyxcbiAgICAnc2FnZ3knLFxuICAgICdzYWlkJyxcbiAgICAnc2FpbnQnLFxuICAgICdzYWtlJyxcbiAgICAnc2FsYWQnLFxuICAgICdzYWxhbWknLFxuICAgICdzYWxhcmllZCcsXG4gICAgJ3NhbGFyeScsXG4gICAgJ3NhbGluZScsXG4gICAgJ3NhbG9uJyxcbiAgICAnc2Fsb29uJyxcbiAgICAnc2Fsc2EnLFxuICAgICdzYWx0JyxcbiAgICAnc2FsdXRhcnknLFxuICAgICdzYWx1dGUnLFxuICAgICdzYWx2YWdlJyxcbiAgICAnc2FsdmFnaW5nJyxcbiAgICAnc2FsdmF0aW9uJyxcbiAgICAnc2FtZScsXG4gICAgJ3NhbXBsZScsXG4gICAgJ3NhbXBsaW5nJyxcbiAgICAnc2FuY3Rpb24nLFxuICAgICdzYW5jdGl0eScsXG4gICAgJ3NhbmN0dWFyeScsXG4gICAgJ3NhbmRhbCcsXG4gICAgJ3NhbmRiYWcnLFxuICAgICdzYW5kYmFuaycsXG4gICAgJ3NhbmRiYXInLFxuICAgICdzYW5kYmxhc3QnLFxuICAgICdzYW5kYm94JyxcbiAgICAnc2FuZGVkJyxcbiAgICAnc2FuZGZpc2gnLFxuICAgICdzYW5kaW5nJyxcbiAgICAnc2FuZGxvdCcsXG4gICAgJ3NhbmRwYXBlcicsXG4gICAgJ3NhbmRwaXQnLFxuICAgICdzYW5kc3RvbmUnLFxuICAgICdzYW5kc3Rvcm0nLFxuICAgICdzYW5kd29ybScsXG4gICAgJ3NhbmR5JyxcbiAgICAnc2FuaXRhcnknLFxuICAgICdzYW5pdGl6ZXInLFxuICAgICdzYW5rJyxcbiAgICAnc2FudGEnLFxuICAgICdzYXBsaW5nJyxcbiAgICAnc2FwcGluZXNzJyxcbiAgICAnc2FwcHknLFxuICAgICdzYXJjYXNtJyxcbiAgICAnc2FyY2FzdGljJyxcbiAgICAnc2FyZGluZScsXG4gICAgJ3Nhc2gnLFxuICAgICdzYXNxdWF0Y2gnLFxuICAgICdzYXNzeScsXG4gICAgJ3NhdGNoZWwnLFxuICAgICdzYXRpYWJsZScsXG4gICAgJ3NhdGluJyxcbiAgICAnc2F0aXJpY2FsJyxcbiAgICAnc2F0aXNmaWVkJyxcbiAgICAnc2F0aXNmeScsXG4gICAgJ3NhdHVyYXRlJyxcbiAgICAnc2F0dXJkYXknLFxuICAgICdzYXVjaW5lc3MnLFxuICAgICdzYXVjeScsXG4gICAgJ3NhdW5hJyxcbiAgICAnc2F2YWdlJyxcbiAgICAnc2F2YW5uYScsXG4gICAgJ3NhdmVkJyxcbiAgICAnc2F2aW5ncycsXG4gICAgJ3NhdmlvcicsXG4gICAgJ3Nhdm9yJyxcbiAgICAnc2F4b3Bob25lJyxcbiAgICAnc2F5JyxcbiAgICAnc2NhYmJlZCcsXG4gICAgJ3NjYWJieScsXG4gICAgJ3NjYWxkZWQnLFxuICAgICdzY2FsZGluZycsXG4gICAgJ3NjYWxlJyxcbiAgICAnc2NhbGluZycsXG4gICAgJ3NjYWxsaW9uJyxcbiAgICAnc2NhbGxvcCcsXG4gICAgJ3NjYWxwaW5nJyxcbiAgICAnc2NhbScsXG4gICAgJ3NjYW5kYWwnLFxuICAgICdzY2FubmVyJyxcbiAgICAnc2Nhbm5pbmcnLFxuICAgICdzY2FudCcsXG4gICAgJ3NjYXBlZ29hdCcsXG4gICAgJ3NjYXJjZScsXG4gICAgJ3NjYXJjaXR5JyxcbiAgICAnc2NhcmVjcm93JyxcbiAgICAnc2NhcmVkJyxcbiAgICAnc2NhcmYnLFxuICAgICdzY2FyaWx5JyxcbiAgICAnc2NhcmluZXNzJyxcbiAgICAnc2NhcnJpbmcnLFxuICAgICdzY2FyeScsXG4gICAgJ3NjYXZlbmdlcicsXG4gICAgJ3NjZW5pYycsXG4gICAgJ3NjaGVkdWxlJyxcbiAgICAnc2NoZW1hdGljJyxcbiAgICAnc2NoZW1lJyxcbiAgICAnc2NoZW1pbmcnLFxuICAgICdzY2hpbGxpbmcnLFxuICAgICdzY2huYXBwcycsXG4gICAgJ3NjaG9sYXInLFxuICAgICdzY2llbmNlJyxcbiAgICAnc2NpZW50aXN0JyxcbiAgICAnc2Npb24nLFxuICAgICdzY29mZicsXG4gICAgJ3Njb2xkaW5nJyxcbiAgICAnc2NvbmUnLFxuICAgICdzY29vcCcsXG4gICAgJ3Njb290ZXInLFxuICAgICdzY29wZScsXG4gICAgJ3Njb3JjaCcsXG4gICAgJ3Njb3JlYm9vaycsXG4gICAgJ3Njb3JlY2FyZCcsXG4gICAgJ3Njb3JlZCcsXG4gICAgJ3Njb3JlbGVzcycsXG4gICAgJ3Njb3JlcicsXG4gICAgJ3Njb3JpbmcnLFxuICAgICdzY29ybicsXG4gICAgJ3Njb3JwaW9uJyxcbiAgICAnc2NvdGNoJyxcbiAgICAnc2NvdW5kcmVsJyxcbiAgICAnc2NvdXJlZCcsXG4gICAgJ3Njb3VyaW5nJyxcbiAgICAnc2NvdXRpbmcnLFxuICAgICdzY291dHMnLFxuICAgICdzY293bGluZycsXG4gICAgJ3NjcmFiYmxlJyxcbiAgICAnc2NyYWdnbHknLFxuICAgICdzY3JhbWJsZWQnLFxuICAgICdzY3JhbWJsZXInLFxuICAgICdzY3JhcCcsXG4gICAgJ3NjcmF0Y2gnLFxuICAgICdzY3Jhd255JyxcbiAgICAnc2NyZWVuJyxcbiAgICAnc2NyaWJibGUnLFxuICAgICdzY3JpYmUnLFxuICAgICdzY3JpYmluZycsXG4gICAgJ3NjcmltbWFnZScsXG4gICAgJ3NjcmlwdCcsXG4gICAgJ3Njcm9sbCcsXG4gICAgJ3Njcm9vZ2UnLFxuICAgICdzY3JvdW5nZXInLFxuICAgICdzY3J1YmJlZCcsXG4gICAgJ3NjcnViYmVyJyxcbiAgICAnc2NydWZmeScsXG4gICAgJ3NjcnVuY2gnLFxuICAgICdzY3J1dGlueScsXG4gICAgJ3NjdWJhJyxcbiAgICAnc2N1ZmYnLFxuICAgICdzY3VscHRvcicsXG4gICAgJ3NjdWxwdHVyZScsXG4gICAgJ3NjdXJ2eScsXG4gICAgJ3NjdXR0bGUnLFxuICAgICdzZWNsdWRlZCcsXG4gICAgJ3NlY2x1ZGluZycsXG4gICAgJ3NlY2x1c2lvbicsXG4gICAgJ3NlY29uZCcsXG4gICAgJ3NlY3JlY3knLFxuICAgICdzZWNyZXQnLFxuICAgICdzZWN0aW9uYWwnLFxuICAgICdzZWN0b3InLFxuICAgICdzZWN1bGFyJyxcbiAgICAnc2VjdXJlbHknLFxuICAgICdzZWN1cml0eScsXG4gICAgJ3NlZGFuJyxcbiAgICAnc2VkYXRlJyxcbiAgICAnc2VkYXRpb24nLFxuICAgICdzZWRhdGl2ZScsXG4gICAgJ3NlZGltZW50JyxcbiAgICAnc2VkdWNlJyxcbiAgICAnc2VkdWNpbmcnLFxuICAgICdzZWdtZW50JyxcbiAgICAnc2Vpc21pYycsXG4gICAgJ3NlaXppbmcnLFxuICAgICdzZWxkb20nLFxuICAgICdzZWxlY3RlZCcsXG4gICAgJ3NlbGVjdGlvbicsXG4gICAgJ3NlbGVjdGl2ZScsXG4gICAgJ3NlbGVjdG9yJyxcbiAgICAnc2VsZicsXG4gICAgJ3NlbHR6ZXInLFxuICAgICdzZW1hbnRpYycsXG4gICAgJ3NlbWVzdGVyJyxcbiAgICAnc2VtaWNvbG9uJyxcbiAgICAnc2VtaWZpbmFsJyxcbiAgICAnc2VtaW5hcicsXG4gICAgJ3NlbWlzb2Z0JyxcbiAgICAnc2VtaXN3ZWV0JyxcbiAgICAnc2VuYXRlJyxcbiAgICAnc2VuYXRvcicsXG4gICAgJ3NlbmQnLFxuICAgICdzZW5pb3InLFxuICAgICdzZW5vcml0YScsXG4gICAgJ3NlbnNhdGlvbicsXG4gICAgJ3NlbnNpdGl2ZScsXG4gICAgJ3NlbnNpdGl6ZScsXG4gICAgJ3NlbnN1YWxseScsXG4gICAgJ3NlbnN1b3VzJyxcbiAgICAnc2VwaWEnLFxuICAgICdzZXB0ZW1iZXInLFxuICAgICdzZXB0aWMnLFxuICAgICdzZXB0dW0nLFxuICAgICdzZXF1ZWwnLFxuICAgICdzZXF1ZW5jZScsXG4gICAgJ3NlcXVlc3RlcicsXG4gICAgJ3NlcmllcycsXG4gICAgJ3Nlcm1vbicsXG4gICAgJ3Nlcm90b25pbicsXG4gICAgJ3NlcnBlbnQnLFxuICAgICdzZXJyYXRlZCcsXG4gICAgJ3NlcnZlJyxcbiAgICAnc2VydmljZScsXG4gICAgJ3NlcnZpbmcnLFxuICAgICdzZXNhbWUnLFxuICAgICdzZXNzaW9ucycsXG4gICAgJ3NldGJhY2snLFxuICAgICdzZXR0aW5nJyxcbiAgICAnc2V0dGxlJyxcbiAgICAnc2V0dGxpbmcnLFxuICAgICdzZXR1cCcsXG4gICAgJ3NldmVuZm9sZCcsXG4gICAgJ3NldmVudGVlbicsXG4gICAgJ3NldmVudGgnLFxuICAgICdzZXZlbnR5JyxcbiAgICAnc2V2ZXJpdHknLFxuICAgICdzaGFiYnknLFxuICAgICdzaGFjaycsXG4gICAgJ3NoYWRlZCcsXG4gICAgJ3NoYWRpbHknLFxuICAgICdzaGFkaW5lc3MnLFxuICAgICdzaGFkaW5nJyxcbiAgICAnc2hhZG93JyxcbiAgICAnc2hhZHknLFxuICAgICdzaGFmdCcsXG4gICAgJ3NoYWthYmxlJyxcbiAgICAnc2hha2lseScsXG4gICAgJ3NoYWtpbmVzcycsXG4gICAgJ3NoYWtpbmcnLFxuICAgICdzaGFreScsXG4gICAgJ3NoYWxlJyxcbiAgICAnc2hhbGxvdCcsXG4gICAgJ3NoYWxsb3cnLFxuICAgICdzaGFtZScsXG4gICAgJ3NoYW1wb28nLFxuICAgICdzaGFtcm9jaycsXG4gICAgJ3NoYW5rJyxcbiAgICAnc2hhbnR5JyxcbiAgICAnc2hhcGUnLFxuICAgICdzaGFwaW5nJyxcbiAgICAnc2hhcmUnLFxuICAgICdzaGFycGVuZXInLFxuICAgICdzaGFycGVyJyxcbiAgICAnc2hhcnBpZScsXG4gICAgJ3NoYXJwbHknLFxuICAgICdzaGFycG5lc3MnLFxuICAgICdzaGF3bCcsXG4gICAgJ3NoZWF0aCcsXG4gICAgJ3NoZWQnLFxuICAgICdzaGVlcCcsXG4gICAgJ3NoZWV0JyxcbiAgICAnc2hlbGYnLFxuICAgICdzaGVsbCcsXG4gICAgJ3NoZWx0ZXInLFxuICAgICdzaGVsdmUnLFxuICAgICdzaGVsdmluZycsXG4gICAgJ3NoZXJyeScsXG4gICAgJ3NoaWVsZCcsXG4gICAgJ3NoaWZ0ZXInLFxuICAgICdzaGlmdGluZycsXG4gICAgJ3NoaWZ0bGVzcycsXG4gICAgJ3NoaWZ0eScsXG4gICAgJ3NoaW1tZXInLFxuICAgICdzaGltbXknLFxuICAgICdzaGluZGlnJyxcbiAgICAnc2hpbmUnLFxuICAgICdzaGluZ2xlJyxcbiAgICAnc2hpbmluZXNzJyxcbiAgICAnc2hpbmluZycsXG4gICAgJ3NoaW55JyxcbiAgICAnc2hpcCcsXG4gICAgJ3NoaXJ0JyxcbiAgICAnc2hpdmVyaW5nJyxcbiAgICAnc2hvY2snLFxuICAgICdzaG9uZScsXG4gICAgJ3Nob3BsaWZ0JyxcbiAgICAnc2hvcHBlcicsXG4gICAgJ3Nob3BwaW5nJyxcbiAgICAnc2hvcHRhbGsnLFxuICAgICdzaG9yZScsXG4gICAgJ3Nob3J0YWdlJyxcbiAgICAnc2hvcnRjYWtlJyxcbiAgICAnc2hvcnRjdXQnLFxuICAgICdzaG9ydGVuJyxcbiAgICAnc2hvcnRlcicsXG4gICAgJ3Nob3J0aGFuZCcsXG4gICAgJ3Nob3J0bGlzdCcsXG4gICAgJ3Nob3J0bHknLFxuICAgICdzaG9ydG5lc3MnLFxuICAgICdzaG9ydHMnLFxuICAgICdzaG9ydHdhdmUnLFxuICAgICdzaG9ydHknLFxuICAgICdzaG91dCcsXG4gICAgJ3Nob3ZlJyxcbiAgICAnc2hvd2JpeicsXG4gICAgJ3Nob3djYXNlJyxcbiAgICAnc2hvd2Rvd24nLFxuICAgICdzaG93ZXInLFxuICAgICdzaG93Z2lybCcsXG4gICAgJ3Nob3dpbmcnLFxuICAgICdzaG93bWFuJyxcbiAgICAnc2hvd24nLFxuICAgICdzaG93b2ZmJyxcbiAgICAnc2hvd3BpZWNlJyxcbiAgICAnc2hvd3BsYWNlJyxcbiAgICAnc2hvd3Jvb20nLFxuICAgICdzaG93eScsXG4gICAgJ3NocmFuaycsXG4gICAgJ3NocmFwbmVsJyxcbiAgICAnc2hyZWRkZXInLFxuICAgICdzaHJlZGRpbmcnLFxuICAgICdzaHJld2RseScsXG4gICAgJ3NocmllaycsXG4gICAgJ3NocmlsbCcsXG4gICAgJ3NocmltcCcsXG4gICAgJ3NocmluZScsXG4gICAgJ3NocmluaycsXG4gICAgJ3Nocml2ZWwnLFxuICAgICdzaHJvdWRlZCcsXG4gICAgJ3NocnViYmVyeScsXG4gICAgJ3NocnVicycsXG4gICAgJ3NocnVnJyxcbiAgICAnc2hydW5rJyxcbiAgICAnc2h1Y2tpbmcnLFxuICAgICdzaHVkZGVyJyxcbiAgICAnc2h1ZmZsZScsXG4gICAgJ3NodWZmbGluZycsXG4gICAgJ3NodW4nLFxuICAgICdzaHVzaCcsXG4gICAgJ3NodXQnLFxuICAgICdzaHknLFxuICAgICdzaWFtZXNlJyxcbiAgICAnc2liZXJpYW4nLFxuICAgICdzaWJsaW5nJyxcbiAgICAnc2lkaW5nJyxcbiAgICAnc2llcnJhJyxcbiAgICAnc2llc3RhJyxcbiAgICAnc2lmdCcsXG4gICAgJ3NpZ2hpbmcnLFxuICAgICdzaWxlbmNlZCcsXG4gICAgJ3NpbGVuY2VyJyxcbiAgICAnc2lsZW50JyxcbiAgICAnc2lsaWNhJyxcbiAgICAnc2lsaWNvbicsXG4gICAgJ3NpbGsnLFxuICAgICdzaWxsaW5lc3MnLFxuICAgICdzaWxseScsXG4gICAgJ3NpbG8nLFxuICAgICdzaWx0JyxcbiAgICAnc2lsdmVyJyxcbiAgICAnc2ltaWxhcmx5JyxcbiAgICAnc2ltaWxlJyxcbiAgICAnc2ltbWVyaW5nJyxcbiAgICAnc2ltcGxlJyxcbiAgICAnc2ltcGxpZnknLFxuICAgICdzaW1wbHknLFxuICAgICdzaW5jZXJlJyxcbiAgICAnc2luY2VyaXR5JyxcbiAgICAnc2luZ2VyJyxcbiAgICAnc2luZ2luZycsXG4gICAgJ3NpbmdsZScsXG4gICAgJ3Npbmd1bGFyJyxcbiAgICAnc2luaXN0ZXInLFxuICAgICdzaW5sZXNzJyxcbiAgICAnc2lubmVyJyxcbiAgICAnc2ludW91cycsXG4gICAgJ3NpcCcsXG4gICAgJ3NpcmVuJyxcbiAgICAnc2lzdGVyJyxcbiAgICAnc2l0Y29tJyxcbiAgICAnc2l0dGVyJyxcbiAgICAnc2l0dGluZycsXG4gICAgJ3NpdHVhdGVkJyxcbiAgICAnc2l0dWF0aW9uJyxcbiAgICAnc2l4Zm9sZCcsXG4gICAgJ3NpeHRlZW4nLFxuICAgICdzaXh0aCcsXG4gICAgJ3NpeHRpZXMnLFxuICAgICdzaXh0aWV0aCcsXG4gICAgJ3NpeHR5Zm9sZCcsXG4gICAgJ3NpemFibGUnLFxuICAgICdzaXphYmx5JyxcbiAgICAnc2l6ZScsXG4gICAgJ3NpemluZycsXG4gICAgJ3NpenpsZScsXG4gICAgJ3NpenpsaW5nJyxcbiAgICAnc2thdGVyJyxcbiAgICAnc2thdGluZycsXG4gICAgJ3NrZWRhZGRsZScsXG4gICAgJ3NrZWxldGFsJyxcbiAgICAnc2tlbGV0b24nLFxuICAgICdza2VwdGljJyxcbiAgICAnc2tldGNoJyxcbiAgICAnc2tld2VkJyxcbiAgICAnc2tld2VyJyxcbiAgICAnc2tpZCcsXG4gICAgJ3NraWVkJyxcbiAgICAnc2tpZXInLFxuICAgICdza2llcycsXG4gICAgJ3NraWluZycsXG4gICAgJ3NraWxsZWQnLFxuICAgICdza2lsbGV0JyxcbiAgICAnc2tpbGxmdWwnLFxuICAgICdza2ltbWVkJyxcbiAgICAnc2tpbW1lcicsXG4gICAgJ3NraW1taW5nJyxcbiAgICAnc2tpbXBpbHknLFxuICAgICdza2luY2FyZScsXG4gICAgJ3NraW5oZWFkJyxcbiAgICAnc2tpbmxlc3MnLFxuICAgICdza2lubmluZycsXG4gICAgJ3NraW5ueScsXG4gICAgJ3NraW50aWdodCcsXG4gICAgJ3NraXBwZXInLFxuICAgICdza2lwcGluZycsXG4gICAgJ3NraXJtaXNoJyxcbiAgICAnc2tpcnQnLFxuICAgICdza2l0dGxlJyxcbiAgICAnc2t5ZGl2ZXInLFxuICAgICdza3lsaWdodCcsXG4gICAgJ3NreWxpbmUnLFxuICAgICdza3lwZScsXG4gICAgJ3NreXJvY2tldCcsXG4gICAgJ3NreXdhcmQnLFxuICAgICdzbGFiJyxcbiAgICAnc2xhY2tlZCcsXG4gICAgJ3NsYWNrZXInLFxuICAgICdzbGFja2luZycsXG4gICAgJ3NsYWNrbmVzcycsXG4gICAgJ3NsYWNrcycsXG4gICAgJ3NsYWluJyxcbiAgICAnc2xhbScsXG4gICAgJ3NsYW5kZXInLFxuICAgICdzbGFuZycsXG4gICAgJ3NsYXBwaW5nJyxcbiAgICAnc2xhcHN0aWNrJyxcbiAgICAnc2xhc2hlZCcsXG4gICAgJ3NsYXNoaW5nJyxcbiAgICAnc2xhdGUnLFxuICAgICdzbGF0aGVyJyxcbiAgICAnc2xhdycsXG4gICAgJ3NsZWQnLFxuICAgICdzbGVlaycsXG4gICAgJ3NsZWVwJyxcbiAgICAnc2xlZXQnLFxuICAgICdzbGVldmUnLFxuICAgICdzbGVwdCcsXG4gICAgJ3NsaWNlYWJsZScsXG4gICAgJ3NsaWNlZCcsXG4gICAgJ3NsaWNlcicsXG4gICAgJ3NsaWNpbmcnLFxuICAgICdzbGljaycsXG4gICAgJ3NsaWRlcicsXG4gICAgJ3NsaWRlc2hvdycsXG4gICAgJ3NsaWRpbmcnLFxuICAgICdzbGlnaHRlZCcsXG4gICAgJ3NsaWdodGluZycsXG4gICAgJ3NsaWdodGx5JyxcbiAgICAnc2xpbW5lc3MnLFxuICAgICdzbGlteScsXG4gICAgJ3NsaW5naW5nJyxcbiAgICAnc2xpbmdzaG90JyxcbiAgICAnc2xpbmt5JyxcbiAgICAnc2xpcCcsXG4gICAgJ3NsaXQnLFxuICAgICdzbGl2ZXInLFxuICAgICdzbG9iYmVyeScsXG4gICAgJ3Nsb2dhbicsXG4gICAgJ3Nsb3BlZCcsXG4gICAgJ3Nsb3BpbmcnLFxuICAgICdzbG9wcGlseScsXG4gICAgJ3Nsb3BweScsXG4gICAgJ3Nsb3QnLFxuICAgICdzbG91Y2hpbmcnLFxuICAgICdzbG91Y2h5JyxcbiAgICAnc2x1ZGdlJyxcbiAgICAnc2x1ZycsXG4gICAgJ3NsdW0nLFxuICAgICdzbHVycCcsXG4gICAgJ3NsdXNoJyxcbiAgICAnc2x5JyxcbiAgICAnc21hbGwnLFxuICAgICdzbWFydGx5JyxcbiAgICAnc21hcnRuZXNzJyxcbiAgICAnc21hc2hlcicsXG4gICAgJ3NtYXNoaW5nJyxcbiAgICAnc21hc2h1cCcsXG4gICAgJ3NtZWxsJyxcbiAgICAnc21lbHRpbmcnLFxuICAgICdzbWlsZScsXG4gICAgJ3NtaWxpbmdseScsXG4gICAgJ3NtaXJrJyxcbiAgICAnc21pdGUnLFxuICAgICdzbWl0aCcsXG4gICAgJ3NtaXR0ZW4nLFxuICAgICdzbW9jaycsXG4gICAgJ3Ntb2cnLFxuICAgICdzbW9rZWQnLFxuICAgICdzbW9rZWxlc3MnLFxuICAgICdzbW9raW5lc3MnLFxuICAgICdzbW9raW5nJyxcbiAgICAnc21va3knLFxuICAgICdzbW9sZGVyJyxcbiAgICAnc21vb3RoJyxcbiAgICAnc21vdGhlcicsXG4gICAgJ3NtdWRnZScsXG4gICAgJ3NtdWRneScsXG4gICAgJ3NtdWdnbGVyJyxcbiAgICAnc211Z2dsaW5nJyxcbiAgICAnc211Z2x5JyxcbiAgICAnc211Z25lc3MnLFxuICAgICdzbmFjaycsXG4gICAgJ3NuYWdnZWQnLFxuICAgICdzbmFraW5nJyxcbiAgICAnc25hcCcsXG4gICAgJ3NuYXJlJyxcbiAgICAnc25hcmwnLFxuICAgICdzbmF6enknLFxuICAgICdzbmVhaycsXG4gICAgJ3NuZWVyJyxcbiAgICAnc25lZXplJyxcbiAgICAnc25lZXppbmcnLFxuICAgICdzbmlkZScsXG4gICAgJ3NuaWZmJyxcbiAgICAnc25pcHBldCcsXG4gICAgJ3NuaXBwaW5nJyxcbiAgICAnc25pdGNoJyxcbiAgICAnc25vb3BlcicsXG4gICAgJ3Nub296ZScsXG4gICAgJ3Nub3JlJyxcbiAgICAnc25vcmluZycsXG4gICAgJ3Nub3JrZWwnLFxuICAgICdzbm9ydCcsXG4gICAgJ3Nub3V0JyxcbiAgICAnc25vd2JpcmQnLFxuICAgICdzbm93Ym9hcmQnLFxuICAgICdzbm93Ym91bmQnLFxuICAgICdzbm93Y2FwJyxcbiAgICAnc25vd2RyaWZ0JyxcbiAgICAnc25vd2Ryb3AnLFxuICAgICdzbm93ZmFsbCcsXG4gICAgJ3Nub3dmaWVsZCcsXG4gICAgJ3Nub3dmbGFrZScsXG4gICAgJ3Nub3dpbmVzcycsXG4gICAgJ3Nub3dsZXNzJyxcbiAgICAnc25vd21hbicsXG4gICAgJ3Nub3dwbG93JyxcbiAgICAnc25vd3Nob2UnLFxuICAgICdzbm93c3Rvcm0nLFxuICAgICdzbm93c3VpdCcsXG4gICAgJ3Nub3d5JyxcbiAgICAnc251YicsXG4gICAgJ3NudWZmJyxcbiAgICAnc251Z2dsZScsXG4gICAgJ3NudWdseScsXG4gICAgJ3NudWduZXNzJyxcbiAgICAnc3BlYWsnLFxuICAgICdzcGVhcmZpc2gnLFxuICAgICdzcGVhcmhlYWQnLFxuICAgICdzcGVhcm1hbicsXG4gICAgJ3NwZWFybWludCcsXG4gICAgJ3NwZWNpZXMnLFxuICAgICdzcGVjaW1lbicsXG4gICAgJ3NwZWNrZWQnLFxuICAgICdzcGVja2xlZCcsXG4gICAgJ3NwZWNrcycsXG4gICAgJ3NwZWN0YWNsZScsXG4gICAgJ3NwZWN0YXRvcicsXG4gICAgJ3NwZWN0cnVtJyxcbiAgICAnc3BlY3VsYXRlJyxcbiAgICAnc3BlZWNoJyxcbiAgICAnc3BlZWQnLFxuICAgICdzcGVsbGJpbmQnLFxuICAgICdzcGVsbGVyJyxcbiAgICAnc3BlbGxpbmcnLFxuICAgICdzcGVuZGFibGUnLFxuICAgICdzcGVuZGVyJyxcbiAgICAnc3BlbmRpbmcnLFxuICAgICdzcGVudCcsXG4gICAgJ3NwZXcnLFxuICAgICdzcGhlcmUnLFxuICAgICdzcGhlcmljYWwnLFxuICAgICdzcGhpbngnLFxuICAgICdzcGlkZXInLFxuICAgICdzcGllZCcsXG4gICAgJ3NwaWZmeScsXG4gICAgJ3NwaWxsJyxcbiAgICAnc3BpbHQnLFxuICAgICdzcGluYWNoJyxcbiAgICAnc3BpbmFsJyxcbiAgICAnc3BpbmRsZScsXG4gICAgJ3NwaW5uZXInLFxuICAgICdzcGlubmluZycsXG4gICAgJ3NwaW5vdXQnLFxuICAgICdzcGluc3RlcicsXG4gICAgJ3NwaW55JyxcbiAgICAnc3BpcmFsJyxcbiAgICAnc3Bpcml0ZWQnLFxuICAgICdzcGlyaXRpc20nLFxuICAgICdzcGlyaXRzJyxcbiAgICAnc3Bpcml0dWFsJyxcbiAgICAnc3BsYXNoZWQnLFxuICAgICdzcGxhc2hpbmcnLFxuICAgICdzcGxhc2h5JyxcbiAgICAnc3BsYXR0ZXInLFxuICAgICdzcGxlZW4nLFxuICAgICdzcGxlbmRpZCcsXG4gICAgJ3NwbGVuZG9yJyxcbiAgICAnc3BsaWNlJyxcbiAgICAnc3BsaWNpbmcnLFxuICAgICdzcGxpbnRlcicsXG4gICAgJ3NwbG90Y2h5JyxcbiAgICAnc3BsdXJnZScsXG4gICAgJ3Nwb2lsYWdlJyxcbiAgICAnc3BvaWxlZCcsXG4gICAgJ3Nwb2lsZXInLFxuICAgICdzcG9pbGluZycsXG4gICAgJ3Nwb2lscycsXG4gICAgJ3Nwb2tlbicsXG4gICAgJ3Nwb2tlc21hbicsXG4gICAgJ3Nwb25nZScsXG4gICAgJ3Nwb25neScsXG4gICAgJ3Nwb25zb3InLFxuICAgICdzcG9vZicsXG4gICAgJ3Nwb29raWx5JyxcbiAgICAnc3Bvb2t5JyxcbiAgICAnc3Bvb2wnLFxuICAgICdzcG9vbicsXG4gICAgJ3Nwb3JlJyxcbiAgICAnc3BvcnRpbmcnLFxuICAgICdzcG9ydHMnLFxuICAgICdzcG9ydHknLFxuICAgICdzcG90bGVzcycsXG4gICAgJ3Nwb3RsaWdodCcsXG4gICAgJ3Nwb3R0ZWQnLFxuICAgICdzcG90dGVyJyxcbiAgICAnc3BvdHRpbmcnLFxuICAgICdzcG90dHknLFxuICAgICdzcG91c2FsJyxcbiAgICAnc3BvdXNlJyxcbiAgICAnc3BvdXQnLFxuICAgICdzcHJhaW4nLFxuICAgICdzcHJhbmcnLFxuICAgICdzcHJhd2wnLFxuICAgICdzcHJheScsXG4gICAgJ3NwcmVlJyxcbiAgICAnc3ByaWcnLFxuICAgICdzcHJpbmcnLFxuICAgICdzcHJpbmtsZWQnLFxuICAgICdzcHJpbmtsZXInLFxuICAgICdzcHJpbnQnLFxuICAgICdzcHJpdGUnLFxuICAgICdzcHJvdXQnLFxuICAgICdzcHJ1Y2UnLFxuICAgICdzcHJ1bmcnLFxuICAgICdzcHJ5JyxcbiAgICAnc3B1ZCcsXG4gICAgJ3NwdXInLFxuICAgICdzcHV0dGVyJyxcbiAgICAnc3B5Z2xhc3MnLFxuICAgICdzcXVhYmJsZScsXG4gICAgJ3NxdWFkJyxcbiAgICAnc3F1YWxsJyxcbiAgICAnc3F1YW5kZXInLFxuICAgICdzcXVhc2gnLFxuICAgICdzcXVhdHRlZCcsXG4gICAgJ3NxdWF0dGVyJyxcbiAgICAnc3F1YXR0aW5nJyxcbiAgICAnc3F1ZWFrJyxcbiAgICAnc3F1ZWFsZXInLFxuICAgICdzcXVlYWxpbmcnLFxuICAgICdzcXVlYW1pc2gnLFxuICAgICdzcXVlZWdlZScsXG4gICAgJ3NxdWVlemUnLFxuICAgICdzcXVlZXppbmcnLFxuICAgICdzcXVpZCcsXG4gICAgJ3NxdWlnZ2xlJyxcbiAgICAnc3F1aWdnbHknLFxuICAgICdzcXVpbnQnLFxuICAgICdzcXVpcmUnLFxuICAgICdzcXVpcnQnLFxuICAgICdzcXVpc2hpZXInLFxuICAgICdzcXVpc2h5JyxcbiAgICAnc3RhYmlsaXR5JyxcbiAgICAnc3RhYmlsaXplJyxcbiAgICAnc3RhYmxlJyxcbiAgICAnc3RhY2snLFxuICAgICdzdGFkaXVtJyxcbiAgICAnc3RhZmYnLFxuICAgICdzdGFnZScsXG4gICAgJ3N0YWdpbmcnLFxuICAgICdzdGFnbmFudCcsXG4gICAgJ3N0YWduYXRlJyxcbiAgICAnc3RhaW5hYmxlJyxcbiAgICAnc3RhaW5lZCcsXG4gICAgJ3N0YWluaW5nJyxcbiAgICAnc3RhaW5sZXNzJyxcbiAgICAnc3RhbGVtYXRlJyxcbiAgICAnc3RhbGVuZXNzJyxcbiAgICAnc3RhbGxpbmcnLFxuICAgICdzdGFsbGlvbicsXG4gICAgJ3N0YW1pbmEnLFxuICAgICdzdGFtbWVyJyxcbiAgICAnc3RhbXAnLFxuICAgICdzdGFuZCcsXG4gICAgJ3N0YW5rJyxcbiAgICAnc3RhcGxlJyxcbiAgICAnc3RhcGxpbmcnLFxuICAgICdzdGFyYm9hcmQnLFxuICAgICdzdGFyY2gnLFxuICAgICdzdGFyZG9tJyxcbiAgICAnc3RhcmR1c3QnLFxuICAgICdzdGFyZmlzaCcsXG4gICAgJ3N0YXJnYXplcicsXG4gICAgJ3N0YXJpbmcnLFxuICAgICdzdGFyaycsXG4gICAgJ3N0YXJsZXNzJyxcbiAgICAnc3RhcmxldCcsXG4gICAgJ3N0YXJsaWdodCcsXG4gICAgJ3N0YXJsaXQnLFxuICAgICdzdGFycmluZycsXG4gICAgJ3N0YXJyeScsXG4gICAgJ3N0YXJzaGlwJyxcbiAgICAnc3RhcnRlcicsXG4gICAgJ3N0YXJ0aW5nJyxcbiAgICAnc3RhcnRsZScsXG4gICAgJ3N0YXJ0bGluZycsXG4gICAgJ3N0YXJ0dXAnLFxuICAgICdzdGFydmVkJyxcbiAgICAnc3RhcnZpbmcnLFxuICAgICdzdGFzaCcsXG4gICAgJ3N0YXRlJyxcbiAgICAnc3RhdGljJyxcbiAgICAnc3RhdGlzdGljJyxcbiAgICAnc3RhdHVlJyxcbiAgICAnc3RhdHVyZScsXG4gICAgJ3N0YXR1cycsXG4gICAgJ3N0YXR1dGUnLFxuICAgICdzdGF0dXRvcnknLFxuICAgICdzdGF1bmNoJyxcbiAgICAnc3RheXMnLFxuICAgICdzdGVhZGZhc3QnLFxuICAgICdzdGVhZGllcicsXG4gICAgJ3N0ZWFkaWx5JyxcbiAgICAnc3RlYWR5aW5nJyxcbiAgICAnc3RlYW0nLFxuICAgICdzdGVlZCcsXG4gICAgJ3N0ZWVwJyxcbiAgICAnc3RlZXJhYmxlJyxcbiAgICAnc3RlZXJpbmcnLFxuICAgICdzdGVlcnNtYW4nLFxuICAgICdzdGVnb3NhdXInLFxuICAgICdzdGVsbGFyJyxcbiAgICAnc3RlbScsXG4gICAgJ3N0ZW5jaCcsXG4gICAgJ3N0ZW5jaWwnLFxuICAgICdzdGVwJyxcbiAgICAnc3RlcmVvJyxcbiAgICAnc3RlcmlsZScsXG4gICAgJ3N0ZXJpbGl0eScsXG4gICAgJ3N0ZXJpbGl6ZScsXG4gICAgJ3N0ZXJsaW5nJyxcbiAgICAnc3Rlcm5uZXNzJyxcbiAgICAnc3Rlcm51bScsXG4gICAgJ3N0ZXcnLFxuICAgICdzdGljaycsXG4gICAgJ3N0aWZmZW4nLFxuICAgICdzdGlmZmx5JyxcbiAgICAnc3RpZmZuZXNzJyxcbiAgICAnc3RpZmxlJyxcbiAgICAnc3RpZmxpbmcnLFxuICAgICdzdGlsbG5lc3MnLFxuICAgICdzdGlsdCcsXG4gICAgJ3N0aW11bGFudCcsXG4gICAgJ3N0aW11bGF0ZScsXG4gICAgJ3N0aW11bGknLFxuICAgICdzdGltdWx1cycsXG4gICAgJ3N0aW5nZXInLFxuICAgICdzdGluZ2lseScsXG4gICAgJ3N0aW5naW5nJyxcbiAgICAnc3RpbmdyYXknLFxuICAgICdzdGluZ3knLFxuICAgICdzdGlua2luZycsXG4gICAgJ3N0aW5reScsXG4gICAgJ3N0aXBlbmQnLFxuICAgICdzdGlwdWxhdGUnLFxuICAgICdzdGlyJyxcbiAgICAnc3RpdGNoJyxcbiAgICAnc3RvY2snLFxuICAgICdzdG9pYycsXG4gICAgJ3N0b2tlJyxcbiAgICAnc3RvbGUnLFxuICAgICdzdG9tcCcsXG4gICAgJ3N0b25ld2FsbCcsXG4gICAgJ3N0b25ld2FyZScsXG4gICAgJ3N0b25ld29yaycsXG4gICAgJ3N0b25pbmcnLFxuICAgICdzdG9ueScsXG4gICAgJ3N0b29kJyxcbiAgICAnc3Rvb2dlJyxcbiAgICAnc3Rvb2wnLFxuICAgICdzdG9vcCcsXG4gICAgJ3N0b3BsaWdodCcsXG4gICAgJ3N0b3BwYWJsZScsXG4gICAgJ3N0b3BwYWdlJyxcbiAgICAnc3RvcHBlZCcsXG4gICAgJ3N0b3BwZXInLFxuICAgICdzdG9wcGluZycsXG4gICAgJ3N0b3B3YXRjaCcsXG4gICAgJ3N0b3JhYmxlJyxcbiAgICAnc3RvcmFnZScsXG4gICAgJ3N0b3Jlcm9vbScsXG4gICAgJ3N0b3Jld2lkZScsXG4gICAgJ3N0b3JtJyxcbiAgICAnc3RvdXQnLFxuICAgICdzdG92ZScsXG4gICAgJ3N0b3dhd2F5JyxcbiAgICAnc3Rvd2luZycsXG4gICAgJ3N0cmFkZGxlJyxcbiAgICAnc3RyYWdnbGVyJyxcbiAgICAnc3RyYWluZWQnLFxuICAgICdzdHJhaW5lcicsXG4gICAgJ3N0cmFpbmluZycsXG4gICAgJ3N0cmFuZ2VseScsXG4gICAgJ3N0cmFuZ2VyJyxcbiAgICAnc3RyYW5nbGUnLFxuICAgICdzdHJhdGVnaWMnLFxuICAgICdzdHJhdGVneScsXG4gICAgJ3N0cmF0dXMnLFxuICAgICdzdHJhdycsXG4gICAgJ3N0cmF5JyxcbiAgICAnc3RyZWFrJyxcbiAgICAnc3RyZWFtJyxcbiAgICAnc3RyZWV0JyxcbiAgICAnc3RyZW5ndGgnLFxuICAgICdzdHJlbnVvdXMnLFxuICAgICdzdHJlcCcsXG4gICAgJ3N0cmVzcycsXG4gICAgJ3N0cmV0Y2gnLFxuICAgICdzdHJld24nLFxuICAgICdzdHJpY2tlbicsXG4gICAgJ3N0cmljdCcsXG4gICAgJ3N0cmlkZScsXG4gICAgJ3N0cmlmZScsXG4gICAgJ3N0cmlrZScsXG4gICAgJ3N0cmlraW5nJyxcbiAgICAnc3RyaXZlJyxcbiAgICAnc3RyaXZpbmcnLFxuICAgICdzdHJvYmUnLFxuICAgICdzdHJvZGUnLFxuICAgICdzdHJvbGxlcicsXG4gICAgJ3N0cm9uZ2JveCcsXG4gICAgJ3N0cm9uZ2x5JyxcbiAgICAnc3Ryb25nbWFuJyxcbiAgICAnc3RydWNrJyxcbiAgICAnc3RydWN0dXJlJyxcbiAgICAnc3RydWRlbCcsXG4gICAgJ3N0cnVnZ2xlJyxcbiAgICAnc3RydW0nLFxuICAgICdzdHJ1bmcnLFxuICAgICdzdHJ1dCcsXG4gICAgJ3N0dWJiZWQnLFxuICAgICdzdHViYmxlJyxcbiAgICAnc3R1YmJseScsXG4gICAgJ3N0dWJib3JuJyxcbiAgICAnc3R1Y2NvJyxcbiAgICAnc3R1Y2snLFxuICAgICdzdHVkZW50JyxcbiAgICAnc3R1ZGllZCcsXG4gICAgJ3N0dWRpbycsXG4gICAgJ3N0dWR5JyxcbiAgICAnc3R1ZmZlZCcsXG4gICAgJ3N0dWZmaW5nJyxcbiAgICAnc3R1ZmZ5JyxcbiAgICAnc3R1bWJsZScsXG4gICAgJ3N0dW1ibGluZycsXG4gICAgJ3N0dW1wJyxcbiAgICAnc3R1bmcnLFxuICAgICdzdHVubmVkJyxcbiAgICAnc3R1bm5lcicsXG4gICAgJ3N0dW5uaW5nJyxcbiAgICAnc3R1bnQnLFxuICAgICdzdHVwb3InLFxuICAgICdzdHVyZGlseScsXG4gICAgJ3N0dXJkeScsXG4gICAgJ3N0eWxpbmcnLFxuICAgICdzdHlsaXNobHknLFxuICAgICdzdHlsaXN0JyxcbiAgICAnc3R5bGl6ZWQnLFxuICAgICdzdHlsdXMnLFxuICAgICdzdWF2ZScsXG4gICAgJ3N1YmFyY3RpYycsXG4gICAgJ3N1YmF0b21pYycsXG4gICAgJ3N1YmRpdmlkZScsXG4gICAgJ3N1YmR1ZWQnLFxuICAgICdzdWJkdWluZycsXG4gICAgJ3N1YmZsb29yJyxcbiAgICAnc3ViZ3JvdXAnLFxuICAgICdzdWJoZWFkZXInLFxuICAgICdzdWJqZWN0JyxcbiAgICAnc3VibGVhc2UnLFxuICAgICdzdWJsZXQnLFxuICAgICdzdWJsZXZlbCcsXG4gICAgJ3N1YmxpbWUnLFxuICAgICdzdWJtYXJpbmUnLFxuICAgICdzdWJtZXJnZScsXG4gICAgJ3N1Ym1lcnNlZCcsXG4gICAgJ3N1Ym1pdHRlcicsXG4gICAgJ3N1YnBhbmVsJyxcbiAgICAnc3VicGFyJyxcbiAgICAnc3VicGxvdCcsXG4gICAgJ3N1YnByaW1lJyxcbiAgICAnc3Vic2NyaWJlJyxcbiAgICAnc3Vic2NyaXB0JyxcbiAgICAnc3Vic2VjdG9yJyxcbiAgICAnc3Vic2lkZScsXG4gICAgJ3N1YnNpZGluZycsXG4gICAgJ3N1YnNpZGl6ZScsXG4gICAgJ3N1YnNpZHknLFxuICAgICdzdWJzb2lsJyxcbiAgICAnc3Vic29uaWMnLFxuICAgICdzdWJzdGFuY2UnLFxuICAgICdzdWJzeXN0ZW0nLFxuICAgICdzdWJ0ZXh0JyxcbiAgICAnc3VidGl0bGUnLFxuICAgICdzdWJ0bHknLFxuICAgICdzdWJ0b3RhbCcsXG4gICAgJ3N1YnRyYWN0JyxcbiAgICAnc3VidHlwZScsXG4gICAgJ3N1YnVyYicsXG4gICAgJ3N1YndheScsXG4gICAgJ3N1Yndvb2ZlcicsXG4gICAgJ3N1Ynplcm8nLFxuICAgICdzdWNjdWxlbnQnLFxuICAgICdzdWNoJyxcbiAgICAnc3VjdGlvbicsXG4gICAgJ3N1ZGRlbicsXG4gICAgJ3N1ZG9rdScsXG4gICAgJ3N1ZHMnLFxuICAgICdzdWZmZXJlcicsXG4gICAgJ3N1ZmZlcmluZycsXG4gICAgJ3N1ZmZpY2UnLFxuICAgICdzdWZmaXgnLFxuICAgICdzdWZmb2NhdGUnLFxuICAgICdzdWZmcmFnZScsXG4gICAgJ3N1Z2FyJyxcbiAgICAnc3VnZ2VzdCcsXG4gICAgJ3N1aW5nJyxcbiAgICAnc3VpdGFibGUnLFxuICAgICdzdWl0YWJseScsXG4gICAgJ3N1aXRjYXNlJyxcbiAgICAnc3VpdG9yJyxcbiAgICAnc3VsZmF0ZScsXG4gICAgJ3N1bGZpZGUnLFxuICAgICdzdWxmaXRlJyxcbiAgICAnc3VsZnVyJyxcbiAgICAnc3VsaycsXG4gICAgJ3N1bGxlbicsXG4gICAgJ3N1bHBoYXRlJyxcbiAgICAnc3VscGh1cmljJyxcbiAgICAnc3VsdHJ5JyxcbiAgICAnc3VwZXJib3dsJyxcbiAgICAnc3VwZXJnbHVlJyxcbiAgICAnc3VwZXJoZXJvJyxcbiAgICAnc3VwZXJpb3InLFxuICAgICdzdXBlcmpldCcsXG4gICAgJ3N1cGVybWFuJyxcbiAgICAnc3VwZXJtb20nLFxuICAgICdzdXBlcm5vdmEnLFxuICAgICdzdXBlcnZpc2UnLFxuICAgICdzdXBwZXInLFxuICAgICdzdXBwbGllcicsXG4gICAgJ3N1cHBseScsXG4gICAgJ3N1cHBvcnQnLFxuICAgICdzdXByZW1hY3knLFxuICAgICdzdXByZW1lJyxcbiAgICAnc3VyY2hhcmdlJyxcbiAgICAnc3VyZWx5JyxcbiAgICAnc3VyZW5lc3MnLFxuICAgICdzdXJmYWNlJyxcbiAgICAnc3VyZmFjaW5nJyxcbiAgICAnc3VyZmJvYXJkJyxcbiAgICAnc3VyZmVyJyxcbiAgICAnc3VyZ2VyeScsXG4gICAgJ3N1cmdpY2FsJyxcbiAgICAnc3VyZ2luZycsXG4gICAgJ3N1cm5hbWUnLFxuICAgICdzdXJwYXNzJyxcbiAgICAnc3VycGx1cycsXG4gICAgJ3N1cnByaXNlJyxcbiAgICAnc3VycmVhbCcsXG4gICAgJ3N1cnJlbmRlcicsXG4gICAgJ3N1cnJvZ2F0ZScsXG4gICAgJ3N1cnJvdW5kJyxcbiAgICAnc3VydmV5JyxcbiAgICAnc3Vydml2YWwnLFxuICAgICdzdXJ2aXZlJyxcbiAgICAnc3Vydml2aW5nJyxcbiAgICAnc3Vydml2b3InLFxuICAgICdzdXNoaScsXG4gICAgJ3N1c3BlY3QnLFxuICAgICdzdXNwZW5kJyxcbiAgICAnc3VzcGVuc2UnLFxuICAgICdzdXN0YWluZWQnLFxuICAgICdzdXN0YWluZXInLFxuICAgICdzd2FiJyxcbiAgICAnc3dhZGRsaW5nJyxcbiAgICAnc3dhZ2dlcicsXG4gICAgJ3N3YW1wbGFuZCcsXG4gICAgJ3N3YW4nLFxuICAgICdzd2FwcGluZycsXG4gICAgJ3N3YXJtJyxcbiAgICAnc3dheScsXG4gICAgJ3N3ZWFyJyxcbiAgICAnc3dlYXQnLFxuICAgICdzd2VlcCcsXG4gICAgJ3N3ZWxsJyxcbiAgICAnc3dlcHQnLFxuICAgICdzd2VydmUnLFxuICAgICdzd2lmdGVyJyxcbiAgICAnc3dpZnRseScsXG4gICAgJ3N3aWZ0bmVzcycsXG4gICAgJ3N3aW1tYWJsZScsXG4gICAgJ3N3aW1tZXInLFxuICAgICdzd2ltbWluZycsXG4gICAgJ3N3aW1zdWl0JyxcbiAgICAnc3dpbXdlYXInLFxuICAgICdzd2luZ2VyJyxcbiAgICAnc3dpbmdpbmcnLFxuICAgICdzd2lwZScsXG4gICAgJ3N3aXJsJyxcbiAgICAnc3dpdGNoJyxcbiAgICAnc3dpdmVsJyxcbiAgICAnc3dpenpsZScsXG4gICAgJ3N3b29uZWQnLFxuICAgICdzd29vcCcsXG4gICAgJ3N3b29zaCcsXG4gICAgJ3N3b3JlJyxcbiAgICAnc3dvcm4nLFxuICAgICdzd3VuZycsXG4gICAgJ3N5Y2Ftb3JlJyxcbiAgICAnc3ltcGF0aHknLFxuICAgICdzeW1waG9uaWMnLFxuICAgICdzeW1waG9ueScsXG4gICAgJ3N5bXB0b20nLFxuICAgICdzeW5hcHNlJyxcbiAgICAnc3luZHJvbWUnLFxuICAgICdzeW5lcmd5JyxcbiAgICAnc3lub3BzZXMnLFxuICAgICdzeW5vcHNpcycsXG4gICAgJ3N5bnRoZXNpcycsXG4gICAgJ3N5bnRoZXRpYycsXG4gICAgJ3N5cnVwJyxcbiAgICAnc3lzdGVtJyxcbiAgICAndC1zaGlydCcsXG4gICAgJ3RhYmFzY28nLFxuICAgICd0YWJieScsXG4gICAgJ3RhYmxlZnVsJyxcbiAgICAndGFibGVzJyxcbiAgICAndGFibGV0JyxcbiAgICAndGFibGV3YXJlJyxcbiAgICAndGFibG9pZCcsXG4gICAgJ3RhY2tpbmVzcycsXG4gICAgJ3RhY2tpbmcnLFxuICAgICd0YWNrbGUnLFxuICAgICd0YWNrbGluZycsXG4gICAgJ3RhY2t5JyxcbiAgICAndGFjbycsXG4gICAgJ3RhY3RmdWwnLFxuICAgICd0YWN0aWNhbCcsXG4gICAgJ3RhY3RpY3MnLFxuICAgICd0YWN0aWxlJyxcbiAgICAndGFjdGxlc3MnLFxuICAgICd0YWRwb2xlJyxcbiAgICAndGFla3dvbmRvJyxcbiAgICAndGFnJyxcbiAgICAndGFpbnRlZCcsXG4gICAgJ3Rha2UnLFxuICAgICd0YWtpbmcnLFxuICAgICd0YWxjdW0nLFxuICAgICd0YWxpc21hbicsXG4gICAgJ3RhbGwnLFxuICAgICd0YWxvbicsXG4gICAgJ3RhbWFsZScsXG4gICAgJ3RhbWVuZXNzJyxcbiAgICAndGFtZXInLFxuICAgICd0YW1wZXInLFxuICAgICd0YW5rJyxcbiAgICAndGFubmVkJyxcbiAgICAndGFubmVyeScsXG4gICAgJ3Rhbm5pbmcnLFxuICAgICd0YW50cnVtJyxcbiAgICAndGFwZWxlc3MnLFxuICAgICd0YXBlcmVkJyxcbiAgICAndGFwZXJpbmcnLFxuICAgICd0YXBlc3RyeScsXG4gICAgJ3RhcGlvY2EnLFxuICAgICd0YXBwaW5nJyxcbiAgICAndGFwcycsXG4gICAgJ3RhcmFudHVsYScsXG4gICAgJ3RhcmdldCcsXG4gICAgJ3Rhcm1hYycsXG4gICAgJ3Rhcm5pc2gnLFxuICAgICd0YXJvdCcsXG4gICAgJ3RhcnRhcicsXG4gICAgJ3RhcnRseScsXG4gICAgJ3RhcnRuZXNzJyxcbiAgICAndGFzaycsXG4gICAgJ3Rhc3NlbCcsXG4gICAgJ3Rhc3RlJyxcbiAgICAndGFzdGluZXNzJyxcbiAgICAndGFzdGluZycsXG4gICAgJ3Rhc3R5JyxcbiAgICAndGF0dGVyZWQnLFxuICAgICd0YXR0bGUnLFxuICAgICd0YXR0bGluZycsXG4gICAgJ3RhdHRvbycsXG4gICAgJ3RhdW50JyxcbiAgICAndGF2ZXJuJyxcbiAgICAndGhhbmsnLFxuICAgICd0aGF0JyxcbiAgICAndGhhdycsXG4gICAgJ3RoZWF0ZXInLFxuICAgICd0aGVhdHJpY3MnLFxuICAgICd0aGVlJyxcbiAgICAndGhlZnQnLFxuICAgICd0aGVtZScsXG4gICAgJ3RoZW9sb2d5JyxcbiAgICAndGhlb3JpemUnLFxuICAgICd0aGVybWFsJyxcbiAgICAndGhlcm1vcycsXG4gICAgJ3RoZXNhdXJ1cycsXG4gICAgJ3RoZXNlJyxcbiAgICAndGhlc2lzJyxcbiAgICAndGhlc3BpYW4nLFxuICAgICd0aGlja2VuJyxcbiAgICAndGhpY2tldCcsXG4gICAgJ3RoaWNrbmVzcycsXG4gICAgJ3RoaWV2aW5nJyxcbiAgICAndGhpZXZpc2gnLFxuICAgICd0aGlnaCcsXG4gICAgJ3RoaW1ibGUnLFxuICAgICd0aGluZycsXG4gICAgJ3RoaW5rJyxcbiAgICAndGhpbmx5JyxcbiAgICAndGhpbm5lcicsXG4gICAgJ3RoaW5uZXNzJyxcbiAgICAndGhpbm5pbmcnLFxuICAgICd0aGlyc3RpbHknLFxuICAgICd0aGlyc3RpbmcnLFxuICAgICd0aGlyc3R5JyxcbiAgICAndGhpcnRlZW4nLFxuICAgICd0aGlydHknLFxuICAgICd0aG9uZycsXG4gICAgJ3Rob3JuJyxcbiAgICAndGhvc2UnLFxuICAgICd0aG91c2FuZCcsXG4gICAgJ3RocmFzaCcsXG4gICAgJ3RocmVhZCcsXG4gICAgJ3RocmVhdGVuJyxcbiAgICAndGhyZWVmb2xkJyxcbiAgICAndGhyaWZ0JyxcbiAgICAndGhyaWxsJyxcbiAgICAndGhyaXZlJyxcbiAgICAndGhyaXZpbmcnLFxuICAgICd0aHJvYXQnLFxuICAgICd0aHJvYmJpbmcnLFxuICAgICd0aHJvbmcnLFxuICAgICd0aHJvdHRsZScsXG4gICAgJ3Rocm93YXdheScsXG4gICAgJ3Rocm93YmFjaycsXG4gICAgJ3Rocm93ZXInLFxuICAgICd0aHJvd2luZycsXG4gICAgJ3RodWQnLFxuICAgICd0aHVtYicsXG4gICAgJ3RodW1waW5nJyxcbiAgICAndGh1cnNkYXknLFxuICAgICd0aHVzJyxcbiAgICAndGh3YXJ0aW5nJyxcbiAgICAndGh5c2VsZicsXG4gICAgJ3RpYXJhJyxcbiAgICAndGliaWEnLFxuICAgICd0aWRhbCcsXG4gICAgJ3RpZGJpdCcsXG4gICAgJ3RpZGluZXNzJyxcbiAgICAndGlkaW5ncycsXG4gICAgJ3RpZHknLFxuICAgICd0aWdlcicsXG4gICAgJ3RpZ2h0ZW4nLFxuICAgICd0aWdodGx5JyxcbiAgICAndGlnaHRuZXNzJyxcbiAgICAndGlnaHRyb3BlJyxcbiAgICAndGlnaHR3YWQnLFxuICAgICd0aWdyZXNzJyxcbiAgICAndGlsZScsXG4gICAgJ3RpbGluZycsXG4gICAgJ3RpbGwnLFxuICAgICd0aWx0JyxcbiAgICAndGltaWQnLFxuICAgICd0aW1pbmcnLFxuICAgICd0aW1vdGh5JyxcbiAgICAndGluZGVyYm94JyxcbiAgICAndGluZm9pbCcsXG4gICAgJ3RpbmdsZScsXG4gICAgJ3RpbmdsaW5nJyxcbiAgICAndGluZ2x5JyxcbiAgICAndGlua2VyJyxcbiAgICAndGlua2xpbmcnLFxuICAgICd0aW5zZWwnLFxuICAgICd0aW5zbWl0aCcsXG4gICAgJ3RpbnQnLFxuICAgICd0aW53b3JrJyxcbiAgICAndGlueScsXG4gICAgJ3RpcG9mZicsXG4gICAgJ3RpcHBlZCcsXG4gICAgJ3RpcHBlcicsXG4gICAgJ3RpcHBpbmcnLFxuICAgICd0aXB0b2VpbmcnLFxuICAgICd0aXB0b3AnLFxuICAgICd0aXJpbmcnLFxuICAgICd0aXNzdWUnLFxuICAgICd0cmFjZScsXG4gICAgJ3RyYWNpbmcnLFxuICAgICd0cmFjaycsXG4gICAgJ3RyYWN0aW9uJyxcbiAgICAndHJhY3RvcicsXG4gICAgJ3RyYWRlJyxcbiAgICAndHJhZGluZycsXG4gICAgJ3RyYWRpdGlvbicsXG4gICAgJ3RyYWZmaWMnLFxuICAgICd0cmFnZWR5JyxcbiAgICAndHJhaWxpbmcnLFxuICAgICd0cmFpbHNpZGUnLFxuICAgICd0cmFpbicsXG4gICAgJ3RyYWl0b3InLFxuICAgICd0cmFuY2UnLFxuICAgICd0cmFucXVpbCcsXG4gICAgJ3RyYW5zZmVyJyxcbiAgICAndHJhbnNmb3JtJyxcbiAgICAndHJhbnNsYXRlJyxcbiAgICAndHJhbnNwaXJlJyxcbiAgICAndHJhbnNwb3J0JyxcbiAgICAndHJhbnNwb3NlJyxcbiAgICAndHJhcGRvb3InLFxuICAgICd0cmFwZXplJyxcbiAgICAndHJhcGV6b2lkJyxcbiAgICAndHJhcHBlZCcsXG4gICAgJ3RyYXBwZXInLFxuICAgICd0cmFwcGluZycsXG4gICAgJ3RyYXBzJyxcbiAgICAndHJhc2gnLFxuICAgICd0cmF2ZWwnLFxuICAgICd0cmF2ZXJzZScsXG4gICAgJ3RyYXZlc3R5JyxcbiAgICAndHJheScsXG4gICAgJ3RyZWFjaGVyeScsXG4gICAgJ3RyZWFkaW5nJyxcbiAgICAndHJlYWRtaWxsJyxcbiAgICAndHJlYXNvbicsXG4gICAgJ3RyZWF0JyxcbiAgICAndHJlYmxlJyxcbiAgICAndHJlZScsXG4gICAgJ3RyZWtrZXInLFxuICAgICd0cmVtYmxlJyxcbiAgICAndHJlbWJsaW5nJyxcbiAgICAndHJlbW9yJyxcbiAgICAndHJlbmNoJyxcbiAgICAndHJlbmQnLFxuICAgICd0cmVzcGFzcycsXG4gICAgJ3RyaWFnZScsXG4gICAgJ3RyaWFsJyxcbiAgICAndHJpYW5nbGUnLFxuICAgICd0cmliZXNtYW4nLFxuICAgICd0cmlidW5hbCcsXG4gICAgJ3RyaWJ1bmUnLFxuICAgICd0cmlidXRhcnknLFxuICAgICd0cmlidXRlJyxcbiAgICAndHJpY2VwcycsXG4gICAgJ3RyaWNrZXJ5JyxcbiAgICAndHJpY2tpbHknLFxuICAgICd0cmlja2luZycsXG4gICAgJ3RyaWNrbGUnLFxuICAgICd0cmlja3N0ZXInLFxuICAgICd0cmlja3knLFxuICAgICd0cmljb2xvcicsXG4gICAgJ3RyaWN5Y2xlJyxcbiAgICAndHJpZGVudCcsXG4gICAgJ3RyaWVkJyxcbiAgICAndHJpZmxlJyxcbiAgICAndHJpZm9jYWxzJyxcbiAgICAndHJpbGxpb24nLFxuICAgICd0cmlsb2d5JyxcbiAgICAndHJpbWVzdGVyJyxcbiAgICAndHJpbW1lcicsXG4gICAgJ3RyaW1taW5nJyxcbiAgICAndHJpbW5lc3MnLFxuICAgICd0cmluaXR5JyxcbiAgICAndHJpbycsXG4gICAgJ3RyaXBvZCcsXG4gICAgJ3RyaXBwaW5nJyxcbiAgICAndHJpdW1waCcsXG4gICAgJ3RyaXZpYWwnLFxuICAgICd0cm9kZGVuJyxcbiAgICAndHJvbGxpbmcnLFxuICAgICd0cm9tYm9uZScsXG4gICAgJ3Ryb3BoeScsXG4gICAgJ3Ryb3BpY2FsJyxcbiAgICAndHJvcGljcycsXG4gICAgJ3Ryb3VibGUnLFxuICAgICd0cm91YmxpbmcnLFxuICAgICd0cm91Z2gnLFxuICAgICd0cm91c2VycycsXG4gICAgJ3Ryb3V0JyxcbiAgICAndHJvd2VsJyxcbiAgICAndHJ1Y2UnLFxuICAgICd0cnVjaycsXG4gICAgJ3RydWZmbGUnLFxuICAgICd0cnVtcCcsXG4gICAgJ3RydW5rcycsXG4gICAgJ3RydXN0YWJsZScsXG4gICAgJ3RydXN0ZWUnLFxuICAgICd0cnVzdGZ1bCcsXG4gICAgJ3RydXN0aW5nJyxcbiAgICAndHJ1c3RsZXNzJyxcbiAgICAndHJ1dGgnLFxuICAgICd0cnknLFxuICAgICd0dWJieScsXG4gICAgJ3R1YmVsZXNzJyxcbiAgICAndHVidWxhcicsXG4gICAgJ3R1Y2tpbmcnLFxuICAgICd0dWVzZGF5JyxcbiAgICAndHVnJyxcbiAgICAndHVpdGlvbicsXG4gICAgJ3R1bGlwJyxcbiAgICAndHVtYmxlJyxcbiAgICAndHVtYmxpbmcnLFxuICAgICd0dW1teScsXG4gICAgJ3R1cmJhbicsXG4gICAgJ3R1cmJpbmUnLFxuICAgICd0dXJib2ZhbicsXG4gICAgJ3R1cmJvamV0JyxcbiAgICAndHVyYnVsZW50JyxcbiAgICAndHVyZicsXG4gICAgJ3R1cmtleScsXG4gICAgJ3R1cm1vaWwnLFxuICAgICd0dXJyZXQnLFxuICAgICd0dXJ0bGUnLFxuICAgICd0dXNrJyxcbiAgICAndHV0b3InLFxuICAgICd0dXR1JyxcbiAgICAndHV4JyxcbiAgICAndHdlYWsnLFxuICAgICd0d2VlZCcsXG4gICAgJ3R3ZWV0JyxcbiAgICAndHdlZXplcnMnLFxuICAgICd0d2VsdmUnLFxuICAgICd0d2VudGlldGgnLFxuICAgICd0d2VudHknLFxuICAgICd0d2VycCcsXG4gICAgJ3R3aWNlJyxcbiAgICAndHdpZGRsZScsXG4gICAgJ3R3aWRkbGluZycsXG4gICAgJ3R3aWcnLFxuICAgICd0d2lsaWdodCcsXG4gICAgJ3R3aW5lJyxcbiAgICAndHdpbnMnLFxuICAgICd0d2lybCcsXG4gICAgJ3R3aXN0YWJsZScsXG4gICAgJ3R3aXN0ZWQnLFxuICAgICd0d2lzdGVyJyxcbiAgICAndHdpc3RpbmcnLFxuICAgICd0d2lzdHknLFxuICAgICd0d2l0Y2gnLFxuICAgICd0d2l0dGVyJyxcbiAgICAndHljb29uJyxcbiAgICAndHlpbmcnLFxuICAgICd0eWtlJyxcbiAgICAndWRkZXInLFxuICAgICd1bHRpbWF0ZScsXG4gICAgJ3VsdGltYXR1bScsXG4gICAgJ3VsdHJhJyxcbiAgICAndW1iaWxpY2FsJyxcbiAgICAndW1icmVsbGEnLFxuICAgICd1bXBpcmUnLFxuICAgICd1bmFiYXNoZWQnLFxuICAgICd1bmFibGUnLFxuICAgICd1bmFkb3JuZWQnLFxuICAgICd1bmFkdmlzZWQnLFxuICAgICd1bmFmcmFpZCcsXG4gICAgJ3VuYWlyZWQnLFxuICAgICd1bmFsaWduZWQnLFxuICAgICd1bmFsdGVyZWQnLFxuICAgICd1bmFybW9yZWQnLFxuICAgICd1bmFzaGFtZWQnLFxuICAgICd1bmF1ZGl0ZWQnLFxuICAgICd1bmF3YWtlJyxcbiAgICAndW5hd2FyZScsXG4gICAgJ3VuYmFrZWQnLFxuICAgICd1bmJhbGFuY2UnLFxuICAgICd1bmJlYXRlbicsXG4gICAgJ3VuYmVuZCcsXG4gICAgJ3VuYmVudCcsXG4gICAgJ3VuYmlhc2VkJyxcbiAgICAndW5iaXR0ZW4nLFxuICAgICd1bmJsZW5kZWQnLFxuICAgICd1bmJsZXNzZWQnLFxuICAgICd1bmJsb2NrJyxcbiAgICAndW5ib2x0ZWQnLFxuICAgICd1bmJvdW5kZWQnLFxuICAgICd1bmJveGVkJyxcbiAgICAndW5icmFpZGVkJyxcbiAgICAndW5icmlkbGUnLFxuICAgICd1bmJyb2tlbicsXG4gICAgJ3VuYnVja2xlZCcsXG4gICAgJ3VuYnVuZGxlJyxcbiAgICAndW5idXJuZWQnLFxuICAgICd1bmJ1dHRvbicsXG4gICAgJ3VuY2FubnknLFxuICAgICd1bmNhcHBlZCcsXG4gICAgJ3VuY2FyaW5nJyxcbiAgICAndW5jZXJ0YWluJyxcbiAgICAndW5jaGFpbicsXG4gICAgJ3VuY2hhbmdlZCcsXG4gICAgJ3VuY2hhcnRlZCcsXG4gICAgJ3VuY2hlY2snLFxuICAgICd1bmNpdmlsJyxcbiAgICAndW5jbGFkJyxcbiAgICAndW5jbGFpbWVkJyxcbiAgICAndW5jbGFtcGVkJyxcbiAgICAndW5jbGFzcCcsXG4gICAgJ3VuY2xlJyxcbiAgICAndW5jbGlwJyxcbiAgICAndW5jbG9haycsXG4gICAgJ3VuY2xvZycsXG4gICAgJ3VuY2xvdGhlZCcsXG4gICAgJ3VuY29hdGVkJyxcbiAgICAndW5jb2lsZWQnLFxuICAgICd1bmNvbG9yZWQnLFxuICAgICd1bmNvbWJlZCcsXG4gICAgJ3VuY29tbW9uJyxcbiAgICAndW5jb29rZWQnLFxuICAgICd1bmNvcmsnLFxuICAgICd1bmNvcnJ1cHQnLFxuICAgICd1bmNvdW50ZWQnLFxuICAgICd1bmNvdXBsZScsXG4gICAgJ3VuY291dGgnLFxuICAgICd1bmNvdmVyJyxcbiAgICAndW5jcm9zcycsXG4gICAgJ3VuY3Jvd24nLFxuICAgICd1bmNydXNoZWQnLFxuICAgICd1bmN1cmVkJyxcbiAgICAndW5jdXJpb3VzJyxcbiAgICAndW5jdXJsZWQnLFxuICAgICd1bmN1dCcsXG4gICAgJ3VuZGFtYWdlZCcsXG4gICAgJ3VuZGF0ZWQnLFxuICAgICd1bmRhdW50ZWQnLFxuICAgICd1bmRlYWQnLFxuICAgICd1bmRlY2lkZWQnLFxuICAgICd1bmRlZmluZWQnLFxuICAgICd1bmRlcmFnZScsXG4gICAgJ3VuZGVyYXJtJyxcbiAgICAndW5kZXJjb2F0JyxcbiAgICAndW5kZXJjb29rJyxcbiAgICAndW5kZXJjdXQnLFxuICAgICd1bmRlcmRvZycsXG4gICAgJ3VuZGVyZG9uZScsXG4gICAgJ3VuZGVyZmVkJyxcbiAgICAndW5kZXJmZWVkJyxcbiAgICAndW5kZXJmb290JyxcbiAgICAndW5kZXJnbycsXG4gICAgJ3VuZGVyZ3JhZCcsXG4gICAgJ3VuZGVyaGFuZCcsXG4gICAgJ3VuZGVybGluZScsXG4gICAgJ3VuZGVybGluZycsXG4gICAgJ3VuZGVybWluZScsXG4gICAgJ3VuZGVybW9zdCcsXG4gICAgJ3VuZGVycGFpZCcsXG4gICAgJ3VuZGVycGFzcycsXG4gICAgJ3VuZGVycGF5JyxcbiAgICAndW5kZXJyYXRlJyxcbiAgICAndW5kZXJ0YWtlJyxcbiAgICAndW5kZXJ0b25lJyxcbiAgICAndW5kZXJ0b29rJyxcbiAgICAndW5kZXJ0b3cnLFxuICAgICd1bmRlcnVzZScsXG4gICAgJ3VuZGVyd2VhcicsXG4gICAgJ3VuZGVyd2VudCcsXG4gICAgJ3VuZGVyd2lyZScsXG4gICAgJ3VuZGVzaXJlZCcsXG4gICAgJ3VuZGlsdXRlZCcsXG4gICAgJ3VuZGl2aWRlZCcsXG4gICAgJ3VuZG9ja2VkJyxcbiAgICAndW5kb2luZycsXG4gICAgJ3VuZG9uZScsXG4gICAgJ3VuZHJhZnRlZCcsXG4gICAgJ3VuZHJlc3MnLFxuICAgICd1bmRyaWxsZWQnLFxuICAgICd1bmR1c3RlZCcsXG4gICAgJ3VuZHlpbmcnLFxuICAgICd1bmVhcm5lZCcsXG4gICAgJ3VuZWFydGgnLFxuICAgICd1bmVhc2UnLFxuICAgICd1bmVhc2lseScsXG4gICAgJ3VuZWFzeScsXG4gICAgJ3VuZWF0YWJsZScsXG4gICAgJ3VuZWF0ZW4nLFxuICAgICd1bmVkaXRlZCcsXG4gICAgJ3VuZWxlY3RlZCcsXG4gICAgJ3VuZW5kaW5nJyxcbiAgICAndW5lbmdhZ2VkJyxcbiAgICAndW5lbnZpZWQnLFxuICAgICd1bmVxdWFsJyxcbiAgICAndW5ldGhpY2FsJyxcbiAgICAndW5ldmVuJyxcbiAgICAndW5leHBpcmVkJyxcbiAgICAndW5leHBvc2VkJyxcbiAgICAndW5mYWlsaW5nJyxcbiAgICAndW5mYWlyJyxcbiAgICAndW5mYXN0ZW4nLFxuICAgICd1bmZhemVkJyxcbiAgICAndW5mZWVsaW5nJyxcbiAgICAndW5maWxlZCcsXG4gICAgJ3VuZmlsbGVkJyxcbiAgICAndW5maXR0ZWQnLFxuICAgICd1bmZpdHRpbmcnLFxuICAgICd1bmZpeGFibGUnLFxuICAgICd1bmZpeGVkJyxcbiAgICAndW5mbGF3ZWQnLFxuICAgICd1bmZvY3VzZWQnLFxuICAgICd1bmZvbGQnLFxuICAgICd1bmZvdW5kZWQnLFxuICAgICd1bmZyYW1lZCcsXG4gICAgJ3VuZnJlZXplJyxcbiAgICAndW5mcm9zdGVkJyxcbiAgICAndW5mcm96ZW4nLFxuICAgICd1bmZ1bmRlZCcsXG4gICAgJ3VuZ2xhemVkJyxcbiAgICAndW5nbG92ZWQnLFxuICAgICd1bmdsdWUnLFxuICAgICd1bmdvZGx5JyxcbiAgICAndW5ncmFkZWQnLFxuICAgICd1bmdyZWFzZWQnLFxuICAgICd1bmd1YXJkZWQnLFxuICAgICd1bmd1aWRlZCcsXG4gICAgJ3VuaGFwcGlseScsXG4gICAgJ3VuaGFwcHknLFxuICAgICd1bmhhcm1lZCcsXG4gICAgJ3VuaGVhbHRoeScsXG4gICAgJ3VuaGVhcmQnLFxuICAgICd1bmhlYXJpbmcnLFxuICAgICd1bmhlYXRlZCcsXG4gICAgJ3VuaGVscGZ1bCcsXG4gICAgJ3VuaGlkZGVuJyxcbiAgICAndW5oaW5nZScsXG4gICAgJ3VuaGl0Y2hlZCcsXG4gICAgJ3VuaG9seScsXG4gICAgJ3VuaG9vaycsXG4gICAgJ3VuaWNvcm4nLFxuICAgICd1bmljeWNsZScsXG4gICAgJ3VuaWZpZWQnLFxuICAgICd1bmlmaWVyJyxcbiAgICAndW5pZm9ybWVkJyxcbiAgICAndW5pZm9ybWx5JyxcbiAgICAndW5pZnknLFxuICAgICd1bmltcGVkZWQnLFxuICAgICd1bmluanVyZWQnLFxuICAgICd1bmluc3RhbGwnLFxuICAgICd1bmluc3VyZWQnLFxuICAgICd1bmludml0ZWQnLFxuICAgICd1bmlvbicsXG4gICAgJ3VuaXF1ZWx5JyxcbiAgICAndW5pc2V4dWFsJyxcbiAgICAndW5pc29uJyxcbiAgICAndW5pc3N1ZWQnLFxuICAgICd1bml0JyxcbiAgICAndW5pdmVyc2FsJyxcbiAgICAndW5pdmVyc2UnLFxuICAgICd1bmp1c3RseScsXG4gICAgJ3Vua2VtcHQnLFxuICAgICd1bmtpbmQnLFxuICAgICd1bmtub3R0ZWQnLFxuICAgICd1bmtub3dpbmcnLFxuICAgICd1bmtub3duJyxcbiAgICAndW5sYWNlZCcsXG4gICAgJ3VubGF0Y2gnLFxuICAgICd1bmxhd2Z1bCcsXG4gICAgJ3VubGVhZGVkJyxcbiAgICAndW5sZWFybmVkJyxcbiAgICAndW5sZWFzaCcsXG4gICAgJ3VubGVzcycsXG4gICAgJ3VubGV2ZWxlZCcsXG4gICAgJ3VubGlnaHRlZCcsXG4gICAgJ3VubGlrYWJsZScsXG4gICAgJ3VubGltaXRlZCcsXG4gICAgJ3VubGluZWQnLFxuICAgICd1bmxpbmtlZCcsXG4gICAgJ3VubGlzdGVkJyxcbiAgICAndW5saXQnLFxuICAgICd1bmxpdmFibGUnLFxuICAgICd1bmxvYWRlZCcsXG4gICAgJ3VubG9hZGVyJyxcbiAgICAndW5sb2NrZWQnLFxuICAgICd1bmxvY2tpbmcnLFxuICAgICd1bmxvdmFibGUnLFxuICAgICd1bmxvdmVkJyxcbiAgICAndW5sb3ZlbHknLFxuICAgICd1bmxvdmluZycsXG4gICAgJ3VubHVja2lseScsXG4gICAgJ3VubHVja3knLFxuICAgICd1bm1hZGUnLFxuICAgICd1bm1hbmFnZWQnLFxuICAgICd1bm1hbm5lZCcsXG4gICAgJ3VubWFwcGVkJyxcbiAgICAndW5tYXJrZWQnLFxuICAgICd1bm1hc2tlZCcsXG4gICAgJ3VubWFza2luZycsXG4gICAgJ3VubWF0Y2hlZCcsXG4gICAgJ3VubWluZGZ1bCcsXG4gICAgJ3VubWl4YWJsZScsXG4gICAgJ3VubWl4ZWQnLFxuICAgICd1bm1vbGRlZCcsXG4gICAgJ3VubW9yYWwnLFxuICAgICd1bm1vdmFibGUnLFxuICAgICd1bm1vdmVkJyxcbiAgICAndW5tb3ZpbmcnLFxuICAgICd1bm5hbWFibGUnLFxuICAgICd1bm5hbWVkJyxcbiAgICAndW5uYXR1cmFsJyxcbiAgICAndW5uZWVkZWQnLFxuICAgICd1bm5lcnZlJyxcbiAgICAndW5uZXJ2aW5nJyxcbiAgICAndW5ub3RpY2VkJyxcbiAgICAndW5vcGVuZWQnLFxuICAgICd1bm9wcG9zZWQnLFxuICAgICd1bnBhY2snLFxuICAgICd1bnBhZGRlZCcsXG4gICAgJ3VucGFpZCcsXG4gICAgJ3VucGFpbnRlZCcsXG4gICAgJ3VucGFpcmVkJyxcbiAgICAndW5wYXZlZCcsXG4gICAgJ3VucGVlbGVkJyxcbiAgICAndW5waWNrZWQnLFxuICAgICd1bnBpbG90ZWQnLFxuICAgICd1bnBpbm5lZCcsXG4gICAgJ3VucGxhbm5lZCcsXG4gICAgJ3VucGxhbnRlZCcsXG4gICAgJ3VucGxlYXNlZCcsXG4gICAgJ3VucGxlZGdlZCcsXG4gICAgJ3VucGxvd2VkJyxcbiAgICAndW5wbHVnJyxcbiAgICAndW5wb3B1bGFyJyxcbiAgICAndW5wcm92ZW4nLFxuICAgICd1bnF1b3RlJyxcbiAgICAndW5yYW5rZWQnLFxuICAgICd1bnJhdGVkJyxcbiAgICAndW5yYXZlbGVkJyxcbiAgICAndW5yZWFjaGVkJyxcbiAgICAndW5yZWFkJyxcbiAgICAndW5yZWFsJyxcbiAgICAndW5yZWVsaW5nJyxcbiAgICAndW5yZWZpbmVkJyxcbiAgICAndW5yZWxhdGVkJyxcbiAgICAndW5yZW50ZWQnLFxuICAgICd1bnJlc3QnLFxuICAgICd1bnJldGlyZWQnLFxuICAgICd1bnJldmlzZWQnLFxuICAgICd1bnJpZ2dlZCcsXG4gICAgJ3VucmlwZScsXG4gICAgJ3Vucml2YWxlZCcsXG4gICAgJ3Vucm9hc3RlZCcsXG4gICAgJ3Vucm9iZWQnLFxuICAgICd1bnJvbGwnLFxuICAgICd1bnJ1ZmZsZWQnLFxuICAgICd1bnJ1bHknLFxuICAgICd1bnJ1c2hlZCcsXG4gICAgJ3Vuc2FkZGxlJyxcbiAgICAndW5zYWZlJyxcbiAgICAndW5zYWlkJyxcbiAgICAndW5zYWx0ZWQnLFxuICAgICd1bnNhdmVkJyxcbiAgICAndW5zYXZvcnknLFxuICAgICd1bnNjYXRoZWQnLFxuICAgICd1bnNjZW50ZWQnLFxuICAgICd1bnNjcmV3JyxcbiAgICAndW5zZWFsZWQnLFxuICAgICd1bnNlYXRlZCcsXG4gICAgJ3Vuc2VjdXJlZCcsXG4gICAgJ3Vuc2VlaW5nJyxcbiAgICAndW5zZWVtbHknLFxuICAgICd1bnNlZW4nLFxuICAgICd1bnNlbGVjdCcsXG4gICAgJ3Vuc2VsZmlzaCcsXG4gICAgJ3Vuc2VudCcsXG4gICAgJ3Vuc2V0dGxlZCcsXG4gICAgJ3Vuc2hhY2tsZScsXG4gICAgJ3Vuc2hha2VuJyxcbiAgICAndW5zaGF2ZWQnLFxuICAgICd1bnNoYXZlbicsXG4gICAgJ3Vuc2hlYXRoZScsXG4gICAgJ3Vuc2hpcHBlZCcsXG4gICAgJ3Vuc2lnaHRseScsXG4gICAgJ3Vuc2lnbmVkJyxcbiAgICAndW5za2lsbGVkJyxcbiAgICAndW5zbGljZWQnLFxuICAgICd1bnNtb290aCcsXG4gICAgJ3Vuc25hcCcsXG4gICAgJ3Vuc29jaWFsJyxcbiAgICAndW5zb2lsZWQnLFxuICAgICd1bnNvbGQnLFxuICAgICd1bnNvbHZlZCcsXG4gICAgJ3Vuc29ydGVkJyxcbiAgICAndW5zcG9pbGVkJyxcbiAgICAndW5zcG9rZW4nLFxuICAgICd1bnN0YWJsZScsXG4gICAgJ3Vuc3RhZmZlZCcsXG4gICAgJ3Vuc3RhbXBlZCcsXG4gICAgJ3Vuc3RlYWR5JyxcbiAgICAndW5zdGVyaWxlJyxcbiAgICAndW5zdGlycmVkJyxcbiAgICAndW5zdGl0Y2gnLFxuICAgICd1bnN0b3BwZWQnLFxuICAgICd1bnN0dWNrJyxcbiAgICAndW5zdHVmZmVkJyxcbiAgICAndW5zdHlsaXNoJyxcbiAgICAndW5zdWJ0bGUnLFxuICAgICd1bnN1YnRseScsXG4gICAgJ3Vuc3VpdGVkJyxcbiAgICAndW5zdXJlJyxcbiAgICAndW5zd29ybicsXG4gICAgJ3VudGFnZ2VkJyxcbiAgICAndW50YWludGVkJyxcbiAgICAndW50YWtlbicsXG4gICAgJ3VudGFtZWQnLFxuICAgICd1bnRhbmdsZWQnLFxuICAgICd1bnRhcHBlZCcsXG4gICAgJ3VudGF4ZWQnLFxuICAgICd1bnRoYXdlZCcsXG4gICAgJ3VudGhyZWFkJyxcbiAgICAndW50aWR5JyxcbiAgICAndW50aWUnLFxuICAgICd1bnRpbCcsXG4gICAgJ3VudGltZWQnLFxuICAgICd1bnRpbWVseScsXG4gICAgJ3VudGl0bGVkJyxcbiAgICAndW50b2FzdGVkJyxcbiAgICAndW50b2xkJyxcbiAgICAndW50b3VjaGVkJyxcbiAgICAndW50cmFja2VkJyxcbiAgICAndW50cmFpbmVkJyxcbiAgICAndW50cmVhdGVkJyxcbiAgICAndW50cmllZCcsXG4gICAgJ3VudHJpbW1lZCcsXG4gICAgJ3VudHJ1ZScsXG4gICAgJ3VudHJ1dGgnLFxuICAgICd1bnR1cm5lZCcsXG4gICAgJ3VudHdpc3QnLFxuICAgICd1bnR5aW5nJyxcbiAgICAndW51c2FibGUnLFxuICAgICd1bnVzZWQnLFxuICAgICd1bnVzdWFsJyxcbiAgICAndW52YWx1ZWQnLFxuICAgICd1bnZhcmllZCcsXG4gICAgJ3VudmFyeWluZycsXG4gICAgJ3VudmVpbGVkJyxcbiAgICAndW52ZWlsaW5nJyxcbiAgICAndW52ZW50ZWQnLFxuICAgICd1bnZpYWJsZScsXG4gICAgJ3VudmlzaXRlZCcsXG4gICAgJ3Vudm9jYWwnLFxuICAgICd1bndhbnRlZCcsXG4gICAgJ3Vud2FybGlrZScsXG4gICAgJ3Vud2FyeScsXG4gICAgJ3Vud2FzaGVkJyxcbiAgICAndW53YXRjaGVkJyxcbiAgICAndW53ZWF2ZScsXG4gICAgJ3Vud2VkJyxcbiAgICAndW53ZWxjb21lJyxcbiAgICAndW53ZWxsJyxcbiAgICAndW53aWVsZHknLFxuICAgICd1bndpbGxpbmcnLFxuICAgICd1bndpbmQnLFxuICAgICd1bndpcmVkJyxcbiAgICAndW53aXR0aW5nJyxcbiAgICAndW53b21hbmx5JyxcbiAgICAndW53b3JsZGx5JyxcbiAgICAndW53b3JuJyxcbiAgICAndW53b3JyaWVkJyxcbiAgICAndW53b3J0aHknLFxuICAgICd1bndvdW5kJyxcbiAgICAndW53b3ZlbicsXG4gICAgJ3Vud3JhcHBlZCcsXG4gICAgJ3Vud3JpdHRlbicsXG4gICAgJ3VuemlwJyxcbiAgICAndXBiZWF0JyxcbiAgICAndXBjaHVjaycsXG4gICAgJ3VwY29taW5nJyxcbiAgICAndXBjb3VudHJ5JyxcbiAgICAndXBkYXRlJyxcbiAgICAndXBmcm9udCcsXG4gICAgJ3VwZ3JhZGUnLFxuICAgICd1cGhlYXZhbCcsXG4gICAgJ3VwaGVsZCcsXG4gICAgJ3VwaGlsbCcsXG4gICAgJ3VwaG9sZCcsXG4gICAgJ3VwbGlmdGVkJyxcbiAgICAndXBsaWZ0aW5nJyxcbiAgICAndXBsb2FkJyxcbiAgICAndXBvbicsXG4gICAgJ3VwcGVyJyxcbiAgICAndXByaWdodCcsXG4gICAgJ3VwcmlzaW5nJyxcbiAgICAndXByaXZlcicsXG4gICAgJ3Vwcm9hcicsXG4gICAgJ3Vwcm9vdCcsXG4gICAgJ3Vwc2NhbGUnLFxuICAgICd1cHNpZGUnLFxuICAgICd1cHN0YWdlJyxcbiAgICAndXBzdGFpcnMnLFxuICAgICd1cHN0YXJ0JyxcbiAgICAndXBzdGF0ZScsXG4gICAgJ3Vwc3RyZWFtJyxcbiAgICAndXBzdHJva2UnLFxuICAgICd1cHN3aW5nJyxcbiAgICAndXB0YWtlJyxcbiAgICAndXB0aWdodCcsXG4gICAgJ3VwdG93bicsXG4gICAgJ3VwdHVybmVkJyxcbiAgICAndXB3YXJkJyxcbiAgICAndXB3aW5kJyxcbiAgICAndXJhbml1bScsXG4gICAgJ3VyYmFuJyxcbiAgICAndXJjaGluJyxcbiAgICAndXJldGhhbmUnLFxuICAgICd1cmdlbmN5JyxcbiAgICAndXJnZW50JyxcbiAgICAndXJnaW5nJyxcbiAgICAndXJvbG9naXN0JyxcbiAgICAndXJvbG9neScsXG4gICAgJ3VzYWJsZScsXG4gICAgJ3VzYWdlJyxcbiAgICAndXNlYWJsZScsXG4gICAgJ3VzZWQnLFxuICAgICd1c2VsZXNzbHknLFxuICAgICd1c2VyJyxcbiAgICAndXNoZXInLFxuICAgICd1c3VhbCcsXG4gICAgJ3V0ZW5zaWwnLFxuICAgICd1dGlsaXR5JyxcbiAgICAndXRpbGl6ZScsXG4gICAgJ3V0bW9zdCcsXG4gICAgJ3V0b3BpYScsXG4gICAgJ3V0dGVyJyxcbiAgICAndmFjYW5jeScsXG4gICAgJ3ZhY2FudCcsXG4gICAgJ3ZhY2F0ZScsXG4gICAgJ3ZhY2F0aW9uJyxcbiAgICAndmFnYWJvbmQnLFxuICAgICd2YWdyYW5jeScsXG4gICAgJ3ZhZ3JhbnRseScsXG4gICAgJ3ZhZ3VlbHknLFxuICAgICd2YWd1ZW5lc3MnLFxuICAgICd2YWxpYW50JyxcbiAgICAndmFsaWQnLFxuICAgICd2YWxpdW0nLFxuICAgICd2YWxsZXknLFxuICAgICd2YWx1YWJsZXMnLFxuICAgICd2YWx1ZScsXG4gICAgJ3ZhbmlsbGEnLFxuICAgICd2YW5pc2gnLFxuICAgICd2YW5pdHknLFxuICAgICd2YW5xdWlzaCcsXG4gICAgJ3ZhbnRhZ2UnLFxuICAgICd2YXBvcml6ZXInLFxuICAgICd2YXJpYWJsZScsXG4gICAgJ3ZhcmlhYmx5JyxcbiAgICAndmFyaWVkJyxcbiAgICAndmFyaWV0eScsXG4gICAgJ3ZhcmlvdXMnLFxuICAgICd2YXJtaW50JyxcbiAgICAndmFybmlzaCcsXG4gICAgJ3ZhcnNpdHknLFxuICAgICd2YXJ5aW5nJyxcbiAgICAndmFzY3VsYXInLFxuICAgICd2YXNlbGluZScsXG4gICAgJ3Zhc3RseScsXG4gICAgJ3Zhc3RuZXNzJyxcbiAgICAndmVhbCcsXG4gICAgJ3ZlZ2FuJyxcbiAgICAndmVnZ2llJyxcbiAgICAndmVoaWN1bGFyJyxcbiAgICAndmVsY3JvJyxcbiAgICAndmVsb2NpdHknLFxuICAgICd2ZWx2ZXQnLFxuICAgICd2ZW5kZXR0YScsXG4gICAgJ3ZlbmRpbmcnLFxuICAgICd2ZW5kb3InLFxuICAgICd2ZW5lZXJpbmcnLFxuICAgICd2ZW5nZWZ1bCcsXG4gICAgJ3Zlbm9tb3VzJyxcbiAgICAndmVudHJpY2xlJyxcbiAgICAndmVudHVyZScsXG4gICAgJ3ZlbnVlJyxcbiAgICAndmVudXMnLFxuICAgICd2ZXJiYWxpemUnLFxuICAgICd2ZXJiYWxseScsXG4gICAgJ3ZlcmJvc2UnLFxuICAgICd2ZXJkaWN0JyxcbiAgICAndmVyaWZ5JyxcbiAgICAndmVyc2UnLFxuICAgICd2ZXJzaW9uJyxcbiAgICAndmVyc3VzJyxcbiAgICAndmVydGVicmFlJyxcbiAgICAndmVydGljYWwnLFxuICAgICd2ZXJ0aWdvJyxcbiAgICAndmVyeScsXG4gICAgJ3Zlc3NlbCcsXG4gICAgJ3Zlc3QnLFxuICAgICd2ZXRlcmFuJyxcbiAgICAndmV0bycsXG4gICAgJ3ZleGluZ2x5JyxcbiAgICAndmlhYmlsaXR5JyxcbiAgICAndmlhYmxlJyxcbiAgICAndmliZXMnLFxuICAgICd2aWNlJyxcbiAgICAndmljaW5pdHknLFxuICAgICd2aWN0b3J5JyxcbiAgICAndmlkZW8nLFxuICAgICd2aWV3YWJsZScsXG4gICAgJ3ZpZXdlcicsXG4gICAgJ3ZpZXdpbmcnLFxuICAgICd2aWV3bGVzcycsXG4gICAgJ3ZpZXdwb2ludCcsXG4gICAgJ3ZpZ29yb3VzJyxcbiAgICAndmlsbGFnZScsXG4gICAgJ3ZpbGxhaW4nLFxuICAgICd2aW5kaWNhdGUnLFxuICAgICd2aW5leWFyZCcsXG4gICAgJ3ZpbnRhZ2UnLFxuICAgICd2aW9sYXRlJyxcbiAgICAndmlvbGF0aW9uJyxcbiAgICAndmlvbGF0b3InLFxuICAgICd2aW9sZXQnLFxuICAgICd2aW9saW4nLFxuICAgICd2aXBlcicsXG4gICAgJ3ZpcmFsJyxcbiAgICAndmlydHVhbCcsXG4gICAgJ3ZpcnR1b3VzJyxcbiAgICAndmlydXMnLFxuICAgICd2aXNhJyxcbiAgICAndmlzY29zaXR5JyxcbiAgICAndmlzY291cycsXG4gICAgJ3Zpc2VsaWtlJyxcbiAgICAndmlzaWJsZScsXG4gICAgJ3Zpc2libHknLFxuICAgICd2aXNpb24nLFxuICAgICd2aXNpdGluZycsXG4gICAgJ3Zpc2l0b3InLFxuICAgICd2aXNvcicsXG4gICAgJ3Zpc3RhJyxcbiAgICAndml0YWxpdHknLFxuICAgICd2aXRhbGl6ZScsXG4gICAgJ3ZpdGFsbHknLFxuICAgICd2aXRhbWlucycsXG4gICAgJ3ZpdmFjaW91cycsXG4gICAgJ3ZpdmlkbHknLFxuICAgICd2aXZpZG5lc3MnLFxuICAgICd2aXhlbicsXG4gICAgJ3ZvY2FsaXN0JyxcbiAgICAndm9jYWxpemUnLFxuICAgICd2b2NhbGx5JyxcbiAgICAndm9jYXRpb24nLFxuICAgICd2b2ljZScsXG4gICAgJ3ZvaWNpbmcnLFxuICAgICd2b2lkJyxcbiAgICAndm9sYXRpbGUnLFxuICAgICd2b2xsZXknLFxuICAgICd2b2x0YWdlJyxcbiAgICAndm9sdW1lcycsXG4gICAgJ3ZvdGVyJyxcbiAgICAndm90aW5nJyxcbiAgICAndm91Y2hlcicsXG4gICAgJ3Zvd2VkJyxcbiAgICAndm93ZWwnLFxuICAgICd2b3lhZ2UnLFxuICAgICd3YWNraW5lc3MnLFxuICAgICd3YWQnLFxuICAgICd3YWZlcicsXG4gICAgJ3dhZmZsZScsXG4gICAgJ3dhZ2VkJyxcbiAgICAnd2FnZXInLFxuICAgICd3YWdlcycsXG4gICAgJ3dhZ2dsZScsXG4gICAgJ3dhZ29uJyxcbiAgICAnd2FrZScsXG4gICAgJ3dha2luZycsXG4gICAgJ3dhbGsnLFxuICAgICd3YWxtYXJ0JyxcbiAgICAnd2FsbnV0JyxcbiAgICAnd2FscnVzJyxcbiAgICAnd2FsdHonLFxuICAgICd3YW5kJyxcbiAgICAnd2FubmFiZScsXG4gICAgJ3dhbnRlZCcsXG4gICAgJ3dhbnRpbmcnLFxuICAgICd3YXNhYmknLFxuICAgICd3YXNoYWJsZScsXG4gICAgJ3dhc2hiYXNpbicsXG4gICAgJ3dhc2hib2FyZCcsXG4gICAgJ3dhc2hib3dsJyxcbiAgICAnd2FzaGNsb3RoJyxcbiAgICAnd2FzaGRheScsXG4gICAgJ3dhc2hlZCcsXG4gICAgJ3dhc2hlcicsXG4gICAgJ3dhc2hob3VzZScsXG4gICAgJ3dhc2hpbmcnLFxuICAgICd3YXNob3V0JyxcbiAgICAnd2FzaHJvb20nLFxuICAgICd3YXNoc3RhbmQnLFxuICAgICd3YXNodHViJyxcbiAgICAnd2FzcCcsXG4gICAgJ3dhc3RpbmcnLFxuICAgICd3YXRjaCcsXG4gICAgJ3dhdGVyJyxcbiAgICAnd2F2aW5lc3MnLFxuICAgICd3YXZpbmcnLFxuICAgICd3YXZ5JyxcbiAgICAnd2hhY2tpbmcnLFxuICAgICd3aGFja3knLFxuICAgICd3aGFtJyxcbiAgICAnd2hhcmYnLFxuICAgICd3aGVhdCcsXG4gICAgJ3doZW5ldmVyJyxcbiAgICAnd2hpZmYnLFxuICAgICd3aGltc2ljYWwnLFxuICAgICd3aGlubnknLFxuICAgICd3aGlueScsXG4gICAgJ3doaXNraW5nJyxcbiAgICAnd2hvZXZlcicsXG4gICAgJ3dob2xlJyxcbiAgICAnd2hvbWV2ZXInLFxuICAgICd3aG9vcGVlJyxcbiAgICAnd2hvb3BpbmcnLFxuICAgICd3aG9vcHMnLFxuICAgICd3aHknLFxuICAgICd3aWNrJyxcbiAgICAnd2lkZWx5JyxcbiAgICAnd2lkZW4nLFxuICAgICd3aWRnZXQnLFxuICAgICd3aWRvdycsXG4gICAgJ3dpZHRoJyxcbiAgICAnd2llbGRhYmxlJyxcbiAgICAnd2llbGRlcicsXG4gICAgJ3dpZmUnLFxuICAgICd3aWZpJyxcbiAgICAnd2lraXBlZGlhJyxcbiAgICAnd2lsZGNhcmQnLFxuICAgICd3aWxkY2F0JyxcbiAgICAnd2lsZGVyJyxcbiAgICAnd2lsZGZpcmUnLFxuICAgICd3aWxkZm93bCcsXG4gICAgJ3dpbGRsYW5kJyxcbiAgICAnd2lsZGxpZmUnLFxuICAgICd3aWxkbHknLFxuICAgICd3aWxkbmVzcycsXG4gICAgJ3dpbGxlZCcsXG4gICAgJ3dpbGxmdWxseScsXG4gICAgJ3dpbGxpbmcnLFxuICAgICd3aWxsb3cnLFxuICAgICd3aWxscG93ZXInLFxuICAgICd3aWx0JyxcbiAgICAnd2ltcCcsXG4gICAgJ3dpbmNlJyxcbiAgICAnd2luY2luZycsXG4gICAgJ3dpbmQnLFxuICAgICd3aW5nJyxcbiAgICAnd2lua2luZycsXG4gICAgJ3dpbm5lcicsXG4gICAgJ3dpbm5pbmdzJyxcbiAgICAnd2ludGVyJyxcbiAgICAnd2lwZScsXG4gICAgJ3dpcmVkJyxcbiAgICAnd2lyZWxlc3MnLFxuICAgICd3aXJpbmcnLFxuICAgICd3aXJ5JyxcbiAgICAnd2lzZG9tJyxcbiAgICAnd2lzZScsXG4gICAgJ3dpc2gnLFxuICAgICd3aXNwbGlrZScsXG4gICAgJ3dpc3B5JyxcbiAgICAnd2lzdGZ1bCcsXG4gICAgJ3dpemFyZCcsXG4gICAgJ3dvYmJsZScsXG4gICAgJ3dvYmJsaW5nJyxcbiAgICAnd29iYmx5JyxcbiAgICAnd29rJyxcbiAgICAnd29sZicsXG4gICAgJ3dvbHZlcmluZScsXG4gICAgJ3dvbWFuaG9vZCcsXG4gICAgJ3dvbWFua2luZCcsXG4gICAgJ3dvbWFubGVzcycsXG4gICAgJ3dvbWFubGlrZScsXG4gICAgJ3dvbWFubHknLFxuICAgICd3b21iJyxcbiAgICAnd29vZicsXG4gICAgJ3dvb2luZycsXG4gICAgJ3dvb2wnLFxuICAgICd3b296eScsXG4gICAgJ3dvcmQnLFxuICAgICd3b3JrJyxcbiAgICAnd29ycmllZCcsXG4gICAgJ3dvcnJpZXInLFxuICAgICd3b3JyaXNvbWUnLFxuICAgICd3b3JyeScsXG4gICAgJ3dvcnNlbmluZycsXG4gICAgJ3dvcnNoaXBlcicsXG4gICAgJ3dvcnN0JyxcbiAgICAnd291bmQnLFxuICAgICd3b3ZlbicsXG4gICAgJ3dvdycsXG4gICAgJ3dyYW5nbGUnLFxuICAgICd3cmF0aCcsXG4gICAgJ3dyZWF0aCcsXG4gICAgJ3dyZWNrYWdlJyxcbiAgICAnd3JlY2tlcicsXG4gICAgJ3dyZWNraW5nJyxcbiAgICAnd3JlbmNoJyxcbiAgICAnd3JpZ2dsZScsXG4gICAgJ3dyaWdnbHknLFxuICAgICd3cmlua2xlJyxcbiAgICAnd3JpbmtseScsXG4gICAgJ3dyaXN0JyxcbiAgICAnd3JpdGluZycsXG4gICAgJ3dyaXR0ZW4nLFxuICAgICd3cm9uZ2RvZXInLFxuICAgICd3cm9uZ2VkJyxcbiAgICAnd3JvbmdmdWwnLFxuICAgICd3cm9uZ2x5JyxcbiAgICAnd3JvbmduZXNzJyxcbiAgICAnd3JvdWdodCcsXG4gICAgJ3hib3gnLFxuICAgICd4ZXJveCcsXG4gICAgJ3lhaG9vJyxcbiAgICAneWFtJyxcbiAgICAneWFua2luZycsXG4gICAgJ3lhcHBpbmcnLFxuICAgICd5YXJkJyxcbiAgICAneWFybicsXG4gICAgJ3llYWgnLFxuICAgICd5ZWFyYm9vaycsXG4gICAgJ3llYXJsaW5nJyxcbiAgICAneWVhcmx5JyxcbiAgICAneWVhcm5pbmcnLFxuICAgICd5ZWFzdCcsXG4gICAgJ3llbGxpbmcnLFxuICAgICd5ZWxwJyxcbiAgICAneWVuJyxcbiAgICAneWVzdGVyZGF5JyxcbiAgICAneWlkZGlzaCcsXG4gICAgJ3lpZWxkJyxcbiAgICAneWluJyxcbiAgICAneWlwcGVlJyxcbiAgICAneW8teW8nLFxuICAgICd5b2RlbCcsXG4gICAgJ3lvZ2EnLFxuICAgICd5b2d1cnQnLFxuICAgICd5b25kZXInLFxuICAgICd5b3lvJyxcbiAgICAneXVtbXknLFxuICAgICd6YXAnLFxuICAgICd6ZWFsb3VzJyxcbiAgICAnemVicmEnLFxuICAgICd6ZW4nLFxuICAgICd6ZXBwZWxpbicsXG4gICAgJ3plcm8nLFxuICAgICd6ZXN0ZnVsbHknLFxuICAgICd6ZXN0eScsXG4gICAgJ3ppZ3phZ2dlZCcsXG4gICAgJ3ppcGZpbGUnLFxuICAgICd6aXBwaW5nJyxcbiAgICAnemlwcHknLFxuICAgICd6aXBzJyxcbiAgICAneml0JyxcbiAgICAnem9kaWFjJyxcbiAgICAnem9tYmllJyxcbiAgICAnem9uZScsXG4gICAgJ3pvbmluZycsXG4gICAgJ3pvb2tlZXBlcicsXG4gICAgJ3pvb2xvZ2lzdCcsXG4gICAgJ3pvb2xvZ3knLFxuICAgICd6b29tJyxcbl07XG4iLCJpbXBvcnQgKiBhcyBiaWdJbnQgZnJvbSAnYmlnLWludGVnZXInO1xuXG5pbXBvcnQgeyBFbmNyeXB0aW9uVHlwZSB9IGZyb20gJy4uL2VudW1zL2VuY3J5cHRpb25UeXBlJztcbmltcG9ydCB7IEtkZlR5cGUgfSBmcm9tICcuLi9lbnVtcy9rZGZUeXBlJztcblxuaW1wb3J0IHsgQ2lwaGVyU3RyaW5nIH0gZnJvbSAnLi4vbW9kZWxzL2RvbWFpbi9jaXBoZXJTdHJpbmcnO1xuaW1wb3J0IHsgRW5jcnlwdGVkT2JqZWN0IH0gZnJvbSAnLi4vbW9kZWxzL2RvbWFpbi9lbmNyeXB0ZWRPYmplY3QnO1xuaW1wb3J0IHsgU3ltbWV0cmljQ3J5cHRvS2V5IH0gZnJvbSAnLi4vbW9kZWxzL2RvbWFpbi9zeW1tZXRyaWNDcnlwdG9LZXknO1xuaW1wb3J0IHsgUHJvZmlsZU9yZ2FuaXphdGlvblJlc3BvbnNlIH0gZnJvbSAnLi4vbW9kZWxzL3Jlc3BvbnNlL3Byb2ZpbGVPcmdhbml6YXRpb25SZXNwb25zZSc7XG5cbmltcG9ydCB7IENyeXB0b1NlcnZpY2UgYXMgQ3J5cHRvU2VydmljZUFic3RyYWN0aW9uIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL2NyeXB0by5zZXJ2aWNlJztcbmltcG9ydCB7IENyeXB0b0Z1bmN0aW9uU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9jcnlwdG9GdW5jdGlvbi5zZXJ2aWNlJztcbmltcG9ydCB7IFBsYXRmb3JtVXRpbHNTZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL3BsYXRmb3JtVXRpbHMuc2VydmljZSc7XG5pbXBvcnQgeyBTdG9yYWdlU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9zdG9yYWdlLnNlcnZpY2UnO1xuXG5pbXBvcnQgeyBDb25zdGFudHNTZXJ2aWNlIH0gZnJvbSAnLi9jb25zdGFudHMuc2VydmljZSc7XG5cbmltcG9ydCB7IHNlcXVlbnRpYWxpemUgfSBmcm9tICcuLi9taXNjL3NlcXVlbnRpYWxpemUnO1xuaW1wb3J0IHsgVXRpbHMgfSBmcm9tICcuLi9taXNjL3V0aWxzJztcbmltcG9ydCB7IEVFRkxvbmdXb3JkTGlzdCB9IGZyb20gJy4uL21pc2Mvd29yZGxpc3QnO1xuXG5jb25zdCBLZXlzID0ge1xuICAgIGtleTogJ2tleScsIC8vIE1hc3RlciBLZXlcbiAgICBlbmNPcmdLZXlzOiAnZW5jT3JnS2V5cycsXG4gICAgZW5jUHJpdmF0ZUtleTogJ2VuY1ByaXZhdGVLZXknLFxuICAgIGVuY0tleTogJ2VuY0tleScsIC8vIEdlbmVyYXRlZCBTeW1tZXRyaWMgS2V5XG4gICAga2V5SGFzaDogJ2tleUhhc2gnLFxufTtcblxuZXhwb3J0IGNsYXNzIENyeXB0b1NlcnZpY2UgaW1wbGVtZW50cyBDcnlwdG9TZXJ2aWNlQWJzdHJhY3Rpb24ge1xuICAgIHByaXZhdGUga2V5OiBTeW1tZXRyaWNDcnlwdG9LZXk7XG4gICAgcHJpdmF0ZSBlbmNLZXk6IFN5bW1ldHJpY0NyeXB0b0tleTtcbiAgICBwcml2YXRlIGxlZ2FjeUV0bUtleTogU3ltbWV0cmljQ3J5cHRvS2V5O1xuICAgIHByaXZhdGUga2V5SGFzaDogc3RyaW5nO1xuICAgIHByaXZhdGUgcHVibGljS2V5OiBBcnJheUJ1ZmZlcjtcbiAgICBwcml2YXRlIHByaXZhdGVLZXk6IEFycmF5QnVmZmVyO1xuICAgIHByaXZhdGUgb3JnS2V5czogTWFwPHN0cmluZywgU3ltbWV0cmljQ3J5cHRvS2V5PjtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgc3RvcmFnZVNlcnZpY2U6IFN0b3JhZ2VTZXJ2aWNlLCBwcml2YXRlIHNlY3VyZVN0b3JhZ2VTZXJ2aWNlOiBTdG9yYWdlU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBjcnlwdG9GdW5jdGlvblNlcnZpY2U6IENyeXB0b0Z1bmN0aW9uU2VydmljZSwgcHJpdmF0ZSBwbGF0Zm9ybVV0aWxTZXJ2aWNlOiBQbGF0Zm9ybVV0aWxzU2VydmljZSkgeyB9XG5cbiAgICBhc3luYyBzZXRLZXkoa2V5OiBTeW1tZXRyaWNDcnlwdG9LZXkpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICB0aGlzLmtleSA9IGtleTtcblxuICAgICAgICBjb25zdCBvcHRpb24gPSBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldDxudW1iZXI+KENvbnN0YW50c1NlcnZpY2UudmF1bHRUaW1lb3V0S2V5KTtcbiAgICAgICAgY29uc3QgYmlvbWV0cmljID0gYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5nZXQ8Ym9vbGVhbj4oQ29uc3RhbnRzU2VydmljZS5iaW9tZXRyaWNVbmxvY2tLZXkpO1xuICAgICAgICBpZiAob3B0aW9uICE9IG51bGwgJiYgIShiaW9tZXRyaWMgJiYgdGhpcy5wbGF0Zm9ybVV0aWxTZXJ2aWNlLnN1cHBvcnRzU2VjdXJlU3RvcmFnZSgpKSkge1xuICAgICAgICAgICAgLy8gaWYgd2UgaGF2ZSBhIGxvY2sgb3B0aW9uIHNldCwgd2UgZG8gbm90IHN0b3JlIHRoZSBrZXlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLnNlY3VyZVN0b3JhZ2VTZXJ2aWNlLnNhdmUoS2V5cy5rZXksIGtleS5rZXlCNjQpO1xuICAgIH1cblxuICAgIHNldEtleUhhc2goa2V5SGFzaDogc3RyaW5nKTogUHJvbWlzZTx7fT4ge1xuICAgICAgICB0aGlzLmtleUhhc2ggPSBrZXlIYXNoO1xuICAgICAgICByZXR1cm4gdGhpcy5zdG9yYWdlU2VydmljZS5zYXZlKEtleXMua2V5SGFzaCwga2V5SGFzaCk7XG4gICAgfVxuXG4gICAgYXN5bmMgc2V0RW5jS2V5KGVuY0tleTogc3RyaW5nKTogUHJvbWlzZTx7fT4ge1xuICAgICAgICBpZiAoZW5jS2V5ID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2Uuc2F2ZShLZXlzLmVuY0tleSwgZW5jS2V5KTtcbiAgICAgICAgdGhpcy5lbmNLZXkgPSBudWxsO1xuICAgIH1cblxuICAgIGFzeW5jIHNldEVuY1ByaXZhdGVLZXkoZW5jUHJpdmF0ZUtleTogc3RyaW5nKTogUHJvbWlzZTx7fT4ge1xuICAgICAgICBpZiAoZW5jUHJpdmF0ZUtleSA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLnNhdmUoS2V5cy5lbmNQcml2YXRlS2V5LCBlbmNQcml2YXRlS2V5KTtcbiAgICAgICAgdGhpcy5wcml2YXRlS2V5ID0gbnVsbDtcbiAgICB9XG5cbiAgICBzZXRPcmdLZXlzKG9yZ3M6IFByb2ZpbGVPcmdhbml6YXRpb25SZXNwb25zZVtdKTogUHJvbWlzZTx7fT4ge1xuICAgICAgICBjb25zdCBvcmdLZXlzOiBhbnkgPSB7fTtcbiAgICAgICAgb3Jncy5mb3JFYWNoKChvcmcpID0+IHtcbiAgICAgICAgICAgIG9yZ0tleXNbb3JnLmlkXSA9IG9yZy5rZXk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMub3JnS2V5cyA9IG51bGw7XG4gICAgICAgIHJldHVybiB0aGlzLnN0b3JhZ2VTZXJ2aWNlLnNhdmUoS2V5cy5lbmNPcmdLZXlzLCBvcmdLZXlzKTtcbiAgICB9XG5cbiAgICBhc3luYyBnZXRLZXkoKTogUHJvbWlzZTxTeW1tZXRyaWNDcnlwdG9LZXk+IHtcbiAgICAgICAgaWYgKHRoaXMua2V5ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmtleTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGtleSA9IGF3YWl0IHRoaXMuc2VjdXJlU3RvcmFnZVNlcnZpY2UuZ2V0PHN0cmluZz4oS2V5cy5rZXkpO1xuICAgICAgICBpZiAoa2V5ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMua2V5ID0gbmV3IFN5bW1ldHJpY0NyeXB0b0tleShVdGlscy5mcm9tQjY0VG9BcnJheShrZXkpLmJ1ZmZlcik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ga2V5ID09IG51bGwgPyBudWxsIDogdGhpcy5rZXk7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0S2V5SGFzaCgpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgICAgICBpZiAodGhpcy5rZXlIYXNoICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmtleUhhc2g7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBrZXlIYXNoID0gYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5nZXQ8c3RyaW5nPihLZXlzLmtleUhhc2gpO1xuICAgICAgICBpZiAoa2V5SGFzaCAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmtleUhhc2ggPSBrZXlIYXNoO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGtleUhhc2ggPT0gbnVsbCA/IG51bGwgOiB0aGlzLmtleUhhc2g7XG4gICAgfVxuXG4gICAgQHNlcXVlbnRpYWxpemUoKCkgPT4gJ2dldEVuY0tleScpXG4gICAgYXN5bmMgZ2V0RW5jS2V5KGtleTogU3ltbWV0cmljQ3J5cHRvS2V5ID0gbnVsbCk6IFByb21pc2U8U3ltbWV0cmljQ3J5cHRvS2V5PiB7XG4gICAgICAgIGlmICh0aGlzLmVuY0tleSAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lbmNLZXk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBlbmNLZXkgPSBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldDxzdHJpbmc+KEtleXMuZW5jS2V5KTtcbiAgICAgICAgaWYgKGVuY0tleSA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChrZXkgPT0gbnVsbCkge1xuICAgICAgICAgICAga2V5ID0gYXdhaXQgdGhpcy5nZXRLZXkoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoa2V5ID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGRlY0VuY0tleTogQXJyYXlCdWZmZXI7XG4gICAgICAgIGNvbnN0IGVuY0tleUNpcGhlciA9IG5ldyBDaXBoZXJTdHJpbmcoZW5jS2V5KTtcbiAgICAgICAgaWYgKGVuY0tleUNpcGhlci5lbmNyeXB0aW9uVHlwZSA9PT0gRW5jcnlwdGlvblR5cGUuQWVzQ2JjMjU2X0I2NCkge1xuICAgICAgICAgICAgZGVjRW5jS2V5ID0gYXdhaXQgdGhpcy5kZWNyeXB0VG9CeXRlcyhlbmNLZXlDaXBoZXIsIGtleSk7XG4gICAgICAgIH0gZWxzZSBpZiAoZW5jS2V5Q2lwaGVyLmVuY3J5cHRpb25UeXBlID09PSBFbmNyeXB0aW9uVHlwZS5BZXNDYmMyNTZfSG1hY1NoYTI1Nl9CNjQpIHtcbiAgICAgICAgICAgIGNvbnN0IG5ld0tleSA9IGF3YWl0IHRoaXMuc3RyZXRjaEtleShrZXkpO1xuICAgICAgICAgICAgZGVjRW5jS2V5ID0gYXdhaXQgdGhpcy5kZWNyeXB0VG9CeXRlcyhlbmNLZXlDaXBoZXIsIG5ld0tleSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIGVuY0tleSB0eXBlLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRlY0VuY0tleSA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVuY0tleSA9IG5ldyBTeW1tZXRyaWNDcnlwdG9LZXkoZGVjRW5jS2V5KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZW5jS2V5O1xuICAgIH1cblxuICAgIGFzeW5jIGdldFB1YmxpY0tleSgpOiBQcm9taXNlPEFycmF5QnVmZmVyPiB7XG4gICAgICAgIGlmICh0aGlzLnB1YmxpY0tleSAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wdWJsaWNLZXk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwcml2YXRlS2V5ID0gYXdhaXQgdGhpcy5nZXRQcml2YXRlS2V5KCk7XG4gICAgICAgIGlmIChwcml2YXRlS2V5ID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5wdWJsaWNLZXkgPSBhd2FpdCB0aGlzLmNyeXB0b0Z1bmN0aW9uU2VydmljZS5yc2FFeHRyYWN0UHVibGljS2V5KHByaXZhdGVLZXkpO1xuICAgICAgICByZXR1cm4gdGhpcy5wdWJsaWNLZXk7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0UHJpdmF0ZUtleSgpOiBQcm9taXNlPEFycmF5QnVmZmVyPiB7XG4gICAgICAgIGlmICh0aGlzLnByaXZhdGVLZXkgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJpdmF0ZUtleTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGVuY1ByaXZhdGVLZXkgPSBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldDxzdHJpbmc+KEtleXMuZW5jUHJpdmF0ZUtleSk7XG4gICAgICAgIGlmIChlbmNQcml2YXRlS2V5ID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5wcml2YXRlS2V5ID0gYXdhaXQgdGhpcy5kZWNyeXB0VG9CeXRlcyhuZXcgQ2lwaGVyU3RyaW5nKGVuY1ByaXZhdGVLZXkpLCBudWxsKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJpdmF0ZUtleTtcbiAgICB9XG5cbiAgICBhc3luYyBnZXRGaW5nZXJwcmludCh1c2VySWQ6IHN0cmluZywgcHVibGljS2V5PzogQXJyYXlCdWZmZXIpOiBQcm9taXNlPHN0cmluZ1tdPiB7XG4gICAgICAgIGlmIChwdWJsaWNLZXkgPT0gbnVsbCkge1xuICAgICAgICAgICAgcHVibGljS2V5ID0gYXdhaXQgdGhpcy5nZXRQdWJsaWNLZXkoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHVibGljS2V5ID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIHB1YmxpYyBrZXkgYXZhaWxhYmxlLicpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGtleUZpbmdlcnByaW50ID0gYXdhaXQgdGhpcy5jcnlwdG9GdW5jdGlvblNlcnZpY2UuaGFzaChwdWJsaWNLZXksICdzaGEyNTYnKTtcbiAgICAgICAgY29uc3QgdXNlckZpbmdlcnByaW50ID0gYXdhaXQgdGhpcy5jcnlwdG9GdW5jdGlvblNlcnZpY2UuaGtkZkV4cGFuZChrZXlGaW5nZXJwcmludCwgdXNlcklkLCAzMiwgJ3NoYTI1NicpO1xuICAgICAgICByZXR1cm4gdGhpcy5oYXNoUGhyYXNlKHVzZXJGaW5nZXJwcmludCk7XG4gICAgfVxuXG4gICAgQHNlcXVlbnRpYWxpemUoKCkgPT4gJ2dldE9yZ0tleXMnKVxuICAgIGFzeW5jIGdldE9yZ0tleXMoKTogUHJvbWlzZTxNYXA8c3RyaW5nLCBTeW1tZXRyaWNDcnlwdG9LZXk+PiB7XG4gICAgICAgIGlmICh0aGlzLm9yZ0tleXMgIT0gbnVsbCAmJiB0aGlzLm9yZ0tleXMuc2l6ZSA+IDApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm9yZ0tleXM7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBlbmNPcmdLZXlzID0gYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5nZXQ8YW55PihLZXlzLmVuY09yZ0tleXMpO1xuICAgICAgICBpZiAoZW5jT3JnS2V5cyA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG9yZ0tleXM6IE1hcDxzdHJpbmcsIFN5bW1ldHJpY0NyeXB0b0tleT4gPSBuZXcgTWFwPHN0cmluZywgU3ltbWV0cmljQ3J5cHRvS2V5PigpO1xuICAgICAgICBsZXQgc2V0S2V5ID0gZmFsc2U7XG5cbiAgICAgICAgZm9yIChjb25zdCBvcmdJZCBpbiBlbmNPcmdLZXlzKSB7XG4gICAgICAgICAgICBpZiAoIWVuY09yZ0tleXMuaGFzT3duUHJvcGVydHkob3JnSWQpKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGRlY1ZhbHVlID0gYXdhaXQgdGhpcy5yc2FEZWNyeXB0KGVuY09yZ0tleXNbb3JnSWRdKTtcbiAgICAgICAgICAgIG9yZ0tleXMuc2V0KG9yZ0lkLCBuZXcgU3ltbWV0cmljQ3J5cHRvS2V5KGRlY1ZhbHVlKSk7XG4gICAgICAgICAgICBzZXRLZXkgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNldEtleSkge1xuICAgICAgICAgICAgdGhpcy5vcmdLZXlzID0gb3JnS2V5cztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLm9yZ0tleXM7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0T3JnS2V5KG9yZ0lkOiBzdHJpbmcpOiBQcm9taXNlPFN5bW1ldHJpY0NyeXB0b0tleT4ge1xuICAgICAgICBpZiAob3JnSWQgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBvcmdLZXlzID0gYXdhaXQgdGhpcy5nZXRPcmdLZXlzKCk7XG4gICAgICAgIGlmIChvcmdLZXlzID09IG51bGwgfHwgIW9yZ0tleXMuaGFzKG9yZ0lkKSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gb3JnS2V5cy5nZXQob3JnSWQpO1xuICAgIH1cblxuICAgIGFzeW5jIGhhc0tleSgpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgICAgcmV0dXJuIChhd2FpdCB0aGlzLmdldEtleSgpKSAhPSBudWxsO1xuICAgIH1cblxuICAgIGFzeW5jIGhhc0VuY0tleSgpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgICAgY29uc3QgZW5jS2V5ID0gYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5nZXQ8c3RyaW5nPihLZXlzLmVuY0tleSk7XG4gICAgICAgIHJldHVybiBlbmNLZXkgIT0gbnVsbDtcbiAgICB9XG5cbiAgICBjbGVhcktleSgpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICB0aGlzLmtleSA9IHRoaXMubGVnYWN5RXRtS2V5ID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VjdXJlU3RvcmFnZVNlcnZpY2UucmVtb3ZlKEtleXMua2V5KTtcbiAgICB9XG5cbiAgICBjbGVhcktleUhhc2goKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgdGhpcy5rZXlIYXNoID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RvcmFnZVNlcnZpY2UucmVtb3ZlKEtleXMua2V5SGFzaCk7XG4gICAgfVxuXG4gICAgY2xlYXJFbmNLZXkobWVtb3J5T25seT86IGJvb2xlYW4pOiBQcm9taXNlPGFueT4ge1xuICAgICAgICB0aGlzLmVuY0tleSA9IG51bGw7XG4gICAgICAgIGlmIChtZW1vcnlPbmx5KSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuc3RvcmFnZVNlcnZpY2UucmVtb3ZlKEtleXMuZW5jS2V5KTtcbiAgICB9XG5cbiAgICBjbGVhcktleVBhaXIobWVtb3J5T25seT86IGJvb2xlYW4pOiBQcm9taXNlPGFueT4ge1xuICAgICAgICB0aGlzLnByaXZhdGVLZXkgPSBudWxsO1xuICAgICAgICB0aGlzLnB1YmxpY0tleSA9IG51bGw7XG4gICAgICAgIGlmIChtZW1vcnlPbmx5KSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuc3RvcmFnZVNlcnZpY2UucmVtb3ZlKEtleXMuZW5jUHJpdmF0ZUtleSk7XG4gICAgfVxuXG4gICAgY2xlYXJPcmdLZXlzKG1lbW9yeU9ubHk/OiBib29sZWFuKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgdGhpcy5vcmdLZXlzID0gbnVsbDtcbiAgICAgICAgaWYgKG1lbW9yeU9ubHkpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5zdG9yYWdlU2VydmljZS5yZW1vdmUoS2V5cy5lbmNPcmdLZXlzKTtcbiAgICB9XG5cbiAgICBjbGVhclBpblByb3RlY3RlZEtleSgpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5zdG9yYWdlU2VydmljZS5yZW1vdmUoQ29uc3RhbnRzU2VydmljZS5waW5Qcm90ZWN0ZWRLZXkpO1xuICAgIH1cblxuICAgIGNsZWFyS2V5cygpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoW1xuICAgICAgICAgICAgdGhpcy5jbGVhcktleSgpLFxuICAgICAgICAgICAgdGhpcy5jbGVhcktleUhhc2goKSxcbiAgICAgICAgICAgIHRoaXMuY2xlYXJPcmdLZXlzKCksXG4gICAgICAgICAgICB0aGlzLmNsZWFyRW5jS2V5KCksXG4gICAgICAgICAgICB0aGlzLmNsZWFyS2V5UGFpcigpLFxuICAgICAgICAgICAgdGhpcy5jbGVhclBpblByb3RlY3RlZEtleSgpLFxuICAgICAgICBdKTtcbiAgICB9XG5cbiAgICBhc3luYyB0b2dnbGVLZXkoKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgY29uc3Qga2V5ID0gYXdhaXQgdGhpcy5nZXRLZXkoKTtcbiAgICAgICAgY29uc3Qgb3B0aW9uID0gYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5nZXQoQ29uc3RhbnRzU2VydmljZS52YXVsdFRpbWVvdXRLZXkpO1xuICAgICAgICBjb25zdCBiaW9tZXRyaWMgPSBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldChDb25zdGFudHNTZXJ2aWNlLmJpb21ldHJpY1VubG9ja0tleSk7XG4gICAgICAgIGlmICgoIWJpb21ldHJpYyAmJiB0aGlzLnBsYXRmb3JtVXRpbFNlcnZpY2Uuc3VwcG9ydHNTZWN1cmVTdG9yYWdlKCkpICYmIChvcHRpb24gIT0gbnVsbCB8fCBvcHRpb24gPT09IDApKSB7XG4gICAgICAgICAgICAvLyBpZiB3ZSBoYXZlIGEgbG9jayBvcHRpb24gc2V0LCBjbGVhciB0aGUga2V5XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmNsZWFyS2V5KCk7XG4gICAgICAgICAgICB0aGlzLmtleSA9IGtleTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGF3YWl0IHRoaXMuc2V0S2V5KGtleSk7XG4gICAgfVxuXG4gICAgYXN5bmMgbWFrZUtleShwYXNzd29yZDogc3RyaW5nLCBzYWx0OiBzdHJpbmcsIGtkZjogS2RmVHlwZSwga2RmSXRlcmF0aW9uczogbnVtYmVyKTpcbiAgICAgICAgUHJvbWlzZTxTeW1tZXRyaWNDcnlwdG9LZXk+IHtcbiAgICAgICAgbGV0IGtleTogQXJyYXlCdWZmZXIgPSBudWxsO1xuICAgICAgICBpZiAoa2RmID09IG51bGwgfHwga2RmID09PSBLZGZUeXBlLlBCS0RGMl9TSEEyNTYpIHtcbiAgICAgICAgICAgIGlmIChrZGZJdGVyYXRpb25zID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBrZGZJdGVyYXRpb25zID0gNTAwMDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoa2RmSXRlcmF0aW9ucyA8IDUwMDApIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1BCS0RGMiBpdGVyYXRpb24gbWluaW11bSBpcyA1MDAwLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAga2V5ID0gYXdhaXQgdGhpcy5jcnlwdG9GdW5jdGlvblNlcnZpY2UucGJrZGYyKHBhc3N3b3JkLCBzYWx0LCAnc2hhMjU2Jywga2RmSXRlcmF0aW9ucyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gS2RmLicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgU3ltbWV0cmljQ3J5cHRvS2V5KGtleSk7XG4gICAgfVxuXG4gICAgYXN5bmMgbWFrZUtleUZyb21QaW4ocGluOiBzdHJpbmcsIHNhbHQ6IHN0cmluZywga2RmOiBLZGZUeXBlLCBrZGZJdGVyYXRpb25zOiBudW1iZXIsXG4gICAgICAgIHByb3RlY3RlZEtleUNzOiBDaXBoZXJTdHJpbmcgPSBudWxsKTpcbiAgICAgICAgUHJvbWlzZTxTeW1tZXRyaWNDcnlwdG9LZXk+IHtcbiAgICAgICAgaWYgKHByb3RlY3RlZEtleUNzID09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IHBpblByb3RlY3RlZEtleSA9IGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2UuZ2V0PHN0cmluZz4oQ29uc3RhbnRzU2VydmljZS5waW5Qcm90ZWN0ZWRLZXkpO1xuICAgICAgICAgICAgaWYgKHBpblByb3RlY3RlZEtleSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBQSU4gcHJvdGVjdGVkIGtleSBmb3VuZC4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHByb3RlY3RlZEtleUNzID0gbmV3IENpcGhlclN0cmluZyhwaW5Qcm90ZWN0ZWRLZXkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBpbktleSA9IGF3YWl0IHRoaXMubWFrZVBpbktleShwaW4sIHNhbHQsIGtkZiwga2RmSXRlcmF0aW9ucyk7XG4gICAgICAgIGNvbnN0IGRlY0tleSA9IGF3YWl0IHRoaXMuZGVjcnlwdFRvQnl0ZXMocHJvdGVjdGVkS2V5Q3MsIHBpbktleSk7XG4gICAgICAgIHJldHVybiBuZXcgU3ltbWV0cmljQ3J5cHRvS2V5KGRlY0tleSk7XG4gICAgfVxuXG4gICAgYXN5bmMgbWFrZVNoYXJlS2V5KCk6IFByb21pc2U8W0NpcGhlclN0cmluZywgU3ltbWV0cmljQ3J5cHRvS2V5XT4ge1xuICAgICAgICBjb25zdCBzaGFyZUtleSA9IGF3YWl0IHRoaXMuY3J5cHRvRnVuY3Rpb25TZXJ2aWNlLnJhbmRvbUJ5dGVzKDY0KTtcbiAgICAgICAgY29uc3QgcHVibGljS2V5ID0gYXdhaXQgdGhpcy5nZXRQdWJsaWNLZXkoKTtcbiAgICAgICAgY29uc3QgZW5jU2hhcmVLZXkgPSBhd2FpdCB0aGlzLnJzYUVuY3J5cHQoc2hhcmVLZXksIHB1YmxpY0tleSk7XG4gICAgICAgIHJldHVybiBbZW5jU2hhcmVLZXksIG5ldyBTeW1tZXRyaWNDcnlwdG9LZXkoc2hhcmVLZXkpXTtcbiAgICB9XG5cbiAgICBhc3luYyBtYWtlS2V5UGFpcihrZXk/OiBTeW1tZXRyaWNDcnlwdG9LZXkpOiBQcm9taXNlPFtzdHJpbmcsIENpcGhlclN0cmluZ10+IHtcbiAgICAgICAgY29uc3Qga2V5UGFpciA9IGF3YWl0IHRoaXMuY3J5cHRvRnVuY3Rpb25TZXJ2aWNlLnJzYUdlbmVyYXRlS2V5UGFpcigyMDQ4KTtcbiAgICAgICAgY29uc3QgcHVibGljQjY0ID0gVXRpbHMuZnJvbUJ1ZmZlclRvQjY0KGtleVBhaXJbMF0pO1xuICAgICAgICBjb25zdCBwcml2YXRlRW5jID0gYXdhaXQgdGhpcy5lbmNyeXB0KGtleVBhaXJbMV0sIGtleSk7XG4gICAgICAgIHJldHVybiBbcHVibGljQjY0LCBwcml2YXRlRW5jXTtcbiAgICB9XG5cbiAgICBhc3luYyBtYWtlUGluS2V5KHBpbjogc3RyaW5nLCBzYWx0OiBzdHJpbmcsIGtkZjogS2RmVHlwZSwga2RmSXRlcmF0aW9uczogbnVtYmVyKTogUHJvbWlzZTxTeW1tZXRyaWNDcnlwdG9LZXk+IHtcbiAgICAgICAgY29uc3QgcGluS2V5ID0gYXdhaXQgdGhpcy5tYWtlS2V5KHBpbiwgc2FsdCwga2RmLCBrZGZJdGVyYXRpb25zKTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuc3RyZXRjaEtleShwaW5LZXkpO1xuICAgIH1cblxuICAgIGFzeW5jIG1ha2VTZW5kS2V5KGtleU1hdGVyaWFsOiBBcnJheUJ1ZmZlcik6IFByb21pc2U8U3ltbWV0cmljQ3J5cHRvS2V5PiB7XG4gICAgICAgIGNvbnN0IHNlbmRLZXkgPSBhd2FpdCB0aGlzLmNyeXB0b0Z1bmN0aW9uU2VydmljZS5oa2RmKGtleU1hdGVyaWFsLCAnYml0d2FyZGVuLXNlbmQnLCAnc2VuZCcsIDY0LCAnc2hhMjU2Jyk7XG4gICAgICAgIHJldHVybiBuZXcgU3ltbWV0cmljQ3J5cHRvS2V5KHNlbmRLZXkpO1xuICAgIH1cblxuICAgIGFzeW5jIGhhc2hQYXNzd29yZChwYXNzd29yZDogc3RyaW5nLCBrZXk6IFN5bW1ldHJpY0NyeXB0b0tleSk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgICAgIGlmIChrZXkgPT0gbnVsbCkge1xuICAgICAgICAgICAga2V5ID0gYXdhaXQgdGhpcy5nZXRLZXkoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFzc3dvcmQgPT0gbnVsbCB8fCBrZXkgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHBhcmFtZXRlcnMuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBoYXNoID0gYXdhaXQgdGhpcy5jcnlwdG9GdW5jdGlvblNlcnZpY2UucGJrZGYyKGtleS5rZXksIHBhc3N3b3JkLCAnc2hhMjU2JywgMSk7XG4gICAgICAgIHJldHVybiBVdGlscy5mcm9tQnVmZmVyVG9CNjQoaGFzaCk7XG4gICAgfVxuXG4gICAgYXN5bmMgbWFrZUVuY0tleShrZXk6IFN5bW1ldHJpY0NyeXB0b0tleSk6IFByb21pc2U8W1N5bW1ldHJpY0NyeXB0b0tleSwgQ2lwaGVyU3RyaW5nXT4ge1xuICAgICAgICBjb25zdCB0aGVLZXkgPSBhd2FpdCB0aGlzLmdldEtleUZvckVuY3J5cHRpb24oa2V5KTtcbiAgICAgICAgY29uc3QgZW5jS2V5ID0gYXdhaXQgdGhpcy5jcnlwdG9GdW5jdGlvblNlcnZpY2UucmFuZG9tQnl0ZXMoNjQpO1xuICAgICAgICByZXR1cm4gdGhpcy5idWlsZEVuY0tleSh0aGVLZXksIGVuY0tleSk7XG4gICAgfVxuXG4gICAgYXN5bmMgcmVtYWtlRW5jS2V5KGtleTogU3ltbWV0cmljQ3J5cHRvS2V5KTogUHJvbWlzZTxbU3ltbWV0cmljQ3J5cHRvS2V5LCBDaXBoZXJTdHJpbmddPiB7XG4gICAgICAgIGNvbnN0IGVuY0tleSA9IGF3YWl0IHRoaXMuZ2V0RW5jS2V5KCk7XG4gICAgICAgIHJldHVybiB0aGlzLmJ1aWxkRW5jS2V5KGtleSwgZW5jS2V5LmtleSk7XG4gICAgfVxuXG4gICAgYXN5bmMgZW5jcnlwdChwbGFpblZhbHVlOiBzdHJpbmcgfCBBcnJheUJ1ZmZlciwga2V5PzogU3ltbWV0cmljQ3J5cHRvS2V5KTogUHJvbWlzZTxDaXBoZXJTdHJpbmc+IHtcbiAgICAgICAgaWYgKHBsYWluVmFsdWUgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShudWxsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBwbGFpbkJ1ZjogQXJyYXlCdWZmZXI7XG4gICAgICAgIGlmICh0eXBlb2YgKHBsYWluVmFsdWUpID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcGxhaW5CdWYgPSBVdGlscy5mcm9tVXRmOFRvQXJyYXkocGxhaW5WYWx1ZSkuYnVmZmVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGxhaW5CdWYgPSBwbGFpblZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZW5jT2JqID0gYXdhaXQgdGhpcy5hZXNFbmNyeXB0KHBsYWluQnVmLCBrZXkpO1xuICAgICAgICBjb25zdCBpdiA9IFV0aWxzLmZyb21CdWZmZXJUb0I2NChlbmNPYmouaXYpO1xuICAgICAgICBjb25zdCBkYXRhID0gVXRpbHMuZnJvbUJ1ZmZlclRvQjY0KGVuY09iai5kYXRhKTtcbiAgICAgICAgY29uc3QgbWFjID0gZW5jT2JqLm1hYyAhPSBudWxsID8gVXRpbHMuZnJvbUJ1ZmZlclRvQjY0KGVuY09iai5tYWMpIDogbnVsbDtcbiAgICAgICAgcmV0dXJuIG5ldyBDaXBoZXJTdHJpbmcoZW5jT2JqLmtleS5lbmNUeXBlLCBkYXRhLCBpdiwgbWFjKTtcbiAgICB9XG5cbiAgICBhc3luYyBlbmNyeXB0VG9CeXRlcyhwbGFpblZhbHVlOiBBcnJheUJ1ZmZlciwga2V5PzogU3ltbWV0cmljQ3J5cHRvS2V5KTogUHJvbWlzZTxBcnJheUJ1ZmZlcj4ge1xuICAgICAgICBjb25zdCBlbmNWYWx1ZSA9IGF3YWl0IHRoaXMuYWVzRW5jcnlwdChwbGFpblZhbHVlLCBrZXkpO1xuICAgICAgICBsZXQgbWFjTGVuID0gMDtcbiAgICAgICAgaWYgKGVuY1ZhbHVlLm1hYyAhPSBudWxsKSB7XG4gICAgICAgICAgICBtYWNMZW4gPSBlbmNWYWx1ZS5tYWMuYnl0ZUxlbmd0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGVuY0J5dGVzID0gbmV3IFVpbnQ4QXJyYXkoMSArIGVuY1ZhbHVlLml2LmJ5dGVMZW5ndGggKyBtYWNMZW4gKyBlbmNWYWx1ZS5kYXRhLmJ5dGVMZW5ndGgpO1xuICAgICAgICBlbmNCeXRlcy5zZXQoW2VuY1ZhbHVlLmtleS5lbmNUeXBlXSk7XG4gICAgICAgIGVuY0J5dGVzLnNldChuZXcgVWludDhBcnJheShlbmNWYWx1ZS5pdiksIDEpO1xuICAgICAgICBpZiAoZW5jVmFsdWUubWFjICE9IG51bGwpIHtcbiAgICAgICAgICAgIGVuY0J5dGVzLnNldChuZXcgVWludDhBcnJheShlbmNWYWx1ZS5tYWMpLCAxICsgZW5jVmFsdWUuaXYuYnl0ZUxlbmd0aCk7XG4gICAgICAgIH1cblxuICAgICAgICBlbmNCeXRlcy5zZXQobmV3IFVpbnQ4QXJyYXkoZW5jVmFsdWUuZGF0YSksIDEgKyBlbmNWYWx1ZS5pdi5ieXRlTGVuZ3RoICsgbWFjTGVuKTtcbiAgICAgICAgcmV0dXJuIGVuY0J5dGVzLmJ1ZmZlcjtcbiAgICB9XG5cbiAgICBhc3luYyByc2FFbmNyeXB0KGRhdGE6IEFycmF5QnVmZmVyLCBwdWJsaWNLZXk/OiBBcnJheUJ1ZmZlcik6IFByb21pc2U8Q2lwaGVyU3RyaW5nPiB7XG4gICAgICAgIGlmIChwdWJsaWNLZXkgPT0gbnVsbCkge1xuICAgICAgICAgICAgcHVibGljS2V5ID0gYXdhaXQgdGhpcy5nZXRQdWJsaWNLZXkoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHVibGljS2V5ID09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUHVibGljIGtleSB1bmF2YWlsYWJsZS4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGVuY0J5dGVzID0gYXdhaXQgdGhpcy5jcnlwdG9GdW5jdGlvblNlcnZpY2UucnNhRW5jcnlwdChkYXRhLCBwdWJsaWNLZXksICdzaGExJyk7XG4gICAgICAgIHJldHVybiBuZXcgQ2lwaGVyU3RyaW5nKEVuY3J5cHRpb25UeXBlLlJzYTIwNDhfT2FlcFNoYTFfQjY0LCBVdGlscy5mcm9tQnVmZmVyVG9CNjQoZW5jQnl0ZXMpKTtcbiAgICB9XG5cbiAgICBhc3luYyBkZWNyeXB0VG9CeXRlcyhjaXBoZXJTdHJpbmc6IENpcGhlclN0cmluZywga2V5PzogU3ltbWV0cmljQ3J5cHRvS2V5KTogUHJvbWlzZTxBcnJheUJ1ZmZlcj4ge1xuICAgICAgICBjb25zdCBpdiA9IFV0aWxzLmZyb21CNjRUb0FycmF5KGNpcGhlclN0cmluZy5pdikuYnVmZmVyO1xuICAgICAgICBjb25zdCBkYXRhID0gVXRpbHMuZnJvbUI2NFRvQXJyYXkoY2lwaGVyU3RyaW5nLmRhdGEpLmJ1ZmZlcjtcbiAgICAgICAgY29uc3QgbWFjID0gY2lwaGVyU3RyaW5nLm1hYyA/IFV0aWxzLmZyb21CNjRUb0FycmF5KGNpcGhlclN0cmluZy5tYWMpLmJ1ZmZlciA6IG51bGw7XG4gICAgICAgIGNvbnN0IGRlY2lwaGVyID0gYXdhaXQgdGhpcy5hZXNEZWNyeXB0VG9CeXRlcyhjaXBoZXJTdHJpbmcuZW5jcnlwdGlvblR5cGUsIGRhdGEsIGl2LCBtYWMsIGtleSk7XG4gICAgICAgIGlmIChkZWNpcGhlciA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkZWNpcGhlcjtcbiAgICB9XG5cbiAgICBhc3luYyBkZWNyeXB0VG9VdGY4KGNpcGhlclN0cmluZzogQ2lwaGVyU3RyaW5nLCBrZXk/OiBTeW1tZXRyaWNDcnlwdG9LZXkpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5hZXNEZWNyeXB0VG9VdGY4KGNpcGhlclN0cmluZy5lbmNyeXB0aW9uVHlwZSwgY2lwaGVyU3RyaW5nLmRhdGEsXG4gICAgICAgICAgICBjaXBoZXJTdHJpbmcuaXYsIGNpcGhlclN0cmluZy5tYWMsIGtleSk7XG4gICAgfVxuXG4gICAgYXN5bmMgZGVjcnlwdEZyb21CeXRlcyhlbmNCdWY6IEFycmF5QnVmZmVyLCBrZXk6IFN5bW1ldHJpY0NyeXB0b0tleSk6IFByb21pc2U8QXJyYXlCdWZmZXI+IHtcbiAgICAgICAgaWYgKGVuY0J1ZiA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ25vIGVuY0J1Zi4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGVuY0J5dGVzID0gbmV3IFVpbnQ4QXJyYXkoZW5jQnVmKTtcbiAgICAgICAgY29uc3QgZW5jVHlwZSA9IGVuY0J5dGVzWzBdO1xuICAgICAgICBsZXQgY3RCeXRlczogVWludDhBcnJheSA9IG51bGw7XG4gICAgICAgIGxldCBpdkJ5dGVzOiBVaW50OEFycmF5ID0gbnVsbDtcbiAgICAgICAgbGV0IG1hY0J5dGVzOiBVaW50OEFycmF5ID0gbnVsbDtcblxuICAgICAgICBzd2l0Y2ggKGVuY1R5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgRW5jcnlwdGlvblR5cGUuQWVzQ2JjMTI4X0htYWNTaGEyNTZfQjY0OlxuICAgICAgICAgICAgY2FzZSBFbmNyeXB0aW9uVHlwZS5BZXNDYmMyNTZfSG1hY1NoYTI1Nl9CNjQ6XG4gICAgICAgICAgICAgICAgaWYgKGVuY0J5dGVzLmxlbmd0aCA8PSA0OSkgeyAvLyAxICsgMTYgKyAzMiArIGN0TGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGl2Qnl0ZXMgPSBlbmNCeXRlcy5zbGljZSgxLCAxNyk7XG4gICAgICAgICAgICAgICAgbWFjQnl0ZXMgPSBlbmNCeXRlcy5zbGljZSgxNywgNDkpO1xuICAgICAgICAgICAgICAgIGN0Qnl0ZXMgPSBlbmNCeXRlcy5zbGljZSg0OSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIEVuY3J5cHRpb25UeXBlLkFlc0NiYzI1Nl9CNjQ6XG4gICAgICAgICAgICAgICAgaWYgKGVuY0J5dGVzLmxlbmd0aCA8PSAxNykgeyAvLyAxICsgMTYgKyBjdExlbmd0aFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpdkJ5dGVzID0gZW5jQnl0ZXMuc2xpY2UoMSwgMTcpO1xuICAgICAgICAgICAgICAgIGN0Qnl0ZXMgPSBlbmNCeXRlcy5zbGljZSgxNyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuYWVzRGVjcnlwdFRvQnl0ZXMoZW5jVHlwZSwgY3RCeXRlcy5idWZmZXIsIGl2Qnl0ZXMuYnVmZmVyLFxuICAgICAgICAgICAgbWFjQnl0ZXMgIT0gbnVsbCA/IG1hY0J5dGVzLmJ1ZmZlciA6IG51bGwsIGtleSk7XG4gICAgfVxuXG4gICAgLy8gRUZGb3JnL09wZW5XaXJlbGVzc1xuICAgIC8vIHJlZiBodHRwczovL2dpdGh1Yi5jb20vRUZGb3JnL09wZW5XaXJlbGVzcy9ibG9iL21hc3Rlci9hcHAvanMvZGljZXdhcmUuanNcbiAgICBhc3luYyByYW5kb21OdW1iZXIobWluOiBudW1iZXIsIG1heDogbnVtYmVyKTogUHJvbWlzZTxudW1iZXI+IHtcbiAgICAgICAgbGV0IHJ2YWwgPSAwO1xuICAgICAgICBjb25zdCByYW5nZSA9IG1heCAtIG1pbiArIDE7XG4gICAgICAgIGNvbnN0IGJpdHNOZWVkZWQgPSBNYXRoLmNlaWwoTWF0aC5sb2cyKHJhbmdlKSk7XG4gICAgICAgIGlmIChiaXRzTmVlZGVkID4gNTMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignV2UgY2Fubm90IGdlbmVyYXRlIG51bWJlcnMgbGFyZ2VyIHRoYW4gNTMgYml0cy4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGJ5dGVzTmVlZGVkID0gTWF0aC5jZWlsKGJpdHNOZWVkZWQgLyA4KTtcbiAgICAgICAgY29uc3QgbWFzayA9IE1hdGgucG93KDIsIGJpdHNOZWVkZWQpIC0gMTtcbiAgICAgICAgLy8gNzc3NiAtPiAoMl4xMyA9IDgxOTIpIC0xID09IDgxOTEgb3IgMHgwMDAwMTExMSAxMTExMTExMVxuXG4gICAgICAgIC8vIEZpbGwgYSBieXRlIGFycmF5IHdpdGggTiByYW5kb20gbnVtYmVyc1xuICAgICAgICBjb25zdCBieXRlQXJyYXkgPSBuZXcgVWludDhBcnJheShhd2FpdCB0aGlzLmNyeXB0b0Z1bmN0aW9uU2VydmljZS5yYW5kb21CeXRlcyhieXRlc05lZWRlZCkpO1xuXG4gICAgICAgIGxldCBwID0gKGJ5dGVzTmVlZGVkIC0gMSkgKiA4O1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ5dGVzTmVlZGVkOyBpKyspIHtcbiAgICAgICAgICAgIHJ2YWwgKz0gYnl0ZUFycmF5W2ldICogTWF0aC5wb3coMiwgcCk7XG4gICAgICAgICAgICBwIC09IDg7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBVc2UgJiB0byBhcHBseSB0aGUgbWFzayBhbmQgcmVkdWNlIHRoZSBudW1iZXIgb2YgcmVjdXJzaXZlIGxvb2t1cHNcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgIHJ2YWwgPSBydmFsICYgbWFzaztcblxuICAgICAgICBpZiAocnZhbCA+PSByYW5nZSkge1xuICAgICAgICAgICAgLy8gSW50ZWdlciBvdXQgb2YgYWNjZXB0YWJsZSByYW5nZVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmFuZG9tTnVtYmVyKG1pbiwgbWF4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJldHVybiBhbiBpbnRlZ2VyIHRoYXQgZmFsbHMgd2l0aGluIHRoZSByYW5nZVxuICAgICAgICByZXR1cm4gbWluICsgcnZhbDtcbiAgICB9XG5cbiAgICAvLyBIZWxwZXJzXG5cbiAgICBwcml2YXRlIGFzeW5jIGFlc0VuY3J5cHQoZGF0YTogQXJyYXlCdWZmZXIsIGtleTogU3ltbWV0cmljQ3J5cHRvS2V5KTogUHJvbWlzZTxFbmNyeXB0ZWRPYmplY3Q+IHtcbiAgICAgICAgY29uc3Qgb2JqID0gbmV3IEVuY3J5cHRlZE9iamVjdCgpO1xuICAgICAgICBvYmoua2V5ID0gYXdhaXQgdGhpcy5nZXRLZXlGb3JFbmNyeXB0aW9uKGtleSk7XG4gICAgICAgIG9iai5pdiA9IGF3YWl0IHRoaXMuY3J5cHRvRnVuY3Rpb25TZXJ2aWNlLnJhbmRvbUJ5dGVzKDE2KTtcbiAgICAgICAgb2JqLmRhdGEgPSBhd2FpdCB0aGlzLmNyeXB0b0Z1bmN0aW9uU2VydmljZS5hZXNFbmNyeXB0KGRhdGEsIG9iai5pdiwgb2JqLmtleS5lbmNLZXkpO1xuXG4gICAgICAgIGlmIChvYmoua2V5Lm1hY0tleSAhPSBudWxsKSB7XG4gICAgICAgICAgICBjb25zdCBtYWNEYXRhID0gbmV3IFVpbnQ4QXJyYXkob2JqLml2LmJ5dGVMZW5ndGggKyBvYmouZGF0YS5ieXRlTGVuZ3RoKTtcbiAgICAgICAgICAgIG1hY0RhdGEuc2V0KG5ldyBVaW50OEFycmF5KG9iai5pdiksIDApO1xuICAgICAgICAgICAgbWFjRGF0YS5zZXQobmV3IFVpbnQ4QXJyYXkob2JqLmRhdGEpLCBvYmouaXYuYnl0ZUxlbmd0aCk7XG4gICAgICAgICAgICBvYmoubWFjID0gYXdhaXQgdGhpcy5jcnlwdG9GdW5jdGlvblNlcnZpY2UuaG1hYyhtYWNEYXRhLmJ1ZmZlciwgb2JqLmtleS5tYWNLZXksICdzaGEyNTYnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBhZXNEZWNyeXB0VG9VdGY4KGVuY1R5cGU6IEVuY3J5cHRpb25UeXBlLCBkYXRhOiBzdHJpbmcsIGl2OiBzdHJpbmcsIG1hYzogc3RyaW5nLFxuICAgICAgICBrZXk6IFN5bW1ldHJpY0NyeXB0b0tleSk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgICAgIGNvbnN0IGtleUZvckVuYyA9IGF3YWl0IHRoaXMuZ2V0S2V5Rm9yRW5jcnlwdGlvbihrZXkpO1xuICAgICAgICBjb25zdCB0aGVLZXkgPSB0aGlzLnJlc29sdmVMZWdhY3lLZXkoZW5jVHlwZSwga2V5Rm9yRW5jKTtcblxuICAgICAgICBpZiAodGhlS2V5Lm1hY0tleSAhPSBudWxsICYmIG1hYyA9PSBudWxsKSB7XG4gICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ21hYyByZXF1aXJlZC4nKTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoZUtleS5lbmNUeXBlICE9PSBlbmNUeXBlKSB7XG4gICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ2VuY1R5cGUgdW5hdmFpbGFibGUuJyk7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGZhc3RQYXJhbXMgPSB0aGlzLmNyeXB0b0Z1bmN0aW9uU2VydmljZS5hZXNEZWNyeXB0RmFzdFBhcmFtZXRlcnMoZGF0YSwgaXYsIG1hYywgdGhlS2V5KTtcbiAgICAgICAgaWYgKGZhc3RQYXJhbXMubWFjS2V5ICE9IG51bGwgJiYgZmFzdFBhcmFtcy5tYWMgIT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc3QgY29tcHV0ZWRNYWMgPSBhd2FpdCB0aGlzLmNyeXB0b0Z1bmN0aW9uU2VydmljZS5obWFjRmFzdChmYXN0UGFyYW1zLm1hY0RhdGEsXG4gICAgICAgICAgICAgICAgZmFzdFBhcmFtcy5tYWNLZXksICdzaGEyNTYnKTtcbiAgICAgICAgICAgIGNvbnN0IG1hY3NFcXVhbCA9IGF3YWl0IHRoaXMuY3J5cHRvRnVuY3Rpb25TZXJ2aWNlLmNvbXBhcmVGYXN0KGZhc3RQYXJhbXMubWFjLCBjb21wdXRlZE1hYyk7XG4gICAgICAgICAgICBpZiAoIW1hY3NFcXVhbCkge1xuICAgICAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZVxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ21hYyBmYWlsZWQuJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5jcnlwdG9GdW5jdGlvblNlcnZpY2UuYWVzRGVjcnlwdEZhc3QoZmFzdFBhcmFtcyk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBhZXNEZWNyeXB0VG9CeXRlcyhlbmNUeXBlOiBFbmNyeXB0aW9uVHlwZSwgZGF0YTogQXJyYXlCdWZmZXIsIGl2OiBBcnJheUJ1ZmZlcixcbiAgICAgICAgbWFjOiBBcnJheUJ1ZmZlciwga2V5OiBTeW1tZXRyaWNDcnlwdG9LZXkpOiBQcm9taXNlPEFycmF5QnVmZmVyPiB7XG4gICAgICAgIGNvbnN0IGtleUZvckVuYyA9IGF3YWl0IHRoaXMuZ2V0S2V5Rm9yRW5jcnlwdGlvbihrZXkpO1xuICAgICAgICBjb25zdCB0aGVLZXkgPSB0aGlzLnJlc29sdmVMZWdhY3lLZXkoZW5jVHlwZSwga2V5Rm9yRW5jKTtcblxuICAgICAgICBpZiAodGhlS2V5Lm1hY0tleSAhPSBudWxsICYmIG1hYyA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGVLZXkuZW5jVHlwZSAhPT0gZW5jVHlwZSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhlS2V5Lm1hY0tleSAhPSBudWxsICYmIG1hYyAhPSBudWxsKSB7XG4gICAgICAgICAgICBjb25zdCBtYWNEYXRhID0gbmV3IFVpbnQ4QXJyYXkoaXYuYnl0ZUxlbmd0aCArIGRhdGEuYnl0ZUxlbmd0aCk7XG4gICAgICAgICAgICBtYWNEYXRhLnNldChuZXcgVWludDhBcnJheShpdiksIDApO1xuICAgICAgICAgICAgbWFjRGF0YS5zZXQobmV3IFVpbnQ4QXJyYXkoZGF0YSksIGl2LmJ5dGVMZW5ndGgpO1xuICAgICAgICAgICAgY29uc3QgY29tcHV0ZWRNYWMgPSBhd2FpdCB0aGlzLmNyeXB0b0Z1bmN0aW9uU2VydmljZS5obWFjKG1hY0RhdGEuYnVmZmVyLCB0aGVLZXkubWFjS2V5LCAnc2hhMjU2Jyk7XG4gICAgICAgICAgICBpZiAoY29tcHV0ZWRNYWMgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgbWFjc01hdGNoID0gYXdhaXQgdGhpcy5jcnlwdG9GdW5jdGlvblNlcnZpY2UuY29tcGFyZShtYWMsIGNvbXB1dGVkTWFjKTtcbiAgICAgICAgICAgIGlmICghbWFjc01hdGNoKSB7XG4gICAgICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignbWFjIGZhaWxlZC4nKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNyeXB0b0Z1bmN0aW9uU2VydmljZS5hZXNEZWNyeXB0KGRhdGEsIGl2LCB0aGVLZXkuZW5jS2V5KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIHJzYURlY3J5cHQoZW5jVmFsdWU6IHN0cmluZyk6IFByb21pc2U8QXJyYXlCdWZmZXI+IHtcbiAgICAgICAgY29uc3QgaGVhZGVyUGllY2VzID0gZW5jVmFsdWUuc3BsaXQoJy4nKTtcbiAgICAgICAgbGV0IGVuY1R5cGU6IEVuY3J5cHRpb25UeXBlID0gbnVsbDtcbiAgICAgICAgbGV0IGVuY1BpZWNlczogc3RyaW5nW107XG5cbiAgICAgICAgaWYgKGhlYWRlclBpZWNlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIGVuY1R5cGUgPSBFbmNyeXB0aW9uVHlwZS5Sc2EyMDQ4X09hZXBTaGEyNTZfQjY0O1xuICAgICAgICAgICAgZW5jUGllY2VzID0gW2hlYWRlclBpZWNlc1swXV07XG4gICAgICAgIH0gZWxzZSBpZiAoaGVhZGVyUGllY2VzLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBlbmNUeXBlID0gcGFyc2VJbnQoaGVhZGVyUGllY2VzWzBdLCBudWxsKTtcbiAgICAgICAgICAgICAgICBlbmNQaWVjZXMgPSBoZWFkZXJQaWVjZXNbMV0uc3BsaXQoJ3wnKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsgfVxuICAgICAgICB9XG5cbiAgICAgICAgc3dpdGNoIChlbmNUeXBlKSB7XG4gICAgICAgICAgICBjYXNlIEVuY3J5cHRpb25UeXBlLlJzYTIwNDhfT2FlcFNoYTI1Nl9CNjQ6XG4gICAgICAgICAgICBjYXNlIEVuY3J5cHRpb25UeXBlLlJzYTIwNDhfT2FlcFNoYTFfQjY0OlxuICAgICAgICAgICAgLy8gSG1hY1NoYTI1NiB0eXBlcyBhcmUgZGVwcmVjYXRlZFxuICAgICAgICAgICAgY2FzZSBFbmNyeXB0aW9uVHlwZS5Sc2EyMDQ4X09hZXBTaGEyNTZfSG1hY1NoYTI1Nl9CNjQ6XG4gICAgICAgICAgICBjYXNlIEVuY3J5cHRpb25UeXBlLlJzYTIwNDhfT2FlcFNoYTFfSG1hY1NoYTI1Nl9CNjQ6XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignZW5jVHlwZSB1bmF2YWlsYWJsZS4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbmNQaWVjZXMgPT0gbnVsbCB8fCBlbmNQaWVjZXMubGVuZ3RoIDw9IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignZW5jUGllY2VzIHVuYXZhaWxhYmxlLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZGF0YSA9IFV0aWxzLmZyb21CNjRUb0FycmF5KGVuY1BpZWNlc1swXSkuYnVmZmVyO1xuICAgICAgICBjb25zdCBwcml2YXRlS2V5ID0gYXdhaXQgdGhpcy5nZXRQcml2YXRlS2V5KCk7XG4gICAgICAgIGlmIChwcml2YXRlS2V5ID09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gcHJpdmF0ZSBrZXkuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgYWxnOiAnc2hhMScgfCAnc2hhMjU2JyA9ICdzaGExJztcbiAgICAgICAgc3dpdGNoIChlbmNUeXBlKSB7XG4gICAgICAgICAgICBjYXNlIEVuY3J5cHRpb25UeXBlLlJzYTIwNDhfT2FlcFNoYTI1Nl9CNjQ6XG4gICAgICAgICAgICBjYXNlIEVuY3J5cHRpb25UeXBlLlJzYTIwNDhfT2FlcFNoYTI1Nl9IbWFjU2hhMjU2X0I2NDpcbiAgICAgICAgICAgICAgICBhbGcgPSAnc2hhMjU2JztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgRW5jcnlwdGlvblR5cGUuUnNhMjA0OF9PYWVwU2hhMV9CNjQ6XG4gICAgICAgICAgICBjYXNlIEVuY3J5cHRpb25UeXBlLlJzYTIwNDhfT2FlcFNoYTFfSG1hY1NoYTI1Nl9CNjQ6XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignZW5jVHlwZSB1bmF2YWlsYWJsZS4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmNyeXB0b0Z1bmN0aW9uU2VydmljZS5yc2FEZWNyeXB0KGRhdGEsIHByaXZhdGVLZXksIGFsZyk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBnZXRLZXlGb3JFbmNyeXB0aW9uKGtleT86IFN5bW1ldHJpY0NyeXB0b0tleSk6IFByb21pc2U8U3ltbWV0cmljQ3J5cHRvS2V5PiB7XG4gICAgICAgIGlmIChrZXkgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGtleTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGVuY0tleSA9IGF3YWl0IHRoaXMuZ2V0RW5jS2V5KCk7XG4gICAgICAgIGlmIChlbmNLZXkgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGVuY0tleTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmdldEtleSgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVzb2x2ZUxlZ2FjeUtleShlbmNUeXBlOiBFbmNyeXB0aW9uVHlwZSwga2V5OiBTeW1tZXRyaWNDcnlwdG9LZXkpOiBTeW1tZXRyaWNDcnlwdG9LZXkge1xuICAgICAgICBpZiAoZW5jVHlwZSA9PT0gRW5jcnlwdGlvblR5cGUuQWVzQ2JjMTI4X0htYWNTaGEyNTZfQjY0ICYmXG4gICAgICAgICAgICBrZXkuZW5jVHlwZSA9PT0gRW5jcnlwdGlvblR5cGUuQWVzQ2JjMjU2X0I2NCkge1xuICAgICAgICAgICAgLy8gT2xkIGVuY3J5cHQtdGhlbi1tYWMgc2NoZW1lLCBtYWtlIGEgbmV3IGtleVxuICAgICAgICAgICAgaWYgKHRoaXMubGVnYWN5RXRtS2V5ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxlZ2FjeUV0bUtleSA9IG5ldyBTeW1tZXRyaWNDcnlwdG9LZXkoa2V5LmtleSwgRW5jcnlwdGlvblR5cGUuQWVzQ2JjMTI4X0htYWNTaGEyNTZfQjY0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxlZ2FjeUV0bUtleTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBzdHJldGNoS2V5KGtleTogU3ltbWV0cmljQ3J5cHRvS2V5KTogUHJvbWlzZTxTeW1tZXRyaWNDcnlwdG9LZXk+IHtcbiAgICAgICAgY29uc3QgbmV3S2V5ID0gbmV3IFVpbnQ4QXJyYXkoNjQpO1xuICAgICAgICBjb25zdCBlbmNLZXkgPSBhd2FpdCB0aGlzLmNyeXB0b0Z1bmN0aW9uU2VydmljZS5oa2RmRXhwYW5kKGtleS5rZXksICdlbmMnLCAzMiwgJ3NoYTI1NicpO1xuICAgICAgICBjb25zdCBtYWNLZXkgPSBhd2FpdCB0aGlzLmNyeXB0b0Z1bmN0aW9uU2VydmljZS5oa2RmRXhwYW5kKGtleS5rZXksICdtYWMnLCAzMiwgJ3NoYTI1NicpO1xuICAgICAgICBuZXdLZXkuc2V0KG5ldyBVaW50OEFycmF5KGVuY0tleSkpO1xuICAgICAgICBuZXdLZXkuc2V0KG5ldyBVaW50OEFycmF5KG1hY0tleSksIDMyKTtcbiAgICAgICAgcmV0dXJuIG5ldyBTeW1tZXRyaWNDcnlwdG9LZXkobmV3S2V5LmJ1ZmZlcik7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBoYXNoUGhyYXNlKGhhc2g6IEFycmF5QnVmZmVyLCBtaW5pbXVtRW50cm9weTogbnVtYmVyID0gNjQpIHtcbiAgICAgICAgY29uc3QgZW50cm9weVBlcldvcmQgPSBNYXRoLmxvZyhFRUZMb25nV29yZExpc3QubGVuZ3RoKSAvIE1hdGgubG9nKDIpO1xuICAgICAgICBsZXQgbnVtV29yZHMgPSBNYXRoLmNlaWwobWluaW11bUVudHJvcHkgLyBlbnRyb3B5UGVyV29yZCk7XG5cbiAgICAgICAgY29uc3QgaGFzaEFyciA9IEFycmF5LmZyb20obmV3IFVpbnQ4QXJyYXkoaGFzaCkpO1xuICAgICAgICBjb25zdCBlbnRyb3B5QXZhaWxhYmxlID0gaGFzaEFyci5sZW5ndGggKiA0O1xuICAgICAgICBpZiAobnVtV29yZHMgKiBlbnRyb3B5UGVyV29yZCA+IGVudHJvcHlBdmFpbGFibGUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignT3V0cHV0IGVudHJvcHkgb2YgaGFzaCBmdW5jdGlvbiBpcyB0b28gc21hbGwnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHBocmFzZTogc3RyaW5nW10gPSBbXTtcbiAgICAgICAgbGV0IGhhc2hOdW1iZXIgPSBiaWdJbnQuZnJvbUFycmF5KGhhc2hBcnIsIDI1Nik7XG4gICAgICAgIHdoaWxlIChudW1Xb3Jkcy0tKSB7XG4gICAgICAgICAgICBjb25zdCByZW1haW5kZXIgPSBoYXNoTnVtYmVyLm1vZChFRUZMb25nV29yZExpc3QubGVuZ3RoKTtcbiAgICAgICAgICAgIGhhc2hOdW1iZXIgPSBoYXNoTnVtYmVyLmRpdmlkZShFRUZMb25nV29yZExpc3QubGVuZ3RoKTtcbiAgICAgICAgICAgIHBocmFzZS5wdXNoKEVFRkxvbmdXb3JkTGlzdFtyZW1haW5kZXIgYXMgYW55XSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBocmFzZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIGJ1aWxkRW5jS2V5KGtleTogU3ltbWV0cmljQ3J5cHRvS2V5LCBlbmNLZXk6IEFycmF5QnVmZmVyKVxuICAgICAgICA6IFByb21pc2U8W1N5bW1ldHJpY0NyeXB0b0tleSwgQ2lwaGVyU3RyaW5nXT4ge1xuICAgICAgICBsZXQgZW5jS2V5RW5jOiBDaXBoZXJTdHJpbmcgPSBudWxsO1xuICAgICAgICBpZiAoa2V5LmtleS5ieXRlTGVuZ3RoID09PSAzMikge1xuICAgICAgICAgICAgY29uc3QgbmV3S2V5ID0gYXdhaXQgdGhpcy5zdHJldGNoS2V5KGtleSk7XG4gICAgICAgICAgICBlbmNLZXlFbmMgPSBhd2FpdCB0aGlzLmVuY3J5cHQoZW5jS2V5LCBuZXdLZXkpO1xuICAgICAgICB9IGVsc2UgaWYgKGtleS5rZXkuYnl0ZUxlbmd0aCA9PT0gNjQpIHtcbiAgICAgICAgICAgIGVuY0tleUVuYyA9IGF3YWl0IHRoaXMuZW5jcnlwdChlbmNLZXksIGtleSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQga2V5IHNpemUuJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtuZXcgU3ltbWV0cmljQ3J5cHRvS2V5KGVuY0tleSksIGVuY0tleUVuY107XG4gICAgfVxufVxuIiwiZXhwb3J0IGNsYXNzIEVudmlyb25tZW50VXJscyB7XG4gICAgYmFzZTogc3RyaW5nO1xuICAgIGFwaTogc3RyaW5nO1xuICAgIGlkZW50aXR5OiBzdHJpbmc7XG4gICAgZXZlbnRzOiBzdHJpbmc7XG59XG4iLCJpbXBvcnQgeyBFbnZpcm9ubWVudFVybHMgfSBmcm9tICcuLi9tb2RlbHMvZG9tYWluL2Vudmlyb25tZW50VXJscyc7XG5cbmltcG9ydCB7IENvbnN0YW50c1NlcnZpY2UgfSBmcm9tICcuL2NvbnN0YW50cy5zZXJ2aWNlJztcblxuaW1wb3J0IHsgQXBpU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9hcGkuc2VydmljZSc7XG5pbXBvcnQgeyBFbnZpcm9ubWVudFNlcnZpY2UgYXMgRW52aXJvbm1lbnRTZXJ2aWNlQWJzdHJhY3Rpb24gfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvZW52aXJvbm1lbnQuc2VydmljZSc7XG5pbXBvcnQgeyBOb3RpZmljYXRpb25zU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9ub3RpZmljYXRpb25zLnNlcnZpY2UnO1xuaW1wb3J0IHsgU3RvcmFnZVNlcnZpY2UgfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvc3RvcmFnZS5zZXJ2aWNlJztcblxuZXhwb3J0IGNsYXNzIEVudmlyb25tZW50U2VydmljZSBpbXBsZW1lbnRzIEVudmlyb25tZW50U2VydmljZUFic3RyYWN0aW9uIHtcbiAgICBiYXNlVXJsOiBzdHJpbmc7XG4gICAgd2ViVmF1bHRVcmw6IHN0cmluZztcbiAgICBhcGlVcmw6IHN0cmluZztcbiAgICBpZGVudGl0eVVybDogc3RyaW5nO1xuICAgIGljb25zVXJsOiBzdHJpbmc7XG4gICAgbm90aWZpY2F0aW9uc1VybDogc3RyaW5nO1xuICAgIGV2ZW50c1VybDogc3RyaW5nO1xuICAgIGVudGVycHJpc2VVcmw6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgYXBpU2VydmljZTogQXBpU2VydmljZSwgcHJpdmF0ZSBzdG9yYWdlU2VydmljZTogU3RvcmFnZVNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgbm90aWZpY2F0aW9uc1NlcnZpY2U6IE5vdGlmaWNhdGlvbnNTZXJ2aWNlKSB7IH1cblxuICAgIGdldFdlYlZhdWx0VXJsKCk6IHN0cmluZyB7XG4gICAgICAgIGlmICh0aGlzLndlYlZhdWx0VXJsICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLndlYlZhdWx0VXJsO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuYmFzZVVybCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYmFzZVVybDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBhc3luYyBzZXRVcmxzRnJvbVN0b3JhZ2UoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IHVybHNPYmo6IGFueSA9IGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2UuZ2V0KENvbnN0YW50c1NlcnZpY2UuZW52aXJvbm1lbnRVcmxzS2V5KTtcbiAgICAgICAgY29uc3QgdXJscyA9IHVybHNPYmogfHwge1xuICAgICAgICAgICAgYmFzZTogbnVsbCxcbiAgICAgICAgICAgIGFwaTogbnVsbCxcbiAgICAgICAgICAgIGlkZW50aXR5OiBudWxsLFxuICAgICAgICAgICAgaWNvbnM6IG51bGwsXG4gICAgICAgICAgICBub3RpZmljYXRpb25zOiBudWxsLFxuICAgICAgICAgICAgZXZlbnRzOiBudWxsLFxuICAgICAgICAgICAgd2ViVmF1bHQ6IG51bGwsXG4gICAgICAgICAgICBlbnRlcnByaXNlOiBudWxsLFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGVudlVybHMgPSBuZXcgRW52aXJvbm1lbnRVcmxzKCk7XG5cbiAgICAgICAgaWYgKHVybHMuYmFzZSkge1xuICAgICAgICAgICAgdGhpcy5iYXNlVXJsID0gZW52VXJscy5iYXNlID0gdXJscy5iYXNlO1xuICAgICAgICAgICAgdGhpcy5hcGlTZXJ2aWNlLnNldFVybHMoZW52VXJscyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLndlYlZhdWx0VXJsID0gdXJscy53ZWJWYXVsdDtcbiAgICAgICAgdGhpcy5hcGlVcmwgPSBlbnZVcmxzLmFwaSA9IHVybHMuYXBpO1xuICAgICAgICB0aGlzLmlkZW50aXR5VXJsID0gZW52VXJscy5pZGVudGl0eSA9IHVybHMuaWRlbnRpdHk7XG4gICAgICAgIHRoaXMuaWNvbnNVcmwgPSB1cmxzLmljb25zO1xuICAgICAgICB0aGlzLm5vdGlmaWNhdGlvbnNVcmwgPSB1cmxzLm5vdGlmaWNhdGlvbnM7XG4gICAgICAgIHRoaXMuZXZlbnRzVXJsID0gZW52VXJscy5ldmVudHMgPSB1cmxzLmV2ZW50cztcbiAgICAgICAgdGhpcy5lbnRlcnByaXNlVXJsID0gdXJscy5lbnRlcnByaXNlO1xuICAgICAgICB0aGlzLmFwaVNlcnZpY2Uuc2V0VXJscyhlbnZVcmxzKTtcbiAgICB9XG5cbiAgICBhc3luYyBzZXRVcmxzKHVybHM6IGFueSk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIHVybHMuYmFzZSA9IHRoaXMuZm9ybWF0VXJsKHVybHMuYmFzZSk7XG4gICAgICAgIHVybHMud2ViVmF1bHQgPSB0aGlzLmZvcm1hdFVybCh1cmxzLndlYlZhdWx0KTtcbiAgICAgICAgdXJscy5hcGkgPSB0aGlzLmZvcm1hdFVybCh1cmxzLmFwaSk7XG4gICAgICAgIHVybHMuaWRlbnRpdHkgPSB0aGlzLmZvcm1hdFVybCh1cmxzLmlkZW50aXR5KTtcbiAgICAgICAgdXJscy5pY29ucyA9IHRoaXMuZm9ybWF0VXJsKHVybHMuaWNvbnMpO1xuICAgICAgICB1cmxzLm5vdGlmaWNhdGlvbnMgPSB0aGlzLmZvcm1hdFVybCh1cmxzLm5vdGlmaWNhdGlvbnMpO1xuICAgICAgICB1cmxzLmV2ZW50cyA9IHRoaXMuZm9ybWF0VXJsKHVybHMuZXZlbnRzKTtcbiAgICAgICAgdXJscy5lbnRlcnByaXNlID0gdGhpcy5mb3JtYXRVcmwodXJscy5lbnRlcnByaXNlKTtcblxuICAgICAgICBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLnNhdmUoQ29uc3RhbnRzU2VydmljZS5lbnZpcm9ubWVudFVybHNLZXksIHtcbiAgICAgICAgICAgIGJhc2U6IHVybHMuYmFzZSxcbiAgICAgICAgICAgIGFwaTogdXJscy5hcGksXG4gICAgICAgICAgICBpZGVudGl0eTogdXJscy5pZGVudGl0eSxcbiAgICAgICAgICAgIHdlYlZhdWx0OiB1cmxzLndlYlZhdWx0LFxuICAgICAgICAgICAgaWNvbnM6IHVybHMuaWNvbnMsXG4gICAgICAgICAgICBub3RpZmljYXRpb25zOiB1cmxzLm5vdGlmaWNhdGlvbnMsXG4gICAgICAgICAgICBldmVudHM6IHVybHMuZXZlbnRzLFxuICAgICAgICAgICAgZW50ZXJwcmlzZTogdXJscy5lbnRlcnByaXNlLFxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmJhc2VVcmwgPSB1cmxzLmJhc2U7XG4gICAgICAgIHRoaXMud2ViVmF1bHRVcmwgPSB1cmxzLndlYlZhdWx0O1xuICAgICAgICB0aGlzLmFwaVVybCA9IHVybHMuYXBpO1xuICAgICAgICB0aGlzLmlkZW50aXR5VXJsID0gdXJscy5pZGVudGl0eTtcbiAgICAgICAgdGhpcy5pY29uc1VybCA9IHVybHMuaWNvbnM7XG4gICAgICAgIHRoaXMubm90aWZpY2F0aW9uc1VybCA9IHVybHMubm90aWZpY2F0aW9ucztcbiAgICAgICAgdGhpcy5ldmVudHNVcmwgPSB1cmxzLmV2ZW50cztcbiAgICAgICAgdGhpcy5lbnRlcnByaXNlVXJsID0gdXJscy5lbnRlcnByaXNlO1xuXG4gICAgICAgIGNvbnN0IGVudlVybHMgPSBuZXcgRW52aXJvbm1lbnRVcmxzKCk7XG4gICAgICAgIGlmICh0aGlzLmJhc2VVcmwpIHtcbiAgICAgICAgICAgIGVudlVybHMuYmFzZSA9IHRoaXMuYmFzZVVybDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGVudlVybHMuYXBpID0gdGhpcy5hcGlVcmw7XG4gICAgICAgICAgICBlbnZVcmxzLmlkZW50aXR5ID0gdGhpcy5pZGVudGl0eVVybDtcbiAgICAgICAgICAgIGVudlVybHMuZXZlbnRzID0gdGhpcy5ldmVudHNVcmw7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmFwaVNlcnZpY2Uuc2V0VXJscyhlbnZVcmxzKTtcbiAgICAgICAgaWYgKHRoaXMubm90aWZpY2F0aW9uc1NlcnZpY2UgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5ub3RpZmljYXRpb25zU2VydmljZS5pbml0KHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1cmxzO1xuICAgIH1cblxuICAgIHByaXZhdGUgZm9ybWF0VXJsKHVybDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgaWYgKHVybCA9PSBudWxsIHx8IHVybCA9PT0gJycpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgdXJsID0gdXJsLnJlcGxhY2UoL1xcLyskL2csICcnKTtcbiAgICAgICAgaWYgKCF1cmwuc3RhcnRzV2l0aCgnaHR0cDovLycpICYmICF1cmwuc3RhcnRzV2l0aCgnaHR0cHM6Ly8nKSkge1xuICAgICAgICAgICAgdXJsID0gJ2h0dHBzOi8vJyArIHVybDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB1cmwudHJpbSgpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IEZvbGRlclJlc3BvbnNlIH0gZnJvbSAnLi4vcmVzcG9uc2UvZm9sZGVyUmVzcG9uc2UnO1xuXG5leHBvcnQgY2xhc3MgRm9sZGVyRGF0YSB7XG4gICAgaWQ6IHN0cmluZztcbiAgICB1c2VySWQ6IHN0cmluZztcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgcmV2aXNpb25EYXRlOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihyZXNwb25zZTogRm9sZGVyUmVzcG9uc2UsIHVzZXJJZDogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMudXNlcklkID0gdXNlcklkO1xuICAgICAgICB0aGlzLm5hbWUgPSByZXNwb25zZS5uYW1lO1xuICAgICAgICB0aGlzLmlkID0gcmVzcG9uc2UuaWQ7XG4gICAgICAgIHRoaXMucmV2aXNpb25EYXRlID0gcmVzcG9uc2UucmV2aXNpb25EYXRlO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IEZvbGRlckRhdGEgfSBmcm9tICcuLi9kYXRhL2ZvbGRlckRhdGEnO1xuXG5pbXBvcnQgeyBGb2xkZXJWaWV3IH0gZnJvbSAnLi4vdmlldy9mb2xkZXJWaWV3JztcblxuaW1wb3J0IHsgQ2lwaGVyU3RyaW5nIH0gZnJvbSAnLi9jaXBoZXJTdHJpbmcnO1xuaW1wb3J0IERvbWFpbiBmcm9tICcuL2RvbWFpbkJhc2UnO1xuXG5leHBvcnQgY2xhc3MgRm9sZGVyIGV4dGVuZHMgRG9tYWluIHtcbiAgICBpZDogc3RyaW5nO1xuICAgIG5hbWU6IENpcGhlclN0cmluZztcbiAgICByZXZpc2lvbkRhdGU6IERhdGU7XG5cbiAgICBjb25zdHJ1Y3RvcihvYmo/OiBGb2xkZXJEYXRhLCBhbHJlYWR5RW5jcnlwdGVkOiBib29sZWFuID0gZmFsc2UpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgaWYgKG9iaiA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmJ1aWxkRG9tYWluTW9kZWwodGhpcywgb2JqLCB7XG4gICAgICAgICAgICBpZDogbnVsbCxcbiAgICAgICAgICAgIG5hbWU6IG51bGwsXG4gICAgICAgIH0sIGFscmVhZHlFbmNyeXB0ZWQsIFsnaWQnXSk7XG5cbiAgICAgICAgdGhpcy5yZXZpc2lvbkRhdGUgPSBvYmoucmV2aXNpb25EYXRlICE9IG51bGwgPyBuZXcgRGF0ZShvYmoucmV2aXNpb25EYXRlKSA6IG51bGw7XG4gICAgfVxuXG4gICAgZGVjcnlwdCgpOiBQcm9taXNlPEZvbGRlclZpZXc+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVjcnlwdE9iaihuZXcgRm9sZGVyVmlldyh0aGlzKSwge1xuICAgICAgICAgICAgbmFtZTogbnVsbCxcbiAgICAgICAgfSwgbnVsbCk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgRm9sZGVyIH0gZnJvbSAnLi4vZG9tYWluL2ZvbGRlcic7XG5cbmV4cG9ydCBjbGFzcyBGb2xkZXJSZXF1ZXN0IHtcbiAgICBuYW1lOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3Rvcihmb2xkZXI6IEZvbGRlcikge1xuICAgICAgICB0aGlzLm5hbWUgPSBmb2xkZXIubmFtZSA/IGZvbGRlci5uYW1lLmVuY3J5cHRlZFN0cmluZyA6IG51bGw7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgRm9sZGVyRGF0YSB9IGZyb20gJy4uL21vZGVscy9kYXRhL2ZvbGRlckRhdGEnO1xuXG5pbXBvcnQgeyBGb2xkZXIgfSBmcm9tICcuLi9tb2RlbHMvZG9tYWluL2ZvbGRlcic7XG5pbXBvcnQgeyBTeW1tZXRyaWNDcnlwdG9LZXkgfSBmcm9tICcuLi9tb2RlbHMvZG9tYWluL3N5bW1ldHJpY0NyeXB0b0tleSc7XG5pbXBvcnQgeyBUcmVlTm9kZSB9IGZyb20gJy4uL21vZGVscy9kb21haW4vdHJlZU5vZGUnO1xuXG5pbXBvcnQgeyBGb2xkZXJSZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWxzL3JlcXVlc3QvZm9sZGVyUmVxdWVzdCc7XG5cbmltcG9ydCB7IEZvbGRlclJlc3BvbnNlIH0gZnJvbSAnLi4vbW9kZWxzL3Jlc3BvbnNlL2ZvbGRlclJlc3BvbnNlJztcblxuaW1wb3J0IHsgRm9sZGVyVmlldyB9IGZyb20gJy4uL21vZGVscy92aWV3L2ZvbGRlclZpZXcnO1xuXG5pbXBvcnQgeyBBcGlTZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL2FwaS5zZXJ2aWNlJztcbmltcG9ydCB7IENpcGhlclNlcnZpY2UgfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvY2lwaGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ3J5cHRvU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9jcnlwdG8uc2VydmljZSc7XG5pbXBvcnQgeyBGb2xkZXJTZXJ2aWNlIGFzIEZvbGRlclNlcnZpY2VBYnN0cmFjdGlvbiB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9mb2xkZXIuc2VydmljZSc7XG5pbXBvcnQgeyBJMThuU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9pMThuLnNlcnZpY2UnO1xuaW1wb3J0IHsgU3RvcmFnZVNlcnZpY2UgfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvc3RvcmFnZS5zZXJ2aWNlJztcbmltcG9ydCB7IFVzZXJTZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL3VzZXIuc2VydmljZSc7XG5pbXBvcnQgeyBDaXBoZXJEYXRhIH0gZnJvbSAnLi4vbW9kZWxzL2RhdGEvY2lwaGVyRGF0YSc7XG5cbmltcG9ydCB7IFNlcnZpY2VVdGlscyB9IGZyb20gJy4uL21pc2Mvc2VydmljZVV0aWxzJztcbmltcG9ydCB7IFV0aWxzIH0gZnJvbSAnLi4vbWlzYy91dGlscyc7XG5cbmNvbnN0IEtleXMgPSB7XG4gICAgZm9sZGVyc1ByZWZpeDogJ2ZvbGRlcnNfJyxcbiAgICBjaXBoZXJzUHJlZml4OiAnY2lwaGVyc18nLFxufTtcbmNvbnN0IE5lc3RpbmdEZWxpbWl0ZXIgPSAnLyc7XG5cbmV4cG9ydCBjbGFzcyBGb2xkZXJTZXJ2aWNlIGltcGxlbWVudHMgRm9sZGVyU2VydmljZUFic3RyYWN0aW9uIHtcbiAgICBkZWNyeXB0ZWRGb2xkZXJDYWNoZTogRm9sZGVyVmlld1tdO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBjcnlwdG9TZXJ2aWNlOiBDcnlwdG9TZXJ2aWNlLCBwcml2YXRlIHVzZXJTZXJ2aWNlOiBVc2VyU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBhcGlTZXJ2aWNlOiBBcGlTZXJ2aWNlLCBwcml2YXRlIHN0b3JhZ2VTZXJ2aWNlOiBTdG9yYWdlU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBpMThuU2VydmljZTogSTE4blNlcnZpY2UsIHByaXZhdGUgY2lwaGVyU2VydmljZTogQ2lwaGVyU2VydmljZSkgeyB9XG5cbiAgICBjbGVhckNhY2hlKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmRlY3J5cHRlZEZvbGRlckNhY2hlID0gbnVsbDtcbiAgICB9XG5cbiAgICBhc3luYyBlbmNyeXB0KG1vZGVsOiBGb2xkZXJWaWV3LCBrZXk/OiBTeW1tZXRyaWNDcnlwdG9LZXkpOiBQcm9taXNlPEZvbGRlcj4ge1xuICAgICAgICBjb25zdCBmb2xkZXIgPSBuZXcgRm9sZGVyKCk7XG4gICAgICAgIGZvbGRlci5pZCA9IG1vZGVsLmlkO1xuICAgICAgICBmb2xkZXIubmFtZSA9IGF3YWl0IHRoaXMuY3J5cHRvU2VydmljZS5lbmNyeXB0KG1vZGVsLm5hbWUsIGtleSk7XG4gICAgICAgIHJldHVybiBmb2xkZXI7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0KGlkOiBzdHJpbmcpOiBQcm9taXNlPEZvbGRlcj4ge1xuICAgICAgICBjb25zdCB1c2VySWQgPSBhd2FpdCB0aGlzLnVzZXJTZXJ2aWNlLmdldFVzZXJJZCgpO1xuICAgICAgICBjb25zdCBmb2xkZXJzID0gYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5nZXQ8eyBbaWQ6IHN0cmluZ106IEZvbGRlckRhdGE7IH0+KFxuICAgICAgICAgICAgS2V5cy5mb2xkZXJzUHJlZml4ICsgdXNlcklkKTtcbiAgICAgICAgaWYgKGZvbGRlcnMgPT0gbnVsbCB8fCAhZm9sZGVycy5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ldyBGb2xkZXIoZm9sZGVyc1tpZF0pO1xuICAgIH1cblxuICAgIGFzeW5jIGdldEFsbCgpOiBQcm9taXNlPEZvbGRlcltdPiB7XG4gICAgICAgIGNvbnN0IHVzZXJJZCA9IGF3YWl0IHRoaXMudXNlclNlcnZpY2UuZ2V0VXNlcklkKCk7XG4gICAgICAgIGNvbnN0IGZvbGRlcnMgPSBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldDx7IFtpZDogc3RyaW5nXTogRm9sZGVyRGF0YTsgfT4oXG4gICAgICAgICAgICBLZXlzLmZvbGRlcnNQcmVmaXggKyB1c2VySWQpO1xuICAgICAgICBjb25zdCByZXNwb25zZTogRm9sZGVyW10gPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBpZCBpbiBmb2xkZXJzKSB7XG4gICAgICAgICAgICBpZiAoZm9sZGVycy5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICAgICAgICAgICAgICByZXNwb25zZS5wdXNoKG5ldyBGb2xkZXIoZm9sZGVyc1tpZF0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0QWxsRGVjcnlwdGVkKCk6IFByb21pc2U8Rm9sZGVyVmlld1tdPiB7XG4gICAgICAgIGlmICh0aGlzLmRlY3J5cHRlZEZvbGRlckNhY2hlICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRlY3J5cHRlZEZvbGRlckNhY2hlO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgaGFzS2V5ID0gYXdhaXQgdGhpcy5jcnlwdG9TZXJ2aWNlLmhhc0tleSgpO1xuICAgICAgICBpZiAoIWhhc0tleSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBrZXkuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBkZWNGb2xkZXJzOiBGb2xkZXJWaWV3W10gPSBbXTtcbiAgICAgICAgY29uc3QgcHJvbWlzZXM6IFByb21pc2U8YW55PltdID0gW107XG4gICAgICAgIGNvbnN0IGZvbGRlcnMgPSBhd2FpdCB0aGlzLmdldEFsbCgpO1xuICAgICAgICBmb2xkZXJzLmZvckVhY2goKGZvbGRlcikgPT4ge1xuICAgICAgICAgICAgcHJvbWlzZXMucHVzaChmb2xkZXIuZGVjcnlwdCgpLnRoZW4oKGYpID0+IGRlY0ZvbGRlcnMucHVzaChmKSkpO1xuICAgICAgICB9KTtcblxuICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChwcm9taXNlcyk7XG4gICAgICAgIGRlY0ZvbGRlcnMuc29ydChVdGlscy5nZXRTb3J0RnVuY3Rpb24odGhpcy5pMThuU2VydmljZSwgJ25hbWUnKSk7XG5cbiAgICAgICAgY29uc3Qgbm9uZUZvbGRlciA9IG5ldyBGb2xkZXJWaWV3KCk7XG4gICAgICAgIG5vbmVGb2xkZXIubmFtZSA9IHRoaXMuaTE4blNlcnZpY2UudCgnbm9uZUZvbGRlcicpO1xuICAgICAgICBkZWNGb2xkZXJzLnB1c2gobm9uZUZvbGRlcik7XG5cbiAgICAgICAgdGhpcy5kZWNyeXB0ZWRGb2xkZXJDYWNoZSA9IGRlY0ZvbGRlcnM7XG4gICAgICAgIHJldHVybiB0aGlzLmRlY3J5cHRlZEZvbGRlckNhY2hlO1xuICAgIH1cblxuICAgIGFzeW5jIGdldEFsbE5lc3RlZCgpOiBQcm9taXNlPFRyZWVOb2RlPEZvbGRlclZpZXc+W10+IHtcbiAgICAgICAgY29uc3QgZm9sZGVycyA9IGF3YWl0IHRoaXMuZ2V0QWxsRGVjcnlwdGVkKCk7XG4gICAgICAgIGNvbnN0IG5vZGVzOiBUcmVlTm9kZTxGb2xkZXJWaWV3PltdID0gW107XG4gICAgICAgIGZvbGRlcnMuZm9yRWFjaCgoZikgPT4ge1xuICAgICAgICAgICAgY29uc3QgZm9sZGVyQ29weSA9IG5ldyBGb2xkZXJWaWV3KCk7XG4gICAgICAgICAgICBmb2xkZXJDb3B5LmlkID0gZi5pZDtcbiAgICAgICAgICAgIGZvbGRlckNvcHkucmV2aXNpb25EYXRlID0gZi5yZXZpc2lvbkRhdGU7XG4gICAgICAgICAgICBjb25zdCBwYXJ0cyA9IGYubmFtZSAhPSBudWxsID8gZi5uYW1lLnJlcGxhY2UoL15cXC8rfFxcLyskL2csICcnKS5zcGxpdChOZXN0aW5nRGVsaW1pdGVyKSA6IFtdO1xuICAgICAgICAgICAgU2VydmljZVV0aWxzLm5lc3RlZFRyYXZlcnNlKG5vZGVzLCAwLCBwYXJ0cywgZm9sZGVyQ29weSwgbnVsbCwgTmVzdGluZ0RlbGltaXRlcik7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbm9kZXM7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0TmVzdGVkKGlkOiBzdHJpbmcpOiBQcm9taXNlPFRyZWVOb2RlPEZvbGRlclZpZXc+PiB7XG4gICAgICAgIGNvbnN0IGZvbGRlcnMgPSBhd2FpdCB0aGlzLmdldEFsbE5lc3RlZCgpO1xuICAgICAgICByZXR1cm4gU2VydmljZVV0aWxzLmdldFRyZWVOb2RlT2JqZWN0KGZvbGRlcnMsIGlkKSBhcyBUcmVlTm9kZTxGb2xkZXJWaWV3PjtcbiAgICB9XG5cbiAgICBhc3luYyBzYXZlV2l0aFNlcnZlcihmb2xkZXI6IEZvbGRlcik6IFByb21pc2U8YW55PiB7XG4gICAgICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgRm9sZGVyUmVxdWVzdChmb2xkZXIpO1xuXG4gICAgICAgIGxldCByZXNwb25zZTogRm9sZGVyUmVzcG9uc2U7XG4gICAgICAgIGlmIChmb2xkZXIuaWQgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmFwaVNlcnZpY2UucG9zdEZvbGRlcihyZXF1ZXN0KTtcbiAgICAgICAgICAgIGZvbGRlci5pZCA9IHJlc3BvbnNlLmlkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmFwaVNlcnZpY2UucHV0Rm9sZGVyKGZvbGRlci5pZCwgcmVxdWVzdCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB1c2VySWQgPSBhd2FpdCB0aGlzLnVzZXJTZXJ2aWNlLmdldFVzZXJJZCgpO1xuICAgICAgICBjb25zdCBkYXRhID0gbmV3IEZvbGRlckRhdGEocmVzcG9uc2UsIHVzZXJJZCk7XG4gICAgICAgIGF3YWl0IHRoaXMudXBzZXJ0KGRhdGEpO1xuICAgIH1cblxuICAgIGFzeW5jIHVwc2VydChmb2xkZXI6IEZvbGRlckRhdGEgfCBGb2xkZXJEYXRhW10pOiBQcm9taXNlPGFueT4ge1xuICAgICAgICBjb25zdCB1c2VySWQgPSBhd2FpdCB0aGlzLnVzZXJTZXJ2aWNlLmdldFVzZXJJZCgpO1xuICAgICAgICBsZXQgZm9sZGVycyA9IGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2UuZ2V0PHsgW2lkOiBzdHJpbmddOiBGb2xkZXJEYXRhOyB9PihcbiAgICAgICAgICAgIEtleXMuZm9sZGVyc1ByZWZpeCArIHVzZXJJZCk7XG4gICAgICAgIGlmIChmb2xkZXJzID09IG51bGwpIHtcbiAgICAgICAgICAgIGZvbGRlcnMgPSB7fTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChmb2xkZXIgaW5zdGFuY2VvZiBGb2xkZXJEYXRhKSB7XG4gICAgICAgICAgICBjb25zdCBmID0gZm9sZGVyIGFzIEZvbGRlckRhdGE7XG4gICAgICAgICAgICBmb2xkZXJzW2YuaWRdID0gZjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIChmb2xkZXIgYXMgRm9sZGVyRGF0YVtdKS5mb3JFYWNoKChmKSA9PiB7XG4gICAgICAgICAgICAgICAgZm9sZGVyc1tmLmlkXSA9IGY7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2Uuc2F2ZShLZXlzLmZvbGRlcnNQcmVmaXggKyB1c2VySWQsIGZvbGRlcnMpO1xuICAgICAgICB0aGlzLmRlY3J5cHRlZEZvbGRlckNhY2hlID0gbnVsbDtcbiAgICB9XG5cbiAgICBhc3luYyByZXBsYWNlKGZvbGRlcnM6IHsgW2lkOiBzdHJpbmddOiBGb2xkZXJEYXRhOyB9KTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgY29uc3QgdXNlcklkID0gYXdhaXQgdGhpcy51c2VyU2VydmljZS5nZXRVc2VySWQoKTtcbiAgICAgICAgYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5zYXZlKEtleXMuZm9sZGVyc1ByZWZpeCArIHVzZXJJZCwgZm9sZGVycyk7XG4gICAgICAgIHRoaXMuZGVjcnlwdGVkRm9sZGVyQ2FjaGUgPSBudWxsO1xuICAgIH1cblxuICAgIGFzeW5jIGNsZWFyKHVzZXJJZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5yZW1vdmUoS2V5cy5mb2xkZXJzUHJlZml4ICsgdXNlcklkKTtcbiAgICAgICAgdGhpcy5kZWNyeXB0ZWRGb2xkZXJDYWNoZSA9IG51bGw7XG4gICAgfVxuXG4gICAgYXN5bmMgZGVsZXRlKGlkOiBzdHJpbmcgfCBzdHJpbmdbXSk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIGNvbnN0IHVzZXJJZCA9IGF3YWl0IHRoaXMudXNlclNlcnZpY2UuZ2V0VXNlcklkKCk7XG4gICAgICAgIGNvbnN0IGZvbGRlcnMgPSBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldDx7IFtpZDogc3RyaW5nXTogRm9sZGVyRGF0YTsgfT4oXG4gICAgICAgICAgICBLZXlzLmZvbGRlcnNQcmVmaXggKyB1c2VySWQpO1xuICAgICAgICBpZiAoZm9sZGVycyA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGlkID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgaWYgKGZvbGRlcnNbaWRdID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWxldGUgZm9sZGVyc1tpZF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAoaWQgYXMgc3RyaW5nW10pLmZvckVhY2goKGkpID0+IHtcbiAgICAgICAgICAgICAgICBkZWxldGUgZm9sZGVyc1tpXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5zYXZlKEtleXMuZm9sZGVyc1ByZWZpeCArIHVzZXJJZCwgZm9sZGVycyk7XG4gICAgICAgIHRoaXMuZGVjcnlwdGVkRm9sZGVyQ2FjaGUgPSBudWxsO1xuXG4gICAgICAgIC8vIEl0ZW1zIGluIGEgZGVsZXRlZCBmb2xkZXIgYXJlIHJlLWFzc2lnbmVkIHRvIFwiTm8gRm9sZGVyXCJcbiAgICAgICAgY29uc3QgY2lwaGVycyA9IGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2UuZ2V0PHsgW2lkOiBzdHJpbmddOiBDaXBoZXJEYXRhOyB9PihLZXlzLmNpcGhlcnNQcmVmaXggKyB1c2VySWQpO1xuICAgICAgICBpZiAoY2lwaGVycyAhPSBudWxsKSB7XG4gICAgICAgICAgICBjb25zdCB1cGRhdGVzOiBDaXBoZXJEYXRhW10gPSBbXTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgY0lkIGluIGNpcGhlcnMpIHtcbiAgICAgICAgICAgICAgICBpZiAoY2lwaGVyc1tjSWRdLmZvbGRlcklkID09PSBpZCkge1xuICAgICAgICAgICAgICAgICAgICBjaXBoZXJzW2NJZF0uZm9sZGVySWQgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVzLnB1c2goY2lwaGVyc1tjSWRdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodXBkYXRlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jaXBoZXJTZXJ2aWNlLnVwc2VydCh1cGRhdGVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIGRlbGV0ZVdpdGhTZXJ2ZXIoaWQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIGF3YWl0IHRoaXMuYXBpU2VydmljZS5kZWxldGVGb2xkZXIoaWQpO1xuICAgICAgICBhd2FpdCB0aGlzLmRlbGV0ZShpZCk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgSTE4blNlcnZpY2UgYXMgSTE4blNlcnZpY2VBYnN0cmFjdGlvbiB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9pMThuLnNlcnZpY2UnO1xuXG5leHBvcnQgY2xhc3MgSTE4blNlcnZpY2UgaW1wbGVtZW50cyBJMThuU2VydmljZUFic3RyYWN0aW9uIHtcbiAgICBsb2NhbGU6IHN0cmluZztcbiAgICAvLyBGaXJzdCBsb2NhbGUgaXMgdGhlIGRlZmF1bHQgKEVuZ2xpc2gpXG4gICAgc3VwcG9ydGVkVHJhbnNsYXRpb25Mb2NhbGVzOiBzdHJpbmdbXSA9IFsnZW4nXTtcbiAgICB0cmFuc2xhdGlvbkxvY2FsZTogc3RyaW5nO1xuICAgIGNvbGxhdG9yOiBJbnRsLkNvbGxhdG9yO1xuICAgIGxvY2FsZU5hbWVzID0gbmV3IE1hcDxzdHJpbmcsIHN0cmluZz4oW1xuICAgICAgICBbJ2FmJywgJ0FmcmlrYWFucyddLFxuICAgICAgICBbJ2JlJywgJ9CR0LXQu9Cw0YDRg9GB0LrQsNGPJ10sXG4gICAgICAgIFsnYmcnLCAn0LHRitC70LPQsNGA0YHQutC4J10sXG4gICAgICAgIFsnY2EnLCAnY2F0YWzDoCddLFxuICAgICAgICBbJ2NzJywgJ8SNZcWhdGluYSddLFxuICAgICAgICBbJ2RhJywgJ2RhbnNrJ10sXG4gICAgICAgIFsnZGUnLCAnRGV1dHNjaCddLFxuICAgICAgICBbJ2VsJywgJ86VzrvOu863zr3Ouc66zqwnXSxcbiAgICAgICAgWydlbicsICdFbmdsaXNoJ10sXG4gICAgICAgIFsnZW4tR0InLCAnRW5nbGlzaCAoQnJpdGlzaCknXSxcbiAgICAgICAgWydlbycsICdFc3BlcmFudG8nXSxcbiAgICAgICAgWydlcycsICdlc3Bhw7FvbCddLFxuICAgICAgICBbJ2V0JywgJ2Vlc3RpJ10sXG4gICAgICAgIFsnZmEnLCAn2YHYp9ix2LPbjCddLFxuICAgICAgICBbJ2ZpJywgJ3N1b21pJ10sXG4gICAgICAgIFsnZnInLCAnZnJhbsOnYWlzJ10sXG4gICAgICAgIFsnaGUnLCAn16LXkdeo15nXqiddLFxuICAgICAgICBbJ2hpJywgJ+CkueCkv+CkqOCljeCkpuClgCddLFxuICAgICAgICBbJ2hyJywgJ2hydmF0c2tpJ10sXG4gICAgICAgIFsnaHUnLCAnbWFneWFyJ10sXG4gICAgICAgIFsnaWQnLCAnQmFoYXNhIEluZG9uZXNpYSddLFxuICAgICAgICBbJ2l0JywgJ2l0YWxpYW5vJ10sXG4gICAgICAgIFsnamEnLCAn5pel5pys6KqeJ10sXG4gICAgICAgIFsna28nLCAn7ZWc6rWt7Ja0J10sXG4gICAgICAgIFsnbHYnLCAnTGF0dmlldGlzJ10sXG4gICAgICAgIFsnbWwnLCAn4LSu4LSy4LSv4LS+4LSz4LSCJ10sXG4gICAgICAgIFsnbmInLCAnbm9yc2sgKGJva23DpWwpJ10sXG4gICAgICAgIFsnbmwnLCAnTmVkZXJsYW5kcyddLFxuICAgICAgICBbJ3BsJywgJ3BvbHNraSddLFxuICAgICAgICBbJ3B0LUJSJywgJ3BvcnR1Z3XDqnMgZG8gQnJhc2lsJ10sXG4gICAgICAgIFsncHQtUFQnLCAncG9ydHVndcOqcyddLFxuICAgICAgICBbJ3JvJywgJ3JvbcOibsSDJ10sXG4gICAgICAgIFsncnUnLCAn0YDRg9GB0YHQutC40LknXSxcbiAgICAgICAgWydzaycsICdzbG92ZW7EjWluYSddLFxuICAgICAgICBbJ3NyJywgJ9Ch0YDQv9GB0LrQuCddLFxuICAgICAgICBbJ3N2JywgJ3N2ZW5za2EnXSxcbiAgICAgICAgWyd0aCcsICfguYTguJfguKInXSxcbiAgICAgICAgWyd0cicsICdUw7xya8OnZSddLFxuICAgICAgICBbJ3VrJywgJ9GD0LrRgNCw0ZfQvdGB0YzQutCwJ10sXG4gICAgICAgIFsndmknLCAnVGnhur9uZyBWaeG7h3QnXSxcbiAgICAgICAgWyd6aC1DTicsICfkuK3mlofvvIjkuK3lm73lpKfpmYbvvIknXSxcbiAgICAgICAgWyd6aC1UVycsICfkuK3mlofvvIjlj7DngaPvvIknXSxcbiAgICBdKTtcblxuICAgIHByb3RlY3RlZCBpbml0ZWQ6IGJvb2xlYW47XG4gICAgcHJvdGVjdGVkIGRlZmF1bHRNZXNzYWdlczogYW55ID0ge307XG4gICAgcHJvdGVjdGVkIGxvY2FsZU1lc3NhZ2VzOiBhbnkgPSB7fTtcblxuICAgIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBzeXN0ZW1MYW5ndWFnZTogc3RyaW5nLCBwcm90ZWN0ZWQgbG9jYWxlc0RpcmVjdG9yeTogc3RyaW5nLFxuICAgICAgICBwcm90ZWN0ZWQgZ2V0TG9jYWxlc0pzb246IChmb3JtYXR0ZWRMb2NhbGU6IHN0cmluZykgPT4gUHJvbWlzZTxhbnk+KSB7XG4gICAgICAgIHRoaXMuc3lzdGVtTGFuZ3VhZ2UgPSBzeXN0ZW1MYW5ndWFnZS5yZXBsYWNlKCdfJywgJy0nKTtcbiAgICB9XG5cbiAgICBhc3luYyBpbml0KGxvY2FsZT86IHN0cmluZykge1xuICAgICAgICBpZiAodGhpcy5pbml0ZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaTE4biBhbHJlYWR5IGluaXRpYWxpemVkLicpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnN1cHBvcnRlZFRyYW5zbGF0aW9uTG9jYWxlcyA9PSBudWxsIHx8IHRoaXMuc3VwcG9ydGVkVHJhbnNsYXRpb25Mb2NhbGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdzdXBwb3J0ZWRUcmFuc2xhdGlvbkxvY2FsZXMgbm90IHNldC4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuaW5pdGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5sb2NhbGUgPSB0aGlzLnRyYW5zbGF0aW9uTG9jYWxlID0gbG9jYWxlICE9IG51bGwgPyBsb2NhbGUgOiB0aGlzLnN5c3RlbUxhbmd1YWdlO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLmNvbGxhdG9yID0gbmV3IEludGwuQ29sbGF0b3IodGhpcy5sb2NhbGUsIHsgbnVtZXJpYzogdHJ1ZSwgc2Vuc2l0aXZpdHk6ICdiYXNlJyB9KTtcbiAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgICB0aGlzLmNvbGxhdG9yID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnN1cHBvcnRlZFRyYW5zbGF0aW9uTG9jYWxlcy5pbmRleE9mKHRoaXMudHJhbnNsYXRpb25Mb2NhbGUpID09PSAtMSkge1xuICAgICAgICAgICAgdGhpcy50cmFuc2xhdGlvbkxvY2FsZSA9IHRoaXMudHJhbnNsYXRpb25Mb2NhbGUuc2xpY2UoMCwgMik7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnN1cHBvcnRlZFRyYW5zbGF0aW9uTG9jYWxlcy5pbmRleE9mKHRoaXMudHJhbnNsYXRpb25Mb2NhbGUpID09PSAtMSkge1xuICAgICAgICAgICAgICAgIHRoaXMudHJhbnNsYXRpb25Mb2NhbGUgPSB0aGlzLnN1cHBvcnRlZFRyYW5zbGF0aW9uTG9jYWxlc1swXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmxvY2FsZXNEaXJlY3RvcnkgIT0gbnVsbCkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWVzc2FnZXModGhpcy50cmFuc2xhdGlvbkxvY2FsZSwgdGhpcy5sb2NhbGVNZXNzYWdlcyk7XG4gICAgICAgICAgICBpZiAodGhpcy50cmFuc2xhdGlvbkxvY2FsZSAhPT0gdGhpcy5zdXBwb3J0ZWRUcmFuc2xhdGlvbkxvY2FsZXNbMF0pIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmxvYWRNZXNzYWdlcyh0aGlzLnN1cHBvcnRlZFRyYW5zbGF0aW9uTG9jYWxlc1swXSwgdGhpcy5kZWZhdWx0TWVzc2FnZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgdChpZDogc3RyaW5nLCBwMT86IHN0cmluZywgcDI/OiBzdHJpbmcsIHAzPzogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNsYXRlKGlkLCBwMSwgcDIsIHAzKTtcbiAgICB9XG5cbiAgICB0cmFuc2xhdGUoaWQ6IHN0cmluZywgcDE/OiBzdHJpbmcsIHAyPzogc3RyaW5nLCBwMz86IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIGxldCByZXN1bHQ6IHN0cmluZztcbiAgICAgICAgaWYgKHRoaXMubG9jYWxlTWVzc2FnZXMuaGFzT3duUHJvcGVydHkoaWQpICYmIHRoaXMubG9jYWxlTWVzc2FnZXNbaWRdKSB7XG4gICAgICAgICAgICByZXN1bHQgPSB0aGlzLmxvY2FsZU1lc3NhZ2VzW2lkXTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmRlZmF1bHRNZXNzYWdlcy5oYXNPd25Qcm9wZXJ0eShpZCkgJiYgdGhpcy5kZWZhdWx0TWVzc2FnZXNbaWRdKSB7XG4gICAgICAgICAgICByZXN1bHQgPSB0aGlzLmRlZmF1bHRNZXNzYWdlc1tpZF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQgPSAnJztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyZXN1bHQgIT09ICcnKSB7XG4gICAgICAgICAgICBpZiAocDEgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5zcGxpdCgnX18kMV9fJykuam9pbihwMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocDIgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5zcGxpdCgnX18kMl9fJykuam9pbihwMik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocDMgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5zcGxpdCgnX18kM19fJykuam9pbihwMyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgbG9hZE1lc3NhZ2VzKGxvY2FsZTogc3RyaW5nLCBtZXNzYWdlc09iajogYW55KTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgY29uc3QgZm9ybWF0dGVkTG9jYWxlID0gbG9jYWxlLnJlcGxhY2UoJy0nLCAnXycpO1xuICAgICAgICBjb25zdCBsb2NhbGVzID0gYXdhaXQgdGhpcy5nZXRMb2NhbGVzSnNvbihmb3JtYXR0ZWRMb2NhbGUpO1xuICAgICAgICBmb3IgKGNvbnN0IHByb3AgaW4gbG9jYWxlcykge1xuICAgICAgICAgICAgaWYgKCFsb2NhbGVzLmhhc093blByb3BlcnR5KHByb3ApKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtZXNzYWdlc09ialtwcm9wXSA9IGxvY2FsZXNbcHJvcF0ubWVzc2FnZTtcblxuICAgICAgICAgICAgaWYgKGxvY2FsZXNbcHJvcF0ucGxhY2Vob2xkZXJzKSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBwbGFjZVByb3AgaW4gbG9jYWxlc1twcm9wXS5wbGFjZWhvbGRlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFsb2NhbGVzW3Byb3BdLnBsYWNlaG9sZGVycy5oYXNPd25Qcm9wZXJ0eShwbGFjZVByb3ApIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAhbG9jYWxlc1twcm9wXS5wbGFjZWhvbGRlcnNbcGxhY2VQcm9wXS5jb250ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlcGxhY2VUb2tlbiA9ICdcXFxcJCcgKyBwbGFjZVByb3AudG9VcHBlckNhc2UoKSArICdcXFxcJCc7XG4gICAgICAgICAgICAgICAgICAgIGxldCByZXBsYWNlQ29udGVudCA9IGxvY2FsZXNbcHJvcF0ucGxhY2Vob2xkZXJzW3BsYWNlUHJvcF0uY29udGVudDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlcGxhY2VDb250ZW50ID09PSAnJDEnIHx8IHJlcGxhY2VDb250ZW50ID09PSAnJDInIHx8IHJlcGxhY2VDb250ZW50ID09PSAnJDMnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXBsYWNlQ29udGVudCA9ICdfXyQnICsgcmVwbGFjZUNvbnRlbnQgKyAnX18nO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VzT2JqW3Byb3BdID0gbWVzc2FnZXNPYmpbcHJvcF0ucmVwbGFjZShuZXcgUmVnRXhwKHJlcGxhY2VUb2tlbiwgJ2cnKSwgcmVwbGFjZUNvbnRlbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxufVxuIiwiZXhwb3J0IGNsYXNzIEdlbmVyYXRlZFBhc3N3b3JkSGlzdG9yeSB7XG4gICAgcGFzc3dvcmQ6IHN0cmluZztcbiAgICBkYXRlOiBudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3RvcihwYXNzd29yZDogc3RyaW5nLCBkYXRlOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5wYXNzd29yZCA9IHBhc3N3b3JkO1xuICAgICAgICB0aGlzLmRhdGUgPSBkYXRlO1xuICAgIH1cbn1cbiIsImltcG9ydCBEb21haW4gZnJvbSAnLi9kb21haW5CYXNlJztcblxuZXhwb3J0IGNsYXNzIFBhc3N3b3JkR2VuZXJhdG9yUG9saWN5T3B0aW9ucyBleHRlbmRzIERvbWFpbiB7XG4gICAgZGVmYXVsdFR5cGU6IHN0cmluZyA9ICcnO1xuICAgIG1pbkxlbmd0aDogbnVtYmVyID0gMDtcbiAgICB1c2VVcHBlcmNhc2U6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICB1c2VMb3dlcmNhc2U6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICB1c2VOdW1iZXJzOiBib29sZWFuID0gZmFsc2U7XG4gICAgbnVtYmVyQ291bnQ6IG51bWJlciA9IDA7XG4gICAgdXNlU3BlY2lhbDogYm9vbGVhbiA9IGZhbHNlO1xuICAgIHNwZWNpYWxDb3VudDogbnVtYmVyID0gMDtcbiAgICBtaW5OdW1iZXJXb3JkczogbnVtYmVyID0gMDtcbiAgICBjYXBpdGFsaXplOiBib29sZWFuID0gZmFsc2U7XG4gICAgaW5jbHVkZU51bWJlcjogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgaW5FZmZlY3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRlZmF1bHRUeXBlICE9PSAnJyB8fFxuICAgICAgICAgICAgdGhpcy5taW5MZW5ndGggPiAwIHx8XG4gICAgICAgICAgICB0aGlzLm51bWJlckNvdW50ID4gMCB8fFxuICAgICAgICAgICAgdGhpcy5zcGVjaWFsQ291bnQgPiAwIHx8XG4gICAgICAgICAgICB0aGlzLnVzZVVwcGVyY2FzZSB8fFxuICAgICAgICAgICAgdGhpcy51c2VMb3dlcmNhc2UgfHxcbiAgICAgICAgICAgIHRoaXMudXNlTnVtYmVycyB8fFxuICAgICAgICAgICAgdGhpcy51c2VTcGVjaWFsIHx8XG4gICAgICAgICAgICB0aGlzLm1pbk51bWJlcldvcmRzID4gMCB8fFxuICAgICAgICAgICAgdGhpcy5jYXBpdGFsaXplIHx8XG4gICAgICAgICAgICB0aGlzLmluY2x1ZGVOdW1iZXI7XG4gICAgfVxufVxuIiwiZXhwb3J0IGVudW0gUG9saWN5VHlwZSB7XG4gICAgVHdvRmFjdG9yQXV0aGVudGljYXRpb24gPSAwLCAvLyBSZXF1aXJlcyB1c2VycyB0byBoYXZlIDJmYSBlbmFibGVkXG4gICAgTWFzdGVyUGFzc3dvcmQgPSAxLCAvLyBTZXRzIG1pbmltdW0gcmVxdWlyZW1lbnRzIGZvciBtYXN0ZXIgcGFzc3dvcmQgY29tcGxleGl0eVxuICAgIFBhc3N3b3JkR2VuZXJhdG9yID0gMiwgLy8gU2V0cyBtaW5pbXVtIHJlcXVpcmVtZW50cy9kZWZhdWx0IHR5cGUgZm9yIGdlbmVyYXRlZCBwYXNzd29yZHMvcGFzc3BocmFzZXNcbiAgICBTaW5nbGVPcmcgPSAzLCAvLyBBbGxvd3MgdXNlcnMgdG8gb25seSBiZSBhcGFydCBvZiBvbmUgb3JnYW5pemF0aW9uXG4gICAgUmVxdWlyZVNzbyA9IDQsIC8vIFJlcXVpcmVzIHVzZXJzIHRvIGF1dGhlbnRpY2F0ZSB3aXRoIFNTT1xufVxuIiwiaW1wb3J0ICogYXMgenhjdmJuIGZyb20gJ3p4Y3Zibic7XG5cbmltcG9ydCB7IENpcGhlclN0cmluZyB9IGZyb20gJy4uL21vZGVscy9kb21haW4vY2lwaGVyU3RyaW5nJztcbmltcG9ydCB7IEdlbmVyYXRlZFBhc3N3b3JkSGlzdG9yeSB9IGZyb20gJy4uL21vZGVscy9kb21haW4vZ2VuZXJhdGVkUGFzc3dvcmRIaXN0b3J5JztcbmltcG9ydCB7IFBhc3N3b3JkR2VuZXJhdG9yUG9saWN5T3B0aW9ucyB9IGZyb20gJy4uL21vZGVscy9kb21haW4vcGFzc3dvcmRHZW5lcmF0b3JQb2xpY3lPcHRpb25zJztcbmltcG9ydCB7IFBvbGljeSB9IGZyb20gJy4uL21vZGVscy9kb21haW4vcG9saWN5JztcblxuaW1wb3J0IHsgQ3J5cHRvU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9jcnlwdG8uc2VydmljZSc7XG5pbXBvcnQge1xuICAgIFBhc3N3b3JkR2VuZXJhdGlvblNlcnZpY2UgYXMgUGFzc3dvcmRHZW5lcmF0aW9uU2VydmljZUFic3RyYWN0aW9uLFxufSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvcGFzc3dvcmRHZW5lcmF0aW9uLnNlcnZpY2UnO1xuaW1wb3J0IHsgUG9saWN5U2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9wb2xpY3kuc2VydmljZSc7XG5pbXBvcnQgeyBTdG9yYWdlU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9zdG9yYWdlLnNlcnZpY2UnO1xuXG5pbXBvcnQgeyBFRUZMb25nV29yZExpc3QgfSBmcm9tICcuLi9taXNjL3dvcmRsaXN0JztcblxuaW1wb3J0IHsgUG9saWN5VHlwZSB9IGZyb20gJy4uL2VudW1zL3BvbGljeVR5cGUnO1xuXG5jb25zdCBEZWZhdWx0T3B0aW9ucyA9IHtcbiAgICBsZW5ndGg6IDE0LFxuICAgIGFtYmlndW91czogZmFsc2UsXG4gICAgbnVtYmVyOiB0cnVlLFxuICAgIG1pbk51bWJlcjogMSxcbiAgICB1cHBlcmNhc2U6IHRydWUsXG4gICAgbWluVXBwZXJjYXNlOiAwLFxuICAgIGxvd2VyY2FzZTogdHJ1ZSxcbiAgICBtaW5Mb3dlcmNhc2U6IDAsXG4gICAgc3BlY2lhbDogZmFsc2UsXG4gICAgbWluU3BlY2lhbDogMSxcbiAgICB0eXBlOiAncGFzc3dvcmQnLFxuICAgIG51bVdvcmRzOiAzLFxuICAgIHdvcmRTZXBhcmF0b3I6ICctJyxcbiAgICBjYXBpdGFsaXplOiBmYWxzZSxcbiAgICBpbmNsdWRlTnVtYmVyOiBmYWxzZSxcbn07XG5cbmNvbnN0IEtleXMgPSB7XG4gICAgb3B0aW9uczogJ3Bhc3N3b3JkR2VuZXJhdGlvbk9wdGlvbnMnLFxuICAgIGhpc3Rvcnk6ICdnZW5lcmF0ZWRQYXNzd29yZEhpc3RvcnknLFxufTtcblxuY29uc3QgTWF4UGFzc3dvcmRzSW5IaXN0b3J5ID0gMTAwO1xuXG5leHBvcnQgY2xhc3MgUGFzc3dvcmRHZW5lcmF0aW9uU2VydmljZSBpbXBsZW1lbnRzIFBhc3N3b3JkR2VuZXJhdGlvblNlcnZpY2VBYnN0cmFjdGlvbiB7XG4gICAgcHJpdmF0ZSBvcHRpb25zQ2FjaGU6IGFueTtcbiAgICBwcml2YXRlIGhpc3Rvcnk6IEdlbmVyYXRlZFBhc3N3b3JkSGlzdG9yeVtdO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBjcnlwdG9TZXJ2aWNlOiBDcnlwdG9TZXJ2aWNlLCBwcml2YXRlIHN0b3JhZ2VTZXJ2aWNlOiBTdG9yYWdlU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBwb2xpY3lTZXJ2aWNlOiBQb2xpY3lTZXJ2aWNlKSB7IH1cblxuICAgIGFzeW5jIGdlbmVyYXRlUGFzc3dvcmQob3B0aW9uczogYW55KTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgLy8gb3ZlcmxvYWQgZGVmYXVsdHMgd2l0aCBnaXZlbiBvcHRpb25zXG4gICAgICAgIGNvbnN0IG8gPSBPYmplY3QuYXNzaWduKHt9LCBEZWZhdWx0T3B0aW9ucywgb3B0aW9ucyk7XG5cbiAgICAgICAgaWYgKG8udHlwZSA9PT0gJ3Bhc3NwaHJhc2UnKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZW5lcmF0ZVBhc3NwaHJhc2Uob3B0aW9ucyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzYW5pdGl6ZVxuICAgICAgICB0aGlzLnNhbml0aXplUGFzc3dvcmRMZW5ndGgobywgdHJ1ZSk7XG5cbiAgICAgICAgY29uc3QgbWluTGVuZ3RoOiBudW1iZXIgPSBvLm1pblVwcGVyY2FzZSArIG8ubWluTG93ZXJjYXNlICsgby5taW5OdW1iZXIgKyBvLm1pblNwZWNpYWw7XG4gICAgICAgIGlmIChvLmxlbmd0aCA8IG1pbkxlbmd0aCkge1xuICAgICAgICAgICAgby5sZW5ndGggPSBtaW5MZW5ndGg7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwb3NpdGlvbnM6IHN0cmluZ1tdID0gW107XG4gICAgICAgIGlmIChvLmxvd2VyY2FzZSAmJiBvLm1pbkxvd2VyY2FzZSA+IDApIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgby5taW5Mb3dlcmNhc2U7IGkrKykge1xuICAgICAgICAgICAgICAgIHBvc2l0aW9ucy5wdXNoKCdsJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG8udXBwZXJjYXNlICYmIG8ubWluVXBwZXJjYXNlID4gMCkge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvLm1pblVwcGVyY2FzZTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcG9zaXRpb25zLnB1c2goJ3UnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoby5udW1iZXIgJiYgby5taW5OdW1iZXIgPiAwKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG8ubWluTnVtYmVyOyBpKyspIHtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbnMucHVzaCgnbicpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChvLnNwZWNpYWwgJiYgby5taW5TcGVjaWFsID4gMCkge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvLm1pblNwZWNpYWw7IGkrKykge1xuICAgICAgICAgICAgICAgIHBvc2l0aW9ucy5wdXNoKCdzJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKHBvc2l0aW9ucy5sZW5ndGggPCBvLmxlbmd0aCkge1xuICAgICAgICAgICAgcG9zaXRpb25zLnB1c2goJ2EnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHNodWZmbGVcbiAgICAgICAgYXdhaXQgdGhpcy5zaHVmZmxlQXJyYXkocG9zaXRpb25zKTtcblxuICAgICAgICAvLyBidWlsZCBvdXQgdGhlIGNoYXIgc2V0c1xuICAgICAgICBsZXQgYWxsQ2hhclNldCA9ICcnO1xuXG4gICAgICAgIGxldCBsb3dlcmNhc2VDaGFyU2V0ID0gJ2FiY2RlZmdoaWprbW5vcHFyc3R1dnd4eXonO1xuICAgICAgICBpZiAoby5hbWJpZ3VvdXMpIHtcbiAgICAgICAgICAgIGxvd2VyY2FzZUNoYXJTZXQgKz0gJ2wnO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvLmxvd2VyY2FzZSkge1xuICAgICAgICAgICAgYWxsQ2hhclNldCArPSBsb3dlcmNhc2VDaGFyU2V0O1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHVwcGVyY2FzZUNoYXJTZXQgPSAnQUJDREVGR0hKS0xNTlBRUlNUVVZXWFlaJztcbiAgICAgICAgaWYgKG8uYW1iaWd1b3VzKSB7XG4gICAgICAgICAgICB1cHBlcmNhc2VDaGFyU2V0ICs9ICdJTyc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG8udXBwZXJjYXNlKSB7XG4gICAgICAgICAgICBhbGxDaGFyU2V0ICs9IHVwcGVyY2FzZUNoYXJTZXQ7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgbnVtYmVyQ2hhclNldCA9ICcyMzQ1Njc4OSc7XG4gICAgICAgIGlmIChvLmFtYmlndW91cykge1xuICAgICAgICAgICAgbnVtYmVyQ2hhclNldCArPSAnMDEnO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvLm51bWJlcikge1xuICAgICAgICAgICAgYWxsQ2hhclNldCArPSBudW1iZXJDaGFyU2V0O1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc3BlY2lhbENoYXJTZXQgPSAnIUAjJCVeJionO1xuICAgICAgICBpZiAoby5zcGVjaWFsKSB7XG4gICAgICAgICAgICBhbGxDaGFyU2V0ICs9IHNwZWNpYWxDaGFyU2V0O1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHBhc3N3b3JkID0gJyc7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgby5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IHBvc2l0aW9uQ2hhcnM6IHN0cmluZztcbiAgICAgICAgICAgIHN3aXRjaCAocG9zaXRpb25zW2ldKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnbCc6XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uQ2hhcnMgPSBsb3dlcmNhc2VDaGFyU2V0O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICd1JzpcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb25DaGFycyA9IHVwcGVyY2FzZUNoYXJTZXQ7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ24nOlxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbkNoYXJzID0gbnVtYmVyQ2hhclNldDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAncyc6XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uQ2hhcnMgPSBzcGVjaWFsQ2hhclNldDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnYSc6XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uQ2hhcnMgPSBhbGxDaGFyU2V0O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgcmFuZG9tQ2hhckluZGV4ID0gYXdhaXQgdGhpcy5jcnlwdG9TZXJ2aWNlLnJhbmRvbU51bWJlcigwLCBwb3NpdGlvbkNoYXJzLmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgcGFzc3dvcmQgKz0gcG9zaXRpb25DaGFycy5jaGFyQXQocmFuZG9tQ2hhckluZGV4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwYXNzd29yZDtcbiAgICB9XG5cbiAgICBhc3luYyBnZW5lcmF0ZVBhc3NwaHJhc2Uob3B0aW9uczogYW55KTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgY29uc3QgbyA9IE9iamVjdC5hc3NpZ24oe30sIERlZmF1bHRPcHRpb25zLCBvcHRpb25zKTtcblxuICAgICAgICBpZiAoby5udW1Xb3JkcyA9PSBudWxsIHx8IG8ubnVtV29yZHMgPD0gMikge1xuICAgICAgICAgICAgby5udW1Xb3JkcyA9IERlZmF1bHRPcHRpb25zLm51bVdvcmRzO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvLndvcmRTZXBhcmF0b3IgPT0gbnVsbCB8fCBvLndvcmRTZXBhcmF0b3IubGVuZ3RoID09PSAwIHx8IG8ud29yZFNlcGFyYXRvci5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICBvLndvcmRTZXBhcmF0b3IgPSAnICc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG8uY2FwaXRhbGl6ZSA9PSBudWxsKSB7XG4gICAgICAgICAgICBvLmNhcGl0YWxpemUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoby5pbmNsdWRlTnVtYmVyID09IG51bGwpIHtcbiAgICAgICAgICAgIG8uaW5jbHVkZU51bWJlciA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbGlzdExlbmd0aCA9IEVFRkxvbmdXb3JkTGlzdC5sZW5ndGggLSAxO1xuICAgICAgICBjb25zdCB3b3JkTGlzdCA9IG5ldyBBcnJheShvLm51bVdvcmRzKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvLm51bVdvcmRzOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHdvcmRJbmRleCA9IGF3YWl0IHRoaXMuY3J5cHRvU2VydmljZS5yYW5kb21OdW1iZXIoMCwgbGlzdExlbmd0aCk7XG4gICAgICAgICAgICBpZiAoby5jYXBpdGFsaXplKSB7XG4gICAgICAgICAgICAgICAgd29yZExpc3RbaV0gPSB0aGlzLmNhcGl0YWxpemUoRUVGTG9uZ1dvcmRMaXN0W3dvcmRJbmRleF0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB3b3JkTGlzdFtpXSA9IEVFRkxvbmdXb3JkTGlzdFt3b3JkSW5kZXhdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG8uaW5jbHVkZU51bWJlcikge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5hcHBlbmRSYW5kb21OdW1iZXJUb1JhbmRvbVdvcmQod29yZExpc3QpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3b3JkTGlzdC5qb2luKG8ud29yZFNlcGFyYXRvcik7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0T3B0aW9ucygpOiBQcm9taXNlPFthbnksIFBhc3N3b3JkR2VuZXJhdG9yUG9saWN5T3B0aW9uc10+IHtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9uc0NhY2hlID09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldChLZXlzLm9wdGlvbnMpO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9uc0NhY2hlID0gRGVmYXVsdE9wdGlvbnM7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9uc0NhY2hlID0gT2JqZWN0LmFzc2lnbih7fSwgRGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGVuZm9yY2VkT3B0aW9ucyA9IGF3YWl0IHRoaXMuZW5mb3JjZVBhc3N3b3JkR2VuZXJhdG9yUG9saWNpZXNPbk9wdGlvbnModGhpcy5vcHRpb25zQ2FjaGUpO1xuICAgICAgICB0aGlzLm9wdGlvbnNDYWNoZSA9IGVuZm9yY2VkT3B0aW9uc1swXTtcbiAgICAgICAgcmV0dXJuIFt0aGlzLm9wdGlvbnNDYWNoZSwgZW5mb3JjZWRPcHRpb25zWzFdXTtcbiAgICB9XG5cbiAgICBhc3luYyBlbmZvcmNlUGFzc3dvcmRHZW5lcmF0b3JQb2xpY2llc09uT3B0aW9ucyhvcHRpb25zOiBhbnkpOiBQcm9taXNlPFthbnksIFBhc3N3b3JkR2VuZXJhdG9yUG9saWN5T3B0aW9uc10+IHtcbiAgICAgICAgbGV0IGVuZm9yY2VkUG9saWN5T3B0aW9ucyA9IGF3YWl0IHRoaXMuZ2V0UGFzc3dvcmRHZW5lcmF0b3JQb2xpY3lPcHRpb25zKCk7XG4gICAgICAgIGlmIChlbmZvcmNlZFBvbGljeU9wdGlvbnMgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMubGVuZ3RoIDwgZW5mb3JjZWRQb2xpY3lPcHRpb25zLm1pbkxlbmd0aCkge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMubGVuZ3RoID0gZW5mb3JjZWRQb2xpY3lPcHRpb25zLm1pbkxlbmd0aDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGVuZm9yY2VkUG9saWN5T3B0aW9ucy51c2VVcHBlcmNhc2UpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLnVwcGVyY2FzZSA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChlbmZvcmNlZFBvbGljeU9wdGlvbnMudXNlTG93ZXJjYXNlKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5sb3dlcmNhc2UgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZW5mb3JjZWRQb2xpY3lPcHRpb25zLnVzZU51bWJlcnMpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLm51bWJlciA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChvcHRpb25zLm1pbk51bWJlciA8IGVuZm9yY2VkUG9saWN5T3B0aW9ucy5udW1iZXJDb3VudCkge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMubWluTnVtYmVyID0gZW5mb3JjZWRQb2xpY3lPcHRpb25zLm51bWJlckNvdW50O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZW5mb3JjZWRQb2xpY3lPcHRpb25zLnVzZVNwZWNpYWwpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLnNwZWNpYWwgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5taW5TcGVjaWFsIDwgZW5mb3JjZWRQb2xpY3lPcHRpb25zLnNwZWNpYWxDb3VudCkge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMubWluU3BlY2lhbCA9IGVuZm9yY2VkUG9saWN5T3B0aW9ucy5zcGVjaWFsQ291bnQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIE11c3Qgbm9ybWFsaXplIHRoZXNlIGZpZWxkcyBiZWNhdXNlIHRoZSByZWNlaXZpbmcgY2FsbCBleHBlY3RzIGFsbCBvcHRpb25zIHRvIHBhc3MgdGhlIGN1cnJlbnQgcnVsZXNcbiAgICAgICAgICAgIGlmIChvcHRpb25zLm1pblNwZWNpYWwgKyBvcHRpb25zLm1pbk51bWJlciA+IG9wdGlvbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5taW5TcGVjaWFsID0gb3B0aW9ucy5sZW5ndGggLSBvcHRpb25zLm1pbk51bWJlcjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG9wdGlvbnMubnVtV29yZHMgPCBlbmZvcmNlZFBvbGljeU9wdGlvbnMubWluTnVtYmVyV29yZHMpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLm51bVdvcmRzID0gZW5mb3JjZWRQb2xpY3lPcHRpb25zLm1pbk51bWJlcldvcmRzO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZW5mb3JjZWRQb2xpY3lPcHRpb25zLmNhcGl0YWxpemUpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLmNhcGl0YWxpemUgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZW5mb3JjZWRQb2xpY3lPcHRpb25zLmluY2x1ZGVOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLmluY2x1ZGVOdW1iZXIgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBGb3JjZSBkZWZhdWx0IHR5cGUgaWYgcGFzc3dvcmQvcGFzc3BocmFzZSBzZWxlY3RlZCB2aWEgcG9saWN5XG4gICAgICAgICAgICBpZiAoZW5mb3JjZWRQb2xpY3lPcHRpb25zLmRlZmF1bHRUeXBlID09PSAncGFzc3dvcmQnIHx8XG4gICAgICAgICAgICAgICAgZW5mb3JjZWRQb2xpY3lPcHRpb25zLmRlZmF1bHRUeXBlID09PSAncGFzc3BocmFzZScpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLnR5cGUgPSBlbmZvcmNlZFBvbGljeU9wdGlvbnMuZGVmYXVsdFR5cGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7IC8vIFVJIGxheWVyIGV4cGVjdHMgYW4gaW5zdGFudGlhdGVkIG9iamVjdCB0byBwcmV2ZW50IG1vcmUgZXhwbGljaXQgbnVsbCBjaGVja3NcbiAgICAgICAgICAgIGVuZm9yY2VkUG9saWN5T3B0aW9ucyA9IG5ldyBQYXNzd29yZEdlbmVyYXRvclBvbGljeU9wdGlvbnMoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW29wdGlvbnMsIGVuZm9yY2VkUG9saWN5T3B0aW9uc107XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0UGFzc3dvcmRHZW5lcmF0b3JQb2xpY3lPcHRpb25zKCk6IFByb21pc2U8UGFzc3dvcmRHZW5lcmF0b3JQb2xpY3lPcHRpb25zPiB7XG4gICAgICAgIGNvbnN0IHBvbGljaWVzOiBQb2xpY3lbXSA9IHRoaXMucG9saWN5U2VydmljZSA9PSBudWxsID8gbnVsbCA6XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBvbGljeVNlcnZpY2UuZ2V0QWxsKFBvbGljeVR5cGUuUGFzc3dvcmRHZW5lcmF0b3IpO1xuICAgICAgICBsZXQgZW5mb3JjZWRPcHRpb25zOiBQYXNzd29yZEdlbmVyYXRvclBvbGljeU9wdGlvbnMgPSBudWxsO1xuXG4gICAgICAgIGlmIChwb2xpY2llcyA9PSBudWxsIHx8IHBvbGljaWVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGVuZm9yY2VkT3B0aW9ucztcbiAgICAgICAgfVxuXG4gICAgICAgIHBvbGljaWVzLmZvckVhY2goKGN1cnJlbnRQb2xpY3kpID0+IHtcbiAgICAgICAgICAgIGlmICghY3VycmVudFBvbGljeS5lbmFibGVkIHx8IGN1cnJlbnRQb2xpY3kuZGF0YSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZW5mb3JjZWRPcHRpb25zID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBlbmZvcmNlZE9wdGlvbnMgPSBuZXcgUGFzc3dvcmRHZW5lcmF0b3JQb2xpY3lPcHRpb25zKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFBhc3N3b3JkIHdpbnMgaW4gbXVsdGktb3JnIGNvbGxpc2lvbnNcbiAgICAgICAgICAgIGlmIChjdXJyZW50UG9saWN5LmRhdGEuZGVmYXVsdFR5cGUgIT0gbnVsbCAmJiBlbmZvcmNlZE9wdGlvbnMuZGVmYXVsdFR5cGUgIT09ICdwYXNzd29yZCcpIHtcbiAgICAgICAgICAgICAgICBlbmZvcmNlZE9wdGlvbnMuZGVmYXVsdFR5cGUgPSBjdXJyZW50UG9saWN5LmRhdGEuZGVmYXVsdFR5cGU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjdXJyZW50UG9saWN5LmRhdGEubWluTGVuZ3RoICE9IG51bGxcbiAgICAgICAgICAgICAgICAmJiBjdXJyZW50UG9saWN5LmRhdGEubWluTGVuZ3RoID4gZW5mb3JjZWRPcHRpb25zLm1pbkxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGVuZm9yY2VkT3B0aW9ucy5taW5MZW5ndGggPSBjdXJyZW50UG9saWN5LmRhdGEubWluTGVuZ3RoO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY3VycmVudFBvbGljeS5kYXRhLnVzZVVwcGVyKSB7XG4gICAgICAgICAgICAgICAgZW5mb3JjZWRPcHRpb25zLnVzZVVwcGVyY2FzZSA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjdXJyZW50UG9saWN5LmRhdGEudXNlTG93ZXIpIHtcbiAgICAgICAgICAgICAgICBlbmZvcmNlZE9wdGlvbnMudXNlTG93ZXJjYXNlID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGN1cnJlbnRQb2xpY3kuZGF0YS51c2VOdW1iZXJzKSB7XG4gICAgICAgICAgICAgICAgZW5mb3JjZWRPcHRpb25zLnVzZU51bWJlcnMgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY3VycmVudFBvbGljeS5kYXRhLm1pbk51bWJlcnMgIT0gbnVsbFxuICAgICAgICAgICAgICAgICYmIGN1cnJlbnRQb2xpY3kuZGF0YS5taW5OdW1iZXJzID4gZW5mb3JjZWRPcHRpb25zLm51bWJlckNvdW50KSB7XG4gICAgICAgICAgICAgICAgZW5mb3JjZWRPcHRpb25zLm51bWJlckNvdW50ID0gY3VycmVudFBvbGljeS5kYXRhLm1pbk51bWJlcnM7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjdXJyZW50UG9saWN5LmRhdGEudXNlU3BlY2lhbCkge1xuICAgICAgICAgICAgICAgIGVuZm9yY2VkT3B0aW9ucy51c2VTcGVjaWFsID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGN1cnJlbnRQb2xpY3kuZGF0YS5taW5TcGVjaWFsICE9IG51bGxcbiAgICAgICAgICAgICAgICAmJiBjdXJyZW50UG9saWN5LmRhdGEubWluU3BlY2lhbCA+IGVuZm9yY2VkT3B0aW9ucy5zcGVjaWFsQ291bnQpIHtcbiAgICAgICAgICAgICAgICBlbmZvcmNlZE9wdGlvbnMuc3BlY2lhbENvdW50ID0gY3VycmVudFBvbGljeS5kYXRhLm1pblNwZWNpYWw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjdXJyZW50UG9saWN5LmRhdGEubWluTnVtYmVyV29yZHMgIT0gbnVsbFxuICAgICAgICAgICAgICAgICYmIGN1cnJlbnRQb2xpY3kuZGF0YS5taW5OdW1iZXJXb3JkcyA+IGVuZm9yY2VkT3B0aW9ucy5taW5OdW1iZXJXb3Jkcykge1xuICAgICAgICAgICAgICAgIGVuZm9yY2VkT3B0aW9ucy5taW5OdW1iZXJXb3JkcyA9IGN1cnJlbnRQb2xpY3kuZGF0YS5taW5OdW1iZXJXb3JkcztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGN1cnJlbnRQb2xpY3kuZGF0YS5jYXBpdGFsaXplKSB7XG4gICAgICAgICAgICAgICAgZW5mb3JjZWRPcHRpb25zLmNhcGl0YWxpemUgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY3VycmVudFBvbGljeS5kYXRhLmluY2x1ZGVOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICBlbmZvcmNlZE9wdGlvbnMuaW5jbHVkZU51bWJlciA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBlbmZvcmNlZE9wdGlvbnM7XG4gICAgfVxuXG4gICAgYXN5bmMgc2F2ZU9wdGlvbnMob3B0aW9uczogYW55KSB7XG4gICAgICAgIGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2Uuc2F2ZShLZXlzLm9wdGlvbnMsIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLm9wdGlvbnNDYWNoZSA9IG9wdGlvbnM7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0SGlzdG9yeSgpOiBQcm9taXNlPEdlbmVyYXRlZFBhc3N3b3JkSGlzdG9yeVtdPiB7XG4gICAgICAgIGNvbnN0IGhhc0tleSA9IGF3YWl0IHRoaXMuY3J5cHRvU2VydmljZS5oYXNLZXkoKTtcbiAgICAgICAgaWYgKCFoYXNLZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgQXJyYXk8R2VuZXJhdGVkUGFzc3dvcmRIaXN0b3J5PigpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLmhpc3RvcnkpIHtcbiAgICAgICAgICAgIGNvbnN0IGVuY3J5cHRlZCA9IGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2UuZ2V0PEdlbmVyYXRlZFBhc3N3b3JkSGlzdG9yeVtdPihLZXlzLmhpc3RvcnkpO1xuICAgICAgICAgICAgdGhpcy5oaXN0b3J5ID0gYXdhaXQgdGhpcy5kZWNyeXB0SGlzdG9yeShlbmNyeXB0ZWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuaGlzdG9yeSB8fCBuZXcgQXJyYXk8R2VuZXJhdGVkUGFzc3dvcmRIaXN0b3J5PigpO1xuICAgIH1cblxuICAgIGFzeW5jIGFkZEhpc3RvcnkocGFzc3dvcmQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIC8vIENhbm5vdCBhZGQgbmV3IGhpc3RvcnkgaWYgbm8ga2V5IGlzIGF2YWlsYWJsZVxuICAgICAgICBjb25zdCBoYXNLZXkgPSBhd2FpdCB0aGlzLmNyeXB0b1NlcnZpY2UuaGFzS2V5KCk7XG4gICAgICAgIGlmICghaGFzS2V5KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjdXJyZW50SGlzdG9yeSA9IGF3YWl0IHRoaXMuZ2V0SGlzdG9yeSgpO1xuXG4gICAgICAgIC8vIFByZXZlbnQgZHVwbGljYXRlc1xuICAgICAgICBpZiAodGhpcy5tYXRjaGVzUHJldmlvdXMocGFzc3dvcmQsIGN1cnJlbnRIaXN0b3J5KSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY3VycmVudEhpc3RvcnkudW5zaGlmdChuZXcgR2VuZXJhdGVkUGFzc3dvcmRIaXN0b3J5KHBhc3N3b3JkLCBEYXRlLm5vdygpKSk7XG5cbiAgICAgICAgLy8gUmVtb3ZlIG9sZCBpdGVtcy5cbiAgICAgICAgaWYgKGN1cnJlbnRIaXN0b3J5Lmxlbmd0aCA+IE1heFBhc3N3b3Jkc0luSGlzdG9yeSkge1xuICAgICAgICAgICAgY3VycmVudEhpc3RvcnkucG9wKCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBuZXdIaXN0b3J5ID0gYXdhaXQgdGhpcy5lbmNyeXB0SGlzdG9yeShjdXJyZW50SGlzdG9yeSk7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLnNhdmUoS2V5cy5oaXN0b3J5LCBuZXdIaXN0b3J5KTtcbiAgICB9XG5cbiAgICBhc3luYyBjbGVhcigpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICB0aGlzLmhpc3RvcnkgPSBbXTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2UucmVtb3ZlKEtleXMuaGlzdG9yeSk7XG4gICAgfVxuXG4gICAgcGFzc3dvcmRTdHJlbmd0aChwYXNzd29yZDogc3RyaW5nLCB1c2VySW5wdXRzOiBzdHJpbmdbXSA9IG51bGwpOiB6eGN2Ym4uWlhDVkJOUmVzdWx0IHtcbiAgICAgICAgaWYgKHBhc3N3b3JkID09IG51bGwgfHwgcGFzc3dvcmQubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgZ2xvYmFsVXNlcklucHV0cyA9IFsnYml0d2FyZGVuJywgJ2JpdCcsICd3YXJkZW4nXTtcbiAgICAgICAgaWYgKHVzZXJJbnB1dHMgIT0gbnVsbCAmJiB1c2VySW5wdXRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGdsb2JhbFVzZXJJbnB1dHMgPSBnbG9iYWxVc2VySW5wdXRzLmNvbmNhdCh1c2VySW5wdXRzKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBVc2UgYSBoYXNoIHNldCB0byBnZXQgcmlkIG9mIGFueSBkdXBsaWNhdGUgdXNlciBpbnB1dHNcbiAgICAgICAgY29uc3QgZmluYWxVc2VySW5wdXRzID0gQXJyYXkuZnJvbShuZXcgU2V0KGdsb2JhbFVzZXJJbnB1dHMpKTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0genhjdmJuKHBhc3N3b3JkLCBmaW5hbFVzZXJJbnB1dHMpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIG5vcm1hbGl6ZU9wdGlvbnMob3B0aW9uczogYW55LCBlbmZvcmNlZFBvbGljeU9wdGlvbnM6IFBhc3N3b3JkR2VuZXJhdG9yUG9saWN5T3B0aW9ucykge1xuICAgICAgICBvcHRpb25zLm1pbkxvd2VyY2FzZSA9IDA7XG4gICAgICAgIG9wdGlvbnMubWluVXBwZXJjYXNlID0gMDtcblxuICAgICAgICBpZiAoIW9wdGlvbnMubGVuZ3RoIHx8IG9wdGlvbnMubGVuZ3RoIDwgNSkge1xuICAgICAgICAgICAgb3B0aW9ucy5sZW5ndGggPSA1O1xuICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbnMubGVuZ3RoID4gMTI4KSB7XG4gICAgICAgICAgICBvcHRpb25zLmxlbmd0aCA9IDEyODtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLmxlbmd0aCA8IGVuZm9yY2VkUG9saWN5T3B0aW9ucy5taW5MZW5ndGgpIHtcbiAgICAgICAgICAgIG9wdGlvbnMubGVuZ3RoID0gZW5mb3JjZWRQb2xpY3lPcHRpb25zLm1pbkxlbmd0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghb3B0aW9ucy5taW5OdW1iZXIpIHtcbiAgICAgICAgICAgIG9wdGlvbnMubWluTnVtYmVyID0gMDtcbiAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zLm1pbk51bWJlciA+IG9wdGlvbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICBvcHRpb25zLm1pbk51bWJlciA9IG9wdGlvbnMubGVuZ3RoO1xuICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbnMubWluTnVtYmVyID4gOSkge1xuICAgICAgICAgICAgb3B0aW9ucy5taW5OdW1iZXIgPSA5O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMubWluTnVtYmVyIDwgZW5mb3JjZWRQb2xpY3lPcHRpb25zLm51bWJlckNvdW50KSB7XG4gICAgICAgICAgICBvcHRpb25zLm1pbk51bWJlciA9IGVuZm9yY2VkUG9saWN5T3B0aW9ucy5udW1iZXJDb3VudDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghb3B0aW9ucy5taW5TcGVjaWFsKSB7XG4gICAgICAgICAgICBvcHRpb25zLm1pblNwZWNpYWwgPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbnMubWluU3BlY2lhbCA+IG9wdGlvbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICBvcHRpb25zLm1pblNwZWNpYWwgPSBvcHRpb25zLmxlbmd0aDtcbiAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zLm1pblNwZWNpYWwgPiA5KSB7XG4gICAgICAgICAgICBvcHRpb25zLm1pblNwZWNpYWwgPSA5O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMubWluU3BlY2lhbCA8IGVuZm9yY2VkUG9saWN5T3B0aW9ucy5zcGVjaWFsQ291bnQpIHtcbiAgICAgICAgICAgIG9wdGlvbnMubWluU3BlY2lhbCA9IGVuZm9yY2VkUG9saWN5T3B0aW9ucy5zcGVjaWFsQ291bnQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy5taW5TcGVjaWFsICsgb3B0aW9ucy5taW5OdW1iZXIgPiBvcHRpb25zLmxlbmd0aCkge1xuICAgICAgICAgICAgb3B0aW9ucy5taW5TcGVjaWFsID0gb3B0aW9ucy5sZW5ndGggLSBvcHRpb25zLm1pbk51bWJlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLm51bVdvcmRzID09IG51bGwgfHwgb3B0aW9ucy5sZW5ndGggPCAzKSB7XG4gICAgICAgICAgICBvcHRpb25zLm51bVdvcmRzID0gMztcbiAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zLm51bVdvcmRzID4gMjApIHtcbiAgICAgICAgICAgIG9wdGlvbnMubnVtV29yZHMgPSAyMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLm51bVdvcmRzIDwgZW5mb3JjZWRQb2xpY3lPcHRpb25zLm1pbk51bWJlcldvcmRzKSB7XG4gICAgICAgICAgICBvcHRpb25zLm51bVdvcmRzID0gZW5mb3JjZWRQb2xpY3lPcHRpb25zLm1pbk51bWJlcldvcmRzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMud29yZFNlcGFyYXRvciAhPSBudWxsICYmIG9wdGlvbnMud29yZFNlcGFyYXRvci5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICBvcHRpb25zLndvcmRTZXBhcmF0b3IgPSBvcHRpb25zLndvcmRTZXBhcmF0b3JbMF07XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNhbml0aXplUGFzc3dvcmRMZW5ndGgob3B0aW9ucywgZmFsc2UpO1xuICAgIH1cblxuICAgIHByaXZhdGUgY2FwaXRhbGl6ZShzdHI6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gc3RyLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyLnNsaWNlKDEpO1xuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgYXBwZW5kUmFuZG9tTnVtYmVyVG9SYW5kb21Xb3JkKHdvcmRMaXN0OiBzdHJpbmdbXSkge1xuICAgICAgICBpZiAod29yZExpc3QgPT0gbnVsbCB8fCB3b3JkTGlzdC5sZW5ndGggPD0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGluZGV4ID0gYXdhaXQgdGhpcy5jcnlwdG9TZXJ2aWNlLnJhbmRvbU51bWJlcigwLCB3b3JkTGlzdC5sZW5ndGggLSAxKTtcbiAgICAgICAgY29uc3QgbnVtID0gYXdhaXQgdGhpcy5jcnlwdG9TZXJ2aWNlLnJhbmRvbU51bWJlcigwLCA5KTtcbiAgICAgICAgd29yZExpc3RbaW5kZXhdID0gd29yZExpc3RbaW5kZXhdICsgbnVtO1xuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgZW5jcnlwdEhpc3RvcnkoaGlzdG9yeTogR2VuZXJhdGVkUGFzc3dvcmRIaXN0b3J5W10pOiBQcm9taXNlPEdlbmVyYXRlZFBhc3N3b3JkSGlzdG9yeVtdPiB7XG4gICAgICAgIGlmIChoaXN0b3J5ID09IG51bGwgfHwgaGlzdG9yeS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoW10pO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcHJvbWlzZXMgPSBoaXN0b3J5Lm1hcChhc3luYyAoaXRlbSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZW5jcnlwdGVkID0gYXdhaXQgdGhpcy5jcnlwdG9TZXJ2aWNlLmVuY3J5cHQoaXRlbS5wYXNzd29yZCk7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEdlbmVyYXRlZFBhc3N3b3JkSGlzdG9yeShlbmNyeXB0ZWQuZW5jcnlwdGVkU3RyaW5nLCBpdGVtLmRhdGUpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gYXdhaXQgUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgZGVjcnlwdEhpc3RvcnkoaGlzdG9yeTogR2VuZXJhdGVkUGFzc3dvcmRIaXN0b3J5W10pOiBQcm9taXNlPEdlbmVyYXRlZFBhc3N3b3JkSGlzdG9yeVtdPiB7XG4gICAgICAgIGlmIChoaXN0b3J5ID09IG51bGwgfHwgaGlzdG9yeS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoW10pO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcHJvbWlzZXMgPSBoaXN0b3J5Lm1hcChhc3luYyAoaXRlbSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZGVjcnlwdGVkID0gYXdhaXQgdGhpcy5jcnlwdG9TZXJ2aWNlLmRlY3J5cHRUb1V0ZjgobmV3IENpcGhlclN0cmluZyhpdGVtLnBhc3N3b3JkKSk7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEdlbmVyYXRlZFBhc3N3b3JkSGlzdG9yeShkZWNyeXB0ZWQsIGl0ZW0uZGF0ZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBhd2FpdCBQcm9taXNlLmFsbChwcm9taXNlcyk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBtYXRjaGVzUHJldmlvdXMocGFzc3dvcmQ6IHN0cmluZywgaGlzdG9yeTogR2VuZXJhdGVkUGFzc3dvcmRIaXN0b3J5W10pOiBib29sZWFuIHtcbiAgICAgICAgaWYgKGhpc3RvcnkgPT0gbnVsbCB8fCBoaXN0b3J5Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGhpc3RvcnlbaGlzdG9yeS5sZW5ndGggLSAxXS5wYXNzd29yZCA9PT0gcGFzc3dvcmQ7XG4gICAgfVxuXG4gICAgLy8gcmVmOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTI2NDY4NjQvMTA5MDM1OVxuICAgIHByaXZhdGUgYXN5bmMgc2h1ZmZsZUFycmF5KGFycmF5OiBzdHJpbmdbXSkge1xuICAgICAgICBmb3IgKGxldCBpID0gYXJyYXkubGVuZ3RoIC0gMTsgaSA+IDA7IGktLSkge1xuICAgICAgICAgICAgY29uc3QgaiA9IGF3YWl0IHRoaXMuY3J5cHRvU2VydmljZS5yYW5kb21OdW1iZXIoMCwgaSk7XG4gICAgICAgICAgICBbYXJyYXlbaV0sIGFycmF5W2pdXSA9IFthcnJheVtqXSwgYXJyYXlbaV1dO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzYW5pdGl6ZVBhc3N3b3JkTGVuZ3RoKG9wdGlvbnM6IGFueSwgZm9yR2VuZXJhdGlvbjogYm9vbGVhbikge1xuICAgICAgICBsZXQgbWluVXBwZXJjYXNlQ2FsYyA9IDA7XG4gICAgICAgIGxldCBtaW5Mb3dlcmNhc2VDYWxjID0gMDtcbiAgICAgICAgbGV0IG1pbk51bWJlckNhbGM6IG51bWJlciA9IG9wdGlvbnMubWluTnVtYmVyO1xuICAgICAgICBsZXQgbWluU3BlY2lhbENhbGM6IG51bWJlciA9IG9wdGlvbnMubWluU3BlY2lhbDtcblxuICAgICAgICBpZiAob3B0aW9ucy51cHBlcmNhc2UgJiYgb3B0aW9ucy5taW5VcHBlcmNhc2UgPD0gMCkge1xuICAgICAgICAgICAgbWluVXBwZXJjYXNlQ2FsYyA9IDE7XG4gICAgICAgIH0gZWxzZSBpZiAoIW9wdGlvbnMudXBwZXJjYXNlKSB7XG4gICAgICAgICAgICBtaW5VcHBlcmNhc2VDYWxjID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLmxvd2VyY2FzZSAmJiBvcHRpb25zLm1pbkxvd2VyY2FzZSA8PSAwKSB7XG4gICAgICAgICAgICBtaW5Mb3dlcmNhc2VDYWxjID0gMTtcbiAgICAgICAgfSBlbHNlIGlmICghb3B0aW9ucy5sb3dlcmNhc2UpIHtcbiAgICAgICAgICAgIG1pbkxvd2VyY2FzZUNhbGMgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMubnVtYmVyICYmIG9wdGlvbnMubWluTnVtYmVyIDw9IDApIHtcbiAgICAgICAgICAgIG1pbk51bWJlckNhbGMgPSAxO1xuICAgICAgICB9IGVsc2UgaWYgKCFvcHRpb25zLm51bWJlcikge1xuICAgICAgICAgICAgbWluTnVtYmVyQ2FsYyA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy5zcGVjaWFsICYmIG9wdGlvbnMubWluU3BlY2lhbCA8PSAwKSB7XG4gICAgICAgICAgICBtaW5TcGVjaWFsQ2FsYyA9IDE7XG4gICAgICAgIH0gZWxzZSBpZiAoIW9wdGlvbnMuc3BlY2lhbCkge1xuICAgICAgICAgICAgbWluU3BlY2lhbENhbGMgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhpcyBzaG91bGQgbmV2ZXIgaGFwcGVuIGJ1dCBpcyBhIGZpbmFsIHNhZmV0eSBuZXRcbiAgICAgICAgaWYgKCFvcHRpb25zLmxlbmd0aCB8fCBvcHRpb25zLmxlbmd0aCA8IDEpIHtcbiAgICAgICAgICAgIG9wdGlvbnMubGVuZ3RoID0gMTA7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBtaW5MZW5ndGg6IG51bWJlciA9IG1pblVwcGVyY2FzZUNhbGMgKyBtaW5Mb3dlcmNhc2VDYWxjICsgbWluTnVtYmVyQ2FsYyArIG1pblNwZWNpYWxDYWxjO1xuICAgICAgICAvLyBOb3JtYWxpemUgYW5kIEdlbmVyYXRpb24gYm90aCByZXF1aXJlIHRoaXMgbW9kaWZpY2F0aW9uXG4gICAgICAgIGlmIChvcHRpb25zLmxlbmd0aCA8IG1pbkxlbmd0aCkge1xuICAgICAgICAgICAgb3B0aW9ucy5sZW5ndGggPSBtaW5MZW5ndGg7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBcHBseSBvdGhlciBjaGFuZ2VzIGlmIHRoZSBvcHRpb25zIG9iamVjdCBwYXNzZWQgaW4gaXMgZm9yIGdlbmVyYXRpb25cbiAgICAgICAgaWYgKGZvckdlbmVyYXRpb24pIHtcbiAgICAgICAgICAgIG9wdGlvbnMubWluVXBwZXJjYXNlID0gbWluVXBwZXJjYXNlQ2FsYztcbiAgICAgICAgICAgIG9wdGlvbnMubWluTG93ZXJjYXNlID0gbWluTG93ZXJjYXNlQ2FsYztcbiAgICAgICAgICAgIG9wdGlvbnMubWluTnVtYmVyID0gbWluTnVtYmVyQ2FsYztcbiAgICAgICAgICAgIG9wdGlvbnMubWluU3BlY2lhbCA9IG1pblNwZWNpYWxDYWxjO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgU2V0dGluZ3NTZXJ2aWNlIGFzIFNldHRpbmdzU2VydmljZUFic3RyYWN0aW9uIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL3NldHRpbmdzLnNlcnZpY2UnO1xuaW1wb3J0IHsgU3RvcmFnZVNlcnZpY2UgfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvc3RvcmFnZS5zZXJ2aWNlJztcbmltcG9ydCB7IFVzZXJTZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL3VzZXIuc2VydmljZSc7XG5cbmNvbnN0IEtleXMgPSB7XG4gICAgc2V0dGluZ3NQcmVmaXg6ICdzZXR0aW5nc18nLFxuICAgIGVxdWl2YWxlbnREb21haW5zOiAnZXF1aXZhbGVudERvbWFpbnMnLFxufTtcblxuZXhwb3J0IGNsYXNzIFNldHRpbmdzU2VydmljZSBpbXBsZW1lbnRzIFNldHRpbmdzU2VydmljZUFic3RyYWN0aW9uIHtcbiAgICBwcml2YXRlIHNldHRpbmdzQ2FjaGU6IGFueTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgdXNlclNlcnZpY2U6IFVzZXJTZXJ2aWNlLCBwcml2YXRlIHN0b3JhZ2VTZXJ2aWNlOiBTdG9yYWdlU2VydmljZSkge1xuICAgIH1cblxuICAgIGNsZWFyQ2FjaGUoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuc2V0dGluZ3NDYWNoZSA9IG51bGw7XG4gICAgfVxuXG4gICAgZ2V0RXF1aXZhbGVudERvbWFpbnMoKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U2V0dGluZ3NLZXkoS2V5cy5lcXVpdmFsZW50RG9tYWlucyk7XG4gICAgfVxuXG4gICAgYXN5bmMgc2V0RXF1aXZhbGVudERvbWFpbnMoZXF1aXZhbGVudERvbWFpbnM6IHN0cmluZ1tdW10pOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgYXdhaXQgdGhpcy5zZXRTZXR0aW5nc0tleShLZXlzLmVxdWl2YWxlbnREb21haW5zLCBlcXVpdmFsZW50RG9tYWlucyk7XG4gICAgfVxuXG4gICAgYXN5bmMgY2xlYXIodXNlcklkOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5yZW1vdmUoS2V5cy5zZXR0aW5nc1ByZWZpeCArIHVzZXJJZCk7XG4gICAgICAgIHRoaXMuY2xlYXJDYWNoZSgpO1xuICAgIH1cblxuICAgIC8vIEhlbHBlcnNcblxuICAgIHByaXZhdGUgYXN5bmMgZ2V0U2V0dGluZ3MoKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3NDYWNoZSA9PSBudWxsKSB7XG4gICAgICAgICAgICBjb25zdCB1c2VySWQgPSBhd2FpdCB0aGlzLnVzZXJTZXJ2aWNlLmdldFVzZXJJZCgpO1xuICAgICAgICAgICAgdGhpcy5zZXR0aW5nc0NhY2hlID0gdGhpcy5zdG9yYWdlU2VydmljZS5nZXQoS2V5cy5zZXR0aW5nc1ByZWZpeCArIHVzZXJJZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0dGluZ3NDYWNoZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIGdldFNldHRpbmdzS2V5KGtleTogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgY29uc3Qgc2V0dGluZ3MgPSBhd2FpdCB0aGlzLmdldFNldHRpbmdzKCk7XG4gICAgICAgIGlmIChzZXR0aW5ncyAhPSBudWxsICYmIHNldHRpbmdzW2tleV0pIHtcbiAgICAgICAgICAgIHJldHVybiBzZXR0aW5nc1trZXldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgc2V0U2V0dGluZ3NLZXkoa2V5OiBzdHJpbmcsIHZhbHVlOiBhbnkpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgdXNlcklkID0gYXdhaXQgdGhpcy51c2VyU2VydmljZS5nZXRVc2VySWQoKTtcbiAgICAgICAgbGV0IHNldHRpbmdzID0gYXdhaXQgdGhpcy5nZXRTZXR0aW5ncygpO1xuICAgICAgICBpZiAoIXNldHRpbmdzKSB7XG4gICAgICAgICAgICBzZXR0aW5ncyA9IHt9O1xuICAgICAgICB9XG5cbiAgICAgICAgc2V0dGluZ3Nba2V5XSA9IHZhbHVlO1xuICAgICAgICBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLnNhdmUoS2V5cy5zZXR0aW5nc1ByZWZpeCArIHVzZXJJZCwgc2V0dGluZ3MpO1xuICAgICAgICB0aGlzLnNldHRpbmdzQ2FjaGUgPSBzZXR0aW5ncztcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBQcm9maWxlT3JnYW5pemF0aW9uUmVzcG9uc2UgfSBmcm9tICcuLi9yZXNwb25zZS9wcm9maWxlT3JnYW5pemF0aW9uUmVzcG9uc2UnO1xuXG5pbXBvcnQgeyBPcmdhbml6YXRpb25Vc2VyU3RhdHVzVHlwZSB9IGZyb20gJy4uLy4uL2VudW1zL29yZ2FuaXphdGlvblVzZXJTdGF0dXNUeXBlJztcbmltcG9ydCB7IE9yZ2FuaXphdGlvblVzZXJUeXBlIH0gZnJvbSAnLi4vLi4vZW51bXMvb3JnYW5pemF0aW9uVXNlclR5cGUnO1xuXG5leHBvcnQgY2xhc3MgT3JnYW5pemF0aW9uRGF0YSB7XG4gICAgaWQ6IHN0cmluZztcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgc3RhdHVzOiBPcmdhbml6YXRpb25Vc2VyU3RhdHVzVHlwZTtcbiAgICB0eXBlOiBPcmdhbml6YXRpb25Vc2VyVHlwZTtcbiAgICBlbmFibGVkOiBib29sZWFuO1xuICAgIHVzZVBvbGljaWVzOiBib29sZWFuO1xuICAgIHVzZUdyb3VwczogYm9vbGVhbjtcbiAgICB1c2VEaXJlY3Rvcnk6IGJvb2xlYW47XG4gICAgdXNlRXZlbnRzOiBib29sZWFuO1xuICAgIHVzZVRvdHA6IGJvb2xlYW47XG4gICAgdXNlMmZhOiBib29sZWFuO1xuICAgIHVzZUFwaTogYm9vbGVhbjtcbiAgICB1c2VCdXNpbmVzc1BvcnRhbDogYm9vbGVhbjtcbiAgICB1c2VTc286IGJvb2xlYW47XG4gICAgc2VsZkhvc3Q6IGJvb2xlYW47XG4gICAgdXNlcnNHZXRQcmVtaXVtOiBib29sZWFuO1xuICAgIHNlYXRzOiBudW1iZXI7XG4gICAgbWF4Q29sbGVjdGlvbnM6IG51bWJlcjtcbiAgICBtYXhTdG9yYWdlR2I/OiBudW1iZXI7XG4gICAgc3NvQm91bmQ6IGJvb2xlYW47XG4gICAgaWRlbnRpZmllcjogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IocmVzcG9uc2U6IFByb2ZpbGVPcmdhbml6YXRpb25SZXNwb25zZSkge1xuICAgICAgICB0aGlzLmlkID0gcmVzcG9uc2UuaWQ7XG4gICAgICAgIHRoaXMubmFtZSA9IHJlc3BvbnNlLm5hbWU7XG4gICAgICAgIHRoaXMuc3RhdHVzID0gcmVzcG9uc2Uuc3RhdHVzO1xuICAgICAgICB0aGlzLnR5cGUgPSByZXNwb25zZS50eXBlO1xuICAgICAgICB0aGlzLmVuYWJsZWQgPSByZXNwb25zZS5lbmFibGVkO1xuICAgICAgICB0aGlzLnVzZVBvbGljaWVzID0gcmVzcG9uc2UudXNlUG9saWNpZXM7XG4gICAgICAgIHRoaXMudXNlR3JvdXBzID0gcmVzcG9uc2UudXNlR3JvdXBzO1xuICAgICAgICB0aGlzLnVzZURpcmVjdG9yeSA9IHJlc3BvbnNlLnVzZURpcmVjdG9yeTtcbiAgICAgICAgdGhpcy51c2VFdmVudHMgPSByZXNwb25zZS51c2VFdmVudHM7XG4gICAgICAgIHRoaXMudXNlVG90cCA9IHJlc3BvbnNlLnVzZVRvdHA7XG4gICAgICAgIHRoaXMudXNlMmZhID0gcmVzcG9uc2UudXNlMmZhO1xuICAgICAgICB0aGlzLnVzZUFwaSA9IHJlc3BvbnNlLnVzZUFwaTtcbiAgICAgICAgdGhpcy51c2VCdXNpbmVzc1BvcnRhbCA9IHJlc3BvbnNlLnVzZUJ1c2luZXNzUG9ydGFsO1xuICAgICAgICB0aGlzLnVzZVNzbyA9IHJlc3BvbnNlLnVzZVNzbztcbiAgICAgICAgdGhpcy5zZWxmSG9zdCA9IHJlc3BvbnNlLnNlbGZIb3N0O1xuICAgICAgICB0aGlzLnVzZXJzR2V0UHJlbWl1bSA9IHJlc3BvbnNlLnVzZXJzR2V0UHJlbWl1bTtcbiAgICAgICAgdGhpcy5zZWF0cyA9IHJlc3BvbnNlLnNlYXRzO1xuICAgICAgICB0aGlzLm1heENvbGxlY3Rpb25zID0gcmVzcG9uc2UubWF4Q29sbGVjdGlvbnM7XG4gICAgICAgIHRoaXMubWF4U3RvcmFnZUdiID0gcmVzcG9uc2UubWF4U3RvcmFnZUdiO1xuICAgICAgICB0aGlzLnNzb0JvdW5kID0gcmVzcG9uc2Uuc3NvQm91bmQ7XG4gICAgICAgIHRoaXMuaWRlbnRpZmllciA9IHJlc3BvbnNlLmlkZW50aWZpZXI7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgUG9saWN5UmVzcG9uc2UgfSBmcm9tICcuLi9yZXNwb25zZS9wb2xpY3lSZXNwb25zZSc7XG5cbmltcG9ydCB7IFBvbGljeVR5cGUgfSBmcm9tICcuLi8uLi9lbnVtcy9wb2xpY3lUeXBlJztcblxuZXhwb3J0IGNsYXNzIFBvbGljeURhdGEge1xuICAgIGlkOiBzdHJpbmc7XG4gICAgb3JnYW5pemF0aW9uSWQ6IHN0cmluZztcbiAgICB0eXBlOiBQb2xpY3lUeXBlO1xuICAgIGRhdGE6IGFueTtcbiAgICBlbmFibGVkOiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IocmVzcG9uc2U6IFBvbGljeVJlc3BvbnNlKSB7XG4gICAgICAgIHRoaXMuaWQgPSByZXNwb25zZS5pZDtcbiAgICAgICAgdGhpcy5vcmdhbml6YXRpb25JZCA9IHJlc3BvbnNlLm9yZ2FuaXphdGlvbklkO1xuICAgICAgICB0aGlzLnR5cGUgPSByZXNwb25zZS50eXBlO1xuICAgICAgICB0aGlzLmRhdGEgPSByZXNwb25zZS5kYXRhO1xuICAgICAgICB0aGlzLmVuYWJsZWQgPSByZXNwb25zZS5lbmFibGVkO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IEFwaVNlcnZpY2UgfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvYXBpLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ2lwaGVyU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9jaXBoZXIuc2VydmljZSc7XG5pbXBvcnQgeyBDb2xsZWN0aW9uU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9jb2xsZWN0aW9uLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ3J5cHRvU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9jcnlwdG8uc2VydmljZSc7XG5pbXBvcnQgeyBGb2xkZXJTZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL2ZvbGRlci5zZXJ2aWNlJztcbmltcG9ydCB7IE1lc3NhZ2luZ1NlcnZpY2UgfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvbWVzc2FnaW5nLnNlcnZpY2UnO1xuaW1wb3J0IHsgUG9saWN5U2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9wb2xpY3kuc2VydmljZSc7XG5pbXBvcnQgeyBTZW5kU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9zZW5kLnNlcnZpY2UnO1xuaW1wb3J0IHsgU2V0dGluZ3NTZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL3NldHRpbmdzLnNlcnZpY2UnO1xuaW1wb3J0IHsgU3RvcmFnZVNlcnZpY2UgfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvc3RvcmFnZS5zZXJ2aWNlJztcbmltcG9ydCB7IFN5bmNTZXJ2aWNlIGFzIFN5bmNTZXJ2aWNlQWJzdHJhY3Rpb24gfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvc3luYy5zZXJ2aWNlJztcbmltcG9ydCB7IFVzZXJTZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL3VzZXIuc2VydmljZSc7XG5cbmltcG9ydCB7IENpcGhlckRhdGEgfSBmcm9tICcuLi9tb2RlbHMvZGF0YS9jaXBoZXJEYXRhJztcbmltcG9ydCB7IENvbGxlY3Rpb25EYXRhIH0gZnJvbSAnLi4vbW9kZWxzL2RhdGEvY29sbGVjdGlvbkRhdGEnO1xuaW1wb3J0IHsgRm9sZGVyRGF0YSB9IGZyb20gJy4uL21vZGVscy9kYXRhL2ZvbGRlckRhdGEnO1xuaW1wb3J0IHsgT3JnYW5pemF0aW9uRGF0YSB9IGZyb20gJy4uL21vZGVscy9kYXRhL29yZ2FuaXphdGlvbkRhdGEnO1xuaW1wb3J0IHsgUG9saWN5RGF0YSB9IGZyb20gJy4uL21vZGVscy9kYXRhL3BvbGljeURhdGEnO1xuaW1wb3J0IHsgU2VuZERhdGEgfSBmcm9tICcuLi9tb2RlbHMvZGF0YS9zZW5kRGF0YSc7XG5cbmltcG9ydCB7IENpcGhlclJlc3BvbnNlIH0gZnJvbSAnLi4vbW9kZWxzL3Jlc3BvbnNlL2NpcGhlclJlc3BvbnNlJztcbmltcG9ydCB7IENvbGxlY3Rpb25EZXRhaWxzUmVzcG9uc2UgfSBmcm9tICcuLi9tb2RlbHMvcmVzcG9uc2UvY29sbGVjdGlvblJlc3BvbnNlJztcbmltcG9ydCB7IERvbWFpbnNSZXNwb25zZSB9IGZyb20gJy4uL21vZGVscy9yZXNwb25zZS9kb21haW5zUmVzcG9uc2UnO1xuaW1wb3J0IHsgRm9sZGVyUmVzcG9uc2UgfSBmcm9tICcuLi9tb2RlbHMvcmVzcG9uc2UvZm9sZGVyUmVzcG9uc2UnO1xuaW1wb3J0IHtcbiAgICBTeW5jQ2lwaGVyTm90aWZpY2F0aW9uLFxuICAgIFN5bmNGb2xkZXJOb3RpZmljYXRpb24sXG59IGZyb20gJy4uL21vZGVscy9yZXNwb25zZS9ub3RpZmljYXRpb25SZXNwb25zZSc7XG5pbXBvcnQgeyBQb2xpY3lSZXNwb25zZSB9IGZyb20gJy4uL21vZGVscy9yZXNwb25zZS9wb2xpY3lSZXNwb25zZSc7XG5pbXBvcnQgeyBQcm9maWxlUmVzcG9uc2UgfSBmcm9tICcuLi9tb2RlbHMvcmVzcG9uc2UvcHJvZmlsZVJlc3BvbnNlJztcbmltcG9ydCB7IFNlbmRSZXNwb25zZSB9IGZyb20gJy4uL21vZGVscy9yZXNwb25zZS9zZW5kUmVzcG9uc2UnO1xuXG5jb25zdCBLZXlzID0ge1xuICAgIGxhc3RTeW5jUHJlZml4OiAnbGFzdFN5bmNfJyxcbn07XG5cbmV4cG9ydCBjbGFzcyBTeW5jU2VydmljZSBpbXBsZW1lbnRzIFN5bmNTZXJ2aWNlQWJzdHJhY3Rpb24ge1xuICAgIHN5bmNJblByb2dyZXNzOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHVzZXJTZXJ2aWNlOiBVc2VyU2VydmljZSwgcHJpdmF0ZSBhcGlTZXJ2aWNlOiBBcGlTZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIHNldHRpbmdzU2VydmljZTogU2V0dGluZ3NTZXJ2aWNlLCBwcml2YXRlIGZvbGRlclNlcnZpY2U6IEZvbGRlclNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgY2lwaGVyU2VydmljZTogQ2lwaGVyU2VydmljZSwgcHJpdmF0ZSBjcnlwdG9TZXJ2aWNlOiBDcnlwdG9TZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIGNvbGxlY3Rpb25TZXJ2aWNlOiBDb2xsZWN0aW9uU2VydmljZSwgcHJpdmF0ZSBzdG9yYWdlU2VydmljZTogU3RvcmFnZVNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgbWVzc2FnaW5nU2VydmljZTogTWVzc2FnaW5nU2VydmljZSwgcHJpdmF0ZSBwb2xpY3lTZXJ2aWNlOiBQb2xpY3lTZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIHNlbmRTZXJ2aWNlOiBTZW5kU2VydmljZSwgcHJpdmF0ZSBsb2dvdXRDYWxsYmFjazogKGV4cGlyZWQ6IGJvb2xlYW4pID0+IFByb21pc2U8dm9pZD4pIHtcbiAgICB9XG5cbiAgICBhc3luYyBnZXRMYXN0U3luYygpOiBQcm9taXNlPERhdGU+IHtcbiAgICAgICAgY29uc3QgdXNlcklkID0gYXdhaXQgdGhpcy51c2VyU2VydmljZS5nZXRVc2VySWQoKTtcbiAgICAgICAgaWYgKHVzZXJJZCA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGxhc3RTeW5jID0gYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5nZXQ8YW55PihLZXlzLmxhc3RTeW5jUHJlZml4ICsgdXNlcklkKTtcbiAgICAgICAgaWYgKGxhc3RTeW5jKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IERhdGUobGFzdFN5bmMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgYXN5bmMgc2V0TGFzdFN5bmMoZGF0ZTogRGF0ZSk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIGNvbnN0IHVzZXJJZCA9IGF3YWl0IHRoaXMudXNlclNlcnZpY2UuZ2V0VXNlcklkKCk7XG4gICAgICAgIGlmICh1c2VySWQgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5zYXZlKEtleXMubGFzdFN5bmNQcmVmaXggKyB1c2VySWQsIGRhdGUudG9KU09OKCkpO1xuICAgIH1cblxuICAgIGFzeW5jIGZ1bGxTeW5jKGZvcmNlU3luYzogYm9vbGVhbiwgYWxsb3dUaHJvd09uRXJyb3IgPSBmYWxzZSk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgICAgICB0aGlzLnN5bmNTdGFydGVkKCk7XG4gICAgICAgIGNvbnN0IGlzQXV0aGVudGljYXRlZCA9IGF3YWl0IHRoaXMudXNlclNlcnZpY2UuaXNBdXRoZW50aWNhdGVkKCk7XG4gICAgICAgIGlmICghaXNBdXRoZW50aWNhdGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zeW5jQ29tcGxldGVkKGZhbHNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XG4gICAgICAgIGxldCBuZWVkc1N5bmMgPSBmYWxzZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIG5lZWRzU3luYyA9IGF3YWl0IHRoaXMubmVlZHNTeW5jaW5nKGZvcmNlU3luYyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGlmIChhbGxvd1Rocm93T25FcnJvcikge1xuICAgICAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIW5lZWRzU3luYykge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5zZXRMYXN0U3luYyhub3cpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3luY0NvbXBsZXRlZChmYWxzZSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB1c2VySWQgPSBhd2FpdCB0aGlzLnVzZXJTZXJ2aWNlLmdldFVzZXJJZCgpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmFwaVNlcnZpY2UuZ2V0U3luYygpO1xuXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnN5bmNQcm9maWxlKHJlc3BvbnNlLnByb2ZpbGUpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5zeW5jRm9sZGVycyh1c2VySWQsIHJlc3BvbnNlLmZvbGRlcnMpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5zeW5jQ29sbGVjdGlvbnMocmVzcG9uc2UuY29sbGVjdGlvbnMpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5zeW5jQ2lwaGVycyh1c2VySWQsIHJlc3BvbnNlLmNpcGhlcnMpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5zeW5jU2VuZHModXNlcklkLCByZXNwb25zZS5zZW5kcyk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnN5bmNTZXR0aW5ncyh1c2VySWQsIHJlc3BvbnNlLmRvbWFpbnMpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5zeW5jUG9saWNpZXMocmVzcG9uc2UucG9saWNpZXMpO1xuXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnNldExhc3RTeW5jKG5vdyk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zeW5jQ29tcGxldGVkKHRydWUpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBpZiAoYWxsb3dUaHJvd09uRXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zeW5jQ29tcGxldGVkKGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIHN5bmNVcHNlcnRGb2xkZXIobm90aWZpY2F0aW9uOiBTeW5jRm9sZGVyTm90aWZpY2F0aW9uLCBpc0VkaXQ6IGJvb2xlYW4pOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgICAgdGhpcy5zeW5jU3RhcnRlZCgpO1xuICAgICAgICBpZiAoYXdhaXQgdGhpcy51c2VyU2VydmljZS5pc0F1dGhlbnRpY2F0ZWQoKSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBsb2NhbEZvbGRlciA9IGF3YWl0IHRoaXMuZm9sZGVyU2VydmljZS5nZXQobm90aWZpY2F0aW9uLmlkKTtcbiAgICAgICAgICAgICAgICBpZiAoKCFpc0VkaXQgJiYgbG9jYWxGb2xkZXIgPT0gbnVsbCkgfHxcbiAgICAgICAgICAgICAgICAgICAgKGlzRWRpdCAmJiBsb2NhbEZvbGRlciAhPSBudWxsICYmIGxvY2FsRm9sZGVyLnJldmlzaW9uRGF0ZSA8IG5vdGlmaWNhdGlvbi5yZXZpc2lvbkRhdGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlbW90ZUZvbGRlciA9IGF3YWl0IHRoaXMuYXBpU2VydmljZS5nZXRGb2xkZXIobm90aWZpY2F0aW9uLmlkKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlbW90ZUZvbGRlciAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB1c2VySWQgPSBhd2FpdCB0aGlzLnVzZXJTZXJ2aWNlLmdldFVzZXJJZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5mb2xkZXJTZXJ2aWNlLnVwc2VydChuZXcgRm9sZGVyRGF0YShyZW1vdGVGb2xkZXIsIHVzZXJJZCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXNzYWdpbmdTZXJ2aWNlLnNlbmQoJ3N5bmNlZFVwc2VydGVkRm9sZGVyJywgeyBmb2xkZXJJZDogbm90aWZpY2F0aW9uLmlkIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3luY0NvbXBsZXRlZCh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggeyB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuc3luY0NvbXBsZXRlZChmYWxzZSk7XG4gICAgfVxuXG4gICAgYXN5bmMgc3luY0RlbGV0ZUZvbGRlcihub3RpZmljYXRpb246IFN5bmNGb2xkZXJOb3RpZmljYXRpb24pOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgICAgdGhpcy5zeW5jU3RhcnRlZCgpO1xuICAgICAgICBpZiAoYXdhaXQgdGhpcy51c2VyU2VydmljZS5pc0F1dGhlbnRpY2F0ZWQoKSkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5mb2xkZXJTZXJ2aWNlLmRlbGV0ZShub3RpZmljYXRpb24uaWQpO1xuICAgICAgICAgICAgdGhpcy5tZXNzYWdpbmdTZXJ2aWNlLnNlbmQoJ3N5bmNlZERlbGV0ZWRGb2xkZXInLCB7IGZvbGRlcklkOiBub3RpZmljYXRpb24uaWQgfSk7XG4gICAgICAgICAgICB0aGlzLnN5bmNDb21wbGV0ZWQodHJ1ZSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5zeW5jQ29tcGxldGVkKGZhbHNlKTtcbiAgICB9XG5cbiAgICBhc3luYyBzeW5jVXBzZXJ0Q2lwaGVyKG5vdGlmaWNhdGlvbjogU3luY0NpcGhlck5vdGlmaWNhdGlvbiwgaXNFZGl0OiBib29sZWFuKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgICAgIHRoaXMuc3luY1N0YXJ0ZWQoKTtcbiAgICAgICAgaWYgKGF3YWl0IHRoaXMudXNlclNlcnZpY2UuaXNBdXRoZW50aWNhdGVkKCkpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgbGV0IHNob3VsZFVwZGF0ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxDaXBoZXIgPSBhd2FpdCB0aGlzLmNpcGhlclNlcnZpY2UuZ2V0KG5vdGlmaWNhdGlvbi5pZCk7XG4gICAgICAgICAgICAgICAgaWYgKGxvY2FsQ2lwaGVyICE9IG51bGwgJiYgbG9jYWxDaXBoZXIucmV2aXNpb25EYXRlID49IG5vdGlmaWNhdGlvbi5yZXZpc2lvbkRhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdWxkVXBkYXRlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbGV0IGNoZWNrQ29sbGVjdGlvbnMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBpZiAoc2hvdWxkVXBkYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0VkaXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3VsZFVwZGF0ZSA9IGxvY2FsQ2lwaGVyICE9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGVja0NvbGxlY3Rpb25zID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub3RpZmljYXRpb24uY29sbGVjdGlvbklkcyA9PSBudWxsIHx8IG5vdGlmaWNhdGlvbi5vcmdhbml6YXRpb25JZCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvdWxkVXBkYXRlID0gbG9jYWxDaXBoZXIgPT0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvdWxkVXBkYXRlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tDb2xsZWN0aW9ucyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoIXNob3VsZFVwZGF0ZSAmJiBjaGVja0NvbGxlY3Rpb25zICYmIG5vdGlmaWNhdGlvbi5vcmdhbml6YXRpb25JZCAhPSBudWxsICYmXG4gICAgICAgICAgICAgICAgICAgIG5vdGlmaWNhdGlvbi5jb2xsZWN0aW9uSWRzICE9IG51bGwgJiYgbm90aWZpY2F0aW9uLmNvbGxlY3Rpb25JZHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb2xsZWN0aW9ucyA9IGF3YWl0IHRoaXMuY29sbGVjdGlvblNlcnZpY2UuZ2V0QWxsKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb2xsZWN0aW9ucyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbGxlY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vdGlmaWNhdGlvbi5jb2xsZWN0aW9uSWRzLmluZGV4T2YoY29sbGVjdGlvbnNbaV0uaWQpID4gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvdWxkVXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHNob3VsZFVwZGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZW1vdGVDaXBoZXIgPSBhd2FpdCB0aGlzLmFwaVNlcnZpY2UuZ2V0Q2lwaGVyKG5vdGlmaWNhdGlvbi5pZCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZW1vdGVDaXBoZXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdXNlcklkID0gYXdhaXQgdGhpcy51c2VyU2VydmljZS5nZXRVc2VySWQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuY2lwaGVyU2VydmljZS51cHNlcnQobmV3IENpcGhlckRhdGEocmVtb3RlQ2lwaGVyLCB1c2VySWQpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWVzc2FnaW5nU2VydmljZS5zZW5kKCdzeW5jZWRVcHNlcnRlZENpcGhlcicsIHsgY2lwaGVySWQ6IG5vdGlmaWNhdGlvbi5pZCB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnN5bmNDb21wbGV0ZWQodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGUgIT0gbnVsbCAmJiBlLnN0YXR1c0NvZGUgPT09IDQwNCAmJiBpc0VkaXQpIHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5jaXBoZXJTZXJ2aWNlLmRlbGV0ZShub3RpZmljYXRpb24uaWQpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1lc3NhZ2luZ1NlcnZpY2Uuc2VuZCgnc3luY2VkRGVsZXRlZENpcGhlcicsIHsgY2lwaGVySWQ6IG5vdGlmaWNhdGlvbi5pZCB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3luY0NvbXBsZXRlZCh0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuc3luY0NvbXBsZXRlZChmYWxzZSk7XG4gICAgfVxuXG4gICAgYXN5bmMgc3luY0RlbGV0ZUNpcGhlcihub3RpZmljYXRpb246IFN5bmNDaXBoZXJOb3RpZmljYXRpb24pOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgICAgdGhpcy5zeW5jU3RhcnRlZCgpO1xuICAgICAgICBpZiAoYXdhaXQgdGhpcy51c2VyU2VydmljZS5pc0F1dGhlbnRpY2F0ZWQoKSkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5jaXBoZXJTZXJ2aWNlLmRlbGV0ZShub3RpZmljYXRpb24uaWQpO1xuICAgICAgICAgICAgdGhpcy5tZXNzYWdpbmdTZXJ2aWNlLnNlbmQoJ3N5bmNlZERlbGV0ZWRDaXBoZXInLCB7IGNpcGhlcklkOiBub3RpZmljYXRpb24uaWQgfSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zeW5jQ29tcGxldGVkKHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnN5bmNDb21wbGV0ZWQoZmFsc2UpO1xuICAgIH1cblxuICAgIC8vIEhlbHBlcnNcblxuICAgIHByaXZhdGUgc3luY1N0YXJ0ZWQoKSB7XG4gICAgICAgIHRoaXMuc3luY0luUHJvZ3Jlc3MgPSB0cnVlO1xuICAgICAgICB0aGlzLm1lc3NhZ2luZ1NlcnZpY2Uuc2VuZCgnc3luY1N0YXJ0ZWQnKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHN5bmNDb21wbGV0ZWQoc3VjY2Vzc2Z1bGx5OiBib29sZWFuKTogYm9vbGVhbiB7XG4gICAgICAgIHRoaXMuc3luY0luUHJvZ3Jlc3MgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5tZXNzYWdpbmdTZXJ2aWNlLnNlbmQoJ3N5bmNDb21wbGV0ZWQnLCB7IHN1Y2Nlc3NmdWxseTogc3VjY2Vzc2Z1bGx5IH0pO1xuICAgICAgICByZXR1cm4gc3VjY2Vzc2Z1bGx5O1xuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgbmVlZHNTeW5jaW5nKGZvcmNlU3luYzogYm9vbGVhbikge1xuICAgICAgICBpZiAoZm9yY2VTeW5jKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGxhc3RTeW5jID0gYXdhaXQgdGhpcy5nZXRMYXN0U3luYygpO1xuICAgICAgICBpZiAobGFzdFN5bmMgPT0gbnVsbCB8fCBsYXN0U3luYy5nZXRUaW1lKCkgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmFwaVNlcnZpY2UuZ2V0QWNjb3VudFJldmlzaW9uRGF0ZSgpO1xuICAgICAgICBpZiAobmV3IERhdGUocmVzcG9uc2UpIDw9IGxhc3RTeW5jKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBzeW5jUHJvZmlsZShyZXNwb25zZTogUHJvZmlsZVJlc3BvbnNlKSB7XG4gICAgICAgIGNvbnN0IHN0YW1wID0gYXdhaXQgdGhpcy51c2VyU2VydmljZS5nZXRTZWN1cml0eVN0YW1wKCk7XG4gICAgICAgIGlmIChzdGFtcCAhPSBudWxsICYmIHN0YW1wICE9PSByZXNwb25zZS5zZWN1cml0eVN0YW1wKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5sb2dvdXRDYWxsYmFjayAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5sb2dvdXRDYWxsYmFjayh0cnVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTdGFtcCBoYXMgY2hhbmdlZCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgYXdhaXQgdGhpcy5jcnlwdG9TZXJ2aWNlLnNldEVuY0tleShyZXNwb25zZS5rZXkpO1xuICAgICAgICBhd2FpdCB0aGlzLmNyeXB0b1NlcnZpY2Uuc2V0RW5jUHJpdmF0ZUtleShyZXNwb25zZS5wcml2YXRlS2V5KTtcbiAgICAgICAgYXdhaXQgdGhpcy5jcnlwdG9TZXJ2aWNlLnNldE9yZ0tleXMocmVzcG9uc2Uub3JnYW5pemF0aW9ucyk7XG4gICAgICAgIGF3YWl0IHRoaXMudXNlclNlcnZpY2Uuc2V0U2VjdXJpdHlTdGFtcChyZXNwb25zZS5zZWN1cml0eVN0YW1wKTtcblxuICAgICAgICBjb25zdCBvcmdhbml6YXRpb25zOiB7IFtpZDogc3RyaW5nXTogT3JnYW5pemF0aW9uRGF0YTsgfSA9IHt9O1xuICAgICAgICByZXNwb25zZS5vcmdhbml6YXRpb25zLmZvckVhY2goKG8pID0+IHtcbiAgICAgICAgICAgIG9yZ2FuaXphdGlvbnNbby5pZF0gPSBuZXcgT3JnYW5pemF0aW9uRGF0YShvKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnVzZXJTZXJ2aWNlLnJlcGxhY2VPcmdhbml6YXRpb25zKG9yZ2FuaXphdGlvbnMpO1xuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgc3luY0ZvbGRlcnModXNlcklkOiBzdHJpbmcsIHJlc3BvbnNlOiBGb2xkZXJSZXNwb25zZVtdKSB7XG4gICAgICAgIGNvbnN0IGZvbGRlcnM6IHsgW2lkOiBzdHJpbmddOiBGb2xkZXJEYXRhOyB9ID0ge307XG4gICAgICAgIHJlc3BvbnNlLmZvckVhY2goKGYpID0+IHtcbiAgICAgICAgICAgIGZvbGRlcnNbZi5pZF0gPSBuZXcgRm9sZGVyRGF0YShmLCB1c2VySWQpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZm9sZGVyU2VydmljZS5yZXBsYWNlKGZvbGRlcnMpO1xuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgc3luY0NvbGxlY3Rpb25zKHJlc3BvbnNlOiBDb2xsZWN0aW9uRGV0YWlsc1Jlc3BvbnNlW10pIHtcbiAgICAgICAgY29uc3QgY29sbGVjdGlvbnM6IHsgW2lkOiBzdHJpbmddOiBDb2xsZWN0aW9uRGF0YTsgfSA9IHt9O1xuICAgICAgICByZXNwb25zZS5mb3JFYWNoKChjKSA9PiB7XG4gICAgICAgICAgICBjb2xsZWN0aW9uc1tjLmlkXSA9IG5ldyBDb2xsZWN0aW9uRGF0YShjKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNvbGxlY3Rpb25TZXJ2aWNlLnJlcGxhY2UoY29sbGVjdGlvbnMpO1xuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgc3luY0NpcGhlcnModXNlcklkOiBzdHJpbmcsIHJlc3BvbnNlOiBDaXBoZXJSZXNwb25zZVtdKSB7XG4gICAgICAgIGNvbnN0IGNpcGhlcnM6IHsgW2lkOiBzdHJpbmddOiBDaXBoZXJEYXRhOyB9ID0ge307XG4gICAgICAgIHJlc3BvbnNlLmZvckVhY2goKGMpID0+IHtcbiAgICAgICAgICAgIGNpcGhlcnNbYy5pZF0gPSBuZXcgQ2lwaGVyRGF0YShjLCB1c2VySWQpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY2lwaGVyU2VydmljZS5yZXBsYWNlKGNpcGhlcnMpO1xuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgc3luY1NlbmRzKHVzZXJJZDogc3RyaW5nLCByZXNwb25zZTogU2VuZFJlc3BvbnNlW10pIHtcbiAgICAgICAgY29uc3Qgc2VuZHM6IHsgW2lkOiBzdHJpbmddOiBTZW5kRGF0YTsgfSA9IHt9O1xuICAgICAgICByZXNwb25zZS5mb3JFYWNoKChzKSA9PiB7XG4gICAgICAgICAgICBzZW5kc1tzLmlkXSA9IG5ldyBTZW5kRGF0YShzLCB1c2VySWQpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuc2VuZFNlcnZpY2UucmVwbGFjZShzZW5kcyk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBzeW5jU2V0dGluZ3ModXNlcklkOiBzdHJpbmcsIHJlc3BvbnNlOiBEb21haW5zUmVzcG9uc2UpIHtcbiAgICAgICAgbGV0IGVxRG9tYWluczogc3RyaW5nW11bXSA9IFtdO1xuICAgICAgICBpZiAocmVzcG9uc2UgIT0gbnVsbCAmJiByZXNwb25zZS5lcXVpdmFsZW50RG9tYWlucyAhPSBudWxsKSB7XG4gICAgICAgICAgICBlcURvbWFpbnMgPSBlcURvbWFpbnMuY29uY2F0KHJlc3BvbnNlLmVxdWl2YWxlbnREb21haW5zKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyZXNwb25zZSAhPSBudWxsICYmIHJlc3BvbnNlLmdsb2JhbEVxdWl2YWxlbnREb21haW5zICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlLmdsb2JhbEVxdWl2YWxlbnREb21haW5zLmZvckVhY2goKGdsb2JhbCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChnbG9iYWwuZG9tYWlucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGVxRG9tYWlucy5wdXNoKGdsb2JhbC5kb21haW5zKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLnNldHRpbmdzU2VydmljZS5zZXRFcXVpdmFsZW50RG9tYWlucyhlcURvbWFpbnMpO1xuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgc3luY1BvbGljaWVzKHJlc3BvbnNlOiBQb2xpY3lSZXNwb25zZVtdKSB7XG4gICAgICAgIGNvbnN0IHBvbGljaWVzOiB7IFtpZDogc3RyaW5nXTogUG9saWN5RGF0YTsgfSA9IHt9O1xuICAgICAgICBpZiAocmVzcG9uc2UgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmVzcG9uc2UuZm9yRWFjaCgocCkgPT4ge1xuICAgICAgICAgICAgICAgIHBvbGljaWVzW3AuaWRdID0gbmV3IFBvbGljeURhdGEocCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5wb2xpY3lTZXJ2aWNlLnJlcGxhY2UocG9saWNpZXMpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IENvbnN0YW50c1NlcnZpY2UgfSBmcm9tICcuL2NvbnN0YW50cy5zZXJ2aWNlJztcblxuaW1wb3J0IHsgU3RvcmFnZVNlcnZpY2UgfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvc3RvcmFnZS5zZXJ2aWNlJztcbmltcG9ydCB7IFRva2VuU2VydmljZSBhcyBUb2tlblNlcnZpY2VBYnN0cmFjdGlvbiB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy90b2tlbi5zZXJ2aWNlJztcblxuaW1wb3J0IHsgVXRpbHMgfSBmcm9tICcuLi9taXNjL3V0aWxzJztcblxuY29uc3QgS2V5cyA9IHtcbiAgICBhY2Nlc3NUb2tlbjogJ2FjY2Vzc1Rva2VuJyxcbiAgICByZWZyZXNoVG9rZW46ICdyZWZyZXNoVG9rZW4nLFxuICAgIHR3b0ZhY3RvclRva2VuUHJlZml4OiAndHdvRmFjdG9yVG9rZW5fJyxcbn07XG5cbmV4cG9ydCBjbGFzcyBUb2tlblNlcnZpY2UgaW1wbGVtZW50cyBUb2tlblNlcnZpY2VBYnN0cmFjdGlvbiB7XG4gICAgdG9rZW46IHN0cmluZztcbiAgICBkZWNvZGVkVG9rZW46IGFueTtcbiAgICByZWZyZXNoVG9rZW46IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgc3RvcmFnZVNlcnZpY2U6IFN0b3JhZ2VTZXJ2aWNlKSB7XG4gICAgfVxuXG4gICAgc2V0VG9rZW5zKGFjY2Vzc1Rva2VuOiBzdHJpbmcsIHJlZnJlc2hUb2tlbjogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKFtcbiAgICAgICAgICAgIHRoaXMuc2V0VG9rZW4oYWNjZXNzVG9rZW4pLFxuICAgICAgICAgICAgdGhpcy5zZXRSZWZyZXNoVG9rZW4ocmVmcmVzaFRva2VuKSxcbiAgICAgICAgXSk7XG4gICAgfVxuXG4gICAgYXN5bmMgc2V0VG9rZW4odG9rZW46IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIHRoaXMudG9rZW4gPSB0b2tlbjtcbiAgICAgICAgdGhpcy5kZWNvZGVkVG9rZW4gPSBudWxsO1xuXG4gICAgICAgIGlmIChhd2FpdCB0aGlzLnNraXBUb2tlblN0b3JhZ2UoKSkge1xuICAgICAgICAgICAgLy8gaWYgd2UgaGF2ZSBhIHZhdWx0IHRpbWVvdXQgYW5kIHRoZSBhY3Rpb24gaXMgbG9nIG91dCwgZG9uJ3Qgc3RvcmUgdG9rZW5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLnN0b3JhZ2VTZXJ2aWNlLnNhdmUoS2V5cy5hY2Nlc3NUb2tlbiwgdG9rZW4pO1xuICAgIH1cblxuICAgIGFzeW5jIGdldFRva2VuKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgICAgIGlmICh0aGlzLnRva2VuICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRva2VuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy50b2tlbiA9IGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2UuZ2V0PHN0cmluZz4oS2V5cy5hY2Nlc3NUb2tlbik7XG4gICAgICAgIHJldHVybiB0aGlzLnRva2VuO1xuICAgIH1cblxuICAgIGFzeW5jIHNldFJlZnJlc2hUb2tlbihyZWZyZXNoVG9rZW46IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIHRoaXMucmVmcmVzaFRva2VuID0gcmVmcmVzaFRva2VuO1xuXG4gICAgICAgIGlmIChhd2FpdCB0aGlzLnNraXBUb2tlblN0b3JhZ2UoKSkge1xuICAgICAgICAgICAgLy8gaWYgd2UgaGF2ZSBhIHZhdWx0IHRpbWVvdXQgYW5kIHRoZSBhY3Rpb24gaXMgbG9nIG91dCwgZG9uJ3Qgc3RvcmUgdG9rZW5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLnN0b3JhZ2VTZXJ2aWNlLnNhdmUoS2V5cy5yZWZyZXNoVG9rZW4sIHJlZnJlc2hUb2tlbik7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0UmVmcmVzaFRva2VuKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgICAgIGlmICh0aGlzLnJlZnJlc2hUb2tlbiAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZWZyZXNoVG9rZW47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnJlZnJlc2hUb2tlbiA9IGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2UuZ2V0PHN0cmluZz4oS2V5cy5yZWZyZXNoVG9rZW4pO1xuICAgICAgICByZXR1cm4gdGhpcy5yZWZyZXNoVG9rZW47XG4gICAgfVxuXG4gICAgYXN5bmMgdG9nZ2xlVG9rZW5zKCk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIGNvbnN0IHRva2VuID0gYXdhaXQgdGhpcy5nZXRUb2tlbigpO1xuICAgICAgICBjb25zdCByZWZyZXNoVG9rZW4gPSBhd2FpdCB0aGlzLmdldFJlZnJlc2hUb2tlbigpO1xuICAgICAgICBjb25zdCB0aW1lb3V0ID0gYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5nZXQoQ29uc3RhbnRzU2VydmljZS52YXVsdFRpbWVvdXRLZXkpO1xuICAgICAgICBjb25zdCBhY3Rpb24gPSBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldChDb25zdGFudHNTZXJ2aWNlLnZhdWx0VGltZW91dEFjdGlvbktleSk7XG4gICAgICAgIGlmICgodGltZW91dCAhPSBudWxsIHx8IHRpbWVvdXQgPT09IDApICYmIGFjdGlvbiA9PT0gJ2xvZ091dCcpIHtcbiAgICAgICAgICAgIC8vIGlmIHdlIGhhdmUgYSB2YXVsdCB0aW1lb3V0IGFuZCB0aGUgYWN0aW9uIGlzIGxvZyBvdXQsIHJlc2V0IHRva2Vuc1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5jbGVhclRva2VuKCk7XG4gICAgICAgICAgICB0aGlzLnRva2VuID0gdG9rZW47XG4gICAgICAgICAgICB0aGlzLnJlZnJlc2hUb2tlbiA9IHJlZnJlc2hUb2tlbjtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGF3YWl0IHRoaXMuc2V0VG9rZW4odG9rZW4pO1xuICAgICAgICBhd2FpdCB0aGlzLnNldFJlZnJlc2hUb2tlbihyZWZyZXNoVG9rZW4pO1xuICAgIH1cblxuICAgIHNldFR3b0ZhY3RvclRva2VuKHRva2VuOiBzdHJpbmcsIGVtYWlsOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5zdG9yYWdlU2VydmljZS5zYXZlKEtleXMudHdvRmFjdG9yVG9rZW5QcmVmaXggKyBlbWFpbCwgdG9rZW4pO1xuICAgIH1cblxuICAgIGdldFR3b0ZhY3RvclRva2VuKGVtYWlsOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgICAgICByZXR1cm4gdGhpcy5zdG9yYWdlU2VydmljZS5nZXQ8c3RyaW5nPihLZXlzLnR3b0ZhY3RvclRva2VuUHJlZml4ICsgZW1haWwpO1xuICAgIH1cblxuICAgIGNsZWFyVHdvRmFjdG9yVG9rZW4oZW1haWw6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0b3JhZ2VTZXJ2aWNlLnJlbW92ZShLZXlzLnR3b0ZhY3RvclRva2VuUHJlZml4ICsgZW1haWwpO1xuICAgIH1cblxuICAgIGNsZWFyVG9rZW4oKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgdGhpcy50b2tlbiA9IG51bGw7XG4gICAgICAgIHRoaXMuZGVjb2RlZFRva2VuID0gbnVsbDtcbiAgICAgICAgdGhpcy5yZWZyZXNoVG9rZW4gPSBudWxsO1xuXG4gICAgICAgIHJldHVybiBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICB0aGlzLnN0b3JhZ2VTZXJ2aWNlLnJlbW92ZShLZXlzLmFjY2Vzc1Rva2VuKSxcbiAgICAgICAgICAgIHRoaXMuc3RvcmFnZVNlcnZpY2UucmVtb3ZlKEtleXMucmVmcmVzaFRva2VuKSxcbiAgICAgICAgXSk7XG4gICAgfVxuXG4gICAgLy8gand0aGVscGVyIG1ldGhvZHNcbiAgICAvLyByZWYgaHR0cHM6Ly9naXRodWIuY29tL2F1dGgwL2FuZ3VsYXItand0L2Jsb2IvbWFzdGVyL3NyYy9hbmd1bGFySnd0L3NlcnZpY2VzL2p3dC5qc1xuXG4gICAgZGVjb2RlVG9rZW4oKTogYW55IHtcbiAgICAgICAgaWYgKHRoaXMuZGVjb2RlZFRva2VuKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kZWNvZGVkVG9rZW47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy50b2tlbiA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Rva2VuIG5vdCBmb3VuZC4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHBhcnRzID0gdGhpcy50b2tlbi5zcGxpdCgnLicpO1xuICAgICAgICBpZiAocGFydHMubGVuZ3RoICE9PSAzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0pXVCBtdXN0IGhhdmUgMyBwYXJ0cycpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZGVjb2RlZCA9IFV0aWxzLmZyb21VcmxCNjRUb1V0ZjgocGFydHNbMV0pO1xuICAgICAgICBpZiAoZGVjb2RlZCA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBkZWNvZGUgdGhlIHRva2VuJyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmRlY29kZWRUb2tlbiA9IEpTT04ucGFyc2UoZGVjb2RlZCk7XG4gICAgICAgIHJldHVybiB0aGlzLmRlY29kZWRUb2tlbjtcbiAgICB9XG5cbiAgICBnZXRUb2tlbkV4cGlyYXRpb25EYXRlKCk6IERhdGUge1xuICAgICAgICBjb25zdCBkZWNvZGVkID0gdGhpcy5kZWNvZGVUb2tlbigpO1xuICAgICAgICBpZiAodHlwZW9mIGRlY29kZWQuZXhwID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBkID0gbmV3IERhdGUoMCk7IC8vIFRoZSAwIGhlcmUgaXMgdGhlIGtleSwgd2hpY2ggc2V0cyB0aGUgZGF0ZSB0byB0aGUgZXBvY2hcbiAgICAgICAgZC5zZXRVVENTZWNvbmRzKGRlY29kZWQuZXhwKTtcbiAgICAgICAgcmV0dXJuIGQ7XG4gICAgfVxuXG4gICAgdG9rZW5TZWNvbmRzUmVtYWluaW5nKG9mZnNldFNlY29uZHM6IG51bWJlciA9IDApOiBudW1iZXIge1xuICAgICAgICBjb25zdCBkID0gdGhpcy5nZXRUb2tlbkV4cGlyYXRpb25EYXRlKCk7XG4gICAgICAgIGlmIChkID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbXNSZW1haW5pbmcgPSBkLnZhbHVlT2YoKSAtIChuZXcgRGF0ZSgpLnZhbHVlT2YoKSArIChvZmZzZXRTZWNvbmRzICogMTAwMCkpO1xuICAgICAgICByZXR1cm4gTWF0aC5yb3VuZChtc1JlbWFpbmluZyAvIDEwMDApO1xuICAgIH1cblxuICAgIHRva2VuTmVlZHNSZWZyZXNoKG1pbnV0ZXM6IG51bWJlciA9IDUpOiBib29sZWFuIHtcbiAgICAgICAgY29uc3Qgc1JlbWFpbmluZyA9IHRoaXMudG9rZW5TZWNvbmRzUmVtYWluaW5nKCk7XG4gICAgICAgIHJldHVybiBzUmVtYWluaW5nIDwgKDYwICogbWludXRlcyk7XG4gICAgfVxuXG4gICAgZ2V0VXNlcklkKCk6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IGRlY29kZWQgPSB0aGlzLmRlY29kZVRva2VuKCk7XG4gICAgICAgIGlmICh0eXBlb2YgZGVjb2RlZC5zdWIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIHVzZXIgaWQgZm91bmQnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkZWNvZGVkLnN1YiBhcyBzdHJpbmc7XG4gICAgfVxuXG4gICAgZ2V0RW1haWwoKTogc3RyaW5nIHtcbiAgICAgICAgY29uc3QgZGVjb2RlZCA9IHRoaXMuZGVjb2RlVG9rZW4oKTtcbiAgICAgICAgaWYgKHR5cGVvZiBkZWNvZGVkLmVtYWlsID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBlbWFpbCBmb3VuZCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRlY29kZWQuZW1haWwgYXMgc3RyaW5nO1xuICAgIH1cblxuICAgIGdldEVtYWlsVmVyaWZpZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIGNvbnN0IGRlY29kZWQgPSB0aGlzLmRlY29kZVRva2VuKCk7XG4gICAgICAgIGlmICh0eXBlb2YgZGVjb2RlZC5lbWFpbF92ZXJpZmllZCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gZW1haWwgdmVyaWZpY2F0aW9uIGZvdW5kJyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZGVjb2RlZC5lbWFpbF92ZXJpZmllZCBhcyBib29sZWFuO1xuICAgIH1cblxuICAgIGdldE5hbWUoKTogc3RyaW5nIHtcbiAgICAgICAgY29uc3QgZGVjb2RlZCA9IHRoaXMuZGVjb2RlVG9rZW4oKTtcbiAgICAgICAgaWYgKHR5cGVvZiBkZWNvZGVkLm5hbWUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkZWNvZGVkLm5hbWUgYXMgc3RyaW5nO1xuICAgIH1cblxuICAgIGdldFByZW1pdW0oKTogYm9vbGVhbiB7XG4gICAgICAgIGNvbnN0IGRlY29kZWQgPSB0aGlzLmRlY29kZVRva2VuKCk7XG4gICAgICAgIGlmICh0eXBlb2YgZGVjb2RlZC5wcmVtaXVtID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRlY29kZWQucHJlbWl1bSBhcyBib29sZWFuO1xuICAgIH1cblxuICAgIGdldElzc3VlcigpOiBzdHJpbmcge1xuICAgICAgICBjb25zdCBkZWNvZGVkID0gdGhpcy5kZWNvZGVUb2tlbigpO1xuICAgICAgICBpZiAodHlwZW9mIGRlY29kZWQuaXNzID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBpc3N1ZXIgZm91bmQnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkZWNvZGVkLmlzcyBhcyBzdHJpbmc7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBza2lwVG9rZW5TdG9yYWdlKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgICAgICBjb25zdCB0aW1lb3V0ID0gYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5nZXQ8bnVtYmVyPihDb25zdGFudHNTZXJ2aWNlLnZhdWx0VGltZW91dEtleSk7XG4gICAgICAgIGNvbnN0IGFjdGlvbiA9IGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2UuZ2V0PHN0cmluZz4oQ29uc3RhbnRzU2VydmljZS52YXVsdFRpbWVvdXRBY3Rpb25LZXkpO1xuICAgICAgICByZXR1cm4gdGltZW91dCAhPSBudWxsICYmIGFjdGlvbiA9PT0gJ2xvZ091dCc7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQ29uc3RhbnRzU2VydmljZSB9IGZyb20gJy4vY29uc3RhbnRzLnNlcnZpY2UnO1xuXG5pbXBvcnQgeyBDcnlwdG9GdW5jdGlvblNlcnZpY2UgfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvY3J5cHRvRnVuY3Rpb24uc2VydmljZSc7XG5pbXBvcnQgeyBTdG9yYWdlU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9zdG9yYWdlLnNlcnZpY2UnO1xuaW1wb3J0IHsgVG90cFNlcnZpY2UgYXMgVG90cFNlcnZpY2VBYnN0cmFjdGlvbiB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy90b3RwLnNlcnZpY2UnO1xuXG5pbXBvcnQgeyBVdGlscyB9IGZyb20gJy4uL21pc2MvdXRpbHMnO1xuXG5jb25zdCBCMzJDaGFycyA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWjIzNDU2Nyc7XG5jb25zdCBTdGVhbUNoYXJzID0gJzIzNDU2Nzg5QkNERkdISktNTlBRUlRWV1hZJztcblxuZXhwb3J0IGNsYXNzIFRvdHBTZXJ2aWNlIGltcGxlbWVudHMgVG90cFNlcnZpY2VBYnN0cmFjdGlvbiB7XG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBzdG9yYWdlU2VydmljZTogU3RvcmFnZVNlcnZpY2UsIHByaXZhdGUgY3J5cHRvRnVuY3Rpb25TZXJ2aWNlOiBDcnlwdG9GdW5jdGlvblNlcnZpY2UpIHsgfVxuXG4gICAgYXN5bmMgZ2V0Q29kZShrZXk6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgICAgIGlmIChrZXkgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHBlcmlvZCA9IDMwO1xuICAgICAgICBsZXQgYWxnOiAnc2hhMScgfCAnc2hhMjU2JyB8ICdzaGE1MTInID0gJ3NoYTEnO1xuICAgICAgICBsZXQgZGlnaXRzID0gNjtcbiAgICAgICAgbGV0IGtleUIzMiA9IGtleTtcbiAgICAgICAgY29uc3QgaXNPdHBBdXRoID0ga2V5LnRvTG93ZXJDYXNlKCkuaW5kZXhPZignb3RwYXV0aDovLycpID09PSAwO1xuICAgICAgICBjb25zdCBpc1N0ZWFtQXV0aCA9ICFpc090cEF1dGggJiYga2V5LnRvTG93ZXJDYXNlKCkuaW5kZXhPZignc3RlYW06Ly8nKSA9PT0gMDtcbiAgICAgICAgaWYgKGlzT3RwQXV0aCkge1xuICAgICAgICAgICAgY29uc3QgcGFyYW1zID0gVXRpbHMuZ2V0UXVlcnlQYXJhbXMoa2V5KTtcbiAgICAgICAgICAgIGlmIChwYXJhbXMuaGFzKCdkaWdpdHMnKSAmJiBwYXJhbXMuZ2V0KCdkaWdpdHMnKSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGlnaXRQYXJhbXMgPSBwYXJzZUludChwYXJhbXMuZ2V0KCdkaWdpdHMnKS50cmltKCksIG51bGwpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGlnaXRQYXJhbXMgPiAxMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlnaXRzID0gMTA7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGlnaXRQYXJhbXMgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaWdpdHMgPSBkaWdpdFBhcmFtcztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggeyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocGFyYW1zLmhhcygncGVyaW9kJykgJiYgcGFyYW1zLmdldCgncGVyaW9kJykgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBlcmlvZFBhcmFtID0gcGFyc2VJbnQocGFyYW1zLmdldCgncGVyaW9kJykudHJpbSgpLCBudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBlcmlvZFBhcmFtID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGVyaW9kID0gcGVyaW9kUGFyYW07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGNhdGNoIHsgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHBhcmFtcy5oYXMoJ3NlY3JldCcpICYmIHBhcmFtcy5nZXQoJ3NlY3JldCcpICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBrZXlCMzIgPSBwYXJhbXMuZ2V0KCdzZWNyZXQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwYXJhbXMuaGFzKCdhbGdvcml0aG0nKSAmJiBwYXJhbXMuZ2V0KCdhbGdvcml0aG0nKSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYWxnUGFyYW0gPSBwYXJhbXMuZ2V0KCdhbGdvcml0aG0nKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIGlmIChhbGdQYXJhbSA9PT0gJ3NoYTEnIHx8IGFsZ1BhcmFtID09PSAnc2hhMjU2JyB8fCBhbGdQYXJhbSA9PT0gJ3NoYTUxMicpIHtcbiAgICAgICAgICAgICAgICAgICAgYWxnID0gYWxnUGFyYW07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGlzU3RlYW1BdXRoKSB7XG4gICAgICAgICAgICBrZXlCMzIgPSBrZXkuc3Vic3RyKCdzdGVhbTovLycubGVuZ3RoKTtcbiAgICAgICAgICAgIGRpZ2l0cyA9IDU7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBlcG9jaCA9IE1hdGgucm91bmQobmV3IERhdGUoKS5nZXRUaW1lKCkgLyAxMDAwLjApO1xuICAgICAgICBjb25zdCB0aW1lSGV4ID0gdGhpcy5sZWZ0UGFkKHRoaXMuZGVjVG9IZXgoTWF0aC5mbG9vcihlcG9jaCAvIHBlcmlvZCkpLCAxNiwgJzAnKTtcbiAgICAgICAgY29uc3QgdGltZUJ5dGVzID0gVXRpbHMuZnJvbUhleFRvQXJyYXkodGltZUhleCk7XG4gICAgICAgIGNvbnN0IGtleUJ5dGVzID0gdGhpcy5iMzJUb0J5dGVzKGtleUIzMik7XG5cbiAgICAgICAgaWYgKCFrZXlCeXRlcy5sZW5ndGggfHwgIXRpbWVCeXRlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgaGFzaCA9IGF3YWl0IHRoaXMuc2lnbihrZXlCeXRlcywgdGltZUJ5dGVzLCBhbGcpO1xuICAgICAgICBpZiAoaGFzaC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgLyogdHNsaW50OmRpc2FibGUgKi9cbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gKGhhc2hbaGFzaC5sZW5ndGggLSAxXSAmIDB4Zik7XG4gICAgICAgIGNvbnN0IGJpbmFyeSA9ICgoaGFzaFtvZmZzZXRdICYgMHg3ZikgPDwgMjQpIHwgKChoYXNoW29mZnNldCArIDFdICYgMHhmZikgPDwgMTYpIHxcbiAgICAgICAgICAgICgoaGFzaFtvZmZzZXQgKyAyXSAmIDB4ZmYpIDw8IDgpIHwgKGhhc2hbb2Zmc2V0ICsgM10gJiAweGZmKTtcbiAgICAgICAgLyogdHNsaW50OmVuYWJsZSAqL1xuXG4gICAgICAgIGxldCBvdHAgPSAnJztcbiAgICAgICAgaWYgKGlzU3RlYW1BdXRoKSB7XG4gICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgICAgIGxldCBmdWxsQ29kZSA9IGJpbmFyeSAmIDB4N2ZmZmZmZmY7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRpZ2l0czsgaSsrKSB7XG4gICAgICAgICAgICAgICAgb3RwICs9IFN0ZWFtQ2hhcnNbZnVsbENvZGUgJSBTdGVhbUNoYXJzLmxlbmd0aF07XG4gICAgICAgICAgICAgICAgZnVsbENvZGUgPSBNYXRoLnRydW5jKGZ1bGxDb2RlIC8gU3RlYW1DaGFycy5sZW5ndGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb3RwID0gKGJpbmFyeSAlIE1hdGgucG93KDEwLCBkaWdpdHMpKS50b1N0cmluZygpO1xuICAgICAgICAgICAgb3RwID0gdGhpcy5sZWZ0UGFkKG90cCwgZGlnaXRzLCAnMCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG90cDtcbiAgICB9XG5cbiAgICBnZXRUaW1lSW50ZXJ2YWwoa2V5OiBzdHJpbmcpOiBudW1iZXIge1xuICAgICAgICBsZXQgcGVyaW9kID0gMzA7XG4gICAgICAgIGlmIChrZXkgIT0gbnVsbCAmJiBrZXkudG9Mb3dlckNhc2UoKS5pbmRleE9mKCdvdHBhdXRoOi8vJykgPT09IDApIHtcbiAgICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IFV0aWxzLmdldFF1ZXJ5UGFyYW1zKGtleSk7XG4gICAgICAgICAgICBpZiAocGFyYW1zLmhhcygncGVyaW9kJykgJiYgcGFyYW1zLmdldCgncGVyaW9kJykgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHBlcmlvZCA9IHBhcnNlSW50KHBhcmFtcy5nZXQoJ3BlcmlvZCcpLnRyaW0oKSwgbnVsbCk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCB7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGVyaW9kO1xuICAgIH1cblxuICAgIGFzeW5jIGlzQXV0b0NvcHlFbmFibGVkKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgICAgICByZXR1cm4gIShhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldDxib29sZWFuPihDb25zdGFudHNTZXJ2aWNlLmRpc2FibGVBdXRvVG90cENvcHlLZXkpKTtcbiAgICB9XG5cbiAgICAvLyBIZWxwZXJzXG5cbiAgICBwcml2YXRlIGxlZnRQYWQoczogc3RyaW5nLCBsOiBudW1iZXIsIHA6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIGlmIChsICsgMSA+PSBzLmxlbmd0aCkge1xuICAgICAgICAgICAgcyA9IEFycmF5KGwgKyAxIC0gcy5sZW5ndGgpLmpvaW4ocCkgKyBzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzO1xuICAgIH1cblxuICAgIHByaXZhdGUgZGVjVG9IZXgoZDogbnVtYmVyKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIChkIDwgMTUuNSA/ICcwJyA6ICcnKSArIE1hdGgucm91bmQoZCkudG9TdHJpbmcoMTYpO1xuICAgIH1cblxuICAgIHByaXZhdGUgYjMyVG9IZXgoczogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgcyA9IHMudG9VcHBlckNhc2UoKTtcbiAgICAgICAgbGV0IGNsZWFuZWRJbnB1dCA9ICcnO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKEIzMkNoYXJzLmluZGV4T2Yoc1tpXSkgPCAwKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNsZWFuZWRJbnB1dCArPSBzW2ldO1xuICAgICAgICB9XG4gICAgICAgIHMgPSBjbGVhbmVkSW5wdXQ7XG5cbiAgICAgICAgbGV0IGJpdHMgPSAnJztcbiAgICAgICAgbGV0IGhleCA9ICcnO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGJ5dGVJbmRleCA9IEIzMkNoYXJzLmluZGV4T2Yocy5jaGFyQXQoaSkpO1xuICAgICAgICAgICAgaWYgKGJ5dGVJbmRleCA8IDApIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJpdHMgKz0gdGhpcy5sZWZ0UGFkKGJ5dGVJbmRleC50b1N0cmluZygyKSwgNSwgJzAnKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSArIDQgPD0gYml0cy5sZW5ndGg7IGkgKz0gNCkge1xuICAgICAgICAgICAgY29uc3QgY2h1bmsgPSBiaXRzLnN1YnN0cihpLCA0KTtcbiAgICAgICAgICAgIGhleCA9IGhleCArIHBhcnNlSW50KGNodW5rLCAyKS50b1N0cmluZygxNik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhleDtcbiAgICB9XG5cbiAgICBwcml2YXRlIGIzMlRvQnl0ZXMoczogc3RyaW5nKTogVWludDhBcnJheSB7XG4gICAgICAgIHJldHVybiBVdGlscy5mcm9tSGV4VG9BcnJheSh0aGlzLmIzMlRvSGV4KHMpKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIHNpZ24oa2V5Qnl0ZXM6IFVpbnQ4QXJyYXksIHRpbWVCeXRlczogVWludDhBcnJheSwgYWxnOiAnc2hhMScgfCAnc2hhMjU2JyB8ICdzaGE1MTInKSB7XG4gICAgICAgIGNvbnN0IHNpZ25hdHVyZSA9IGF3YWl0IHRoaXMuY3J5cHRvRnVuY3Rpb25TZXJ2aWNlLmhtYWModGltZUJ5dGVzLmJ1ZmZlciwga2V5Qnl0ZXMuYnVmZmVyLCBhbGcpO1xuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoc2lnbmF0dXJlKTtcbiAgICB9XG59XG4iLCJleHBvcnQgZW51bSBPcmdhbml6YXRpb25Vc2VyVHlwZSB7XG4gICAgT3duZXIgPSAwLFxuICAgIEFkbWluID0gMSxcbiAgICBVc2VyID0gMixcbiAgICBNYW5hZ2VyID0gMyxcbn1cbiIsImltcG9ydCB7IE9yZ2FuaXphdGlvbkRhdGEgfSBmcm9tICcuLi9kYXRhL29yZ2FuaXphdGlvbkRhdGEnO1xuXG5pbXBvcnQgeyBPcmdhbml6YXRpb25Vc2VyU3RhdHVzVHlwZSB9IGZyb20gJy4uLy4uL2VudW1zL29yZ2FuaXphdGlvblVzZXJTdGF0dXNUeXBlJztcbmltcG9ydCB7IE9yZ2FuaXphdGlvblVzZXJUeXBlIH0gZnJvbSAnLi4vLi4vZW51bXMvb3JnYW5pemF0aW9uVXNlclR5cGUnO1xuXG5leHBvcnQgY2xhc3MgT3JnYW5pemF0aW9uIHtcbiAgICBpZDogc3RyaW5nO1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBzdGF0dXM6IE9yZ2FuaXphdGlvblVzZXJTdGF0dXNUeXBlO1xuICAgIHR5cGU6IE9yZ2FuaXphdGlvblVzZXJUeXBlO1xuICAgIGVuYWJsZWQ6IGJvb2xlYW47XG4gICAgdXNlUG9saWNpZXM6IGJvb2xlYW47XG4gICAgdXNlR3JvdXBzOiBib29sZWFuO1xuICAgIHVzZURpcmVjdG9yeTogYm9vbGVhbjtcbiAgICB1c2VFdmVudHM6IGJvb2xlYW47XG4gICAgdXNlVG90cDogYm9vbGVhbjtcbiAgICB1c2UyZmE6IGJvb2xlYW47XG4gICAgdXNlQXBpOiBib29sZWFuO1xuICAgIHVzZUJ1c2luZXNzUG9ydGFsOiBib29sZWFuO1xuICAgIHVzZVNzbzogYm9vbGVhbjtcbiAgICBzZWxmSG9zdDogYm9vbGVhbjtcbiAgICB1c2Vyc0dldFByZW1pdW06IGJvb2xlYW47XG4gICAgc2VhdHM6IG51bWJlcjtcbiAgICBtYXhDb2xsZWN0aW9uczogbnVtYmVyO1xuICAgIG1heFN0b3JhZ2VHYj86IG51bWJlcjtcbiAgICBzc29Cb3VuZDogYm9vbGVhbjtcbiAgICBpZGVudGlmaWVyOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihvYmo/OiBPcmdhbml6YXRpb25EYXRhKSB7XG4gICAgICAgIGlmIChvYmogPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5pZCA9IG9iai5pZDtcbiAgICAgICAgdGhpcy5uYW1lID0gb2JqLm5hbWU7XG4gICAgICAgIHRoaXMuc3RhdHVzID0gb2JqLnN0YXR1cztcbiAgICAgICAgdGhpcy50eXBlID0gb2JqLnR5cGU7XG4gICAgICAgIHRoaXMuZW5hYmxlZCA9IG9iai5lbmFibGVkO1xuICAgICAgICB0aGlzLnVzZVBvbGljaWVzID0gb2JqLnVzZVBvbGljaWVzO1xuICAgICAgICB0aGlzLnVzZUdyb3VwcyA9IG9iai51c2VHcm91cHM7XG4gICAgICAgIHRoaXMudXNlRGlyZWN0b3J5ID0gb2JqLnVzZURpcmVjdG9yeTtcbiAgICAgICAgdGhpcy51c2VFdmVudHMgPSBvYmoudXNlRXZlbnRzO1xuICAgICAgICB0aGlzLnVzZVRvdHAgPSBvYmoudXNlVG90cDtcbiAgICAgICAgdGhpcy51c2UyZmEgPSBvYmoudXNlMmZhO1xuICAgICAgICB0aGlzLnVzZUFwaSA9IG9iai51c2VBcGk7XG4gICAgICAgIHRoaXMudXNlQnVzaW5lc3NQb3J0YWwgPSBvYmoudXNlQnVzaW5lc3NQb3J0YWw7XG4gICAgICAgIHRoaXMudXNlU3NvID0gb2JqLnVzZVNzbztcbiAgICAgICAgdGhpcy5zZWxmSG9zdCA9IG9iai5zZWxmSG9zdDtcbiAgICAgICAgdGhpcy51c2Vyc0dldFByZW1pdW0gPSBvYmoudXNlcnNHZXRQcmVtaXVtO1xuICAgICAgICB0aGlzLnNlYXRzID0gb2JqLnNlYXRzO1xuICAgICAgICB0aGlzLm1heENvbGxlY3Rpb25zID0gb2JqLm1heENvbGxlY3Rpb25zO1xuICAgICAgICB0aGlzLm1heFN0b3JhZ2VHYiA9IG9iai5tYXhTdG9yYWdlR2I7XG4gICAgICAgIHRoaXMuc3NvQm91bmQgPSBvYmouc3NvQm91bmQ7XG4gICAgICAgIHRoaXMuaWRlbnRpZmllciA9IG9iai5pZGVudGlmaWVyO1xuICAgIH1cblxuICAgIGdldCBjYW5BY2Nlc3MoKSB7XG4gICAgICAgIGlmICh0aGlzLnR5cGUgPT09IE9yZ2FuaXphdGlvblVzZXJUeXBlLk93bmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5lbmFibGVkICYmIHRoaXMuc3RhdHVzID09PSBPcmdhbml6YXRpb25Vc2VyU3RhdHVzVHlwZS5Db25maXJtZWQ7XG4gICAgfVxuXG4gICAgZ2V0IGlzTWFuYWdlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHlwZSA9PT0gT3JnYW5pemF0aW9uVXNlclR5cGUuTWFuYWdlciB8fCB0aGlzLnR5cGUgPT09IE9yZ2FuaXphdGlvblVzZXJUeXBlLk93bmVyIHx8XG4gICAgICAgICAgICB0aGlzLnR5cGUgPT09IE9yZ2FuaXphdGlvblVzZXJUeXBlLkFkbWluO1xuICAgIH1cblxuICAgIGdldCBpc0FkbWluKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50eXBlID09PSBPcmdhbml6YXRpb25Vc2VyVHlwZS5Pd25lciB8fCB0aGlzLnR5cGUgPT09IE9yZ2FuaXphdGlvblVzZXJUeXBlLkFkbWluO1xuICAgIH1cblxuICAgIGdldCBpc093bmVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50eXBlID09PSBPcmdhbml6YXRpb25Vc2VyVHlwZS5Pd25lcjtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBTdG9yYWdlU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9zdG9yYWdlLnNlcnZpY2UnO1xuaW1wb3J0IHsgVG9rZW5TZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL3Rva2VuLnNlcnZpY2UnO1xuaW1wb3J0IHsgVXNlclNlcnZpY2UgYXMgVXNlclNlcnZpY2VBYnN0cmFjdGlvbiB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy91c2VyLnNlcnZpY2UnO1xuXG5pbXBvcnQgeyBPcmdhbml6YXRpb25EYXRhIH0gZnJvbSAnLi4vbW9kZWxzL2RhdGEvb3JnYW5pemF0aW9uRGF0YSc7XG5pbXBvcnQgeyBPcmdhbml6YXRpb24gfSBmcm9tICcuLi9tb2RlbHMvZG9tYWluL29yZ2FuaXphdGlvbic7XG5cbmltcG9ydCB7IEtkZlR5cGUgfSBmcm9tICcuLi9lbnVtcy9rZGZUeXBlJztcblxuY29uc3QgS2V5cyA9IHtcbiAgICB1c2VySWQ6ICd1c2VySWQnLFxuICAgIHVzZXJFbWFpbDogJ3VzZXJFbWFpbCcsXG4gICAgc3RhbXA6ICdzZWN1cml0eVN0YW1wJyxcbiAgICBrZGY6ICdrZGYnLFxuICAgIGtkZkl0ZXJhdGlvbnM6ICdrZGZJdGVyYXRpb25zJyxcbiAgICBvcmdhbml6YXRpb25zUHJlZml4OiAnb3JnYW5pemF0aW9uc18nLFxufTtcblxuZXhwb3J0IGNsYXNzIFVzZXJTZXJ2aWNlIGltcGxlbWVudHMgVXNlclNlcnZpY2VBYnN0cmFjdGlvbiB7XG4gICAgcHJpdmF0ZSB1c2VySWQ6IHN0cmluZztcbiAgICBwcml2YXRlIGVtYWlsOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBzdGFtcDogc3RyaW5nO1xuICAgIHByaXZhdGUga2RmOiBLZGZUeXBlO1xuICAgIHByaXZhdGUga2RmSXRlcmF0aW9uczogbnVtYmVyO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSB0b2tlblNlcnZpY2U6IFRva2VuU2VydmljZSwgcHJpdmF0ZSBzdG9yYWdlU2VydmljZTogU3RvcmFnZVNlcnZpY2UpIHsgfVxuXG4gICAgc2V0SW5mb3JtYXRpb24odXNlcklkOiBzdHJpbmcsIGVtYWlsOiBzdHJpbmcsIGtkZjogS2RmVHlwZSwga2RmSXRlcmF0aW9uczogbnVtYmVyKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgdGhpcy5lbWFpbCA9IGVtYWlsO1xuICAgICAgICB0aGlzLnVzZXJJZCA9IHVzZXJJZDtcbiAgICAgICAgdGhpcy5rZGYgPSBrZGY7XG4gICAgICAgIHRoaXMua2RmSXRlcmF0aW9ucyA9IGtkZkl0ZXJhdGlvbnM7XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKFtcbiAgICAgICAgICAgIHRoaXMuc3RvcmFnZVNlcnZpY2Uuc2F2ZShLZXlzLnVzZXJFbWFpbCwgZW1haWwpLFxuICAgICAgICAgICAgdGhpcy5zdG9yYWdlU2VydmljZS5zYXZlKEtleXMudXNlcklkLCB1c2VySWQpLFxuICAgICAgICAgICAgdGhpcy5zdG9yYWdlU2VydmljZS5zYXZlKEtleXMua2RmLCBrZGYpLFxuICAgICAgICAgICAgdGhpcy5zdG9yYWdlU2VydmljZS5zYXZlKEtleXMua2RmSXRlcmF0aW9ucywga2RmSXRlcmF0aW9ucyksXG4gICAgICAgIF0pO1xuICAgIH1cblxuICAgIHNldFNlY3VyaXR5U3RhbXAoc3RhbXA6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIHRoaXMuc3RhbXAgPSBzdGFtcDtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RvcmFnZVNlcnZpY2Uuc2F2ZShLZXlzLnN0YW1wLCBzdGFtcCk7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0VXNlcklkKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgICAgIGlmICh0aGlzLnVzZXJJZCA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnVzZXJJZCA9IGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2UuZ2V0PHN0cmluZz4oS2V5cy51c2VySWQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnVzZXJJZDtcbiAgICB9XG5cbiAgICBhc3luYyBnZXRFbWFpbCgpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgICAgICBpZiAodGhpcy5lbWFpbCA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmVtYWlsID0gYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5nZXQ8c3RyaW5nPihLZXlzLnVzZXJFbWFpbCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuZW1haWw7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0U2VjdXJpdHlTdGFtcCgpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgICAgICBpZiAodGhpcy5zdGFtcCA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnN0YW1wID0gYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5nZXQ8c3RyaW5nPihLZXlzLnN0YW1wKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5zdGFtcDtcbiAgICB9XG5cbiAgICBhc3luYyBnZXRLZGYoKTogUHJvbWlzZTxLZGZUeXBlPiB7XG4gICAgICAgIGlmICh0aGlzLmtkZiA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmtkZiA9IGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2UuZ2V0PEtkZlR5cGU+KEtleXMua2RmKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5rZGY7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0S2RmSXRlcmF0aW9ucygpOiBQcm9taXNlPG51bWJlcj4ge1xuICAgICAgICBpZiAodGhpcy5rZGZJdGVyYXRpb25zID09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMua2RmSXRlcmF0aW9ucyA9IGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2UuZ2V0PG51bWJlcj4oS2V5cy5rZGZJdGVyYXRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5rZGZJdGVyYXRpb25zO1xuICAgIH1cblxuICAgIGFzeW5jIGNsZWFyKCk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIGNvbnN0IHVzZXJJZCA9IGF3YWl0IHRoaXMuZ2V0VXNlcklkKCk7XG5cbiAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgICAgICAgdGhpcy5zdG9yYWdlU2VydmljZS5yZW1vdmUoS2V5cy51c2VySWQpLFxuICAgICAgICAgICAgdGhpcy5zdG9yYWdlU2VydmljZS5yZW1vdmUoS2V5cy51c2VyRW1haWwpLFxuICAgICAgICAgICAgdGhpcy5zdG9yYWdlU2VydmljZS5yZW1vdmUoS2V5cy5zdGFtcCksXG4gICAgICAgICAgICB0aGlzLnN0b3JhZ2VTZXJ2aWNlLnJlbW92ZShLZXlzLmtkZiksXG4gICAgICAgICAgICB0aGlzLnN0b3JhZ2VTZXJ2aWNlLnJlbW92ZShLZXlzLmtkZkl0ZXJhdGlvbnMpLFxuICAgICAgICAgICAgdGhpcy5jbGVhck9yZ2FuaXphdGlvbnModXNlcklkKSxcbiAgICAgICAgXSk7XG5cbiAgICAgICAgdGhpcy51c2VySWQgPSB0aGlzLmVtYWlsID0gdGhpcy5zdGFtcCA9IG51bGw7XG4gICAgICAgIHRoaXMua2RmID0gbnVsbDtcbiAgICAgICAgdGhpcy5rZGZJdGVyYXRpb25zID0gbnVsbDtcbiAgICB9XG5cbiAgICBhc3luYyBpc0F1dGhlbnRpY2F0ZWQoKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgICAgIGNvbnN0IHRva2VuID0gYXdhaXQgdGhpcy50b2tlblNlcnZpY2UuZ2V0VG9rZW4oKTtcbiAgICAgICAgaWYgKHRva2VuID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHVzZXJJZCA9IGF3YWl0IHRoaXMuZ2V0VXNlcklkKCk7XG4gICAgICAgIHJldHVybiB1c2VySWQgIT0gbnVsbDtcbiAgICB9XG5cbiAgICBhc3luYyBjYW5BY2Nlc3NQcmVtaXVtKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgICAgICBjb25zdCBhdXRoZWQgPSBhd2FpdCB0aGlzLmlzQXV0aGVudGljYXRlZCgpO1xuICAgICAgICBpZiAoIWF1dGhlZCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdG9rZW5QcmVtaXVtID0gdGhpcy50b2tlblNlcnZpY2UuZ2V0UHJlbWl1bSgpO1xuICAgICAgICBpZiAodG9rZW5QcmVtaXVtKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG9yZ3MgPSBhd2FpdCB0aGlzLmdldEFsbE9yZ2FuaXphdGlvbnMoKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAob3Jnc1tpXS51c2Vyc0dldFByZW1pdW0gJiYgb3Jnc1tpXS5lbmFibGVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGFzeW5jIGdldE9yZ2FuaXphdGlvbihpZDogc3RyaW5nKTogUHJvbWlzZTxPcmdhbml6YXRpb24+IHtcbiAgICAgICAgY29uc3QgdXNlcklkID0gYXdhaXQgdGhpcy5nZXRVc2VySWQoKTtcbiAgICAgICAgY29uc3Qgb3JnYW5pemF0aW9ucyA9IGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2UuZ2V0PHsgW2lkOiBzdHJpbmddOiBPcmdhbml6YXRpb25EYXRhOyB9PihcbiAgICAgICAgICAgIEtleXMub3JnYW5pemF0aW9uc1ByZWZpeCArIHVzZXJJZCk7XG4gICAgICAgIGlmIChvcmdhbml6YXRpb25zID09IG51bGwgfHwgIW9yZ2FuaXphdGlvbnMuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXcgT3JnYW5pemF0aW9uKG9yZ2FuaXphdGlvbnNbaWRdKTtcbiAgICB9XG5cbiAgICBhc3luYyBnZXRBbGxPcmdhbml6YXRpb25zKCk6IFByb21pc2U8T3JnYW5pemF0aW9uW10+IHtcbiAgICAgICAgY29uc3QgdXNlcklkID0gYXdhaXQgdGhpcy5nZXRVc2VySWQoKTtcbiAgICAgICAgY29uc3Qgb3JnYW5pemF0aW9ucyA9IGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2UuZ2V0PHsgW2lkOiBzdHJpbmddOiBPcmdhbml6YXRpb25EYXRhOyB9PihcbiAgICAgICAgICAgIEtleXMub3JnYW5pemF0aW9uc1ByZWZpeCArIHVzZXJJZCk7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlOiBPcmdhbml6YXRpb25bXSA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IGlkIGluIG9yZ2FuaXphdGlvbnMpIHtcbiAgICAgICAgICAgIGlmIChvcmdhbml6YXRpb25zLmhhc093blByb3BlcnR5KGlkKSkge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlLnB1c2gobmV3IE9yZ2FuaXphdGlvbihvcmdhbml6YXRpb25zW2lkXSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9XG5cbiAgICBhc3luYyByZXBsYWNlT3JnYW5pemF0aW9ucyhvcmdhbml6YXRpb25zOiB7IFtpZDogc3RyaW5nXTogT3JnYW5pemF0aW9uRGF0YTsgfSk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIGNvbnN0IHVzZXJJZCA9IGF3YWl0IHRoaXMuZ2V0VXNlcklkKCk7XG4gICAgICAgIGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2Uuc2F2ZShLZXlzLm9yZ2FuaXphdGlvbnNQcmVmaXggKyB1c2VySWQsIG9yZ2FuaXphdGlvbnMpO1xuICAgIH1cblxuICAgIGFzeW5jIGNsZWFyT3JnYW5pemF0aW9ucyh1c2VySWQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2UucmVtb3ZlKEtleXMub3JnYW5pemF0aW9uc1ByZWZpeCArIHVzZXJJZCk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQ29uc3RhbnRzU2VydmljZSB9IGZyb20gJy4vY29uc3RhbnRzLnNlcnZpY2UnO1xuXG5pbXBvcnQgeyBDaXBoZXJTZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL2NpcGhlci5zZXJ2aWNlJztcbmltcG9ydCB7IENvbGxlY3Rpb25TZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL2NvbGxlY3Rpb24uc2VydmljZSc7XG5pbXBvcnQgeyBDcnlwdG9TZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL2NyeXB0by5zZXJ2aWNlJztcbmltcG9ydCB7IEZvbGRlclNlcnZpY2UgfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvZm9sZGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgTWVzc2FnaW5nU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9tZXNzYWdpbmcuc2VydmljZSc7XG5pbXBvcnQgeyBQbGF0Zm9ybVV0aWxzU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9wbGF0Zm9ybVV0aWxzLnNlcnZpY2UnO1xuaW1wb3J0IHsgU2VhcmNoU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9zZWFyY2guc2VydmljZSc7XG5pbXBvcnQgeyBTdG9yYWdlU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9zdG9yYWdlLnNlcnZpY2UnO1xuaW1wb3J0IHsgVG9rZW5TZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL3Rva2VuLnNlcnZpY2UnO1xuaW1wb3J0IHsgVXNlclNlcnZpY2UgfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvdXNlci5zZXJ2aWNlJztcbmltcG9ydCB7IFZhdWx0VGltZW91dFNlcnZpY2UgYXMgVmF1bHRUaW1lb3V0U2VydmljZUFic3RyYWN0aW9uIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL3ZhdWx0VGltZW91dC5zZXJ2aWNlJztcblxuaW1wb3J0IHsgQ2lwaGVyU3RyaW5nIH0gZnJvbSAnLi4vbW9kZWxzL2RvbWFpbi9jaXBoZXJTdHJpbmcnO1xuXG5leHBvcnQgY2xhc3MgVmF1bHRUaW1lb3V0U2VydmljZSBpbXBsZW1lbnRzIFZhdWx0VGltZW91dFNlcnZpY2VBYnN0cmFjdGlvbiB7XG4gICAgcGluUHJvdGVjdGVkS2V5OiBDaXBoZXJTdHJpbmcgPSBudWxsO1xuICAgIGJpb21ldHJpY0xvY2tlZDogYm9vbGVhbiA9IHRydWU7XG5cbiAgICBwcml2YXRlIGluaXRlZCA9IGZhbHNlO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBjaXBoZXJTZXJ2aWNlOiBDaXBoZXJTZXJ2aWNlLCBwcml2YXRlIGZvbGRlclNlcnZpY2U6IEZvbGRlclNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgY29sbGVjdGlvblNlcnZpY2U6IENvbGxlY3Rpb25TZXJ2aWNlLCBwcml2YXRlIGNyeXB0b1NlcnZpY2U6IENyeXB0b1NlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgcGxhdGZvcm1VdGlsc1NlcnZpY2U6IFBsYXRmb3JtVXRpbHNTZXJ2aWNlLCBwcml2YXRlIHN0b3JhZ2VTZXJ2aWNlOiBTdG9yYWdlU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBtZXNzYWdpbmdTZXJ2aWNlOiBNZXNzYWdpbmdTZXJ2aWNlLCBwcml2YXRlIHNlYXJjaFNlcnZpY2U6IFNlYXJjaFNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgdXNlclNlcnZpY2U6IFVzZXJTZXJ2aWNlLCBwcml2YXRlIHRva2VuU2VydmljZTogVG9rZW5TZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIGxvY2tlZENhbGxiYWNrOiAoKSA9PiBQcm9taXNlPHZvaWQ+ID0gbnVsbCwgcHJpdmF0ZSBsb2dnZWRPdXRDYWxsYmFjazogKCkgPT4gUHJvbWlzZTx2b2lkPiA9IG51bGwpIHtcbiAgICB9XG5cbiAgICBpbml0KGNoZWNrT25JbnRlcnZhbDogYm9vbGVhbikge1xuICAgICAgICBpZiAodGhpcy5pbml0ZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuaW5pdGVkID0gdHJ1ZTtcbiAgICAgICAgaWYgKGNoZWNrT25JbnRlcnZhbCkge1xuICAgICAgICAgICAgdGhpcy5jaGVja1ZhdWx0VGltZW91dCgpO1xuICAgICAgICAgICAgc2V0SW50ZXJ2YWwoKCkgPT4gdGhpcy5jaGVja1ZhdWx0VGltZW91dCgpLCAxMCAqIDEwMDApOyAvLyBjaGVjayBldmVyeSAxMCBzZWNvbmRzXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBLZXlzIGFyZW4ndCBzdG9yZWQgZm9yIGEgZGV2aWNlIHRoYXQgaXMgbG9ja2VkIG9yIGxvZ2dlZCBvdXQuXG4gICAgYXN5bmMgaXNMb2NrZWQoKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgICAgIGNvbnN0IGhhc0tleSA9IGF3YWl0IHRoaXMuY3J5cHRvU2VydmljZS5oYXNLZXkoKTtcbiAgICAgICAgaWYgKGhhc0tleSkge1xuICAgICAgICAgICAgaWYgKGF3YWl0IHRoaXMuaXNCaW9tZXRyaWNMb2NrU2V0KCkgJiYgdGhpcy5iaW9tZXRyaWNMb2NrZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gIWhhc0tleTtcbiAgICB9XG5cbiAgICBhc3luYyBjaGVja1ZhdWx0VGltZW91dCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgaWYgKGF3YWl0IHRoaXMucGxhdGZvcm1VdGlsc1NlcnZpY2UuaXNWaWV3T3BlbigpKSB7XG4gICAgICAgICAgICAvLyBEbyBub3QgbG9ja1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gXCJpcyBsb2dnZWQgb3V0IGNoZWNrXCIgLSBzaW1pbGFyIHRvIGlzTG9ja2VkLCBiZWxvd1xuICAgICAgICBjb25zdCBhdXRoZWQgPSBhd2FpdCB0aGlzLnVzZXJTZXJ2aWNlLmlzQXV0aGVudGljYXRlZCgpO1xuICAgICAgICBpZiAoIWF1dGhlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGF3YWl0IHRoaXMuaXNMb2NrZWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhpcyBoYXMgdGhlIHBvdGVudGlhbCB0byBiZSByZW1vdmVkLiBFdmFsdWF0ZSBhZnRlciBhbGwgcGxhdGZvcm1zIGNvbXBsZXRlIHdpdGggYXV0by1sb2dvdXRcbiAgICAgICAgbGV0IHZhdWx0VGltZW91dCA9IHRoaXMucGxhdGZvcm1VdGlsc1NlcnZpY2UubG9ja1RpbWVvdXQoKTtcbiAgICAgICAgaWYgKHZhdWx0VGltZW91dCA9PSBudWxsKSB7XG4gICAgICAgICAgICB2YXVsdFRpbWVvdXQgPSBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldDxudW1iZXI+KENvbnN0YW50c1NlcnZpY2UudmF1bHRUaW1lb3V0S2V5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2YXVsdFRpbWVvdXQgPT0gbnVsbCB8fCB2YXVsdFRpbWVvdXQgPCAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBsYXN0QWN0aXZlID0gYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5nZXQ8bnVtYmVyPihDb25zdGFudHNTZXJ2aWNlLmxhc3RBY3RpdmVLZXkpO1xuICAgICAgICBpZiAobGFzdEFjdGl2ZSA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB2YXVsdFRpbWVvdXRTZWNvbmRzID0gdmF1bHRUaW1lb3V0ICogNjA7XG4gICAgICAgIGNvbnN0IGRpZmZTZWNvbmRzID0gKChuZXcgRGF0ZSgpKS5nZXRUaW1lKCkgLSBsYXN0QWN0aXZlKSAvIDEwMDA7XG4gICAgICAgIGlmIChkaWZmU2Vjb25kcyA+PSB2YXVsdFRpbWVvdXRTZWNvbmRzKSB7XG4gICAgICAgICAgICAvLyBQaXZvdCBiYXNlZCBvbiB0aGUgc2F2ZWQgdmF1bHQgdGltZW91dCBhY3Rpb25cbiAgICAgICAgICAgIGNvbnN0IHRpbWVvdXRBY3Rpb24gPSBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldDxzdHJpbmc+KENvbnN0YW50c1NlcnZpY2UudmF1bHRUaW1lb3V0QWN0aW9uS2V5KTtcbiAgICAgICAgICAgIHRpbWVvdXRBY3Rpb24gPT09ICdsb2dPdXQnID8gYXdhaXQgdGhpcy5sb2dPdXQoKSA6IGF3YWl0IHRoaXMubG9jayh0cnVlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIGxvY2soYWxsb3dTb2Z0TG9jayA9IGZhbHNlKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IGF1dGhlZCA9IGF3YWl0IHRoaXMudXNlclNlcnZpY2UuaXNBdXRoZW50aWNhdGVkKCk7XG4gICAgICAgIGlmICghYXV0aGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmJpb21ldHJpY0xvY2tlZCA9IHRydWU7XG4gICAgICAgIGlmIChhbGxvd1NvZnRMb2NrKSB7XG4gICAgICAgICAgICBjb25zdCBiaW9tZXRyaWNMb2NrZWQgPSBhd2FpdCB0aGlzLmlzQmlvbWV0cmljTG9ja1NldCgpO1xuICAgICAgICAgICAgaWYgKGJpb21ldHJpY0xvY2tlZCAmJiB0aGlzLnBsYXRmb3JtVXRpbHNTZXJ2aWNlLnN1cHBvcnRzU2VjdXJlU3RvcmFnZSgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tZXNzYWdpbmdTZXJ2aWNlLnNlbmQoJ2xvY2tlZCcpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmxvY2tlZENhbGxiYWNrICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5sb2NrZWRDYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICB0aGlzLmNyeXB0b1NlcnZpY2UuY2xlYXJLZXkoKSxcbiAgICAgICAgICAgIHRoaXMuY3J5cHRvU2VydmljZS5jbGVhck9yZ0tleXModHJ1ZSksXG4gICAgICAgICAgICB0aGlzLmNyeXB0b1NlcnZpY2UuY2xlYXJLZXlQYWlyKHRydWUpLFxuICAgICAgICAgICAgdGhpcy5jcnlwdG9TZXJ2aWNlLmNsZWFyRW5jS2V5KHRydWUpLFxuICAgICAgICBdKTtcblxuICAgICAgICB0aGlzLmZvbGRlclNlcnZpY2UuY2xlYXJDYWNoZSgpO1xuICAgICAgICB0aGlzLmNpcGhlclNlcnZpY2UuY2xlYXJDYWNoZSgpO1xuICAgICAgICB0aGlzLmNvbGxlY3Rpb25TZXJ2aWNlLmNsZWFyQ2FjaGUoKTtcbiAgICAgICAgdGhpcy5zZWFyY2hTZXJ2aWNlLmNsZWFySW5kZXgoKTtcbiAgICAgICAgdGhpcy5tZXNzYWdpbmdTZXJ2aWNlLnNlbmQoJ2xvY2tlZCcpO1xuICAgICAgICBpZiAodGhpcy5sb2NrZWRDYWxsYmFjayAhPSBudWxsKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmxvY2tlZENhbGxiYWNrKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhc3luYyBsb2dPdXQoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGlmICh0aGlzLmxvZ2dlZE91dENhbGxiYWNrICE9IG51bGwpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMubG9nZ2VkT3V0Q2FsbGJhY2soKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIHNldFZhdWx0VGltZW91dE9wdGlvbnModGltZW91dDogbnVtYmVyLCBhY3Rpb246IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLnNhdmUoQ29uc3RhbnRzU2VydmljZS52YXVsdFRpbWVvdXRLZXksIHRpbWVvdXQpO1xuICAgICAgICBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLnNhdmUoQ29uc3RhbnRzU2VydmljZS52YXVsdFRpbWVvdXRBY3Rpb25LZXksIGFjdGlvbik7XG4gICAgICAgIGF3YWl0IHRoaXMuY3J5cHRvU2VydmljZS50b2dnbGVLZXkoKTtcbiAgICAgICAgYXdhaXQgdGhpcy50b2tlblNlcnZpY2UudG9nZ2xlVG9rZW5zKCk7XG4gICAgfVxuXG4gICAgYXN5bmMgaXNQaW5Mb2NrU2V0KCk6IFByb21pc2U8W2Jvb2xlYW4sIGJvb2xlYW5dPiB7XG4gICAgICAgIGNvbnN0IHByb3RlY3RlZFBpbiA9IGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2UuZ2V0PHN0cmluZz4oQ29uc3RhbnRzU2VydmljZS5wcm90ZWN0ZWRQaW4pO1xuICAgICAgICBjb25zdCBwaW5Qcm90ZWN0ZWRLZXkgPSBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldDxzdHJpbmc+KENvbnN0YW50c1NlcnZpY2UucGluUHJvdGVjdGVkS2V5KTtcbiAgICAgICAgcmV0dXJuIFtwcm90ZWN0ZWRQaW4gIT0gbnVsbCwgcGluUHJvdGVjdGVkS2V5ICE9IG51bGxdO1xuICAgIH1cblxuICAgIGFzeW5jIGlzQmlvbWV0cmljTG9ja1NldCgpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2UuZ2V0PGJvb2xlYW4+KENvbnN0YW50c1NlcnZpY2UuYmlvbWV0cmljVW5sb2NrS2V5KTtcbiAgICB9XG5cbiAgICBjbGVhcigpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICB0aGlzLnBpblByb3RlY3RlZEtleSA9IG51bGw7XG4gICAgICAgIHJldHVybiB0aGlzLnN0b3JhZ2VTZXJ2aWNlLnJlbW92ZShDb25zdGFudHNTZXJ2aWNlLnByb3RlY3RlZFBpbik7XG4gICAgfVxufVxuIiwiZXhwb3J0IHsgQXBpU2VydmljZSB9IGZyb20gJy4vYXBpLnNlcnZpY2UnO1xuZXhwb3J0IHsgQXBwSWRTZXJ2aWNlIH0gZnJvbSAnLi9hcHBJZC5zZXJ2aWNlJztcbmV4cG9ydCB7IEF1ZGl0U2VydmljZSB9IGZyb20gJy4vYXVkaXQuc2VydmljZSc7XG5leHBvcnQgeyBBdXRoU2VydmljZSB9IGZyb20gJy4vYXV0aC5zZXJ2aWNlJztcbmV4cG9ydCB7IENpcGhlclNlcnZpY2UgfSBmcm9tICcuL2NpcGhlci5zZXJ2aWNlJztcbmV4cG9ydCB7IENvbGxlY3Rpb25TZXJ2aWNlIH0gZnJvbSAnLi9jb2xsZWN0aW9uLnNlcnZpY2UnO1xuZXhwb3J0IHsgQ29uc3RhbnRzU2VydmljZSB9IGZyb20gJy4vY29uc3RhbnRzLnNlcnZpY2UnO1xuZXhwb3J0IHsgQ29udGFpbmVyU2VydmljZSB9IGZyb20gJy4vY29udGFpbmVyLnNlcnZpY2UnO1xuZXhwb3J0IHsgQ3J5cHRvU2VydmljZSB9IGZyb20gJy4vY3J5cHRvLnNlcnZpY2UnO1xuZXhwb3J0IHsgRW52aXJvbm1lbnRTZXJ2aWNlIH0gZnJvbSAnLi9lbnZpcm9ubWVudC5zZXJ2aWNlJztcbmV4cG9ydCB7IEZvbGRlclNlcnZpY2UgfSBmcm9tICcuL2ZvbGRlci5zZXJ2aWNlJztcbmV4cG9ydCB7IEkxOG5TZXJ2aWNlIH0gZnJvbSAnLi9pMThuLnNlcnZpY2UnO1xuZXhwb3J0IHsgUGFzc3dvcmRHZW5lcmF0aW9uU2VydmljZSB9IGZyb20gJy4vcGFzc3dvcmRHZW5lcmF0aW9uLnNlcnZpY2UnO1xuZXhwb3J0IHsgU2V0dGluZ3NTZXJ2aWNlIH0gZnJvbSAnLi9zZXR0aW5ncy5zZXJ2aWNlJztcbmV4cG9ydCB7IFN0YXRlU2VydmljZSB9IGZyb20gJy4vc3RhdGUuc2VydmljZSc7XG5leHBvcnQgeyBTeW5jU2VydmljZSB9IGZyb20gJy4vc3luYy5zZXJ2aWNlJztcbmV4cG9ydCB7IFRva2VuU2VydmljZSB9IGZyb20gJy4vdG9rZW4uc2VydmljZSc7XG5leHBvcnQgeyBUb3RwU2VydmljZSB9IGZyb20gJy4vdG90cC5zZXJ2aWNlJztcbmV4cG9ydCB7IFVzZXJTZXJ2aWNlIH0gZnJvbSAnLi91c2VyLnNlcnZpY2UnO1xuZXhwb3J0IHsgVmF1bHRUaW1lb3V0U2VydmljZSB9IGZyb20gJy4vdmF1bHRUaW1lb3V0LnNlcnZpY2UnO1xuIiwiaW1wb3J0IHsgRXZlbnRUeXBlIH0gZnJvbSAnLi4vLi4vZW51bXMvZXZlbnRUeXBlJztcblxuZXhwb3J0IGNsYXNzIEV2ZW50RGF0YSB7XG4gICAgdHlwZTogRXZlbnRUeXBlO1xuICAgIGNpcGhlcklkOiBzdHJpbmc7XG4gICAgZGF0ZTogc3RyaW5nO1xufVxuIiwiaW1wb3J0IHsgRXZlbnRUeXBlIH0gZnJvbSAnLi4vLi4vZW51bXMvZXZlbnRUeXBlJztcblxuZXhwb3J0IGNsYXNzIEV2ZW50UmVxdWVzdCB7XG4gICAgdHlwZTogRXZlbnRUeXBlO1xuICAgIGNpcGhlcklkOiBzdHJpbmc7XG4gICAgZGF0ZTogc3RyaW5nO1xufVxuIiwiaW1wb3J0IHsgRXZlbnRUeXBlIH0gZnJvbSAnLi4vZW51bXMvZXZlbnRUeXBlJztcblxuaW1wb3J0IHsgRXZlbnREYXRhIH0gZnJvbSAnLi4vbW9kZWxzL2RhdGEvZXZlbnREYXRhJztcblxuaW1wb3J0IHsgRXZlbnRSZXF1ZXN0IH0gZnJvbSAnLi4vbW9kZWxzL3JlcXVlc3QvZXZlbnRSZXF1ZXN0JztcblxuaW1wb3J0IHsgQXBpU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9hcGkuc2VydmljZSc7XG5pbXBvcnQgeyBDaXBoZXJTZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL2NpcGhlci5zZXJ2aWNlJztcbmltcG9ydCB7IEV2ZW50U2VydmljZSBhcyBFdmVudFNlcnZpY2VBYnN0cmFjdGlvbiB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9ldmVudC5zZXJ2aWNlJztcbmltcG9ydCB7IFN0b3JhZ2VTZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL3N0b3JhZ2Uuc2VydmljZSc7XG5pbXBvcnQgeyBVc2VyU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy91c2VyLnNlcnZpY2UnO1xuXG5pbXBvcnQgeyBDb25zdGFudHNTZXJ2aWNlIH0gZnJvbSAnLi9jb25zdGFudHMuc2VydmljZSc7XG5cbmV4cG9ydCBjbGFzcyBFdmVudFNlcnZpY2UgaW1wbGVtZW50cyBFdmVudFNlcnZpY2VBYnN0cmFjdGlvbiB7XG4gICAgcHJpdmF0ZSBpbml0ZWQgPSBmYWxzZTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgc3RvcmFnZVNlcnZpY2U6IFN0b3JhZ2VTZXJ2aWNlLCBwcml2YXRlIGFwaVNlcnZpY2U6IEFwaVNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgdXNlclNlcnZpY2U6IFVzZXJTZXJ2aWNlLCBwcml2YXRlIGNpcGhlclNlcnZpY2U6IENpcGhlclNlcnZpY2UpIHsgfVxuXG4gICAgaW5pdChjaGVja09uSW50ZXJ2YWw6IGJvb2xlYW4pIHtcbiAgICAgICAgaWYgKHRoaXMuaW5pdGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmluaXRlZCA9IHRydWU7XG4gICAgICAgIGlmIChjaGVja09uSW50ZXJ2YWwpIHtcbiAgICAgICAgICAgIHRoaXMudXBsb2FkRXZlbnRzKCk7XG4gICAgICAgICAgICBzZXRJbnRlcnZhbCgoKSA9PiB0aGlzLnVwbG9hZEV2ZW50cygpLCA2MCAqIDEwMDApOyAvLyBjaGVjayBldmVyeSA2MCBzZWNvbmRzXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhc3luYyBjb2xsZWN0KGV2ZW50VHlwZTogRXZlbnRUeXBlLCBjaXBoZXJJZDogc3RyaW5nID0gbnVsbCwgdXBsb2FkSW1tZWRpYXRlbHkgPSBmYWxzZSk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIGNvbnN0IGF1dGhlZCA9IGF3YWl0IHRoaXMudXNlclNlcnZpY2UuaXNBdXRoZW50aWNhdGVkKCk7XG4gICAgICAgIGlmICghYXV0aGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgb3JnYW5pemF0aW9ucyA9IGF3YWl0IHRoaXMudXNlclNlcnZpY2UuZ2V0QWxsT3JnYW5pemF0aW9ucygpO1xuICAgICAgICBpZiAob3JnYW5pemF0aW9ucyA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgb3JnSWRzID0gbmV3IFNldDxzdHJpbmc+KG9yZ2FuaXphdGlvbnMuZmlsdGVyKChvKSA9PiBvLnVzZUV2ZW50cykubWFwKChvKSA9PiBvLmlkKSk7XG4gICAgICAgIGlmIChvcmdJZHMuc2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjaXBoZXJJZCAhPSBudWxsKSB7XG4gICAgICAgICAgICBjb25zdCBjaXBoZXIgPSBhd2FpdCB0aGlzLmNpcGhlclNlcnZpY2UuZ2V0KGNpcGhlcklkKTtcbiAgICAgICAgICAgIGlmIChjaXBoZXIgPT0gbnVsbCB8fCBjaXBoZXIub3JnYW5pemF0aW9uSWQgPT0gbnVsbCB8fCAhb3JnSWRzLmhhcyhjaXBoZXIub3JnYW5pemF0aW9uSWQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxldCBldmVudENvbGxlY3Rpb24gPSBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldDxFdmVudERhdGFbXT4oQ29uc3RhbnRzU2VydmljZS5ldmVudENvbGxlY3Rpb25LZXkpO1xuICAgICAgICBpZiAoZXZlbnRDb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgICAgICAgIGV2ZW50Q29sbGVjdGlvbiA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGV2ZW50ID0gbmV3IEV2ZW50RGF0YSgpO1xuICAgICAgICBldmVudC50eXBlID0gZXZlbnRUeXBlO1xuICAgICAgICBldmVudC5jaXBoZXJJZCA9IGNpcGhlcklkO1xuICAgICAgICBldmVudC5kYXRlID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpO1xuICAgICAgICBldmVudENvbGxlY3Rpb24ucHVzaChldmVudCk7XG4gICAgICAgIGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2Uuc2F2ZShDb25zdGFudHNTZXJ2aWNlLmV2ZW50Q29sbGVjdGlvbktleSwgZXZlbnRDb2xsZWN0aW9uKTtcbiAgICAgICAgaWYgKHVwbG9hZEltbWVkaWF0ZWx5KSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnVwbG9hZEV2ZW50cygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgdXBsb2FkRXZlbnRzKCk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIGNvbnN0IGF1dGhlZCA9IGF3YWl0IHRoaXMudXNlclNlcnZpY2UuaXNBdXRoZW50aWNhdGVkKCk7XG4gICAgICAgIGlmICghYXV0aGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZXZlbnRDb2xsZWN0aW9uID0gYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5nZXQ8RXZlbnREYXRhW10+KENvbnN0YW50c1NlcnZpY2UuZXZlbnRDb2xsZWN0aW9uS2V5KTtcbiAgICAgICAgaWYgKGV2ZW50Q29sbGVjdGlvbiA9PSBudWxsIHx8IGV2ZW50Q29sbGVjdGlvbi5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXF1ZXN0ID0gZXZlbnRDb2xsZWN0aW9uLm1hcCgoZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVxID0gbmV3IEV2ZW50UmVxdWVzdCgpO1xuICAgICAgICAgICAgcmVxLnR5cGUgPSBlLnR5cGU7XG4gICAgICAgICAgICByZXEuY2lwaGVySWQgPSBlLmNpcGhlcklkO1xuICAgICAgICAgICAgcmVxLmRhdGUgPSBlLmRhdGU7XG4gICAgICAgICAgICByZXR1cm4gcmVxO1xuICAgICAgICB9KTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuYXBpU2VydmljZS5wb3N0RXZlbnRzQ29sbGVjdChyZXF1ZXN0KTtcbiAgICAgICAgICAgIHRoaXMuY2xlYXJFdmVudHMoKTtcbiAgICAgICAgfSBjYXRjaCB7IH1cbiAgICB9XG5cbiAgICBhc3luYyBjbGVhckV2ZW50cygpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLnJlbW92ZShDb25zdGFudHNTZXJ2aWNlLmV2ZW50Q29sbGVjdGlvbktleSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQ2FyZFZpZXcgfSBmcm9tICcuLi92aWV3L2NhcmRWaWV3JztcblxuZXhwb3J0IGNsYXNzIENhcmQge1xuICAgIHN0YXRpYyB0ZW1wbGF0ZSgpOiBDYXJkIHtcbiAgICAgICAgY29uc3QgcmVxID0gbmV3IENhcmQoKTtcbiAgICAgICAgcmVxLmNhcmRob2xkZXJOYW1lID0gJ0pvaG4gRG9lJztcbiAgICAgICAgcmVxLmJyYW5kID0gJ3Zpc2EnO1xuICAgICAgICByZXEubnVtYmVyID0gJzQyNDI0MjQyNDI0MjQyNDInO1xuICAgICAgICByZXEuZXhwTW9udGggPSAnMDQnO1xuICAgICAgICByZXEuZXhwWWVhciA9ICcyMDIzJztcbiAgICAgICAgcmVxLmNvZGUgPSAnMTIzJztcbiAgICAgICAgcmV0dXJuIHJlcTtcbiAgICB9XG5cbiAgICBzdGF0aWMgdG9WaWV3KHJlcTogQ2FyZCwgdmlldyA9IG5ldyBDYXJkVmlldygpKSB7XG4gICAgICAgIHZpZXcuY2FyZGhvbGRlck5hbWUgPSByZXEuY2FyZGhvbGRlck5hbWU7XG4gICAgICAgIHZpZXcuYnJhbmQgPSByZXEuYnJhbmQ7XG4gICAgICAgIHZpZXcubnVtYmVyID0gcmVxLm51bWJlcjtcbiAgICAgICAgdmlldy5leHBNb250aCA9IHJlcS5leHBNb250aDtcbiAgICAgICAgdmlldy5leHBZZWFyID0gcmVxLmV4cFllYXI7XG4gICAgICAgIHZpZXcuY29kZSA9IHJlcS5jb2RlO1xuICAgICAgICByZXR1cm4gdmlldztcbiAgICB9XG5cbiAgICBjYXJkaG9sZGVyTmFtZTogc3RyaW5nO1xuICAgIGJyYW5kOiBzdHJpbmc7XG4gICAgbnVtYmVyOiBzdHJpbmc7XG4gICAgZXhwTW9udGg6IHN0cmluZztcbiAgICBleHBZZWFyOiBzdHJpbmc7XG4gICAgY29kZTogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3Iobz86IENhcmRWaWV3KSB7XG4gICAgICAgIGlmIChvID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY2FyZGhvbGRlck5hbWUgPSBvLmNhcmRob2xkZXJOYW1lO1xuICAgICAgICB0aGlzLmJyYW5kID0gby5icmFuZDtcbiAgICAgICAgdGhpcy5udW1iZXIgPSBvLm51bWJlcjtcbiAgICAgICAgdGhpcy5leHBNb250aCA9IG8uZXhwTW9udGg7XG4gICAgICAgIHRoaXMuZXhwWWVhciA9IG8uZXhwWWVhcjtcbiAgICAgICAgdGhpcy5jb2RlID0gby5jb2RlO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IEZpZWxkVHlwZSB9IGZyb20gJy4uLy4uL2VudW1zL2ZpZWxkVHlwZSc7XG5cbmltcG9ydCB7IEZpZWxkVmlldyB9IGZyb20gJy4uL3ZpZXcvZmllbGRWaWV3JztcblxuZXhwb3J0IGNsYXNzIEZpZWxkIHtcbiAgICBzdGF0aWMgdGVtcGxhdGUoKTogRmllbGQge1xuICAgICAgICBjb25zdCByZXEgPSBuZXcgRmllbGQoKTtcbiAgICAgICAgcmVxLm5hbWUgPSAnRmllbGQgbmFtZSc7XG4gICAgICAgIHJlcS52YWx1ZSA9ICdTb21lIHZhbHVlJztcbiAgICAgICAgcmVxLnR5cGUgPSBGaWVsZFR5cGUuVGV4dDtcbiAgICAgICAgcmV0dXJuIHJlcTtcbiAgICB9XG5cbiAgICBzdGF0aWMgdG9WaWV3KHJlcTogRmllbGQsIHZpZXcgPSBuZXcgRmllbGRWaWV3KCkpIHtcbiAgICAgICAgdmlldy50eXBlID0gcmVxLnR5cGU7XG4gICAgICAgIHZpZXcudmFsdWUgPSByZXEudmFsdWU7XG4gICAgICAgIHZpZXcubmFtZSA9IHJlcS5uYW1lO1xuICAgICAgICByZXR1cm4gdmlldztcbiAgICB9XG5cbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgdmFsdWU6IHN0cmluZztcbiAgICB0eXBlOiBGaWVsZFR5cGU7XG5cbiAgICBjb25zdHJ1Y3RvcihvPzogRmllbGRWaWV3KSB7XG4gICAgICAgIGlmIChvID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubmFtZSA9IG8ubmFtZTtcbiAgICAgICAgdGhpcy52YWx1ZSA9IG8udmFsdWU7XG4gICAgICAgIHRoaXMudHlwZSA9IG8udHlwZTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBJZGVudGl0eVZpZXcgfSBmcm9tICcuLi92aWV3L2lkZW50aXR5Vmlldyc7XG5cbmV4cG9ydCBjbGFzcyBJZGVudGl0eSB7XG4gICAgc3RhdGljIHRlbXBsYXRlKCk6IElkZW50aXR5IHtcbiAgICAgICAgY29uc3QgcmVxID0gbmV3IElkZW50aXR5KCk7XG4gICAgICAgIHJlcS50aXRsZSA9ICdNcic7XG4gICAgICAgIHJlcS5maXJzdE5hbWUgPSAnSm9obic7XG4gICAgICAgIHJlcS5taWRkbGVOYW1lID0gJ1dpbGxpYW0nO1xuICAgICAgICByZXEubGFzdE5hbWUgPSAnRG9lJztcbiAgICAgICAgcmVxLmFkZHJlc3MxID0gJzEyMyBBbnkgU3QnO1xuICAgICAgICByZXEuYWRkcmVzczIgPSAnQXB0ICMxMjMnO1xuICAgICAgICByZXEuYWRkcmVzczMgPSBudWxsO1xuICAgICAgICByZXEuY2l0eSA9ICdOZXcgWW9yayc7XG4gICAgICAgIHJlcS5zdGF0ZSA9ICdOWSc7XG4gICAgICAgIHJlcS5wb3N0YWxDb2RlID0gJzEwMDAxJztcbiAgICAgICAgcmVxLmNvdW50cnkgPSAnVVMnO1xuICAgICAgICByZXEuY29tcGFueSA9ICdBY21lIEluYy4nO1xuICAgICAgICByZXEuZW1haWwgPSAnam9obkBjb21wYW55LmNvbSc7XG4gICAgICAgIHJlcS5waG9uZSA9ICc1NTU1NTUxMjM0JztcbiAgICAgICAgcmVxLnNzbiA9ICcwMDAtMTIzLTQ1NjcnO1xuICAgICAgICByZXEudXNlcm5hbWUgPSAnamRvZSc7XG4gICAgICAgIHJlcS5wYXNzcG9ydE51bWJlciA9ICdVUy0xMjM0NTY3ODknO1xuICAgICAgICByZXEubGljZW5zZU51bWJlciA9ICdEMTIzLTEyLTEyMy0xMjMzMyc7XG4gICAgICAgIHJldHVybiByZXE7XG4gICAgfVxuXG4gICAgc3RhdGljIHRvVmlldyhyZXE6IElkZW50aXR5LCB2aWV3ID0gbmV3IElkZW50aXR5VmlldygpKSB7XG4gICAgICAgIHZpZXcudGl0bGUgPSByZXEudGl0bGU7XG4gICAgICAgIHZpZXcuZmlyc3ROYW1lID0gcmVxLmZpcnN0TmFtZTtcbiAgICAgICAgdmlldy5taWRkbGVOYW1lID0gcmVxLm1pZGRsZU5hbWU7XG4gICAgICAgIHZpZXcubGFzdE5hbWUgPSByZXEubGFzdE5hbWU7XG4gICAgICAgIHZpZXcuYWRkcmVzczEgPSByZXEuYWRkcmVzczE7XG4gICAgICAgIHZpZXcuYWRkcmVzczIgPSByZXEuYWRkcmVzczI7XG4gICAgICAgIHZpZXcuYWRkcmVzczMgPSByZXEuYWRkcmVzczM7XG4gICAgICAgIHZpZXcuY2l0eSA9IHJlcS5jaXR5O1xuICAgICAgICB2aWV3LnN0YXRlID0gcmVxLnN0YXRlO1xuICAgICAgICB2aWV3LnBvc3RhbENvZGUgPSByZXEucG9zdGFsQ29kZTtcbiAgICAgICAgdmlldy5jb3VudHJ5ID0gcmVxLmNvdW50cnk7XG4gICAgICAgIHZpZXcuY29tcGFueSA9IHJlcS5jb21wYW55O1xuICAgICAgICB2aWV3LmVtYWlsID0gcmVxLmVtYWlsO1xuICAgICAgICB2aWV3LnBob25lID0gcmVxLnBob25lO1xuICAgICAgICB2aWV3LnNzbiA9IHJlcS5zc247XG4gICAgICAgIHZpZXcudXNlcm5hbWUgPSByZXEudXNlcm5hbWU7XG4gICAgICAgIHZpZXcucGFzc3BvcnROdW1iZXIgPSByZXEucGFzc3BvcnROdW1iZXI7XG4gICAgICAgIHZpZXcubGljZW5zZU51bWJlciA9IHJlcS5saWNlbnNlTnVtYmVyO1xuICAgICAgICByZXR1cm4gdmlldztcbiAgICB9XG5cbiAgICB0aXRsZTogc3RyaW5nO1xuICAgIGZpcnN0TmFtZTogc3RyaW5nO1xuICAgIG1pZGRsZU5hbWU6IHN0cmluZztcbiAgICBsYXN0TmFtZTogc3RyaW5nO1xuICAgIGFkZHJlc3MxOiBzdHJpbmc7XG4gICAgYWRkcmVzczI6IHN0cmluZztcbiAgICBhZGRyZXNzMzogc3RyaW5nO1xuICAgIGNpdHk6IHN0cmluZztcbiAgICBzdGF0ZTogc3RyaW5nO1xuICAgIHBvc3RhbENvZGU6IHN0cmluZztcbiAgICBjb3VudHJ5OiBzdHJpbmc7XG4gICAgY29tcGFueTogc3RyaW5nO1xuICAgIGVtYWlsOiBzdHJpbmc7XG4gICAgcGhvbmU6IHN0cmluZztcbiAgICBzc246IHN0cmluZztcbiAgICB1c2VybmFtZTogc3RyaW5nO1xuICAgIHBhc3Nwb3J0TnVtYmVyOiBzdHJpbmc7XG4gICAgbGljZW5zZU51bWJlcjogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3Iobz86IElkZW50aXR5Vmlldykge1xuICAgICAgICBpZiAobyA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnRpdGxlID0gby50aXRsZTtcbiAgICAgICAgdGhpcy5maXJzdE5hbWUgPSBvLmZpcnN0TmFtZTtcbiAgICAgICAgdGhpcy5taWRkbGVOYW1lID0gby5taWRkbGVOYW1lO1xuICAgICAgICB0aGlzLmxhc3ROYW1lID0gby5sYXN0TmFtZTtcbiAgICAgICAgdGhpcy5hZGRyZXNzMSA9IG8uYWRkcmVzczE7XG4gICAgICAgIHRoaXMuYWRkcmVzczIgPSBvLmFkZHJlc3MyO1xuICAgICAgICB0aGlzLmFkZHJlc3MzID0gby5hZGRyZXNzMztcbiAgICAgICAgdGhpcy5jaXR5ID0gby5jaXR5O1xuICAgICAgICB0aGlzLnN0YXRlID0gby5zdGF0ZTtcbiAgICAgICAgdGhpcy5wb3N0YWxDb2RlID0gby5wb3N0YWxDb2RlO1xuICAgICAgICB0aGlzLmNvdW50cnkgPSBvLmNvdW50cnk7XG4gICAgICAgIHRoaXMuY29tcGFueSA9IG8uY29tcGFueTtcbiAgICAgICAgdGhpcy5lbWFpbCA9IG8uZW1haWw7XG4gICAgICAgIHRoaXMucGhvbmUgPSBvLnBob25lO1xuICAgICAgICB0aGlzLnNzbiA9IG8uc3NuO1xuICAgICAgICB0aGlzLnVzZXJuYW1lID0gby51c2VybmFtZTtcbiAgICAgICAgdGhpcy5wYXNzcG9ydE51bWJlciA9IG8ucGFzc3BvcnROdW1iZXI7XG4gICAgICAgIHRoaXMubGljZW5zZU51bWJlciA9IG8ubGljZW5zZU51bWJlcjtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBVcmlNYXRjaFR5cGUgfSBmcm9tICcuLi8uLi9lbnVtcy91cmlNYXRjaFR5cGUnO1xuXG5pbXBvcnQgeyBMb2dpblVyaVZpZXcgfSBmcm9tICcuLi92aWV3L2xvZ2luVXJpVmlldyc7XG5cbmV4cG9ydCBjbGFzcyBMb2dpblVyaSB7XG4gICAgc3RhdGljIHRlbXBsYXRlKCk6IExvZ2luVXJpIHtcbiAgICAgICAgY29uc3QgcmVxID0gbmV3IExvZ2luVXJpKCk7XG4gICAgICAgIHJlcS51cmkgPSAnaHR0cHM6Ly9nb29nbGUuY29tJztcbiAgICAgICAgcmVxLm1hdGNoID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIHJlcTtcbiAgICB9XG5cbiAgICBzdGF0aWMgdG9WaWV3KHJlcTogTG9naW5VcmksIHZpZXcgPSBuZXcgTG9naW5VcmlWaWV3KCkpIHtcbiAgICAgICAgdmlldy51cmkgPSByZXEudXJpO1xuICAgICAgICB2aWV3Lm1hdGNoID0gcmVxLm1hdGNoO1xuICAgICAgICByZXR1cm4gdmlldztcbiAgICB9XG5cbiAgICB1cmk6IHN0cmluZztcbiAgICBtYXRjaDogVXJpTWF0Y2hUeXBlID0gbnVsbDtcblxuICAgIGNvbnN0cnVjdG9yKG8/OiBMb2dpblVyaVZpZXcpIHtcbiAgICAgICAgaWYgKG8gPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy51cmkgPSBvLnVyaTtcbiAgICAgICAgdGhpcy5tYXRjaCA9IG8ubWF0Y2g7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgTG9naW5VcmkgfSBmcm9tICcuL2xvZ2luVXJpJztcblxuaW1wb3J0IHsgTG9naW5WaWV3IH0gZnJvbSAnLi4vdmlldy9sb2dpblZpZXcnO1xuXG5leHBvcnQgY2xhc3MgTG9naW4ge1xuICAgIHN0YXRpYyB0ZW1wbGF0ZSgpOiBMb2dpbiB7XG4gICAgICAgIGNvbnN0IHJlcSA9IG5ldyBMb2dpbigpO1xuICAgICAgICByZXEudXJpcyA9IFtdO1xuICAgICAgICByZXEudXNlcm5hbWUgPSAnamRvZSc7XG4gICAgICAgIHJlcS5wYXNzd29yZCA9ICdteXBAc3N3b3JkMTIzJztcbiAgICAgICAgcmVxLnRvdHAgPSAnSkJTV1kzRFBFSFBLM1BYUCc7XG4gICAgICAgIHJldHVybiByZXE7XG4gICAgfVxuXG4gICAgc3RhdGljIHRvVmlldyhyZXE6IExvZ2luLCB2aWV3ID0gbmV3IExvZ2luVmlldygpKSB7XG4gICAgICAgIGlmIChyZXEudXJpcyAhPSBudWxsKSB7XG4gICAgICAgICAgICB2aWV3LnVyaXMgPSByZXEudXJpcy5tYXAoKHUpID0+IExvZ2luVXJpLnRvVmlldyh1KSk7XG4gICAgICAgIH1cbiAgICAgICAgdmlldy51c2VybmFtZSA9IHJlcS51c2VybmFtZTtcbiAgICAgICAgdmlldy5wYXNzd29yZCA9IHJlcS5wYXNzd29yZDtcbiAgICAgICAgdmlldy50b3RwID0gcmVxLnRvdHA7XG4gICAgICAgIHJldHVybiB2aWV3O1xuICAgIH1cblxuICAgIHVyaXM6IExvZ2luVXJpW107XG4gICAgdXNlcm5hbWU6IHN0cmluZztcbiAgICBwYXNzd29yZDogc3RyaW5nO1xuICAgIHRvdHA6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKG8/OiBMb2dpblZpZXcpIHtcbiAgICAgICAgaWYgKG8gPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG8udXJpcyAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnVyaXMgPSBvLnVyaXMubWFwKCh1KSA9PiBuZXcgTG9naW5VcmkodSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy51c2VybmFtZSA9IG8udXNlcm5hbWU7XG4gICAgICAgIHRoaXMucGFzc3dvcmQgPSBvLnBhc3N3b3JkO1xuICAgICAgICB0aGlzLnRvdHAgPSBvLnRvdHA7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgU2VjdXJlTm90ZVR5cGUgfSBmcm9tICcuLi8uLi9lbnVtcy9zZWN1cmVOb3RlVHlwZSc7XG5cbmltcG9ydCB7IFNlY3VyZU5vdGVWaWV3IH0gZnJvbSAnLi4vdmlldy9zZWN1cmVOb3RlVmlldyc7XG5cbmV4cG9ydCBjbGFzcyBTZWN1cmVOb3RlIHtcbiAgICBzdGF0aWMgdGVtcGxhdGUoKTogU2VjdXJlTm90ZSB7XG4gICAgICAgIGNvbnN0IHJlcSA9IG5ldyBTZWN1cmVOb3RlKCk7XG4gICAgICAgIHJlcS50eXBlID0gU2VjdXJlTm90ZVR5cGUuR2VuZXJpYztcbiAgICAgICAgcmV0dXJuIHJlcTtcbiAgICB9XG5cbiAgICBzdGF0aWMgdG9WaWV3KHJlcTogU2VjdXJlTm90ZSwgdmlldyA9IG5ldyBTZWN1cmVOb3RlVmlldygpKSB7XG4gICAgICAgIHZpZXcudHlwZSA9IHJlcS50eXBlO1xuICAgICAgICByZXR1cm4gdmlldztcbiAgICB9XG5cbiAgICB0eXBlOiBTZWN1cmVOb3RlVHlwZTtcblxuICAgIGNvbnN0cnVjdG9yKG8/OiBTZWN1cmVOb3RlVmlldykge1xuICAgICAgICBpZiAobyA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnR5cGUgPSBvLnR5cGU7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQ2lwaGVyVHlwZSB9IGZyb20gJy4uLy4uL2VudW1zL2NpcGhlclR5cGUnO1xuXG5pbXBvcnQgeyBDaXBoZXJWaWV3IH0gZnJvbSAnLi4vdmlldy9jaXBoZXJWaWV3JztcblxuaW1wb3J0IHsgQ2FyZCB9IGZyb20gJy4vY2FyZCc7XG5pbXBvcnQgeyBGaWVsZCB9IGZyb20gJy4vZmllbGQnO1xuaW1wb3J0IHsgSWRlbnRpdHkgfSBmcm9tICcuL2lkZW50aXR5JztcbmltcG9ydCB7IExvZ2luIH0gZnJvbSAnLi9sb2dpbic7XG5pbXBvcnQgeyBTZWN1cmVOb3RlIH0gZnJvbSAnLi9zZWN1cmVOb3RlJztcblxuZXhwb3J0IGNsYXNzIENpcGhlciB7XG4gICAgc3RhdGljIHRlbXBsYXRlKCk6IENpcGhlciB7XG4gICAgICAgIGNvbnN0IHJlcSA9IG5ldyBDaXBoZXIoKTtcbiAgICAgICAgcmVxLm9yZ2FuaXphdGlvbklkID0gbnVsbDtcbiAgICAgICAgcmVxLmZvbGRlcklkID0gbnVsbDtcbiAgICAgICAgcmVxLnR5cGUgPSBDaXBoZXJUeXBlLkxvZ2luO1xuICAgICAgICByZXEubmFtZSA9ICdJdGVtIG5hbWUnO1xuICAgICAgICByZXEubm90ZXMgPSAnU29tZSBub3RlcyBhYm91dCB0aGlzIGl0ZW0uJztcbiAgICAgICAgcmVxLmZhdm9yaXRlID0gZmFsc2U7XG4gICAgICAgIHJlcS5maWVsZHMgPSBbXTtcbiAgICAgICAgcmVxLmxvZ2luID0gbnVsbDtcbiAgICAgICAgcmVxLnNlY3VyZU5vdGUgPSBudWxsO1xuICAgICAgICByZXEuY2FyZCA9IG51bGw7XG4gICAgICAgIHJlcS5pZGVudGl0eSA9IG51bGw7XG4gICAgICAgIHJldHVybiByZXE7XG4gICAgfVxuXG4gICAgc3RhdGljIHRvVmlldyhyZXE6IENpcGhlciwgdmlldyA9IG5ldyBDaXBoZXJWaWV3KCkpIHtcbiAgICAgICAgdmlldy50eXBlID0gcmVxLnR5cGU7XG4gICAgICAgIHZpZXcuZm9sZGVySWQgPSByZXEuZm9sZGVySWQ7XG4gICAgICAgIGlmICh2aWV3Lm9yZ2FuaXphdGlvbklkID09IG51bGwpIHtcbiAgICAgICAgICAgIHZpZXcub3JnYW5pemF0aW9uSWQgPSByZXEub3JnYW5pemF0aW9uSWQ7XG4gICAgICAgIH1cbiAgICAgICAgdmlldy5uYW1lID0gcmVxLm5hbWU7XG4gICAgICAgIHZpZXcubm90ZXMgPSByZXEubm90ZXM7XG4gICAgICAgIHZpZXcuZmF2b3JpdGUgPSByZXEuZmF2b3JpdGU7XG5cbiAgICAgICAgaWYgKHJlcS5maWVsZHMgIT0gbnVsbCkge1xuICAgICAgICAgICAgdmlldy5maWVsZHMgPSByZXEuZmllbGRzLm1hcCgoZikgPT4gRmllbGQudG9WaWV3KGYpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN3aXRjaCAocmVxLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgQ2lwaGVyVHlwZS5Mb2dpbjpcbiAgICAgICAgICAgICAgICB2aWV3LmxvZ2luID0gTG9naW4udG9WaWV3KHJlcS5sb2dpbik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIENpcGhlclR5cGUuU2VjdXJlTm90ZTpcbiAgICAgICAgICAgICAgICB2aWV3LnNlY3VyZU5vdGUgPSBTZWN1cmVOb3RlLnRvVmlldyhyZXEuc2VjdXJlTm90ZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIENpcGhlclR5cGUuQ2FyZDpcbiAgICAgICAgICAgICAgICB2aWV3LmNhcmQgPSBDYXJkLnRvVmlldyhyZXEuY2FyZCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIENpcGhlclR5cGUuSWRlbnRpdHk6XG4gICAgICAgICAgICAgICAgdmlldy5pZGVudGl0eSA9IElkZW50aXR5LnRvVmlldyhyZXEuaWRlbnRpdHkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZpZXc7XG4gICAgfVxuXG4gICAgdHlwZTogQ2lwaGVyVHlwZTtcbiAgICBmb2xkZXJJZDogc3RyaW5nO1xuICAgIG9yZ2FuaXphdGlvbklkOiBzdHJpbmc7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIG5vdGVzOiBzdHJpbmc7XG4gICAgZmF2b3JpdGU6IGJvb2xlYW47XG4gICAgZmllbGRzOiBGaWVsZFtdO1xuICAgIGxvZ2luOiBMb2dpbjtcbiAgICBzZWN1cmVOb3RlOiBTZWN1cmVOb3RlO1xuICAgIGNhcmQ6IENhcmQ7XG4gICAgaWRlbnRpdHk6IElkZW50aXR5O1xuXG4gICAgLy8gVXNlIGJ1aWxkIG1ldGhvZCBpbnN0ZWFkIG9mIGN0b3Igc28gdGhhdCB3ZSBjYW4gY29udHJvbCBvcmRlciBvZiBKU09OIHN0cmluZ2lmeSBmb3IgcHJldHR5IHByaW50XG4gICAgYnVpbGQobzogQ2lwaGVyVmlldykge1xuICAgICAgICB0aGlzLm9yZ2FuaXphdGlvbklkID0gby5vcmdhbml6YXRpb25JZDtcbiAgICAgICAgdGhpcy5mb2xkZXJJZCA9IG8uZm9sZGVySWQ7XG4gICAgICAgIHRoaXMudHlwZSA9IG8udHlwZTtcbiAgICAgICAgdGhpcy5uYW1lID0gby5uYW1lO1xuICAgICAgICB0aGlzLm5vdGVzID0gby5ub3RlcztcbiAgICAgICAgdGhpcy5mYXZvcml0ZSA9IG8uZmF2b3JpdGU7XG5cbiAgICAgICAgaWYgKG8uZmllbGRzICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuZmllbGRzID0gby5maWVsZHMubWFwKChmKSA9PiBuZXcgRmllbGQoZikpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3dpdGNoIChvLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgQ2lwaGVyVHlwZS5Mb2dpbjpcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ2luID0gbmV3IExvZ2luKG8ubG9naW4pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBDaXBoZXJUeXBlLlNlY3VyZU5vdGU6XG4gICAgICAgICAgICAgICAgdGhpcy5zZWN1cmVOb3RlID0gbmV3IFNlY3VyZU5vdGUoby5zZWN1cmVOb3RlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgQ2lwaGVyVHlwZS5DYXJkOlxuICAgICAgICAgICAgICAgIHRoaXMuY2FyZCA9IG5ldyBDYXJkKG8uY2FyZCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIENpcGhlclR5cGUuSWRlbnRpdHk6XG4gICAgICAgICAgICAgICAgdGhpcy5pZGVudGl0eSA9IG5ldyBJZGVudGl0eShvLmlkZW50aXR5KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7IENpcGhlciB9IGZyb20gJy4vY2lwaGVyJztcblxuaW1wb3J0IHsgQ2lwaGVyVmlldyB9IGZyb20gJy4uL3ZpZXcvY2lwaGVyVmlldyc7XG5cbmV4cG9ydCBjbGFzcyBDaXBoZXJXaXRoSWRzIGV4dGVuZHMgQ2lwaGVyIHtcbiAgICBpZDogc3RyaW5nO1xuICAgIGNvbGxlY3Rpb25JZHM6IHN0cmluZ1tdO1xuXG4gICAgLy8gVXNlIGJ1aWxkIG1ldGhvZCBpbnN0ZWFkIG9mIGN0b3Igc28gdGhhdCB3ZSBjYW4gY29udHJvbCBvcmRlciBvZiBKU09OIHN0cmluZ2lmeSBmb3IgcHJldHR5IHByaW50XG4gICAgYnVpbGQobzogQ2lwaGVyVmlldykge1xuICAgICAgICB0aGlzLmlkID0gby5pZDtcbiAgICAgICAgc3VwZXIuYnVpbGQobyk7XG4gICAgICAgIHRoaXMuY29sbGVjdGlvbklkcyA9IG8uY29sbGVjdGlvbklkcztcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBDb2xsZWN0aW9uVmlldyB9IGZyb20gJy4uL3ZpZXcvY29sbGVjdGlvblZpZXcnO1xuXG5leHBvcnQgY2xhc3MgQ29sbGVjdGlvbiB7XG4gICAgc3RhdGljIHRlbXBsYXRlKCk6IENvbGxlY3Rpb24ge1xuICAgICAgICBjb25zdCByZXEgPSBuZXcgQ29sbGVjdGlvbigpO1xuICAgICAgICByZXEub3JnYW5pemF0aW9uSWQgPSAnMDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwJztcbiAgICAgICAgcmVxLm5hbWUgPSAnQ29sbGVjdGlvbiBuYW1lJztcbiAgICAgICAgcmVxLmV4dGVybmFsSWQgPSBudWxsO1xuICAgICAgICByZXR1cm4gcmVxO1xuICAgIH1cblxuICAgIHN0YXRpYyB0b1ZpZXcocmVxOiBDb2xsZWN0aW9uLCB2aWV3ID0gbmV3IENvbGxlY3Rpb25WaWV3KCkpIHtcbiAgICAgICAgdmlldy5uYW1lID0gcmVxLm5hbWU7XG4gICAgICAgIHZpZXcuZXh0ZXJuYWxJZCA9IHJlcS5leHRlcm5hbElkO1xuICAgICAgICBpZiAodmlldy5vcmdhbml6YXRpb25JZCA9PSBudWxsKSB7XG4gICAgICAgICAgICB2aWV3Lm9yZ2FuaXphdGlvbklkID0gcmVxLm9yZ2FuaXphdGlvbklkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2aWV3O1xuICAgIH1cblxuICAgIG9yZ2FuaXphdGlvbklkOiBzdHJpbmc7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIGV4dGVybmFsSWQ6IHN0cmluZztcblxuICAgIC8vIFVzZSBidWlsZCBtZXRob2QgaW5zdGVhZCBvZiBjdG9yIHNvIHRoYXQgd2UgY2FuIGNvbnRyb2wgb3JkZXIgb2YgSlNPTiBzdHJpbmdpZnkgZm9yIHByZXR0eSBwcmludFxuICAgIGJ1aWxkKG86IENvbGxlY3Rpb25WaWV3KSB7XG4gICAgICAgIHRoaXMub3JnYW5pemF0aW9uSWQgPSBvLm9yZ2FuaXphdGlvbklkO1xuICAgICAgICB0aGlzLm5hbWUgPSBvLm5hbWU7XG4gICAgICAgIHRoaXMuZXh0ZXJuYWxJZCA9IG8uZXh0ZXJuYWxJZDtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBDb2xsZWN0aW9uIH0gZnJvbSAnLi9jb2xsZWN0aW9uJztcblxuaW1wb3J0IHsgQ29sbGVjdGlvblZpZXcgfSBmcm9tICcuLi92aWV3L2NvbGxlY3Rpb25WaWV3JztcblxuZXhwb3J0IGNsYXNzIENvbGxlY3Rpb25XaXRoSWQgZXh0ZW5kcyBDb2xsZWN0aW9uIHtcbiAgICBpZDogc3RyaW5nO1xuXG4gICAgLy8gVXNlIGJ1aWxkIG1ldGhvZCBpbnN0ZWFkIG9mIGN0b3Igc28gdGhhdCB3ZSBjYW4gY29udHJvbCBvcmRlciBvZiBKU09OIHN0cmluZ2lmeSBmb3IgcHJldHR5IHByaW50XG4gICAgYnVpbGQobzogQ29sbGVjdGlvblZpZXcpIHtcbiAgICAgICAgdGhpcy5pZCA9IG8uaWQ7XG4gICAgICAgIHN1cGVyLmJ1aWxkKG8pO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IEZvbGRlclZpZXcgfSBmcm9tICcuLi92aWV3L2ZvbGRlclZpZXcnO1xuXG5leHBvcnQgY2xhc3MgRm9sZGVyIHtcbiAgICBzdGF0aWMgdGVtcGxhdGUoKTogRm9sZGVyIHtcbiAgICAgICAgY29uc3QgcmVxID0gbmV3IEZvbGRlcigpO1xuICAgICAgICByZXEubmFtZSA9ICdGb2xkZXIgbmFtZSc7XG4gICAgICAgIHJldHVybiByZXE7XG4gICAgfVxuXG4gICAgc3RhdGljIHRvVmlldyhyZXE6IEZvbGRlciwgdmlldyA9IG5ldyBGb2xkZXJWaWV3KCkpIHtcbiAgICAgICAgdmlldy5uYW1lID0gcmVxLm5hbWU7XG4gICAgICAgIHJldHVybiB2aWV3O1xuICAgIH1cblxuICAgIG5hbWU6IHN0cmluZztcblxuICAgIC8vIFVzZSBidWlsZCBtZXRob2QgaW5zdGVhZCBvZiBjdG9yIHNvIHRoYXQgd2UgY2FuIGNvbnRyb2wgb3JkZXIgb2YgSlNPTiBzdHJpbmdpZnkgZm9yIHByZXR0eSBwcmludFxuICAgIGJ1aWxkKG86IEZvbGRlclZpZXcpIHtcbiAgICAgICAgdGhpcy5uYW1lID0gby5uYW1lO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IEZvbGRlciB9IGZyb20gJy4vZm9sZGVyJztcblxuaW1wb3J0IHsgRm9sZGVyVmlldyB9IGZyb20gJy4uL3ZpZXcvZm9sZGVyVmlldyc7XG5cbmV4cG9ydCBjbGFzcyBGb2xkZXJXaXRoSWQgZXh0ZW5kcyBGb2xkZXIge1xuICAgIGlkOiBzdHJpbmc7XG5cbiAgICAvLyBVc2UgYnVpbGQgbWV0aG9kIGluc3RlYWQgb2YgY3RvciBzbyB0aGF0IHdlIGNhbiBjb250cm9sIG9yZGVyIG9mIEpTT04gc3RyaW5naWZ5IGZvciBwcmV0dHkgcHJpbnRcbiAgICBidWlsZChvOiBGb2xkZXJWaWV3KSB7XG4gICAgICAgIHRoaXMuaWQgPSBvLmlkO1xuICAgICAgICBzdXBlci5idWlsZChvKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgKiBhcyBwYXBhIGZyb20gJ3BhcGFwYXJzZSc7XG5cbmltcG9ydCB7IENpcGhlclR5cGUgfSBmcm9tICcuLi9lbnVtcy9jaXBoZXJUeXBlJztcblxuaW1wb3J0IHsgQXBpU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9hcGkuc2VydmljZSc7XG5pbXBvcnQgeyBDaXBoZXJTZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL2NpcGhlci5zZXJ2aWNlJztcbmltcG9ydCB7IEV4cG9ydFNlcnZpY2UgYXMgRXhwb3J0U2VydmljZUFic3RyYWN0aW9uIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL2V4cG9ydC5zZXJ2aWNlJztcbmltcG9ydCB7IEZvbGRlclNlcnZpY2UgfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvZm9sZGVyLnNlcnZpY2UnO1xuXG5pbXBvcnQgeyBDaXBoZXJWaWV3IH0gZnJvbSAnLi4vbW9kZWxzL3ZpZXcvY2lwaGVyVmlldyc7XG5pbXBvcnQgeyBDb2xsZWN0aW9uVmlldyB9IGZyb20gJy4uL21vZGVscy92aWV3L2NvbGxlY3Rpb25WaWV3JztcbmltcG9ydCB7IEZvbGRlclZpZXcgfSBmcm9tICcuLi9tb2RlbHMvdmlldy9mb2xkZXJWaWV3JztcblxuaW1wb3J0IHsgQ2lwaGVyIH0gZnJvbSAnLi4vbW9kZWxzL2RvbWFpbi9jaXBoZXInO1xuaW1wb3J0IHsgQ29sbGVjdGlvbiB9IGZyb20gJy4uL21vZGVscy9kb21haW4vY29sbGVjdGlvbic7XG5cbmltcG9ydCB7IENpcGhlckRhdGEgfSBmcm9tICcuLi9tb2RlbHMvZGF0YS9jaXBoZXJEYXRhJztcbmltcG9ydCB7IENvbGxlY3Rpb25EYXRhIH0gZnJvbSAnLi4vbW9kZWxzL2RhdGEvY29sbGVjdGlvbkRhdGEnO1xuaW1wb3J0IHsgQ29sbGVjdGlvbkRldGFpbHNSZXNwb25zZSB9IGZyb20gJy4uL21vZGVscy9yZXNwb25zZS9jb2xsZWN0aW9uUmVzcG9uc2UnO1xuXG5pbXBvcnQgeyBDaXBoZXJXaXRoSWRzIGFzIENpcGhlckV4cG9ydCB9IGZyb20gJy4uL21vZGVscy9leHBvcnQvY2lwaGVyV2l0aElkcyc7XG5pbXBvcnQgeyBDb2xsZWN0aW9uV2l0aElkIGFzIENvbGxlY3Rpb25FeHBvcnQgfSBmcm9tICcuLi9tb2RlbHMvZXhwb3J0L2NvbGxlY3Rpb25XaXRoSWQnO1xuaW1wb3J0IHsgRm9sZGVyV2l0aElkIGFzIEZvbGRlckV4cG9ydCB9IGZyb20gJy4uL21vZGVscy9leHBvcnQvZm9sZGVyV2l0aElkJztcblxuZXhwb3J0IGNsYXNzIEV4cG9ydFNlcnZpY2UgaW1wbGVtZW50cyBFeHBvcnRTZXJ2aWNlQWJzdHJhY3Rpb24ge1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZm9sZGVyU2VydmljZTogRm9sZGVyU2VydmljZSwgcHJpdmF0ZSBjaXBoZXJTZXJ2aWNlOiBDaXBoZXJTZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIGFwaVNlcnZpY2U6IEFwaVNlcnZpY2UpIHsgfVxuXG4gICAgYXN5bmMgZ2V0RXhwb3J0KGZvcm1hdDogJ2NzdicgfCAnanNvbicgPSAnY3N2Jyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgICAgIGxldCBkZWNGb2xkZXJzOiBGb2xkZXJWaWV3W10gPSBbXTtcbiAgICAgICAgbGV0IGRlY0NpcGhlcnM6IENpcGhlclZpZXdbXSA9IFtdO1xuICAgICAgICBjb25zdCBwcm9taXNlcyA9IFtdO1xuXG4gICAgICAgIHByb21pc2VzLnB1c2godGhpcy5mb2xkZXJTZXJ2aWNlLmdldEFsbERlY3J5cHRlZCgpLnRoZW4oKGZvbGRlcnMpID0+IHtcbiAgICAgICAgICAgIGRlY0ZvbGRlcnMgPSBmb2xkZXJzO1xuICAgICAgICB9KSk7XG5cbiAgICAgICAgcHJvbWlzZXMucHVzaCh0aGlzLmNpcGhlclNlcnZpY2UuZ2V0QWxsRGVjcnlwdGVkKCkudGhlbigoY2lwaGVycykgPT4ge1xuICAgICAgICAgICAgZGVjQ2lwaGVycyA9IGNpcGhlcnM7XG4gICAgICAgIH0pKTtcblxuICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChwcm9taXNlcyk7XG5cbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gJ2NzdicpIHtcbiAgICAgICAgICAgIGNvbnN0IGZvbGRlcnNNYXAgPSBuZXcgTWFwPHN0cmluZywgRm9sZGVyVmlldz4oKTtcbiAgICAgICAgICAgIGRlY0ZvbGRlcnMuZm9yRWFjaCgoZikgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChmLmlkICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9sZGVyc01hcC5zZXQoZi5pZCwgZik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGNvbnN0IGV4cG9ydENpcGhlcnM6IGFueVtdID0gW107XG4gICAgICAgICAgICBkZWNDaXBoZXJzLmZvckVhY2goKGMpID0+IHtcbiAgICAgICAgICAgICAgICAvLyBvbmx5IGV4cG9ydCBsb2dpbnMgYW5kIHNlY3VyZSBub3Rlc1xuICAgICAgICAgICAgICAgIGlmIChjLnR5cGUgIT09IENpcGhlclR5cGUuTG9naW4gJiYgYy50eXBlICE9PSBDaXBoZXJUeXBlLlNlY3VyZU5vdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoYy5vcmdhbml6YXRpb25JZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zdCBjaXBoZXI6IGFueSA9IHt9O1xuICAgICAgICAgICAgICAgIGNpcGhlci5mb2xkZXIgPSBjLmZvbGRlcklkICE9IG51bGwgJiYgZm9sZGVyc01hcC5oYXMoYy5mb2xkZXJJZCkgP1xuICAgICAgICAgICAgICAgICAgICBmb2xkZXJzTWFwLmdldChjLmZvbGRlcklkKS5uYW1lIDogbnVsbDtcbiAgICAgICAgICAgICAgICBjaXBoZXIuZmF2b3JpdGUgPSBjLmZhdm9yaXRlID8gMSA6IG51bGw7XG4gICAgICAgICAgICAgICAgdGhpcy5idWlsZENvbW1vbkNpcGhlcihjaXBoZXIsIGMpO1xuICAgICAgICAgICAgICAgIGV4cG9ydENpcGhlcnMucHVzaChjaXBoZXIpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiBwYXBhLnVucGFyc2UoZXhwb3J0Q2lwaGVycyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBqc29uRG9jOiBhbnkgPSB7XG4gICAgICAgICAgICAgICAgZm9sZGVyczogW10sXG4gICAgICAgICAgICAgICAgaXRlbXM6IFtdLFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgZGVjRm9sZGVycy5mb3JFYWNoKChmKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGYuaWQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGZvbGRlciA9IG5ldyBGb2xkZXJFeHBvcnQoKTtcbiAgICAgICAgICAgICAgICBmb2xkZXIuYnVpbGQoZik7XG4gICAgICAgICAgICAgICAganNvbkRvYy5mb2xkZXJzLnB1c2goZm9sZGVyKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBkZWNDaXBoZXJzLmZvckVhY2goKGMpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoYy5vcmdhbml6YXRpb25JZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgY2lwaGVyID0gbmV3IENpcGhlckV4cG9ydCgpO1xuICAgICAgICAgICAgICAgIGNpcGhlci5idWlsZChjKTtcbiAgICAgICAgICAgICAgICBjaXBoZXIuY29sbGVjdGlvbklkcyA9IG51bGw7XG4gICAgICAgICAgICAgICAganNvbkRvYy5pdGVtcy5wdXNoKGNpcGhlcik7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGpzb25Eb2MsIG51bGwsICcgICcpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0T3JnYW5pemF0aW9uRXhwb3J0KG9yZ2FuaXphdGlvbklkOiBzdHJpbmcsIGZvcm1hdDogJ2NzdicgfCAnanNvbicgPSAnY3N2Jyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgICAgIGNvbnN0IGRlY0NvbGxlY3Rpb25zOiBDb2xsZWN0aW9uVmlld1tdID0gW107XG4gICAgICAgIGNvbnN0IGRlY0NpcGhlcnM6IENpcGhlclZpZXdbXSA9IFtdO1xuICAgICAgICBjb25zdCBwcm9taXNlcyA9IFtdO1xuXG4gICAgICAgIHByb21pc2VzLnB1c2godGhpcy5hcGlTZXJ2aWNlLmdldENvbGxlY3Rpb25zKG9yZ2FuaXphdGlvbklkKS50aGVuKChjb2xsZWN0aW9ucykgPT4ge1xuICAgICAgICAgICAgY29uc3QgY29sbGVjdGlvblByb21pc2VzOiBhbnkgPSBbXTtcbiAgICAgICAgICAgIGlmIChjb2xsZWN0aW9ucyAhPSBudWxsICYmIGNvbGxlY3Rpb25zLmRhdGEgIT0gbnVsbCAmJiBjb2xsZWN0aW9ucy5kYXRhLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBjb2xsZWN0aW9ucy5kYXRhLmZvckVhY2goKGMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29sbGVjdGlvbiA9IG5ldyBDb2xsZWN0aW9uKG5ldyBDb2xsZWN0aW9uRGF0YShjIGFzIENvbGxlY3Rpb25EZXRhaWxzUmVzcG9uc2UpKTtcbiAgICAgICAgICAgICAgICAgICAgY29sbGVjdGlvblByb21pc2VzLnB1c2goY29sbGVjdGlvbi5kZWNyeXB0KCkudGhlbigoZGVjQ29sKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWNDb2xsZWN0aW9ucy5wdXNoKGRlY0NvbCk7XG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChjb2xsZWN0aW9uUHJvbWlzZXMpO1xuICAgICAgICB9KSk7XG5cbiAgICAgICAgcHJvbWlzZXMucHVzaCh0aGlzLmFwaVNlcnZpY2UuZ2V0Q2lwaGVyc09yZ2FuaXphdGlvbihvcmdhbml6YXRpb25JZCkudGhlbigoY2lwaGVycykgPT4ge1xuICAgICAgICAgICAgY29uc3QgY2lwaGVyUHJvbWlzZXM6IGFueSA9IFtdO1xuICAgICAgICAgICAgaWYgKGNpcGhlcnMgIT0gbnVsbCAmJiBjaXBoZXJzLmRhdGEgIT0gbnVsbCAmJiBjaXBoZXJzLmRhdGEubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGNpcGhlcnMuZGF0YS5mb3JFYWNoKChjKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNpcGhlciA9IG5ldyBDaXBoZXIobmV3IENpcGhlckRhdGEoYykpO1xuICAgICAgICAgICAgICAgICAgICBjaXBoZXJQcm9taXNlcy5wdXNoKGNpcGhlci5kZWNyeXB0KCkudGhlbigoZGVjQ2lwaGVyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWNDaXBoZXJzLnB1c2goZGVjQ2lwaGVyKTtcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKGNpcGhlclByb21pc2VzKTtcbiAgICAgICAgfSkpO1xuXG4gICAgICAgIGF3YWl0IFByb21pc2UuYWxsKHByb21pc2VzKTtcblxuICAgICAgICBpZiAoZm9ybWF0ID09PSAnY3N2Jykge1xuICAgICAgICAgICAgY29uc3QgY29sbGVjdGlvbnNNYXAgPSBuZXcgTWFwPHN0cmluZywgQ29sbGVjdGlvblZpZXc+KCk7XG4gICAgICAgICAgICBkZWNDb2xsZWN0aW9ucy5mb3JFYWNoKChjKSA9PiB7XG4gICAgICAgICAgICAgICAgY29sbGVjdGlvbnNNYXAuc2V0KGMuaWQsIGMpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGNvbnN0IGV4cG9ydENpcGhlcnM6IGFueVtdID0gW107XG4gICAgICAgICAgICBkZWNDaXBoZXJzLmZvckVhY2goKGMpID0+IHtcbiAgICAgICAgICAgICAgICAvLyBvbmx5IGV4cG9ydCBsb2dpbnMgYW5kIHNlY3VyZSBub3Rlc1xuICAgICAgICAgICAgICAgIGlmIChjLnR5cGUgIT09IENpcGhlclR5cGUuTG9naW4gJiYgYy50eXBlICE9PSBDaXBoZXJUeXBlLlNlY3VyZU5vdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnN0IGNpcGhlcjogYW55ID0ge307XG4gICAgICAgICAgICAgICAgY2lwaGVyLmNvbGxlY3Rpb25zID0gW107XG4gICAgICAgICAgICAgICAgaWYgKGMuY29sbGVjdGlvbklkcyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNpcGhlci5jb2xsZWN0aW9ucyA9IGMuY29sbGVjdGlvbklkcy5maWx0ZXIoKGlkKSA9PiBjb2xsZWN0aW9uc01hcC5oYXMoaWQpKVxuICAgICAgICAgICAgICAgICAgICAgICAgLm1hcCgoaWQpID0+IGNvbGxlY3Rpb25zTWFwLmdldChpZCkubmFtZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuYnVpbGRDb21tb25DaXBoZXIoY2lwaGVyLCBjKTtcbiAgICAgICAgICAgICAgICBleHBvcnRDaXBoZXJzLnB1c2goY2lwaGVyKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gcGFwYS51bnBhcnNlKGV4cG9ydENpcGhlcnMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QganNvbkRvYzogYW55ID0ge1xuICAgICAgICAgICAgICAgIGNvbGxlY3Rpb25zOiBbXSxcbiAgICAgICAgICAgICAgICBpdGVtczogW10sXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBkZWNDb2xsZWN0aW9ucy5mb3JFYWNoKChjKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29sbGVjdGlvbiA9IG5ldyBDb2xsZWN0aW9uRXhwb3J0KCk7XG4gICAgICAgICAgICAgICAgY29sbGVjdGlvbi5idWlsZChjKTtcbiAgICAgICAgICAgICAgICBqc29uRG9jLmNvbGxlY3Rpb25zLnB1c2goY29sbGVjdGlvbik7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgZGVjQ2lwaGVycy5mb3JFYWNoKChjKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2lwaGVyID0gbmV3IENpcGhlckV4cG9ydCgpO1xuICAgICAgICAgICAgICAgIGNpcGhlci5idWlsZChjKTtcbiAgICAgICAgICAgICAgICBqc29uRG9jLml0ZW1zLnB1c2goY2lwaGVyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGpzb25Eb2MsIG51bGwsICcgICcpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0RmlsZU5hbWUocHJlZml4OiBzdHJpbmcgPSBudWxsLCBleHRlbnNpb246IHN0cmluZyA9ICdjc3YnKTogc3RyaW5nIHtcbiAgICAgICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcbiAgICAgICAgY29uc3QgZGF0ZVN0cmluZyA9XG4gICAgICAgICAgICBub3cuZ2V0RnVsbFllYXIoKSArICcnICsgdGhpcy5wYWROdW1iZXIobm93LmdldE1vbnRoKCkgKyAxLCAyKSArICcnICsgdGhpcy5wYWROdW1iZXIobm93LmdldERhdGUoKSwgMikgK1xuICAgICAgICAgICAgdGhpcy5wYWROdW1iZXIobm93LmdldEhvdXJzKCksIDIpICsgJycgKyB0aGlzLnBhZE51bWJlcihub3cuZ2V0TWludXRlcygpLCAyKSArXG4gICAgICAgICAgICB0aGlzLnBhZE51bWJlcihub3cuZ2V0U2Vjb25kcygpLCAyKTtcblxuICAgICAgICByZXR1cm4gJ2JpdHdhcmRlbicgKyAocHJlZml4ID8gKCdfJyArIHByZWZpeCkgOiAnJykgKyAnX2V4cG9ydF8nICsgZGF0ZVN0cmluZyArICcuJyArIGV4dGVuc2lvbjtcbiAgICB9XG5cbiAgICBwcml2YXRlIHBhZE51bWJlcihudW06IG51bWJlciwgd2lkdGg6IG51bWJlciwgcGFkQ2hhcmFjdGVyOiBzdHJpbmcgPSAnMCcpOiBzdHJpbmcge1xuICAgICAgICBjb25zdCBudW1TdHJpbmcgPSBudW0udG9TdHJpbmcoKTtcbiAgICAgICAgcmV0dXJuIG51bVN0cmluZy5sZW5ndGggPj0gd2lkdGggPyBudW1TdHJpbmcgOlxuICAgICAgICAgICAgbmV3IEFycmF5KHdpZHRoIC0gbnVtU3RyaW5nLmxlbmd0aCArIDEpLmpvaW4ocGFkQ2hhcmFjdGVyKSArIG51bVN0cmluZztcbiAgICB9XG5cbiAgICBwcml2YXRlIGJ1aWxkQ29tbW9uQ2lwaGVyKGNpcGhlcjogYW55LCBjOiBDaXBoZXJWaWV3KSB7XG4gICAgICAgIGNpcGhlci50eXBlID0gbnVsbDtcbiAgICAgICAgY2lwaGVyLm5hbWUgPSBjLm5hbWU7XG4gICAgICAgIGNpcGhlci5ub3RlcyA9IGMubm90ZXM7XG4gICAgICAgIGNpcGhlci5maWVsZHMgPSBudWxsO1xuICAgICAgICAvLyBMb2dpbiBwcm9wc1xuICAgICAgICBjaXBoZXIubG9naW5fdXJpID0gbnVsbDtcbiAgICAgICAgY2lwaGVyLmxvZ2luX3VzZXJuYW1lID0gbnVsbDtcbiAgICAgICAgY2lwaGVyLmxvZ2luX3Bhc3N3b3JkID0gbnVsbDtcbiAgICAgICAgY2lwaGVyLmxvZ2luX3RvdHAgPSBudWxsO1xuXG4gICAgICAgIGlmIChjLmZpZWxkcykge1xuICAgICAgICAgICAgYy5maWVsZHMuZm9yRWFjaCgoZjogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFjaXBoZXIuZmllbGRzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNpcGhlci5maWVsZHMgPSAnJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjaXBoZXIuZmllbGRzICs9ICdcXG4nO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNpcGhlci5maWVsZHMgKz0gKChmLm5hbWUgfHwgJycpICsgJzogJyArIGYudmFsdWUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBzd2l0Y2ggKGMudHlwZSkge1xuICAgICAgICAgICAgY2FzZSBDaXBoZXJUeXBlLkxvZ2luOlxuICAgICAgICAgICAgICAgIGNpcGhlci50eXBlID0gJ2xvZ2luJztcbiAgICAgICAgICAgICAgICBjaXBoZXIubG9naW5fdXNlcm5hbWUgPSBjLmxvZ2luLnVzZXJuYW1lO1xuICAgICAgICAgICAgICAgIGNpcGhlci5sb2dpbl9wYXNzd29yZCA9IGMubG9naW4ucGFzc3dvcmQ7XG4gICAgICAgICAgICAgICAgY2lwaGVyLmxvZ2luX3RvdHAgPSBjLmxvZ2luLnRvdHA7XG5cbiAgICAgICAgICAgICAgICBpZiAoYy5sb2dpbi51cmlzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNpcGhlci5sb2dpbl91cmkgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgYy5sb2dpbi51cmlzLmZvckVhY2goKHUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNpcGhlci5sb2dpbl91cmkucHVzaCh1LnVyaSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgQ2lwaGVyVHlwZS5TZWN1cmVOb3RlOlxuICAgICAgICAgICAgICAgIGNpcGhlci50eXBlID0gJ25vdGUnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY2lwaGVyO1xuICAgIH1cbn1cbiIsImV4cG9ydCBlbnVtIE5vdGlmaWNhdGlvblR5cGUge1xuICAgIFN5bmNDaXBoZXJVcGRhdGUgPSAwLFxuICAgIFN5bmNDaXBoZXJDcmVhdGUgPSAxLFxuICAgIFN5bmNMb2dpbkRlbGV0ZSA9IDIsXG4gICAgU3luY0ZvbGRlckRlbGV0ZSA9IDMsXG4gICAgU3luY0NpcGhlcnMgPSA0LFxuXG4gICAgU3luY1ZhdWx0ID0gNSxcbiAgICBTeW5jT3JnS2V5cyA9IDYsXG4gICAgU3luY0ZvbGRlckNyZWF0ZSA9IDcsXG4gICAgU3luY0ZvbGRlclVwZGF0ZSA9IDgsXG4gICAgU3luY0NpcGhlckRlbGV0ZSA9IDksXG4gICAgU3luY1NldHRpbmdzID0gMTAsXG5cbiAgICBMb2dPdXQgPSAxMSxcbn1cbiIsImltcG9ydCB7IEJhc2VSZXNwb25zZSB9IGZyb20gJy4vYmFzZVJlc3BvbnNlJztcblxuaW1wb3J0IHsgTm90aWZpY2F0aW9uVHlwZSB9IGZyb20gJy4uLy4uL2VudW1zL25vdGlmaWNhdGlvblR5cGUnO1xuXG5leHBvcnQgY2xhc3MgTm90aWZpY2F0aW9uUmVzcG9uc2UgZXh0ZW5kcyBCYXNlUmVzcG9uc2Uge1xuICAgIGNvbnRleHRJZDogc3RyaW5nO1xuICAgIHR5cGU6IE5vdGlmaWNhdGlvblR5cGU7XG4gICAgcGF5bG9hZDogYW55O1xuXG4gICAgY29uc3RydWN0b3IocmVzcG9uc2U6IGFueSkge1xuICAgICAgICBzdXBlcihyZXNwb25zZSk7XG4gICAgICAgIHRoaXMuY29udGV4dElkID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdDb250ZXh0SWQnKTtcbiAgICAgICAgdGhpcy50eXBlID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdUeXBlJyk7XG5cbiAgICAgICAgY29uc3QgcGF5bG9hZCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnUGF5bG9hZCcpO1xuICAgICAgICBzd2l0Y2ggKHRoaXMudHlwZSkge1xuICAgICAgICAgICAgY2FzZSBOb3RpZmljYXRpb25UeXBlLlN5bmNDaXBoZXJDcmVhdGU6XG4gICAgICAgICAgICBjYXNlIE5vdGlmaWNhdGlvblR5cGUuU3luY0NpcGhlckRlbGV0ZTpcbiAgICAgICAgICAgIGNhc2UgTm90aWZpY2F0aW9uVHlwZS5TeW5jQ2lwaGVyVXBkYXRlOlxuICAgICAgICAgICAgY2FzZSBOb3RpZmljYXRpb25UeXBlLlN5bmNMb2dpbkRlbGV0ZTpcbiAgICAgICAgICAgICAgICB0aGlzLnBheWxvYWQgPSBuZXcgU3luY0NpcGhlck5vdGlmaWNhdGlvbihwYXlsb2FkKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgTm90aWZpY2F0aW9uVHlwZS5TeW5jRm9sZGVyQ3JlYXRlOlxuICAgICAgICAgICAgY2FzZSBOb3RpZmljYXRpb25UeXBlLlN5bmNGb2xkZXJEZWxldGU6XG4gICAgICAgICAgICBjYXNlIE5vdGlmaWNhdGlvblR5cGUuU3luY0ZvbGRlclVwZGF0ZTpcbiAgICAgICAgICAgICAgICB0aGlzLnBheWxvYWQgPSBuZXcgU3luY0ZvbGRlck5vdGlmaWNhdGlvbihwYXlsb2FkKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgTm90aWZpY2F0aW9uVHlwZS5TeW5jVmF1bHQ6XG4gICAgICAgICAgICBjYXNlIE5vdGlmaWNhdGlvblR5cGUuU3luY0NpcGhlcnM6XG4gICAgICAgICAgICBjYXNlIE5vdGlmaWNhdGlvblR5cGUuU3luY09yZ0tleXM6XG4gICAgICAgICAgICBjYXNlIE5vdGlmaWNhdGlvblR5cGUuU3luY1NldHRpbmdzOlxuICAgICAgICAgICAgY2FzZSBOb3RpZmljYXRpb25UeXBlLkxvZ091dDpcbiAgICAgICAgICAgICAgICB0aGlzLnBheWxvYWQgPSBuZXcgVXNlck5vdGlmaWNhdGlvbihwYXlsb2FkKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBTeW5jQ2lwaGVyTm90aWZpY2F0aW9uIGV4dGVuZHMgQmFzZVJlc3BvbnNlIHtcbiAgICBpZDogc3RyaW5nO1xuICAgIHVzZXJJZDogc3RyaW5nO1xuICAgIG9yZ2FuaXphdGlvbklkOiBzdHJpbmc7XG4gICAgY29sbGVjdGlvbklkczogc3RyaW5nW107XG4gICAgcmV2aXNpb25EYXRlOiBEYXRlO1xuXG4gICAgY29uc3RydWN0b3IocmVzcG9uc2U6IGFueSkge1xuICAgICAgICBzdXBlcihyZXNwb25zZSk7XG4gICAgICAgIHRoaXMuaWQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0lkJyk7XG4gICAgICAgIHRoaXMudXNlcklkID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdVc2VySWQnKTtcbiAgICAgICAgdGhpcy5vcmdhbml6YXRpb25JZCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnT3JnYW5pemF0aW9uSWQnKTtcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uSWRzID0gdGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdDb2xsZWN0aW9uSWRzJyk7XG4gICAgICAgIHRoaXMucmV2aXNpb25EYXRlID0gbmV3IERhdGUodGhpcy5nZXRSZXNwb25zZVByb3BlcnR5KCdSZXZpc2lvbkRhdGUnKSk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgU3luY0ZvbGRlck5vdGlmaWNhdGlvbiBleHRlbmRzIEJhc2VSZXNwb25zZSB7XG4gICAgaWQ6IHN0cmluZztcbiAgICB1c2VySWQ6IHN0cmluZztcbiAgICByZXZpc2lvbkRhdGU6IERhdGU7XG5cbiAgICBjb25zdHJ1Y3RvcihyZXNwb25zZTogYW55KSB7XG4gICAgICAgIHN1cGVyKHJlc3BvbnNlKTtcbiAgICAgICAgdGhpcy5pZCA9IHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnSWQnKTtcbiAgICAgICAgdGhpcy51c2VySWQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1VzZXJJZCcpO1xuICAgICAgICB0aGlzLnJldmlzaW9uRGF0ZSA9IG5ldyBEYXRlKHRoaXMuZ2V0UmVzcG9uc2VQcm9wZXJ0eSgnUmV2aXNpb25EYXRlJykpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFVzZXJOb3RpZmljYXRpb24gZXh0ZW5kcyBCYXNlUmVzcG9uc2Uge1xuICAgIHVzZXJJZDogc3RyaW5nO1xuICAgIGRhdGU6IERhdGU7XG5cbiAgICBjb25zdHJ1Y3RvcihyZXNwb25zZTogYW55KSB7XG4gICAgICAgIHN1cGVyKHJlc3BvbnNlKTtcbiAgICAgICAgdGhpcy51c2VySWQgPSB0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ1VzZXJJZCcpO1xuICAgICAgICB0aGlzLmRhdGUgPSBuZXcgRGF0ZSh0aGlzLmdldFJlc3BvbnNlUHJvcGVydHkoJ0RhdGUnKSk7XG4gICAgfVxufVxuIiwiaW1wb3J0ICogYXMgc2lnbmFsUiBmcm9tICdAbWljcm9zb2Z0L3NpZ25hbHInO1xuaW1wb3J0ICogYXMgc2lnbmFsUk1zZ1BhY2sgZnJvbSAnQG1pY3Jvc29mdC9zaWduYWxyLXByb3RvY29sLW1zZ3BhY2snO1xuXG5pbXBvcnQgeyBOb3RpZmljYXRpb25UeXBlIH0gZnJvbSAnLi4vZW51bXMvbm90aWZpY2F0aW9uVHlwZSc7XG5cbmltcG9ydCB7IEFwaVNlcnZpY2UgfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvYXBpLnNlcnZpY2UnO1xuaW1wb3J0IHsgQXBwSWRTZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL2FwcElkLnNlcnZpY2UnO1xuaW1wb3J0IHsgRW52aXJvbm1lbnRTZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL2Vudmlyb25tZW50LnNlcnZpY2UnO1xuaW1wb3J0IHsgTm90aWZpY2F0aW9uc1NlcnZpY2UgYXMgTm90aWZpY2F0aW9uc1NlcnZpY2VBYnN0cmFjdGlvbiB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9ub3RpZmljYXRpb25zLnNlcnZpY2UnO1xuaW1wb3J0IHsgU3luY1NlcnZpY2UgfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvc3luYy5zZXJ2aWNlJztcbmltcG9ydCB7IFVzZXJTZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL3VzZXIuc2VydmljZSc7XG5pbXBvcnQgeyBWYXVsdFRpbWVvdXRTZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL3ZhdWx0VGltZW91dC5zZXJ2aWNlJztcblxuaW1wb3J0IHtcbiAgICBOb3RpZmljYXRpb25SZXNwb25zZSxcbiAgICBTeW5jQ2lwaGVyTm90aWZpY2F0aW9uLFxuICAgIFN5bmNGb2xkZXJOb3RpZmljYXRpb24sXG59IGZyb20gJy4uL21vZGVscy9yZXNwb25zZS9ub3RpZmljYXRpb25SZXNwb25zZSc7XG5cbmV4cG9ydCBjbGFzcyBOb3RpZmljYXRpb25zU2VydmljZSBpbXBsZW1lbnRzIE5vdGlmaWNhdGlvbnNTZXJ2aWNlQWJzdHJhY3Rpb24ge1xuICAgIHByaXZhdGUgc2lnbmFsckNvbm5lY3Rpb246IHNpZ25hbFIuSHViQ29ubmVjdGlvbjtcbiAgICBwcml2YXRlIHVybDogc3RyaW5nO1xuICAgIHByaXZhdGUgY29ubmVjdGVkID0gZmFsc2U7XG4gICAgcHJpdmF0ZSBpbml0ZWQgPSBmYWxzZTtcbiAgICBwcml2YXRlIGluYWN0aXZlID0gZmFsc2U7XG4gICAgcHJpdmF0ZSByZWNvbm5lY3RUaW1lcjogYW55ID0gbnVsbDtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgdXNlclNlcnZpY2U6IFVzZXJTZXJ2aWNlLCBwcml2YXRlIHN5bmNTZXJ2aWNlOiBTeW5jU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBhcHBJZFNlcnZpY2U6IEFwcElkU2VydmljZSwgcHJpdmF0ZSBhcGlTZXJ2aWNlOiBBcGlTZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIHZhdWx0VGltZW91dFNlcnZpY2U6IFZhdWx0VGltZW91dFNlcnZpY2UsIHByaXZhdGUgbG9nb3V0Q2FsbGJhY2s6ICgpID0+IFByb21pc2U8dm9pZD4pIHsgfVxuXG4gICAgYXN5bmMgaW5pdChlbnZpcm9ubWVudFNlcnZpY2U6IEVudmlyb25tZW50U2VydmljZSk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICB0aGlzLmluaXRlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnVybCA9ICdodHRwczovL25vdGlmaWNhdGlvbnMuYml0d2FyZGVuLmNvbSc7XG4gICAgICAgIGlmIChlbnZpcm9ubWVudFNlcnZpY2Uubm90aWZpY2F0aW9uc1VybCAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnVybCA9IGVudmlyb25tZW50U2VydmljZS5ub3RpZmljYXRpb25zVXJsO1xuICAgICAgICB9IGVsc2UgaWYgKGVudmlyb25tZW50U2VydmljZS5iYXNlVXJsICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMudXJsID0gZW52aXJvbm1lbnRTZXJ2aWNlLmJhc2VVcmwgKyAnL25vdGlmaWNhdGlvbnMnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2V0IG5vdGlmaWNhdGlvbnMgc2VydmVyIFVSTCB0byBgaHR0cHM6Ly8tYCB0byBlZmZlY3RpdmVseSBkaXNhYmxlIGNvbW11bmljYXRpb25cbiAgICAgICAgLy8gd2l0aCB0aGUgbm90aWZpY2F0aW9ucyBzZXJ2ZXIgZnJvbSB0aGUgY2xpZW50IGFwcFxuICAgICAgICBpZiAodGhpcy51cmwgPT09ICdodHRwczovLy0nKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5zaWduYWxyQ29ubmVjdGlvbiAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnNpZ25hbHJDb25uZWN0aW9uLm9mZignUmVjZWl2ZU1lc3NhZ2UnKTtcbiAgICAgICAgICAgIHRoaXMuc2lnbmFsckNvbm5lY3Rpb24ub2ZmKCdIZWFydGJlYXQnKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuc2lnbmFsckNvbm5lY3Rpb24uc3RvcCgpO1xuICAgICAgICAgICAgdGhpcy5jb25uZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuc2lnbmFsckNvbm5lY3Rpb24gPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zaWduYWxyQ29ubmVjdGlvbiA9IG5ldyBzaWduYWxSLkh1YkNvbm5lY3Rpb25CdWlsZGVyKClcbiAgICAgICAgICAgIC53aXRoVXJsKHRoaXMudXJsICsgJy9odWInLCB7XG4gICAgICAgICAgICAgICAgYWNjZXNzVG9rZW5GYWN0b3J5OiAoKSA9PiB0aGlzLmFwaVNlcnZpY2UuZ2V0QWN0aXZlQmVhcmVyVG9rZW4oKSxcbiAgICAgICAgICAgICAgICBza2lwTmVnb3RpYXRpb246IHRydWUsXG4gICAgICAgICAgICAgICAgdHJhbnNwb3J0OiBzaWduYWxSLkh0dHBUcmFuc3BvcnRUeXBlLldlYlNvY2tldHMsXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLndpdGhIdWJQcm90b2NvbChuZXcgc2lnbmFsUk1zZ1BhY2suTWVzc2FnZVBhY2tIdWJQcm90b2NvbCgpKVxuICAgICAgICAgICAgLy8gLmNvbmZpZ3VyZUxvZ2dpbmcoc2lnbmFsUi5Mb2dMZXZlbC5UcmFjZSlcbiAgICAgICAgICAgIC5idWlsZCgpO1xuXG4gICAgICAgIHRoaXMuc2lnbmFsckNvbm5lY3Rpb24ub24oJ1JlY2VpdmVNZXNzYWdlJyxcbiAgICAgICAgICAgIChkYXRhOiBhbnkpID0+IHRoaXMucHJvY2Vzc05vdGlmaWNhdGlvbihuZXcgTm90aWZpY2F0aW9uUmVzcG9uc2UoZGF0YSkpKTtcbiAgICAgICAgdGhpcy5zaWduYWxyQ29ubmVjdGlvbi5vbignSGVhcnRiZWF0JyxcbiAgICAgICAgICAgIChkYXRhOiBhbnkpID0+IHsgLypjb25zb2xlLmxvZygnSGVhcnRiZWF0IScpOyovIH0pO1xuICAgICAgICB0aGlzLnNpZ25hbHJDb25uZWN0aW9uLm9uY2xvc2UoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5jb25uZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMucmVjb25uZWN0KHRydWUpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5pbml0ZWQgPSB0cnVlO1xuICAgICAgICBpZiAoYXdhaXQgdGhpcy5pc0F1dGhlZEFuZFVubG9ja2VkKCkpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucmVjb25uZWN0KGZhbHNlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIHVwZGF0ZUNvbm5lY3Rpb24oc3luYyA9IGZhbHNlKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGlmICghdGhpcy5pbml0ZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKGF3YWl0IHRoaXMuaXNBdXRoZWRBbmRVbmxvY2tlZCgpKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5yZWNvbm5lY3Qoc3luYyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuc2lnbmFsckNvbm5lY3Rpb24uc3RvcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZS50b1N0cmluZygpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIHJlY29ubmVjdEZyb21BY3Rpdml0eSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgdGhpcy5pbmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICBpZiAodGhpcy5pbml0ZWQgJiYgIXRoaXMuY29ubmVjdGVkKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnJlY29ubmVjdCh0cnVlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIGRpc2Nvbm5lY3RGcm9tSW5hY3Rpdml0eSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgdGhpcy5pbmFjdGl2ZSA9IHRydWU7XG4gICAgICAgIGlmICh0aGlzLmluaXRlZCAmJiB0aGlzLmNvbm5lY3RlZCkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5zaWduYWxyQ29ubmVjdGlvbi5zdG9wKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIHByb2Nlc3NOb3RpZmljYXRpb24obm90aWZpY2F0aW9uOiBOb3RpZmljYXRpb25SZXNwb25zZSkge1xuICAgICAgICBjb25zdCBhcHBJZCA9IGF3YWl0IHRoaXMuYXBwSWRTZXJ2aWNlLmdldEFwcElkKCk7XG4gICAgICAgIGlmIChub3RpZmljYXRpb24gPT0gbnVsbCB8fCBub3RpZmljYXRpb24uY29udGV4dElkID09PSBhcHBJZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgaXNBdXRoZW50aWNhdGVkID0gYXdhaXQgdGhpcy51c2VyU2VydmljZS5pc0F1dGhlbnRpY2F0ZWQoKTtcbiAgICAgICAgY29uc3QgcGF5bG9hZFVzZXJJZCA9IG5vdGlmaWNhdGlvbi5wYXlsb2FkLnVzZXJJZCB8fCBub3RpZmljYXRpb24ucGF5bG9hZC5Vc2VySWQ7XG4gICAgICAgIGNvbnN0IG15VXNlcklkID0gYXdhaXQgdGhpcy51c2VyU2VydmljZS5nZXRVc2VySWQoKTtcbiAgICAgICAgaWYgKGlzQXV0aGVudGljYXRlZCAmJiBwYXlsb2FkVXNlcklkICE9IG51bGwgJiYgcGF5bG9hZFVzZXJJZCAhPT0gbXlVc2VySWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHN3aXRjaCAobm90aWZpY2F0aW9uLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgTm90aWZpY2F0aW9uVHlwZS5TeW5jQ2lwaGVyQ3JlYXRlOlxuICAgICAgICAgICAgY2FzZSBOb3RpZmljYXRpb25UeXBlLlN5bmNDaXBoZXJVcGRhdGU6XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5zeW5jU2VydmljZS5zeW5jVXBzZXJ0Q2lwaGVyKG5vdGlmaWNhdGlvbi5wYXlsb2FkIGFzIFN5bmNDaXBoZXJOb3RpZmljYXRpb24sXG4gICAgICAgICAgICAgICAgICAgIG5vdGlmaWNhdGlvbi50eXBlID09PSBOb3RpZmljYXRpb25UeXBlLlN5bmNDaXBoZXJVcGRhdGUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBOb3RpZmljYXRpb25UeXBlLlN5bmNDaXBoZXJEZWxldGU6XG4gICAgICAgICAgICBjYXNlIE5vdGlmaWNhdGlvblR5cGUuU3luY0xvZ2luRGVsZXRlOlxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuc3luY1NlcnZpY2Uuc3luY0RlbGV0ZUNpcGhlcihub3RpZmljYXRpb24ucGF5bG9hZCBhcyBTeW5jQ2lwaGVyTm90aWZpY2F0aW9uKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgTm90aWZpY2F0aW9uVHlwZS5TeW5jRm9sZGVyQ3JlYXRlOlxuICAgICAgICAgICAgY2FzZSBOb3RpZmljYXRpb25UeXBlLlN5bmNGb2xkZXJVcGRhdGU6XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5zeW5jU2VydmljZS5zeW5jVXBzZXJ0Rm9sZGVyKG5vdGlmaWNhdGlvbi5wYXlsb2FkIGFzIFN5bmNGb2xkZXJOb3RpZmljYXRpb24sXG4gICAgICAgICAgICAgICAgICAgIG5vdGlmaWNhdGlvbi50eXBlID09PSBOb3RpZmljYXRpb25UeXBlLlN5bmNGb2xkZXJVcGRhdGUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBOb3RpZmljYXRpb25UeXBlLlN5bmNGb2xkZXJEZWxldGU6XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5zeW5jU2VydmljZS5zeW5jRGVsZXRlRm9sZGVyKG5vdGlmaWNhdGlvbi5wYXlsb2FkIGFzIFN5bmNGb2xkZXJOb3RpZmljYXRpb24pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBOb3RpZmljYXRpb25UeXBlLlN5bmNWYXVsdDpcbiAgICAgICAgICAgIGNhc2UgTm90aWZpY2F0aW9uVHlwZS5TeW5jQ2lwaGVyczpcbiAgICAgICAgICAgIGNhc2UgTm90aWZpY2F0aW9uVHlwZS5TeW5jU2V0dGluZ3M6XG4gICAgICAgICAgICAgICAgaWYgKGlzQXV0aGVudGljYXRlZCkge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnN5bmNTZXJ2aWNlLmZ1bGxTeW5jKGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIE5vdGlmaWNhdGlvblR5cGUuU3luY09yZ0tleXM6XG4gICAgICAgICAgICAgICAgaWYgKGlzQXV0aGVudGljYXRlZCkge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmFwaVNlcnZpY2UucmVmcmVzaElkZW50aXR5VG9rZW4oKTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5zeW5jU2VydmljZS5mdWxsU3luYyh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gU3RvcCBzbyBhIHJlY29ubmVjdCBjYW4gYmUgbWFkZVxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnNpZ25hbHJDb25uZWN0aW9uLnN0b3AoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIE5vdGlmaWNhdGlvblR5cGUuTG9nT3V0OlxuICAgICAgICAgICAgICAgIGlmIChpc0F1dGhlbnRpY2F0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dvdXRDYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIHJlY29ubmVjdChzeW5jOiBib29sZWFuKSB7XG4gICAgICAgIGlmICh0aGlzLnJlY29ubmVjdFRpbWVyICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnJlY29ubmVjdFRpbWVyKTtcbiAgICAgICAgICAgIHRoaXMucmVjb25uZWN0VGltZXIgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmNvbm5lY3RlZCB8fCAhdGhpcy5pbml0ZWQgfHwgdGhpcy5pbmFjdGl2ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGF1dGhlZEFuZFVubG9ja2VkID0gYXdhaXQgdGhpcy5pc0F1dGhlZEFuZFVubG9ja2VkKCk7XG4gICAgICAgIGlmICghYXV0aGVkQW5kVW5sb2NrZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnNpZ25hbHJDb25uZWN0aW9uLnN0YXJ0KCk7XG4gICAgICAgICAgICB0aGlzLmNvbm5lY3RlZCA9IHRydWU7XG4gICAgICAgICAgICBpZiAoc3luYykge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuc3luY1NlcnZpY2UuZnVsbFN5bmMoZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIHsgfVxuXG4gICAgICAgIGlmICghdGhpcy5jb25uZWN0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMucmVjb25uZWN0VGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHRoaXMucmVjb25uZWN0KHN5bmMpLCB0aGlzLnJhbmRvbSgxMjAwMDAsIDMwMDAwMCkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBpc0F1dGhlZEFuZFVubG9ja2VkKCkge1xuICAgICAgICBpZiAoYXdhaXQgdGhpcy51c2VyU2VydmljZS5pc0F1dGhlbnRpY2F0ZWQoKSkge1xuICAgICAgICAgICAgY29uc3QgbG9ja2VkID0gYXdhaXQgdGhpcy52YXVsdFRpbWVvdXRTZXJ2aWNlLmlzTG9ja2VkKCk7XG4gICAgICAgICAgICByZXR1cm4gIWxvY2tlZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByYW5kb20obWluOiBudW1iZXIsIG1heDogbnVtYmVyKSB7XG4gICAgICAgIG1pbiA9IE1hdGguY2VpbChtaW4pO1xuICAgICAgICBtYXggPSBNYXRoLmZsb29yKG1heCk7XG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluICsgMSkpICsgbWluO1xuICAgIH1cbn1cbiIsImltcG9ydCBEb21haW4gZnJvbSAnLi9kb21haW5CYXNlJztcblxuZXhwb3J0IGNsYXNzIE1hc3RlclBhc3N3b3JkUG9saWN5T3B0aW9ucyBleHRlbmRzIERvbWFpbiB7XG4gICAgbWluQ29tcGxleGl0eTogbnVtYmVyID0gMDtcbiAgICBtaW5MZW5ndGg6IG51bWJlciA9IDA7XG4gICAgcmVxdWlyZVVwcGVyOiBib29sZWFuID0gZmFsc2U7XG4gICAgcmVxdWlyZUxvd2VyOiBib29sZWFuID0gZmFsc2U7XG4gICAgcmVxdWlyZU51bWJlcnM6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICByZXF1aXJlU3BlY2lhbDogYm9vbGVhbiA9IGZhbHNlO1xufVxuIiwiaW1wb3J0IHsgUG9saWN5RGF0YSB9IGZyb20gJy4uL2RhdGEvcG9saWN5RGF0YSc7XG5cbmltcG9ydCBEb21haW4gZnJvbSAnLi9kb21haW5CYXNlJztcblxuaW1wb3J0IHsgUG9saWN5VHlwZSB9IGZyb20gJy4uLy4uL2VudW1zL3BvbGljeVR5cGUnO1xuXG5leHBvcnQgY2xhc3MgUG9saWN5IGV4dGVuZHMgRG9tYWluIHtcbiAgICBpZDogc3RyaW5nO1xuICAgIG9yZ2FuaXphdGlvbklkOiBzdHJpbmc7XG4gICAgdHlwZTogUG9saWN5VHlwZTtcbiAgICBkYXRhOiBhbnk7XG4gICAgZW5hYmxlZDogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKG9iaj86IFBvbGljeURhdGEpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgaWYgKG9iaiA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmlkID0gb2JqLmlkO1xuICAgICAgICB0aGlzLm9yZ2FuaXphdGlvbklkID0gb2JqLm9yZ2FuaXphdGlvbklkO1xuICAgICAgICB0aGlzLnR5cGUgPSBvYmoudHlwZTtcbiAgICAgICAgdGhpcy5kYXRhID0gb2JqLmRhdGE7XG4gICAgICAgIHRoaXMuZW5hYmxlZCA9IG9iai5lbmFibGVkO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IFBvbGljeVNlcnZpY2UgYXMgUG9saWN5U2VydmljZUFic3RyYWN0aW9uIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL3BvbGljeS5zZXJ2aWNlJztcbmltcG9ydCB7IFN0b3JhZ2VTZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL3N0b3JhZ2Uuc2VydmljZSc7XG5pbXBvcnQgeyBVc2VyU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy91c2VyLnNlcnZpY2UnO1xuXG5pbXBvcnQgeyBQb2xpY3lEYXRhIH0gZnJvbSAnLi4vbW9kZWxzL2RhdGEvcG9saWN5RGF0YSc7XG5cbmltcG9ydCB7IE1hc3RlclBhc3N3b3JkUG9saWN5T3B0aW9ucyB9IGZyb20gJy4uL21vZGVscy9kb21haW4vbWFzdGVyUGFzc3dvcmRQb2xpY3lPcHRpb25zJztcbmltcG9ydCB7IFBvbGljeSB9IGZyb20gJy4uL21vZGVscy9kb21haW4vcG9saWN5JztcblxuaW1wb3J0IHsgUG9saWN5VHlwZSB9IGZyb20gJy4uL2VudW1zL3BvbGljeVR5cGUnO1xuXG5jb25zdCBLZXlzID0ge1xuICAgIHBvbGljaWVzUHJlZml4OiAncG9saWNpZXNfJyxcbn07XG5cbmV4cG9ydCBjbGFzcyBQb2xpY3lTZXJ2aWNlIGltcGxlbWVudHMgUG9saWN5U2VydmljZUFic3RyYWN0aW9uIHtcbiAgICBwb2xpY3lDYWNoZTogUG9saWN5W107XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHVzZXJTZXJ2aWNlOiBVc2VyU2VydmljZSwgcHJpdmF0ZSBzdG9yYWdlU2VydmljZTogU3RvcmFnZVNlcnZpY2UpIHtcbiAgICB9XG5cbiAgICBjbGVhckNhY2hlKCk6IHZvaWQge1xuICAgICAgICB0aGlzLnBvbGljeUNhY2hlID0gbnVsbDtcbiAgICB9XG5cbiAgICBhc3luYyBnZXRBbGwodHlwZT86IFBvbGljeVR5cGUpOiBQcm9taXNlPFBvbGljeVtdPiB7XG4gICAgICAgIGlmICh0aGlzLnBvbGljeUNhY2hlID09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IHVzZXJJZCA9IGF3YWl0IHRoaXMudXNlclNlcnZpY2UuZ2V0VXNlcklkKCk7XG4gICAgICAgICAgICBjb25zdCBwb2xpY2llcyA9IGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2UuZ2V0PHsgW2lkOiBzdHJpbmddOiBQb2xpY3lEYXRhOyB9PihcbiAgICAgICAgICAgICAgICBLZXlzLnBvbGljaWVzUHJlZml4ICsgdXNlcklkKTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlOiBQb2xpY3lbXSA9IFtdO1xuICAgICAgICAgICAgZm9yIChjb25zdCBpZCBpbiBwb2xpY2llcykge1xuICAgICAgICAgICAgICAgIGlmIChwb2xpY2llcy5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UucHVzaChuZXcgUG9saWN5KHBvbGljaWVzW2lkXSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucG9saWN5Q2FjaGUgPSByZXNwb25zZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZSAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wb2xpY3lDYWNoZS5maWx0ZXIoKHApID0+IHAudHlwZSA9PT0gdHlwZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wb2xpY3lDYWNoZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIHJlcGxhY2UocG9saWNpZXM6IHsgW2lkOiBzdHJpbmddOiBQb2xpY3lEYXRhOyB9KTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgY29uc3QgdXNlcklkID0gYXdhaXQgdGhpcy51c2VyU2VydmljZS5nZXRVc2VySWQoKTtcbiAgICAgICAgYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5zYXZlKEtleXMucG9saWNpZXNQcmVmaXggKyB1c2VySWQsIHBvbGljaWVzKTtcbiAgICAgICAgdGhpcy5wb2xpY3lDYWNoZSA9IG51bGw7XG4gICAgfVxuXG4gICAgYXN5bmMgY2xlYXIodXNlcklkOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLnJlbW92ZShLZXlzLnBvbGljaWVzUHJlZml4ICsgdXNlcklkKTtcbiAgICAgICAgdGhpcy5wb2xpY3lDYWNoZSA9IG51bGw7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0TWFzdGVyUGFzc3dvcmRQb2xpY3lPcHRpb25zKHBvbGljaWVzPzogUG9saWN5W10pOiBQcm9taXNlPE1hc3RlclBhc3N3b3JkUG9saWN5T3B0aW9ucz4ge1xuICAgICAgICBsZXQgZW5mb3JjZWRPcHRpb25zOiBNYXN0ZXJQYXNzd29yZFBvbGljeU9wdGlvbnMgPSBudWxsO1xuXG4gICAgICAgIGlmIChwb2xpY2llcyA9PSBudWxsKSB7XG4gICAgICAgICAgICBwb2xpY2llcyA9IGF3YWl0IHRoaXMuZ2V0QWxsKFBvbGljeVR5cGUuTWFzdGVyUGFzc3dvcmQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcG9saWNpZXMgPSBwb2xpY2llcy5maWx0ZXIoKHApID0+IHAudHlwZSA9PT0gUG9saWN5VHlwZS5NYXN0ZXJQYXNzd29yZCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocG9saWNpZXMgPT0gbnVsbCB8fCBwb2xpY2llcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBlbmZvcmNlZE9wdGlvbnM7XG4gICAgICAgIH1cblxuICAgICAgICBwb2xpY2llcy5mb3JFYWNoKChjdXJyZW50UG9saWN5KSA9PiB7XG4gICAgICAgICAgICBpZiAoIWN1cnJlbnRQb2xpY3kuZW5hYmxlZCB8fCBjdXJyZW50UG9saWN5LmRhdGEgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGVuZm9yY2VkT3B0aW9ucyA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgZW5mb3JjZWRPcHRpb25zID0gbmV3IE1hc3RlclBhc3N3b3JkUG9saWN5T3B0aW9ucygpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY3VycmVudFBvbGljeS5kYXRhLm1pbkNvbXBsZXhpdHkgIT0gbnVsbFxuICAgICAgICAgICAgICAgICYmIGN1cnJlbnRQb2xpY3kuZGF0YS5taW5Db21wbGV4aXR5ID4gZW5mb3JjZWRPcHRpb25zLm1pbkNvbXBsZXhpdHkpIHtcbiAgICAgICAgICAgICAgICBlbmZvcmNlZE9wdGlvbnMubWluQ29tcGxleGl0eSA9IGN1cnJlbnRQb2xpY3kuZGF0YS5taW5Db21wbGV4aXR5O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY3VycmVudFBvbGljeS5kYXRhLm1pbkxlbmd0aCAhPSBudWxsXG4gICAgICAgICAgICAgICAgJiYgY3VycmVudFBvbGljeS5kYXRhLm1pbkxlbmd0aCA+IGVuZm9yY2VkT3B0aW9ucy5taW5MZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBlbmZvcmNlZE9wdGlvbnMubWluTGVuZ3RoID0gY3VycmVudFBvbGljeS5kYXRhLm1pbkxlbmd0aDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGN1cnJlbnRQb2xpY3kuZGF0YS5yZXF1aXJlVXBwZXIpIHtcbiAgICAgICAgICAgICAgICBlbmZvcmNlZE9wdGlvbnMucmVxdWlyZVVwcGVyID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGN1cnJlbnRQb2xpY3kuZGF0YS5yZXF1aXJlTG93ZXIpIHtcbiAgICAgICAgICAgICAgICBlbmZvcmNlZE9wdGlvbnMucmVxdWlyZUxvd2VyID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGN1cnJlbnRQb2xpY3kuZGF0YS5yZXF1aXJlTnVtYmVycykge1xuICAgICAgICAgICAgICAgIGVuZm9yY2VkT3B0aW9ucy5yZXF1aXJlTnVtYmVycyA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjdXJyZW50UG9saWN5LmRhdGEucmVxdWlyZVNwZWNpYWwpIHtcbiAgICAgICAgICAgICAgICBlbmZvcmNlZE9wdGlvbnMucmVxdWlyZVNwZWNpYWwgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gZW5mb3JjZWRPcHRpb25zO1xuICAgIH1cblxuICAgIGV2YWx1YXRlTWFzdGVyUGFzc3dvcmQocGFzc3dvcmRTdHJlbmd0aDogbnVtYmVyLCBuZXdQYXNzd29yZDogc3RyaW5nLFxuICAgICAgICBlbmZvcmNlZFBvbGljeU9wdGlvbnM6IE1hc3RlclBhc3N3b3JkUG9saWN5T3B0aW9ucyk6IGJvb2xlYW4ge1xuICAgICAgICBpZiAoZW5mb3JjZWRQb2xpY3lPcHRpb25zID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVuZm9yY2VkUG9saWN5T3B0aW9ucy5taW5Db21wbGV4aXR5ID4gMCAmJiBlbmZvcmNlZFBvbGljeU9wdGlvbnMubWluQ29tcGxleGl0eSA+IHBhc3N3b3JkU3RyZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbmZvcmNlZFBvbGljeU9wdGlvbnMubWluTGVuZ3RoID4gMCAmJiBlbmZvcmNlZFBvbGljeU9wdGlvbnMubWluTGVuZ3RoID4gbmV3UGFzc3dvcmQubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZW5mb3JjZWRQb2xpY3lPcHRpb25zLnJlcXVpcmVVcHBlciAmJiBuZXdQYXNzd29yZC50b0xvY2FsZUxvd2VyQ2FzZSgpID09PSBuZXdQYXNzd29yZCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVuZm9yY2VkUG9saWN5T3B0aW9ucy5yZXF1aXJlTG93ZXIgJiYgbmV3UGFzc3dvcmQudG9Mb2NhbGVVcHBlckNhc2UoKSA9PT0gbmV3UGFzc3dvcmQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbmZvcmNlZFBvbGljeU9wdGlvbnMucmVxdWlyZU51bWJlcnMgJiYgISgvWzAtOV0vLnRlc3QobmV3UGFzc3dvcmQpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVuZm9yY2VkUG9saWN5T3B0aW9ucy5yZXF1aXJlU3BlY2lhbCAmJiAhKC9bIUAjJCVcXF4mKl0vZy50ZXN0KG5ld1Bhc3N3b3JkKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IE1lc3NhZ2luZ1NlcnZpY2UgfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvbWVzc2FnaW5nLnNlcnZpY2UnO1xuaW1wb3J0IHsgUGxhdGZvcm1VdGlsc1NlcnZpY2UgfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvcGxhdGZvcm1VdGlscy5zZXJ2aWNlJztcbmltcG9ydCB7IFN0b3JhZ2VTZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL3N0b3JhZ2Uuc2VydmljZSc7XG5pbXBvcnQgeyBTeXN0ZW1TZXJ2aWNlIGFzIFN5c3RlbVNlcnZpY2VBYnN0cmFjdGlvbiB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9zeXN0ZW0uc2VydmljZSc7XG5pbXBvcnQgeyBWYXVsdFRpbWVvdXRTZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL3ZhdWx0VGltZW91dC5zZXJ2aWNlJztcblxuaW1wb3J0IHsgQ29uc3RhbnRzU2VydmljZSB9IGZyb20gJy4vY29uc3RhbnRzLnNlcnZpY2UnO1xuXG5pbXBvcnQgeyBVdGlscyB9IGZyb20gJy4uL21pc2MvdXRpbHMnO1xuXG5leHBvcnQgY2xhc3MgU3lzdGVtU2VydmljZSBpbXBsZW1lbnRzIFN5c3RlbVNlcnZpY2VBYnN0cmFjdGlvbiB7XG4gICAgcHJpdmF0ZSByZWxvYWRJbnRlcnZhbDogYW55ID0gbnVsbDtcbiAgICBwcml2YXRlIGNsZWFyQ2xpcGJvYXJkVGltZW91dDogYW55ID0gbnVsbDtcbiAgICBwcml2YXRlIGNsZWFyQ2xpcGJvYXJkVGltZW91dEZ1bmN0aW9uOiAoKSA9PiBQcm9taXNlPGFueT4gPSBudWxsO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBzdG9yYWdlU2VydmljZTogU3RvcmFnZVNlcnZpY2UsIHByaXZhdGUgdmF1bHRUaW1lb3V0U2VydmljZTogVmF1bHRUaW1lb3V0U2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBtZXNzYWdpbmdTZXJ2aWNlOiBNZXNzYWdpbmdTZXJ2aWNlLCBwcml2YXRlIHBsYXRmb3JtVXRpbHNTZXJ2aWNlOiBQbGF0Zm9ybVV0aWxzU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSByZWxvYWRDYWxsYmFjazogKCkgPT4gUHJvbWlzZTx2b2lkPiA9IG51bGwpIHtcbiAgICB9XG5cbiAgICBzdGFydFByb2Nlc3NSZWxvYWQoKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLnZhdWx0VGltZW91dFNlcnZpY2UucGluUHJvdGVjdGVkS2V5ICE9IG51bGwgfHwgdGhpcy5yZWxvYWRJbnRlcnZhbCAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jYW5jZWxQcm9jZXNzUmVsb2FkKCk7XG4gICAgICAgIHRoaXMucmVsb2FkSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBsZXQgZG9SZWZyZXNoID0gZmFsc2U7XG4gICAgICAgICAgICBjb25zdCBsYXN0QWN0aXZlID0gYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5nZXQ8bnVtYmVyPihDb25zdGFudHNTZXJ2aWNlLmxhc3RBY3RpdmVLZXkpO1xuICAgICAgICAgICAgaWYgKGxhc3RBY3RpdmUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRpZmZTZWNvbmRzID0gKG5ldyBEYXRlKCkpLmdldFRpbWUoKSAtIGxhc3RBY3RpdmU7XG4gICAgICAgICAgICAgICAgLy8gRG9uJ3QgcmVmcmVzaCBpZiB0aGV5IGFyZSBzdGlsbCBhY3RpdmUgaW4gdGhlIHdpbmRvd1xuICAgICAgICAgICAgICAgIGRvUmVmcmVzaCA9IGRpZmZTZWNvbmRzID49IDUwMDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZG9SZWZyZXNoKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLnJlbG9hZEludGVydmFsKTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbG9hZEludGVydmFsID0gbnVsbDtcbiAgICAgICAgICAgICAgICB0aGlzLm1lc3NhZ2luZ1NlcnZpY2Uuc2VuZCgncmVsb2FkUHJvY2VzcycpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnJlbG9hZENhbGxiYWNrICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5yZWxvYWRDYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgMTAwMDApO1xuICAgIH1cblxuICAgIGNhbmNlbFByb2Nlc3NSZWxvYWQoKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLnJlbG9hZEludGVydmFsICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5yZWxvYWRJbnRlcnZhbCk7XG4gICAgICAgICAgICB0aGlzLnJlbG9hZEludGVydmFsID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNsZWFyQ2xpcGJvYXJkKGNsaXBib2FyZFZhbHVlOiBzdHJpbmcsIHRpbWVvdXRNczogbnVtYmVyID0gbnVsbCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5jbGVhckNsaXBib2FyZFRpbWVvdXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuY2xlYXJDbGlwYm9hcmRUaW1lb3V0KTtcbiAgICAgICAgICAgIHRoaXMuY2xlYXJDbGlwYm9hcmRUaW1lb3V0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoVXRpbHMuaXNOdWxsT3JXaGl0ZXNwYWNlKGNsaXBib2FyZFZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3RvcmFnZVNlcnZpY2UuZ2V0PG51bWJlcj4oQ29uc3RhbnRzU2VydmljZS5jbGVhckNsaXBib2FyZEtleSkudGhlbigoY2xlYXJTZWNvbmRzKSA9PiB7XG4gICAgICAgICAgICBpZiAoY2xlYXJTZWNvbmRzID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGltZW91dE1zID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aW1lb3V0TXMgPSBjbGVhclNlY29uZHMgKiAxMDAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5jbGVhckNsaXBib2FyZFRpbWVvdXRGdW5jdGlvbiA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBjbGlwYm9hcmRWYWx1ZU5vdyA9IGF3YWl0IHRoaXMucGxhdGZvcm1VdGlsc1NlcnZpY2UucmVhZEZyb21DbGlwYm9hcmQoKTtcbiAgICAgICAgICAgICAgICBpZiAoY2xpcGJvYXJkVmFsdWUgPT09IGNsaXBib2FyZFZhbHVlTm93KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGxhdGZvcm1VdGlsc1NlcnZpY2UuY29weVRvQ2xpcGJvYXJkKCcnLCB7IGNsZWFyaW5nOiB0cnVlIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLmNsZWFyQ2xpcGJvYXJkVGltZW91dCA9IHNldFRpbWVvdXQoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuY2xlYXJQZW5kaW5nQ2xpcGJvYXJkKCk7XG4gICAgICAgICAgICB9LCB0aW1lb3V0TXMpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBhc3luYyBjbGVhclBlbmRpbmdDbGlwYm9hcmQoKSB7XG4gICAgICAgIGlmICh0aGlzLmNsZWFyQ2xpcGJvYXJkVGltZW91dEZ1bmN0aW9uICE9IG51bGwpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuY2xlYXJDbGlwYm9hcmRUaW1lb3V0RnVuY3Rpb24oKTtcbiAgICAgICAgICAgIHRoaXMuY2xlYXJDbGlwYm9hcmRUaW1lb3V0RnVuY3Rpb24gPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiZXhwb3J0IGNsYXNzIERlY3J5cHRQYXJhbWV0ZXJzPFQ+IHtcbiAgICBlbmNLZXk6IFQ7XG4gICAgZGF0YTogVDtcbiAgICBpdjogVDtcbiAgICBtYWNLZXk6IFQ7XG4gICAgbWFjOiBUO1xuICAgIG1hY0RhdGE6IFQ7XG59XG4iLCJpbXBvcnQgKiBhcyBmb3JnZSBmcm9tICdub2RlLWZvcmdlJztcblxuaW1wb3J0IHsgQ3J5cHRvRnVuY3Rpb25TZXJ2aWNlIH0gZnJvbSAnLi4vYWJzdHJhY3Rpb25zL2NyeXB0b0Z1bmN0aW9uLnNlcnZpY2UnO1xuaW1wb3J0IHsgUGxhdGZvcm1VdGlsc1NlcnZpY2UgfSBmcm9tICcuLi9hYnN0cmFjdGlvbnMvcGxhdGZvcm1VdGlscy5zZXJ2aWNlJztcblxuaW1wb3J0IHsgVXRpbHMgfSBmcm9tICcuLi9taXNjL3V0aWxzJztcblxuaW1wb3J0IHsgRGVjcnlwdFBhcmFtZXRlcnMgfSBmcm9tICcuLi9tb2RlbHMvZG9tYWluL2RlY3J5cHRQYXJhbWV0ZXJzJztcbmltcG9ydCB7IFN5bW1ldHJpY0NyeXB0b0tleSB9IGZyb20gJy4uL21vZGVscy9kb21haW4vc3ltbWV0cmljQ3J5cHRvS2V5JztcblxuZXhwb3J0IGNsYXNzIFdlYkNyeXB0b0Z1bmN0aW9uU2VydmljZSBpbXBsZW1lbnRzIENyeXB0b0Z1bmN0aW9uU2VydmljZSB7XG4gICAgcHJpdmF0ZSBjcnlwdG86IENyeXB0bztcbiAgICBwcml2YXRlIHN1YnRsZTogU3VidGxlQ3J5cHRvO1xuICAgIHByaXZhdGUgaXNJRTogYm9vbGVhbjtcbiAgICBwcml2YXRlIGlzT2xkU2FmYXJpOiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSB3aW46IFdpbmRvdywgcHJpdmF0ZSBwbGF0Zm9ybVV0aWxzU2VydmljZTogUGxhdGZvcm1VdGlsc1NlcnZpY2UpIHtcbiAgICAgICAgdGhpcy5jcnlwdG8gPSB0eXBlb2Ygd2luLmNyeXB0byAhPT0gJ3VuZGVmaW5lZCcgPyB3aW4uY3J5cHRvIDogbnVsbDtcbiAgICAgICAgdGhpcy5zdWJ0bGUgPSAoISF0aGlzLmNyeXB0byAmJiB0eXBlb2Ygd2luLmNyeXB0by5zdWJ0bGUgIT09ICd1bmRlZmluZWQnKSA/IHdpbi5jcnlwdG8uc3VidGxlIDogbnVsbDtcbiAgICAgICAgdGhpcy5pc0lFID0gcGxhdGZvcm1VdGlsc1NlcnZpY2UuaXNJRSgpO1xuICAgICAgICBjb25zdCB1YSA9IHdpbi5uYXZpZ2F0b3IudXNlckFnZW50O1xuICAgICAgICB0aGlzLmlzT2xkU2FmYXJpID0gcGxhdGZvcm1VdGlsc1NlcnZpY2UuaXNTYWZhcmkoKSAmJlxuICAgICAgICAgICAgKHVhLmluZGV4T2YoJyBWZXJzaW9uLzEwLicpID4gLTEgfHwgdWEuaW5kZXhPZignIFZlcnNpb24vOS4nKSA+IC0xKTtcbiAgICB9XG5cbiAgICBhc3luYyBwYmtkZjIocGFzc3dvcmQ6IHN0cmluZyB8IEFycmF5QnVmZmVyLCBzYWx0OiBzdHJpbmcgfCBBcnJheUJ1ZmZlciwgYWxnb3JpdGhtOiAnc2hhMjU2JyB8ICdzaGE1MTInLFxuICAgICAgICBpdGVyYXRpb25zOiBudW1iZXIpOiBQcm9taXNlPEFycmF5QnVmZmVyPiB7XG4gICAgICAgIGlmICh0aGlzLmlzSUUgfHwgdGhpcy5pc09sZFNhZmFyaSkge1xuICAgICAgICAgICAgY29uc3QgZm9yZ2VMZW4gPSBhbGdvcml0aG0gPT09ICdzaGEyNTYnID8gMzIgOiA2NDtcbiAgICAgICAgICAgIGNvbnN0IHBhc3N3b3JkQnl0ZXMgPSB0aGlzLnRvQnl0ZVN0cmluZyhwYXNzd29yZCk7XG4gICAgICAgICAgICBjb25zdCBzYWx0Qnl0ZXMgPSB0aGlzLnRvQnl0ZVN0cmluZyhzYWx0KTtcbiAgICAgICAgICAgIGNvbnN0IGRlcml2ZWRLZXlCeXRlcyA9IChmb3JnZSBhcyBhbnkpLnBia2RmMihwYXNzd29yZEJ5dGVzLCBzYWx0Qnl0ZXMsIGl0ZXJhdGlvbnMsIGZvcmdlTGVuLCBhbGdvcml0aG0pO1xuICAgICAgICAgICAgcmV0dXJuIFV0aWxzLmZyb21CeXRlU3RyaW5nVG9BcnJheShkZXJpdmVkS2V5Qnl0ZXMpLmJ1ZmZlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHdjTGVuID0gYWxnb3JpdGhtID09PSAnc2hhMjU2JyA/IDI1NiA6IDUxMjtcbiAgICAgICAgY29uc3QgcGFzc3dvcmRCdWYgPSB0aGlzLnRvQnVmKHBhc3N3b3JkKTtcbiAgICAgICAgY29uc3Qgc2FsdEJ1ZiA9IHRoaXMudG9CdWYoc2FsdCk7XG5cbiAgICAgICAgY29uc3QgcGJrZGYyUGFyYW1zOiBQYmtkZjJQYXJhbXMgPSB7XG4gICAgICAgICAgICBuYW1lOiAnUEJLREYyJyxcbiAgICAgICAgICAgIHNhbHQ6IHNhbHRCdWYsXG4gICAgICAgICAgICBpdGVyYXRpb25zOiBpdGVyYXRpb25zLFxuICAgICAgICAgICAgaGFzaDogeyBuYW1lOiB0aGlzLnRvV2ViQ3J5cHRvQWxnb3JpdGhtKGFsZ29yaXRobSkgfSxcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBpbXBLZXkgPSBhd2FpdCB0aGlzLnN1YnRsZS5pbXBvcnRLZXkoJ3JhdycsIHBhc3N3b3JkQnVmLCB7IG5hbWU6ICdQQktERjInIH0gYXMgYW55LFxuICAgICAgICAgICAgZmFsc2UsIFsnZGVyaXZlQml0cyddKTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuc3VidGxlLmRlcml2ZUJpdHMocGJrZGYyUGFyYW1zLCBpbXBLZXksIHdjTGVuKTtcbiAgICB9XG5cbiAgICBhc3luYyBoa2RmKGlrbTogQXJyYXlCdWZmZXIsIHNhbHQ6IHN0cmluZyB8IEFycmF5QnVmZmVyLCBpbmZvOiBzdHJpbmcgfCBBcnJheUJ1ZmZlcixcbiAgICAgICAgb3V0cHV0Qnl0ZVNpemU6IG51bWJlciwgYWxnb3JpdGhtOiAnc2hhMjU2JyB8ICdzaGE1MTInKTogUHJvbWlzZTxBcnJheUJ1ZmZlcj4ge1xuICAgICAgICBjb25zdCBzYWx0QnVmID0gdGhpcy50b0J1ZihzYWx0KTtcbiAgICAgICAgY29uc3QgaW5mb0J1ZiA9IHRoaXMudG9CdWYoaW5mbyk7XG5cbiAgICAgICAgY29uc3QgaGtkZlBhcmFtczogSGtkZlBhcmFtcyA9IHtcbiAgICAgICAgICAgIG5hbWU6ICdIS0RGJyxcbiAgICAgICAgICAgIHNhbHQ6IHNhbHRCdWYsXG4gICAgICAgICAgICBpbmZvOiBpbmZvQnVmLFxuICAgICAgICAgICAgaGFzaDogeyBuYW1lOiB0aGlzLnRvV2ViQ3J5cHRvQWxnb3JpdGhtKGFsZ29yaXRobSkgfSxcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBpbXBLZXkgPSBhd2FpdCB0aGlzLnN1YnRsZS5pbXBvcnRLZXkoJ3JhdycsIGlrbSwgeyBuYW1lOiAnSEtERicgfSBhcyBhbnksXG4gICAgICAgICAgICBmYWxzZSwgWydkZXJpdmVCaXRzJ10pO1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5zdWJ0bGUuZGVyaXZlQml0cyhoa2RmUGFyYW1zIGFzIGFueSwgaW1wS2V5LCBvdXRwdXRCeXRlU2l6ZSAqIDgpO1xuICAgIH1cblxuICAgIC8vIHJlZjogaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzU4NjlcbiAgICBhc3luYyBoa2RmRXhwYW5kKHByazogQXJyYXlCdWZmZXIsIGluZm86IHN0cmluZyB8IEFycmF5QnVmZmVyLCBvdXRwdXRCeXRlU2l6ZTogbnVtYmVyLFxuICAgICAgICBhbGdvcml0aG06ICdzaGEyNTYnIHwgJ3NoYTUxMicpOiBQcm9taXNlPEFycmF5QnVmZmVyPiB7XG4gICAgICAgIGNvbnN0IGhhc2hMZW4gPSBhbGdvcml0aG0gPT09ICdzaGEyNTYnID8gMzIgOiA2NDtcbiAgICAgICAgaWYgKG91dHB1dEJ5dGVTaXplID4gMjU1ICogaGFzaExlbikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdvdXRwdXRCeXRlU2l6ZSBpcyB0b28gbGFyZ2UuJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcHJrQXJyID0gbmV3IFVpbnQ4QXJyYXkocHJrKTtcbiAgICAgICAgaWYgKHBya0Fyci5sZW5ndGggPCBoYXNoTGVuKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3ByayBpcyB0b28gc21hbGwuJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaW5mb0J1ZiA9IHRoaXMudG9CdWYoaW5mbyk7XG4gICAgICAgIGNvbnN0IGluZm9BcnIgPSBuZXcgVWludDhBcnJheShpbmZvQnVmKTtcbiAgICAgICAgbGV0IHJ1bm5pbmdPa21MZW5ndGggPSAwO1xuICAgICAgICBsZXQgcHJldmlvdXNUID0gbmV3IFVpbnQ4QXJyYXkoMCk7XG4gICAgICAgIGNvbnN0IG4gPSBNYXRoLmNlaWwob3V0cHV0Qnl0ZVNpemUgLyBoYXNoTGVuKTtcbiAgICAgICAgY29uc3Qgb2ttID0gbmV3IFVpbnQ4QXJyYXkobiAqIGhhc2hMZW4pO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgY29uc3QgdCA9IG5ldyBVaW50OEFycmF5KHByZXZpb3VzVC5sZW5ndGggKyBpbmZvQXJyLmxlbmd0aCArIDEpO1xuICAgICAgICAgICAgdC5zZXQocHJldmlvdXNUKTtcbiAgICAgICAgICAgIHQuc2V0KGluZm9BcnIsIHByZXZpb3VzVC5sZW5ndGgpO1xuICAgICAgICAgICAgdC5zZXQoW2kgKyAxXSwgdC5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgIHByZXZpb3VzVCA9IG5ldyBVaW50OEFycmF5KGF3YWl0IHRoaXMuaG1hYyh0LmJ1ZmZlciwgcHJrLCBhbGdvcml0aG0pKTtcbiAgICAgICAgICAgIG9rbS5zZXQocHJldmlvdXNULCBydW5uaW5nT2ttTGVuZ3RoKTtcbiAgICAgICAgICAgIHJ1bm5pbmdPa21MZW5ndGggKz0gcHJldmlvdXNULmxlbmd0aDtcbiAgICAgICAgICAgIGlmIChydW5uaW5nT2ttTGVuZ3RoID49IG91dHB1dEJ5dGVTaXplKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9rbS5zbGljZSgwLCBvdXRwdXRCeXRlU2l6ZSkuYnVmZmVyO1xuICAgIH1cblxuICAgIGFzeW5jIGhhc2godmFsdWU6IHN0cmluZyB8IEFycmF5QnVmZmVyLCBhbGdvcml0aG06ICdzaGExJyB8ICdzaGEyNTYnIHwgJ3NoYTUxMicgfCAnbWQ1Jyk6IFByb21pc2U8QXJyYXlCdWZmZXI+IHtcbiAgICAgICAgaWYgKCh0aGlzLmlzSUUgJiYgYWxnb3JpdGhtID09PSAnc2hhMScpIHx8IGFsZ29yaXRobSA9PT0gJ21kNScpIHtcbiAgICAgICAgICAgIGNvbnN0IG1kID0gYWxnb3JpdGhtID09PSAnbWQ1JyA/IGZvcmdlLm1kLm1kNS5jcmVhdGUoKSA6IGZvcmdlLm1kLnNoYTEuY3JlYXRlKCk7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZUJ5dGVzID0gdGhpcy50b0J5dGVTdHJpbmcodmFsdWUpO1xuICAgICAgICAgICAgbWQudXBkYXRlKHZhbHVlQnl0ZXMsICdyYXcnKTtcbiAgICAgICAgICAgIHJldHVybiBVdGlscy5mcm9tQnl0ZVN0cmluZ1RvQXJyYXkobWQuZGlnZXN0KCkuZGF0YSkuYnVmZmVyO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdmFsdWVCdWYgPSB0aGlzLnRvQnVmKHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuc3VidGxlLmRpZ2VzdCh7IG5hbWU6IHRoaXMudG9XZWJDcnlwdG9BbGdvcml0aG0oYWxnb3JpdGhtKSB9LCB2YWx1ZUJ1Zik7XG4gICAgfVxuXG4gICAgYXN5bmMgaG1hYyh2YWx1ZTogQXJyYXlCdWZmZXIsIGtleTogQXJyYXlCdWZmZXIsIGFsZ29yaXRobTogJ3NoYTEnIHwgJ3NoYTI1NicgfCAnc2hhNTEyJyk6IFByb21pc2U8QXJyYXlCdWZmZXI+IHtcbiAgICAgICAgaWYgKHRoaXMuaXNJRSAmJiBhbGdvcml0aG0gPT09ICdzaGE1MTInKSB7XG4gICAgICAgICAgICBjb25zdCBobWFjID0gKGZvcmdlIGFzIGFueSkuaG1hYy5jcmVhdGUoKTtcbiAgICAgICAgICAgIGNvbnN0IGtleUJ5dGVzID0gdGhpcy50b0J5dGVTdHJpbmcoa2V5KTtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlQnl0ZXMgPSB0aGlzLnRvQnl0ZVN0cmluZyh2YWx1ZSk7XG4gICAgICAgICAgICBobWFjLnN0YXJ0KGFsZ29yaXRobSwga2V5Qnl0ZXMpO1xuICAgICAgICAgICAgaG1hYy51cGRhdGUodmFsdWVCeXRlcywgJ3JhdycpO1xuICAgICAgICAgICAgcmV0dXJuIFV0aWxzLmZyb21CeXRlU3RyaW5nVG9BcnJheShobWFjLmRpZ2VzdCgpLmRhdGEpLmJ1ZmZlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHNpZ25pbmdBbGdvcml0aG0gPSB7XG4gICAgICAgICAgICBuYW1lOiAnSE1BQycsXG4gICAgICAgICAgICBoYXNoOiB7IG5hbWU6IHRoaXMudG9XZWJDcnlwdG9BbGdvcml0aG0oYWxnb3JpdGhtKSB9LFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGltcEtleSA9IGF3YWl0IHRoaXMuc3VidGxlLmltcG9ydEtleSgncmF3Jywga2V5LCBzaWduaW5nQWxnb3JpdGhtLCBmYWxzZSwgWydzaWduJ10pO1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5zdWJ0bGUuc2lnbihzaWduaW5nQWxnb3JpdGhtLCBpbXBLZXksIHZhbHVlKTtcbiAgICB9XG5cbiAgICAvLyBTYWZlbHkgY29tcGFyZSB0d28gdmFsdWVzIGluIGEgd2F5IHRoYXQgcHJvdGVjdHMgYWdhaW5zdCB0aW1pbmcgYXR0YWNrcyAoRG91YmxlIEhNQUMgVmVyaWZpY2F0aW9uKS5cbiAgICAvLyByZWY6IGh0dHBzOi8vd3d3Lm5jY2dyb3VwLnRydXN0L3VzL2Fib3V0LXVzL25ld3Nyb29tLWFuZC1ldmVudHMvYmxvZy8yMDExL2ZlYnJ1YXJ5L2RvdWJsZS1obWFjLXZlcmlmaWNhdGlvbi9cbiAgICAvLyByZWY6IGh0dHBzOi8vcGFyYWdvbmllLmNvbS9ibG9nLzIwMTUvMTEvcHJldmVudGluZy10aW1pbmctYXR0YWNrcy1vbi1zdHJpbmctY29tcGFyaXNvbi13aXRoLWRvdWJsZS1obWFjLXN0cmF0ZWd5XG4gICAgYXN5bmMgY29tcGFyZShhOiBBcnJheUJ1ZmZlciwgYjogQXJyYXlCdWZmZXIpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgICAgY29uc3QgbWFjS2V5ID0gYXdhaXQgdGhpcy5yYW5kb21CeXRlcygzMik7XG4gICAgICAgIGNvbnN0IHNpZ25pbmdBbGdvcml0aG0gPSB7XG4gICAgICAgICAgICBuYW1lOiAnSE1BQycsXG4gICAgICAgICAgICBoYXNoOiB7IG5hbWU6ICdTSEEtMjU2JyB9LFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBpbXBLZXkgPSBhd2FpdCB0aGlzLnN1YnRsZS5pbXBvcnRLZXkoJ3JhdycsIG1hY0tleSwgc2lnbmluZ0FsZ29yaXRobSwgZmFsc2UsIFsnc2lnbiddKTtcbiAgICAgICAgY29uc3QgbWFjMSA9IGF3YWl0IHRoaXMuc3VidGxlLnNpZ24oc2lnbmluZ0FsZ29yaXRobSwgaW1wS2V5LCBhKTtcbiAgICAgICAgY29uc3QgbWFjMiA9IGF3YWl0IHRoaXMuc3VidGxlLnNpZ24oc2lnbmluZ0FsZ29yaXRobSwgaW1wS2V5LCBiKTtcblxuICAgICAgICBpZiAobWFjMS5ieXRlTGVuZ3RoICE9PSBtYWMyLmJ5dGVMZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGFycjEgPSBuZXcgVWludDhBcnJheShtYWMxKTtcbiAgICAgICAgY29uc3QgYXJyMiA9IG5ldyBVaW50OEFycmF5KG1hYzIpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFycjIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChhcnIxW2ldICE9PSBhcnIyW2ldKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaG1hY0Zhc3QodmFsdWU6IHN0cmluZywga2V5OiBzdHJpbmcsIGFsZ29yaXRobTogJ3NoYTEnIHwgJ3NoYTI1NicgfCAnc2hhNTEyJyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgICAgIGNvbnN0IGhtYWMgPSAoZm9yZ2UgYXMgYW55KS5obWFjLmNyZWF0ZSgpO1xuICAgICAgICBobWFjLnN0YXJ0KGFsZ29yaXRobSwga2V5KTtcbiAgICAgICAgaG1hYy51cGRhdGUodmFsdWUpO1xuICAgICAgICBjb25zdCBieXRlcyA9IGhtYWMuZGlnZXN0KCkuZ2V0Qnl0ZXMoKTtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShieXRlcyk7XG4gICAgfVxuXG4gICAgYXN5bmMgY29tcGFyZUZhc3QoYTogc3RyaW5nLCBiOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgICAgY29uc3QgcmFuZCA9IGF3YWl0IHRoaXMucmFuZG9tQnl0ZXMoMzIpO1xuICAgICAgICBjb25zdCBieXRlcyA9IG5ldyBVaW50MzJBcnJheShyYW5kKTtcbiAgICAgICAgY29uc3QgYnVmZmVyID0gZm9yZ2UudXRpbC5jcmVhdGVCdWZmZXIoKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYnVmZmVyLnB1dEludDMyKGJ5dGVzW2ldKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtYWNLZXkgPSBidWZmZXIuZ2V0Qnl0ZXMoKTtcblxuICAgICAgICBjb25zdCBobWFjID0gKGZvcmdlIGFzIGFueSkuaG1hYy5jcmVhdGUoKTtcbiAgICAgICAgaG1hYy5zdGFydCgnc2hhMjU2JywgbWFjS2V5KTtcbiAgICAgICAgaG1hYy51cGRhdGUoYSk7XG4gICAgICAgIGNvbnN0IG1hYzEgPSBobWFjLmRpZ2VzdCgpLmdldEJ5dGVzKCk7XG5cbiAgICAgICAgaG1hYy5zdGFydChudWxsLCBudWxsKTtcbiAgICAgICAgaG1hYy51cGRhdGUoYik7XG4gICAgICAgIGNvbnN0IG1hYzIgPSBobWFjLmRpZ2VzdCgpLmdldEJ5dGVzKCk7XG5cbiAgICAgICAgY29uc3QgZXF1YWxzID0gbWFjMSA9PT0gbWFjMjtcbiAgICAgICAgcmV0dXJuIGVxdWFscztcbiAgICB9XG5cbiAgICBhc3luYyBhZXNFbmNyeXB0KGRhdGE6IEFycmF5QnVmZmVyLCBpdjogQXJyYXlCdWZmZXIsIGtleTogQXJyYXlCdWZmZXIpOiBQcm9taXNlPEFycmF5QnVmZmVyPiB7XG4gICAgICAgIGNvbnN0IGltcEtleSA9IGF3YWl0IHRoaXMuc3VidGxlLmltcG9ydEtleSgncmF3Jywga2V5LCB7IG5hbWU6ICdBRVMtQ0JDJyB9IGFzIGFueSwgZmFsc2UsIFsnZW5jcnlwdCddKTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuc3VidGxlLmVuY3J5cHQoeyBuYW1lOiAnQUVTLUNCQycsIGl2OiBpdiB9LCBpbXBLZXksIGRhdGEpO1xuICAgIH1cblxuICAgIGFlc0RlY3J5cHRGYXN0UGFyYW1ldGVycyhkYXRhOiBzdHJpbmcsIGl2OiBzdHJpbmcsIG1hYzogc3RyaW5nLCBrZXk6IFN5bW1ldHJpY0NyeXB0b0tleSk6XG4gICAgICAgIERlY3J5cHRQYXJhbWV0ZXJzPHN0cmluZz4ge1xuICAgICAgICBjb25zdCBwID0gbmV3IERlY3J5cHRQYXJhbWV0ZXJzPHN0cmluZz4oKTtcbiAgICAgICAgaWYgKGtleS5tZXRhICE9IG51bGwpIHtcbiAgICAgICAgICAgIHAuZW5jS2V5ID0ga2V5Lm1ldGEuZW5jS2V5Qnl0ZVN0cmluZztcbiAgICAgICAgICAgIHAubWFjS2V5ID0ga2V5Lm1ldGEubWFjS2V5Qnl0ZVN0cmluZztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwLmVuY0tleSA9PSBudWxsKSB7XG4gICAgICAgICAgICBwLmVuY0tleSA9IGZvcmdlLnV0aWwuZGVjb2RlNjQoa2V5LmVuY0tleUI2NCk7XG4gICAgICAgIH1cbiAgICAgICAgcC5kYXRhID0gZm9yZ2UudXRpbC5kZWNvZGU2NChkYXRhKTtcbiAgICAgICAgcC5pdiA9IGZvcmdlLnV0aWwuZGVjb2RlNjQoaXYpO1xuICAgICAgICBwLm1hY0RhdGEgPSBwLml2ICsgcC5kYXRhO1xuICAgICAgICBpZiAocC5tYWNLZXkgPT0gbnVsbCAmJiBrZXkubWFjS2V5QjY0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHAubWFjS2V5ID0gZm9yZ2UudXRpbC5kZWNvZGU2NChrZXkubWFjS2V5QjY0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWFjICE9IG51bGwpIHtcbiAgICAgICAgICAgIHAubWFjID0gZm9yZ2UudXRpbC5kZWNvZGU2NChtYWMpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY2FjaGUgYnl0ZSBzdHJpbmcga2V5cyBmb3IgbGF0ZXJcbiAgICAgICAgaWYgKGtleS5tZXRhID09IG51bGwpIHtcbiAgICAgICAgICAgIGtleS5tZXRhID0ge307XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGtleS5tZXRhLmVuY0tleUJ5dGVTdHJpbmcgPT0gbnVsbCkge1xuICAgICAgICAgICAga2V5Lm1ldGEuZW5jS2V5Qnl0ZVN0cmluZyA9IHAuZW5jS2V5O1xuICAgICAgICB9XG4gICAgICAgIGlmIChwLm1hY0tleSAhPSBudWxsICYmIGtleS5tZXRhLm1hY0tleUJ5dGVTdHJpbmcgPT0gbnVsbCkge1xuICAgICAgICAgICAga2V5Lm1ldGEubWFjS2V5Qnl0ZVN0cmluZyA9IHAubWFjS2V5O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHA7XG4gICAgfVxuXG4gICAgYWVzRGVjcnlwdEZhc3QocGFyYW1ldGVyczogRGVjcnlwdFBhcmFtZXRlcnM8c3RyaW5nPik6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgICAgIGNvbnN0IGRhdGFCdWZmZXIgPSAoZm9yZ2UgYXMgYW55KS51dGlsLmNyZWF0ZUJ1ZmZlcihwYXJhbWV0ZXJzLmRhdGEpO1xuICAgICAgICBjb25zdCBkZWNpcGhlciA9IChmb3JnZSBhcyBhbnkpLmNpcGhlci5jcmVhdGVEZWNpcGhlcignQUVTLUNCQycsIHBhcmFtZXRlcnMuZW5jS2V5KTtcbiAgICAgICAgZGVjaXBoZXIuc3RhcnQoeyBpdjogcGFyYW1ldGVycy5pdiB9KTtcbiAgICAgICAgZGVjaXBoZXIudXBkYXRlKGRhdGFCdWZmZXIpO1xuICAgICAgICBkZWNpcGhlci5maW5pc2goKTtcbiAgICAgICAgY29uc3QgdmFsID0gZGVjaXBoZXIub3V0cHV0LnRvU3RyaW5nKCd1dGY4Jyk7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsKTtcbiAgICB9XG5cbiAgICBhc3luYyBhZXNEZWNyeXB0KGRhdGE6IEFycmF5QnVmZmVyLCBpdjogQXJyYXlCdWZmZXIsIGtleTogQXJyYXlCdWZmZXIpOiBQcm9taXNlPEFycmF5QnVmZmVyPiB7XG4gICAgICAgIGNvbnN0IGltcEtleSA9IGF3YWl0IHRoaXMuc3VidGxlLmltcG9ydEtleSgncmF3Jywga2V5LCB7IG5hbWU6ICdBRVMtQ0JDJyB9IGFzIGFueSwgZmFsc2UsIFsnZGVjcnlwdCddKTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuc3VidGxlLmRlY3J5cHQoeyBuYW1lOiAnQUVTLUNCQycsIGl2OiBpdiB9LCBpbXBLZXksIGRhdGEpO1xuICAgIH1cblxuICAgIGFzeW5jIHJzYUVuY3J5cHQoZGF0YTogQXJyYXlCdWZmZXIsIHB1YmxpY0tleTogQXJyYXlCdWZmZXIsIGFsZ29yaXRobTogJ3NoYTEnIHwgJ3NoYTI1NicpOiBQcm9taXNlPEFycmF5QnVmZmVyPiB7XG4gICAgICAgIC8vIE5vdGU6IEVkZ2UgYnJvd3NlciByZXF1aXJlcyB0aGF0IHdlIHNwZWNpZnkgbmFtZSBhbmQgaGFzaCBmb3IgYm90aCBrZXkgaW1wb3J0IGFuZCBkZWNyeXB0LlxuICAgICAgICAvLyBXZSBjYW5ub3QgdXNlIHRoZSBwcm9wZXIgdHlwZXMgaGVyZS5cbiAgICAgICAgY29uc3QgcnNhUGFyYW1zID0ge1xuICAgICAgICAgICAgbmFtZTogJ1JTQS1PQUVQJyxcbiAgICAgICAgICAgIGhhc2g6IHsgbmFtZTogdGhpcy50b1dlYkNyeXB0b0FsZ29yaXRobShhbGdvcml0aG0pIH0sXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGltcEtleSA9IGF3YWl0IHRoaXMuc3VidGxlLmltcG9ydEtleSgnc3BraScsIHB1YmxpY0tleSwgcnNhUGFyYW1zLCBmYWxzZSwgWydlbmNyeXB0J10pO1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5zdWJ0bGUuZW5jcnlwdChyc2FQYXJhbXMsIGltcEtleSwgZGF0YSk7XG4gICAgfVxuXG4gICAgYXN5bmMgcnNhRGVjcnlwdChkYXRhOiBBcnJheUJ1ZmZlciwgcHJpdmF0ZUtleTogQXJyYXlCdWZmZXIsIGFsZ29yaXRobTogJ3NoYTEnIHwgJ3NoYTI1NicpOiBQcm9taXNlPEFycmF5QnVmZmVyPiB7XG4gICAgICAgIC8vIE5vdGU6IEVkZ2UgYnJvd3NlciByZXF1aXJlcyB0aGF0IHdlIHNwZWNpZnkgbmFtZSBhbmQgaGFzaCBmb3IgYm90aCBrZXkgaW1wb3J0IGFuZCBkZWNyeXB0LlxuICAgICAgICAvLyBXZSBjYW5ub3QgdXNlIHRoZSBwcm9wZXIgdHlwZXMgaGVyZS5cbiAgICAgICAgY29uc3QgcnNhUGFyYW1zID0ge1xuICAgICAgICAgICAgbmFtZTogJ1JTQS1PQUVQJyxcbiAgICAgICAgICAgIGhhc2g6IHsgbmFtZTogdGhpcy50b1dlYkNyeXB0b0FsZ29yaXRobShhbGdvcml0aG0pIH0sXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGltcEtleSA9IGF3YWl0IHRoaXMuc3VidGxlLmltcG9ydEtleSgncGtjczgnLCBwcml2YXRlS2V5LCByc2FQYXJhbXMsIGZhbHNlLCBbJ2RlY3J5cHQnXSk7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnN1YnRsZS5kZWNyeXB0KHJzYVBhcmFtcywgaW1wS2V5LCBkYXRhKTtcbiAgICB9XG5cbiAgICBhc3luYyByc2FFeHRyYWN0UHVibGljS2V5KHByaXZhdGVLZXk6IEFycmF5QnVmZmVyKTogUHJvbWlzZTxBcnJheUJ1ZmZlcj4ge1xuICAgICAgICBjb25zdCByc2FQYXJhbXMgPSB7XG4gICAgICAgICAgICBuYW1lOiAnUlNBLU9BRVAnLFxuICAgICAgICAgICAgLy8gSGF2ZSB0byBzcGVjaWZ5IHNvbWUgYWxnb3JpdGhtXG4gICAgICAgICAgICBoYXNoOiB7IG5hbWU6IHRoaXMudG9XZWJDcnlwdG9BbGdvcml0aG0oJ3NoYTEnKSB9LFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBpbXBQcml2YXRlS2V5ID0gYXdhaXQgdGhpcy5zdWJ0bGUuaW1wb3J0S2V5KCdwa2NzOCcsIHByaXZhdGVLZXksIHJzYVBhcmFtcywgdHJ1ZSwgWydkZWNyeXB0J10pO1xuICAgICAgICBjb25zdCBqd2tQcml2YXRlS2V5ID0gYXdhaXQgdGhpcy5zdWJ0bGUuZXhwb3J0S2V5KCdqd2snLCBpbXBQcml2YXRlS2V5KTtcbiAgICAgICAgY29uc3QgandrUHVibGljS2V5UGFyYW1zID0ge1xuICAgICAgICAgICAga3R5OiAnUlNBJyxcbiAgICAgICAgICAgIGU6IGp3a1ByaXZhdGVLZXkuZSxcbiAgICAgICAgICAgIG46IGp3a1ByaXZhdGVLZXkubixcbiAgICAgICAgICAgIGFsZzogJ1JTQS1PQUVQJyxcbiAgICAgICAgICAgIGV4dDogdHJ1ZSxcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgaW1wUHVibGljS2V5ID0gYXdhaXQgdGhpcy5zdWJ0bGUuaW1wb3J0S2V5KCdqd2snLCBqd2tQdWJsaWNLZXlQYXJhbXMsIHJzYVBhcmFtcywgdHJ1ZSwgWydlbmNyeXB0J10pO1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5zdWJ0bGUuZXhwb3J0S2V5KCdzcGtpJywgaW1wUHVibGljS2V5KTtcbiAgICB9XG5cbiAgICBhc3luYyByc2FHZW5lcmF0ZUtleVBhaXIobGVuZ3RoOiAxMDI0IHwgMjA0OCB8IDQwOTYpOiBQcm9taXNlPFtBcnJheUJ1ZmZlciwgQXJyYXlCdWZmZXJdPiB7XG4gICAgICAgIGNvbnN0IHJzYVBhcmFtcyA9IHtcbiAgICAgICAgICAgIG5hbWU6ICdSU0EtT0FFUCcsXG4gICAgICAgICAgICBtb2R1bHVzTGVuZ3RoOiBsZW5ndGgsXG4gICAgICAgICAgICBwdWJsaWNFeHBvbmVudDogbmV3IFVpbnQ4QXJyYXkoWzB4MDEsIDB4MDAsIDB4MDFdKSwgLy8gNjU1MzdcbiAgICAgICAgICAgIC8vIEhhdmUgdG8gc3BlY2lmeSBzb21lIGFsZ29yaXRobVxuICAgICAgICAgICAgaGFzaDogeyBuYW1lOiB0aGlzLnRvV2ViQ3J5cHRvQWxnb3JpdGhtKCdzaGExJykgfSxcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3Qga2V5UGFpciA9IGF3YWl0IHRoaXMuc3VidGxlLmdlbmVyYXRlS2V5KHJzYVBhcmFtcywgdHJ1ZSwgWydlbmNyeXB0JywgJ2RlY3J5cHQnXSk7XG4gICAgICAgIGNvbnN0IHB1YmxpY0tleSA9IGF3YWl0IHRoaXMuc3VidGxlLmV4cG9ydEtleSgnc3BraScsIGtleVBhaXIucHVibGljS2V5KTtcbiAgICAgICAgY29uc3QgcHJpdmF0ZUtleSA9IGF3YWl0IHRoaXMuc3VidGxlLmV4cG9ydEtleSgncGtjczgnLCBrZXlQYWlyLnByaXZhdGVLZXkpO1xuICAgICAgICByZXR1cm4gW3B1YmxpY0tleSwgcHJpdmF0ZUtleV07XG4gICAgfVxuXG4gICAgcmFuZG9tQnl0ZXMobGVuZ3RoOiBudW1iZXIpOiBQcm9taXNlPEFycmF5QnVmZmVyPiB7XG4gICAgICAgIGNvbnN0IGFyciA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCk7XG4gICAgICAgIHRoaXMuY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhhcnIpO1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGFyci5idWZmZXIpO1xuICAgIH1cblxuICAgIHByaXZhdGUgdG9CdWYodmFsdWU6IHN0cmluZyB8IEFycmF5QnVmZmVyKTogQXJyYXlCdWZmZXIge1xuICAgICAgICBsZXQgYnVmOiBBcnJheUJ1ZmZlcjtcbiAgICAgICAgaWYgKHR5cGVvZiAodmFsdWUpID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgYnVmID0gVXRpbHMuZnJvbVV0ZjhUb0FycmF5KHZhbHVlKS5idWZmZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBidWYgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYnVmO1xuICAgIH1cblxuICAgIHByaXZhdGUgdG9CeXRlU3RyaW5nKHZhbHVlOiBzdHJpbmcgfCBBcnJheUJ1ZmZlcik6IHN0cmluZyB7XG4gICAgICAgIGxldCBieXRlczogc3RyaW5nO1xuICAgICAgICBpZiAodHlwZW9mICh2YWx1ZSkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBieXRlcyA9IGZvcmdlLnV0aWwuZW5jb2RlVXRmOCh2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBieXRlcyA9IFV0aWxzLmZyb21CdWZmZXJUb0J5dGVTdHJpbmcodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBieXRlcztcbiAgICB9XG5cbiAgICBwcml2YXRlIHRvV2ViQ3J5cHRvQWxnb3JpdGhtKGFsZ29yaXRobTogJ3NoYTEnIHwgJ3NoYTI1NicgfCAnc2hhNTEyJyB8ICdtZDUnKTogc3RyaW5nIHtcbiAgICAgICAgaWYgKGFsZ29yaXRobSA9PT0gJ21kNScpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTUQ1IGlzIG5vdCBzdXBwb3J0ZWQgaW4gV2ViQ3J5cHRvLicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhbGdvcml0aG0gPT09ICdzaGExJyA/ICdTSEEtMScgOiBhbGdvcml0aG0gPT09ICdzaGEyNTYnID8gJ1NIQS0yNTYnIDogJ1NIQS01MTInO1xuICAgIH1cbn1cbiIsImV4cG9ydCB7IEFuYWx5dGljcyB9IGZyb20gJy4vYW5hbHl0aWNzJztcbiIsImltcG9ydCB7IEJyb3dzZXJBcGkgfSBmcm9tICcuLi9icm93c2VyL2Jyb3dzZXJBcGknO1xuXG5pbXBvcnQgTWFpbkJhY2tncm91bmQgZnJvbSAnLi9tYWluLmJhY2tncm91bmQnO1xuXG5pbXBvcnQgeyBBbmFseXRpY3MgfSBmcm9tICdqc2xpYi9taXNjJztcblxuaW1wb3J0IHsgUGFzc3dvcmRHZW5lcmF0aW9uU2VydmljZSB9IGZyb20gJ2pzbGliL2Fic3RyYWN0aW9ucy9wYXNzd29yZEdlbmVyYXRpb24uc2VydmljZSc7XG5pbXBvcnQgeyBQbGF0Zm9ybVV0aWxzU2VydmljZSB9IGZyb20gJ2pzbGliL2Fic3RyYWN0aW9ucy9wbGF0Zm9ybVV0aWxzLnNlcnZpY2UnO1xuaW1wb3J0IHsgVmF1bHRUaW1lb3V0U2VydmljZSB9IGZyb20gJ2pzbGliL2Fic3RyYWN0aW9ucy92YXVsdFRpbWVvdXQuc2VydmljZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbW1hbmRzQmFja2dyb3VuZCB7XG4gICAgcHJpdmF0ZSBpc1NhZmFyaTogYm9vbGVhbjtcbiAgICBwcml2YXRlIGlzVml2YWxkaTogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgbWFpbjogTWFpbkJhY2tncm91bmQsIHByaXZhdGUgcGFzc3dvcmRHZW5lcmF0aW9uU2VydmljZTogUGFzc3dvcmRHZW5lcmF0aW9uU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBwbGF0Zm9ybVV0aWxzU2VydmljZTogUGxhdGZvcm1VdGlsc1NlcnZpY2UsIHByaXZhdGUgYW5hbHl0aWNzOiBBbmFseXRpY3MsXG4gICAgICAgIHByaXZhdGUgdmF1bHRUaW1lb3V0U2VydmljZTogVmF1bHRUaW1lb3V0U2VydmljZSkge1xuICAgICAgICB0aGlzLmlzU2FmYXJpID0gdGhpcy5wbGF0Zm9ybVV0aWxzU2VydmljZS5pc1NhZmFyaSgpO1xuICAgICAgICB0aGlzLmlzVml2YWxkaSA9IHRoaXMucGxhdGZvcm1VdGlsc1NlcnZpY2UuaXNWaXZhbGRpKCk7XG4gICAgfVxuXG4gICAgYXN5bmMgaW5pdCgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNTYWZhcmkgfHwgdGhpcy5pc1ZpdmFsZGkpIHtcbiAgICAgICAgICAgIEJyb3dzZXJBcGkubWVzc2FnZUxpc3RlbmVyKCdjb21tYW5kcy5iYWNrZ3JvdW5kJywgYXN5bmMgKG1zZzogYW55LCBzZW5kZXI6IGFueSwgc2VuZFJlc3BvbnNlOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAobXNnLmNvbW1hbmQgPT09ICdrZXlib2FyZFNob3J0Y3V0VHJpZ2dlcmVkJyAmJiBtc2cuc2hvcnRjdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wcm9jZXNzQ29tbWFuZChtc2cuc2hvcnRjdXQsIHNlbmRlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAoY2hyb21lICYmIGNocm9tZS5jb21tYW5kcykge1xuICAgICAgICAgICAgY2hyb21lLmNvbW1hbmRzLm9uQ29tbWFuZC5hZGRMaXN0ZW5lcihhc3luYyAoY29tbWFuZDogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wcm9jZXNzQ29tbWFuZChjb21tYW5kKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBwcm9jZXNzQ29tbWFuZChjb21tYW5kOiBzdHJpbmcsIHNlbmRlcj86IGFueSkge1xuICAgICAgICBzd2l0Y2ggKGNvbW1hbmQpIHtcbiAgICAgICAgICAgIGNhc2UgJ2dlbmVyYXRlX3Bhc3N3b3JkJzpcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmdlbmVyYXRlUGFzc3dvcmRUb0NsaXBib2FyZCgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnYXV0b2ZpbGxfbG9naW4nOlxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuYXV0b0ZpbGxMb2dpbihzZW5kZXIgPyBzZW5kZXIudGFiIDogbnVsbCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdvcGVuX3BvcHVwJzpcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLm9wZW5Qb3B1cCgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbG9ja192YXVsdCc6XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy52YXVsdFRpbWVvdXRTZXJ2aWNlLmxvY2sodHJ1ZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBnZW5lcmF0ZVBhc3N3b3JkVG9DbGlwYm9hcmQoKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSAoYXdhaXQgdGhpcy5wYXNzd29yZEdlbmVyYXRpb25TZXJ2aWNlLmdldE9wdGlvbnMoKSlbMF07XG4gICAgICAgIGNvbnN0IHBhc3N3b3JkID0gYXdhaXQgdGhpcy5wYXNzd29yZEdlbmVyYXRpb25TZXJ2aWNlLmdlbmVyYXRlUGFzc3dvcmQob3B0aW9ucyk7XG4gICAgICAgIHRoaXMucGxhdGZvcm1VdGlsc1NlcnZpY2UuY29weVRvQ2xpcGJvYXJkKHBhc3N3b3JkLCB7IHdpbmRvdzogd2luZG93IH0pO1xuICAgICAgICB0aGlzLnBhc3N3b3JkR2VuZXJhdGlvblNlcnZpY2UuYWRkSGlzdG9yeShwYXNzd29yZCk7XG5cbiAgICAgICAgdGhpcy5hbmFseXRpY3MuZ2EoJ3NlbmQnLCB7XG4gICAgICAgICAgICBoaXRUeXBlOiAnZXZlbnQnLFxuICAgICAgICAgICAgZXZlbnRBY3Rpb246ICdHZW5lcmF0ZWQgUGFzc3dvcmQgRnJvbSBDb21tYW5kJyxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBhdXRvRmlsbExvZ2luKHRhYj86IGFueSkge1xuICAgICAgICBpZiAoYXdhaXQgdGhpcy52YXVsdFRpbWVvdXRTZXJ2aWNlLmlzTG9ja2VkKCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGFiKSB7XG4gICAgICAgICAgICB0YWIgPSBhd2FpdCBCcm93c2VyQXBpLmdldFRhYkZyb21DdXJyZW50V2luZG93SWQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0YWIgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgYXdhaXQgdGhpcy5tYWluLmNvbGxlY3RQYWdlRGV0YWlsc0ZvckNvbnRlbnRTY3JpcHQodGFiLCAnYXV0b2ZpbGxfY21kJyk7XG5cbiAgICAgICAgdGhpcy5hbmFseXRpY3MuZ2EoJ3NlbmQnLCB7XG4gICAgICAgICAgICBoaXRUeXBlOiAnZXZlbnQnLFxuICAgICAgICAgICAgZXZlbnRBY3Rpb246ICdBdXRvZmlsbGVkIEZyb20gQ29tbWFuZCcsXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgb3BlblBvcHVwKCkge1xuICAgICAgICAvLyBDaHJvbWUgQVBJcyBjYW5ub3Qgb3BlbiBwb3B1cFxuICAgICAgICBpZiAoIXRoaXMuaXNTYWZhcmkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubWFpbi5vcGVuUG9wdXAoKTtcbiAgICAgICAgdGhpcy5hbmFseXRpY3MuZ2EoJ3NlbmQnLCB7XG4gICAgICAgICAgICBoaXRUeXBlOiAnZXZlbnQnLFxuICAgICAgICAgICAgZXZlbnRBY3Rpb246ICdPcGVuZWQgUG9wdXAgRnJvbSBDb21tYW5kJyxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQnJvd3NlckFwaSB9IGZyb20gJy4uL2Jyb3dzZXIvYnJvd3NlckFwaSc7XG5cbmltcG9ydCBNYWluQmFja2dyb3VuZCBmcm9tICcuL21haW4uYmFja2dyb3VuZCc7XG5cbmltcG9ydCB7IEFuYWx5dGljcyB9IGZyb20gJ2pzbGliL21pc2MnO1xuXG5pbXBvcnQgeyBDaXBoZXJTZXJ2aWNlIH0gZnJvbSAnanNsaWIvYWJzdHJhY3Rpb25zL2NpcGhlci5zZXJ2aWNlJztcbmltcG9ydCB7IEV2ZW50U2VydmljZSB9IGZyb20gJ2pzbGliL2Fic3RyYWN0aW9ucy9ldmVudC5zZXJ2aWNlJztcbmltcG9ydCB7IFBhc3N3b3JkR2VuZXJhdGlvblNlcnZpY2UgfSBmcm9tICdqc2xpYi9hYnN0cmFjdGlvbnMvcGFzc3dvcmRHZW5lcmF0aW9uLnNlcnZpY2UnO1xuaW1wb3J0IHsgUGxhdGZvcm1VdGlsc1NlcnZpY2UgfSBmcm9tICdqc2xpYi9hYnN0cmFjdGlvbnMvcGxhdGZvcm1VdGlscy5zZXJ2aWNlJztcbmltcG9ydCB7IFRvdHBTZXJ2aWNlIH0gZnJvbSAnanNsaWIvYWJzdHJhY3Rpb25zL3RvdHAuc2VydmljZSc7XG5pbXBvcnQgeyBWYXVsdFRpbWVvdXRTZXJ2aWNlIH0gZnJvbSAnanNsaWIvYWJzdHJhY3Rpb25zL3ZhdWx0VGltZW91dC5zZXJ2aWNlJztcblxuaW1wb3J0IHsgRXZlbnRUeXBlIH0gZnJvbSAnanNsaWIvZW51bXMvZXZlbnRUeXBlJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29udGV4dE1lbnVzQmFja2dyb3VuZCB7XG4gICAgcHJpdmF0ZSBjb250ZXh0TWVudXM6IGFueTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgbWFpbjogTWFpbkJhY2tncm91bmQsIHByaXZhdGUgY2lwaGVyU2VydmljZTogQ2lwaGVyU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBwYXNzd29yZEdlbmVyYXRpb25TZXJ2aWNlOiBQYXNzd29yZEdlbmVyYXRpb25TZXJ2aWNlLCBwcml2YXRlIGFuYWx5dGljczogQW5hbHl0aWNzLFxuICAgICAgICBwcml2YXRlIHBsYXRmb3JtVXRpbHNTZXJ2aWNlOiBQbGF0Zm9ybVV0aWxzU2VydmljZSwgcHJpdmF0ZSB2YXVsdFRpbWVvdXRTZXJ2aWNlOiBWYXVsdFRpbWVvdXRTZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIGV2ZW50U2VydmljZTogRXZlbnRTZXJ2aWNlLCBwcml2YXRlIHRvdHBTZXJ2aWNlOiBUb3RwU2VydmljZSkge1xuICAgICAgICB0aGlzLmNvbnRleHRNZW51cyA9IGNocm9tZS5jb250ZXh0TWVudXM7XG4gICAgfVxuXG4gICAgYXN5bmMgaW5pdCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNvbnRleHRNZW51cykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jb250ZXh0TWVudXMub25DbGlja2VkLmFkZExpc3RlbmVyKGFzeW5jIChpbmZvOiBhbnksIHRhYjogYW55KSA9PiB7XG4gICAgICAgICAgICBpZiAoaW5mby5tZW51SXRlbUlkID09PSAnZ2VuZXJhdGUtcGFzc3dvcmQnKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5nZW5lcmF0ZVBhc3N3b3JkVG9DbGlwYm9hcmQoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5mby5wYXJlbnRNZW51SXRlbUlkID09PSAnYXV0b2ZpbGwnIHx8XG4gICAgICAgICAgICAgICAgaW5mby5wYXJlbnRNZW51SXRlbUlkID09PSAnY29weS11c2VybmFtZScgfHxcbiAgICAgICAgICAgICAgICBpbmZvLnBhcmVudE1lbnVJdGVtSWQgPT09ICdjb3B5LXBhc3N3b3JkJyB8fFxuICAgICAgICAgICAgICAgIGluZm8ucGFyZW50TWVudUl0ZW1JZCA9PT0gJ2NvcHktdG90cCcpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmNpcGhlckFjdGlvbihpbmZvKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBnZW5lcmF0ZVBhc3N3b3JkVG9DbGlwYm9hcmQoKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSAoYXdhaXQgdGhpcy5wYXNzd29yZEdlbmVyYXRpb25TZXJ2aWNlLmdldE9wdGlvbnMoKSlbMF07XG4gICAgICAgIGNvbnN0IHBhc3N3b3JkID0gYXdhaXQgdGhpcy5wYXNzd29yZEdlbmVyYXRpb25TZXJ2aWNlLmdlbmVyYXRlUGFzc3dvcmQob3B0aW9ucyk7XG4gICAgICAgIHRoaXMucGxhdGZvcm1VdGlsc1NlcnZpY2UuY29weVRvQ2xpcGJvYXJkKHBhc3N3b3JkLCB7IHdpbmRvdzogd2luZG93IH0pO1xuICAgICAgICB0aGlzLnBhc3N3b3JkR2VuZXJhdGlvblNlcnZpY2UuYWRkSGlzdG9yeShwYXNzd29yZCk7XG5cbiAgICAgICAgdGhpcy5hbmFseXRpY3MuZ2EoJ3NlbmQnLCB7XG4gICAgICAgICAgICBoaXRUeXBlOiAnZXZlbnQnLFxuICAgICAgICAgICAgZXZlbnRBY3Rpb246ICdHZW5lcmF0ZWQgUGFzc3dvcmQgRnJvbSBDb250ZXh0IE1lbnUnLFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIGNpcGhlckFjdGlvbihpbmZvOiBhbnkpIHtcbiAgICAgICAgY29uc3QgaWQgPSBpbmZvLm1lbnVJdGVtSWQuc3BsaXQoJ18nKVsxXTtcbiAgICAgICAgaWYgKGlkID09PSAnbm9vcCcpIHtcbiAgICAgICAgICAgIGlmIChjaHJvbWUuYnJvd3NlckFjdGlvbiAmJiBjaHJvbWUuYnJvd3NlckFjdGlvbi5vcGVuUG9wdXApIHtcbiAgICAgICAgICAgICAgICBjaHJvbWUuYnJvd3NlckFjdGlvbi5vcGVuUG9wdXAoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhd2FpdCB0aGlzLnZhdWx0VGltZW91dFNlcnZpY2UuaXNMb2NrZWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgY2lwaGVycyA9IGF3YWl0IHRoaXMuY2lwaGVyU2VydmljZS5nZXRBbGxEZWNyeXB0ZWQoKTtcbiAgICAgICAgY29uc3QgY2lwaGVyID0gY2lwaGVycy5maW5kKChjKSA9PiBjLmlkID09PSBpZCk7XG4gICAgICAgIGlmIChjaXBoZXIgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGluZm8ucGFyZW50TWVudUl0ZW1JZCA9PT0gJ2F1dG9maWxsJykge1xuICAgICAgICAgICAgdGhpcy5hbmFseXRpY3MuZ2EoJ3NlbmQnLCB7XG4gICAgICAgICAgICAgICAgaGl0VHlwZTogJ2V2ZW50JyxcbiAgICAgICAgICAgICAgICBldmVudEFjdGlvbjogJ0F1dG9maWxsZWQgRnJvbSBDb250ZXh0IE1lbnUnLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnN0YXJ0QXV0b2ZpbGxQYWdlKGNpcGhlcik7XG4gICAgICAgIH0gZWxzZSBpZiAoaW5mby5wYXJlbnRNZW51SXRlbUlkID09PSAnY29weS11c2VybmFtZScpIHtcbiAgICAgICAgICAgIHRoaXMuYW5hbHl0aWNzLmdhKCdzZW5kJywge1xuICAgICAgICAgICAgICAgIGhpdFR5cGU6ICdldmVudCcsXG4gICAgICAgICAgICAgICAgZXZlbnRBY3Rpb246ICdDb3BpZWQgVXNlcm5hbWUgRnJvbSBDb250ZXh0IE1lbnUnLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLnBsYXRmb3JtVXRpbHNTZXJ2aWNlLmNvcHlUb0NsaXBib2FyZChjaXBoZXIubG9naW4udXNlcm5hbWUsIHsgd2luZG93OiB3aW5kb3cgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaW5mby5wYXJlbnRNZW51SXRlbUlkID09PSAnY29weS1wYXNzd29yZCcpIHtcbiAgICAgICAgICAgIHRoaXMuYW5hbHl0aWNzLmdhKCdzZW5kJywge1xuICAgICAgICAgICAgICAgIGhpdFR5cGU6ICdldmVudCcsXG4gICAgICAgICAgICAgICAgZXZlbnRBY3Rpb246ICdDb3BpZWQgUGFzc3dvcmQgRnJvbSBDb250ZXh0IE1lbnUnLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLnBsYXRmb3JtVXRpbHNTZXJ2aWNlLmNvcHlUb0NsaXBib2FyZChjaXBoZXIubG9naW4ucGFzc3dvcmQsIHsgd2luZG93OiB3aW5kb3cgfSk7XG4gICAgICAgICAgICB0aGlzLmV2ZW50U2VydmljZS5jb2xsZWN0KEV2ZW50VHlwZS5DaXBoZXJfQ2xpZW50Q29waWVkUGFzc3dvcmQsIGNpcGhlci5pZCk7XG4gICAgICAgIH0gZWxzZSBpZiAoaW5mby5wYXJlbnRNZW51SXRlbUlkID09PSAnY29weS10b3RwJykge1xuICAgICAgICAgICAgdGhpcy5hbmFseXRpY3MuZ2EoJ3NlbmQnLCB7XG4gICAgICAgICAgICAgICAgaGl0VHlwZTogJ2V2ZW50JyxcbiAgICAgICAgICAgICAgICBldmVudEFjdGlvbjogJ0NvcGllZCBUb3RwIEZyb20gQ29udGV4dCBNZW51JyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uc3QgdG90cFZhbHVlID0gYXdhaXQgdGhpcy50b3RwU2VydmljZS5nZXRDb2RlKGNpcGhlci5sb2dpbi50b3RwKTtcbiAgICAgICAgICAgIHRoaXMucGxhdGZvcm1VdGlsc1NlcnZpY2UuY29weVRvQ2xpcGJvYXJkKHRvdHBWYWx1ZSwgeyB3aW5kb3c6IHdpbmRvdyB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgc3RhcnRBdXRvZmlsbFBhZ2UoY2lwaGVyOiBhbnkpIHtcbiAgICAgICAgdGhpcy5tYWluLmxvZ2luVG9BdXRvRmlsbCA9IGNpcGhlcjtcbiAgICAgICAgY29uc3QgdGFiID0gYXdhaXQgQnJvd3NlckFwaS5nZXRUYWJGcm9tQ3VycmVudFdpbmRvdygpO1xuICAgICAgICBpZiAodGFiID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIEJyb3dzZXJBcGkudGFiU2VuZE1lc3NhZ2UodGFiLCB7XG4gICAgICAgICAgICBjb21tYW5kOiAnY29sbGVjdFBhZ2VEZXRhaWxzJyxcbiAgICAgICAgICAgIHRhYjogdGFiLFxuICAgICAgICAgICAgc2VuZGVyOiAnY29udGV4dE1lbnUnLFxuICAgICAgICB9KTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBDb25zdGFudHNTZXJ2aWNlIH0gZnJvbSAnanNsaWIvc2VydmljZXMvY29uc3RhbnRzLnNlcnZpY2UnO1xuXG5pbXBvcnQge1xuICAgIFN0b3JhZ2VTZXJ2aWNlLFxuICAgIFZhdWx0VGltZW91dFNlcnZpY2UsXG59IGZyb20gJ2pzbGliL2Fic3RyYWN0aW9ucyc7XG5pbXBvcnQgeyBOb3RpZmljYXRpb25zU2VydmljZSB9IGZyb20gJ2pzbGliL2Fic3RyYWN0aW9ucy9ub3RpZmljYXRpb25zLnNlcnZpY2UnO1xuXG5jb25zdCBJZGxlSW50ZXJ2YWwgPSA2MCAqIDU7IC8vIDUgbWludXRlc1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJZGxlQmFja2dyb3VuZCB7XG4gICAgcHJpdmF0ZSBpZGxlOiBhbnk7XG4gICAgcHJpdmF0ZSBpZGxlVGltZXI6IG51bWJlciA9IG51bGw7XG4gICAgcHJpdmF0ZSBpZGxlU3RhdGUgPSAnYWN0aXZlJztcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgdmF1bHRUaW1lb3V0U2VydmljZTogVmF1bHRUaW1lb3V0U2VydmljZSwgcHJpdmF0ZSBzdG9yYWdlU2VydmljZTogU3RvcmFnZVNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgbm90aWZpY2F0aW9uc1NlcnZpY2U6IE5vdGlmaWNhdGlvbnNTZXJ2aWNlKSB7XG4gICAgICAgIHRoaXMuaWRsZSA9IGNocm9tZS5pZGxlIHx8IChicm93c2VyICE9IG51bGwgPyBicm93c2VyLmlkbGUgOiBudWxsKTtcbiAgICB9XG5cbiAgICBhc3luYyBpbml0KCkge1xuICAgICAgICBpZiAoIXRoaXMuaWRsZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgaWRsZUhhbmRsZXIgPSAobmV3U3RhdGU6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgaWYgKG5ld1N0YXRlID09PSAnYWN0aXZlJykge1xuICAgICAgICAgICAgICAgIHRoaXMubm90aWZpY2F0aW9uc1NlcnZpY2UucmVjb25uZWN0RnJvbUFjdGl2aXR5KCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMubm90aWZpY2F0aW9uc1NlcnZpY2UuZGlzY29ubmVjdEZyb21JbmFjdGl2aXR5KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGlmICh0aGlzLmlkbGUub25TdGF0ZUNoYW5nZWQgJiYgdGhpcy5pZGxlLnNldERldGVjdGlvbkludGVydmFsKSB7XG4gICAgICAgICAgICB0aGlzLmlkbGUuc2V0RGV0ZWN0aW9uSW50ZXJ2YWwoSWRsZUludGVydmFsKTtcbiAgICAgICAgICAgIHRoaXMuaWRsZS5vblN0YXRlQ2hhbmdlZC5hZGRMaXN0ZW5lcihpZGxlSGFuZGxlcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnBvbGxJZGxlKGlkbGVIYW5kbGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmlkbGUub25TdGF0ZUNoYW5nZWQpIHtcbiAgICAgICAgICAgIHRoaXMuaWRsZS5vblN0YXRlQ2hhbmdlZC5hZGRMaXN0ZW5lcihhc3luYyAobmV3U3RhdGU6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChuZXdTdGF0ZSA9PT0gJ2xvY2tlZCcpIHsgLy8gSWYgdGhlIHNjcmVlbiBpcyBsb2NrZWQgb3IgdGhlIHNjcmVlbnNhdmVyIGFjdGl2YXRlc1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0aW1lb3V0ID0gYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5nZXQ8bnVtYmVyPihDb25zdGFudHNTZXJ2aWNlLnZhdWx0VGltZW91dEtleSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aW1lb3V0ID09PSAtMikgeyAvLyBPbiBTeXN0ZW0gTG9jayB2YXVsdCB0aW1lb3V0IG9wdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYWN0aW9uID0gYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5nZXQ8c3RyaW5nPihDb25zdGFudHNTZXJ2aWNlLnZhdWx0VGltZW91dEFjdGlvbktleSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWN0aW9uID09PSAnbG9nT3V0Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMudmF1bHRUaW1lb3V0U2VydmljZS5sb2dPdXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy52YXVsdFRpbWVvdXRTZXJ2aWNlLmxvY2sodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgcG9sbElkbGUoaGFuZGxlcjogKG5ld1N0YXRlOiBzdHJpbmcpID0+IHZvaWQpIHtcbiAgICAgICAgaWYgKHRoaXMuaWRsZVRpbWVyICE9IG51bGwpIHtcbiAgICAgICAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQodGhpcy5pZGxlVGltZXIpO1xuICAgICAgICAgICAgdGhpcy5pZGxlVGltZXIgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaWRsZS5xdWVyeVN0YXRlKElkbGVJbnRlcnZhbCwgKHN0YXRlOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgIGlmIChzdGF0ZSAhPT0gdGhpcy5pZGxlU3RhdGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmlkbGVTdGF0ZSA9IHN0YXRlO1xuICAgICAgICAgICAgICAgIGhhbmRsZXIoc3RhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5pZGxlVGltZXIgPSB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB0aGlzLnBvbGxJZGxlKGhhbmRsZXIpLCA1MDAwKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQ2lwaGVyVHlwZSB9IGZyb20gJ2pzbGliL2VudW1zJztcblxuaW1wb3J0IHsgQ2lwaGVyVmlldyB9IGZyb20gJ2pzbGliL21vZGVscy92aWV3L2NpcGhlclZpZXcnO1xuaW1wb3J0IHsgTG9naW5VcmlWaWV3IH0gZnJvbSAnanNsaWIvbW9kZWxzL3ZpZXcvbG9naW5VcmlWaWV3JztcbmltcG9ydCB7IExvZ2luVmlldyB9IGZyb20gJ2pzbGliL21vZGVscy92aWV3L2xvZ2luVmlldyc7XG5cbmltcG9ydCB7IEF1dGhTZXJ2aWNlIH0gZnJvbSAnanNsaWIvYWJzdHJhY3Rpb25zL2F1dGguc2VydmljZSc7XG5pbXBvcnQgeyBBdXRvZmlsbFNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9hYnN0cmFjdGlvbnMvYXV0b2ZpbGwuc2VydmljZSc7XG5pbXBvcnQgQnJvd3NlclBsYXRmb3JtVXRpbHNTZXJ2aWNlIGZyb20gJy4uL3NlcnZpY2VzL2Jyb3dzZXJQbGF0Zm9ybVV0aWxzLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ2lwaGVyU2VydmljZSB9IGZyb20gJ2pzbGliL2Fic3RyYWN0aW9ucy9jaXBoZXIuc2VydmljZSc7XG5pbXBvcnQgeyBDb25zdGFudHNTZXJ2aWNlIH0gZnJvbSAnanNsaWIvc2VydmljZXMvY29uc3RhbnRzLnNlcnZpY2UnO1xuaW1wb3J0IHsgRW52aXJvbm1lbnRTZXJ2aWNlIH0gZnJvbSAnanNsaWIvYWJzdHJhY3Rpb25zL2Vudmlyb25tZW50LnNlcnZpY2UnO1xuaW1wb3J0IHsgSTE4blNlcnZpY2UgfSBmcm9tICdqc2xpYi9hYnN0cmFjdGlvbnMvaTE4bi5zZXJ2aWNlJztcbmltcG9ydCB7IE5vdGlmaWNhdGlvbnNTZXJ2aWNlIH0gZnJvbSAnanNsaWIvYWJzdHJhY3Rpb25zL25vdGlmaWNhdGlvbnMuc2VydmljZSc7XG5pbXBvcnQgeyBQb3B1cFV0aWxzU2VydmljZSB9IGZyb20gJy4uL3BvcHVwL3NlcnZpY2VzL3BvcHVwLXV0aWxzLnNlcnZpY2UnO1xuaW1wb3J0IHsgU3RhdGVTZXJ2aWNlIH0gZnJvbSAnanNsaWIvYWJzdHJhY3Rpb25zL3N0YXRlLnNlcnZpY2UnO1xuaW1wb3J0IHsgU3RvcmFnZVNlcnZpY2UgfSBmcm9tICdqc2xpYi9hYnN0cmFjdGlvbnMvc3RvcmFnZS5zZXJ2aWNlJztcbmltcG9ydCB7IFN5bmNTZXJ2aWNlIH0gZnJvbSAnanNsaWIvYWJzdHJhY3Rpb25zL3N5bmMuc2VydmljZSc7XG5pbXBvcnQgeyBTeXN0ZW1TZXJ2aWNlIH0gZnJvbSAnanNsaWIvYWJzdHJhY3Rpb25zL3N5c3RlbS5zZXJ2aWNlJztcbmltcG9ydCB7IFZhdWx0VGltZW91dFNlcnZpY2UgfSBmcm9tICdqc2xpYi9hYnN0cmFjdGlvbnMvdmF1bHRUaW1lb3V0LnNlcnZpY2UnO1xuXG5pbXBvcnQgeyBCcm93c2VyQXBpIH0gZnJvbSAnLi4vYnJvd3Nlci9icm93c2VyQXBpJztcblxuaW1wb3J0IE1haW5CYWNrZ3JvdW5kIGZyb20gJy4vbWFpbi5iYWNrZ3JvdW5kJztcblxuaW1wb3J0IHsgQW5hbHl0aWNzIH0gZnJvbSAnanNsaWIvbWlzYyc7XG5pbXBvcnQgeyBVdGlscyB9IGZyb20gJ2pzbGliL21pc2MvdXRpbHMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSdW50aW1lQmFja2dyb3VuZCB7XG4gICAgcHJpdmF0ZSBydW50aW1lOiBhbnk7XG4gICAgcHJpdmF0ZSBhdXRvZmlsbFRpbWVvdXQ6IGFueTtcbiAgICBwcml2YXRlIHBhZ2VEZXRhaWxzVG9BdXRvRmlsbDogYW55W10gPSBbXTtcbiAgICBwcml2YXRlIGlzU2FmYXJpOiBib29sZWFuO1xuICAgIHByaXZhdGUgb25JbnN0YWxsZWRSZWFzb246IHN0cmluZyA9IG51bGw7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIG1haW46IE1haW5CYWNrZ3JvdW5kLCBwcml2YXRlIGF1dG9maWxsU2VydmljZTogQXV0b2ZpbGxTZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIGNpcGhlclNlcnZpY2U6IENpcGhlclNlcnZpY2UsIHByaXZhdGUgcGxhdGZvcm1VdGlsc1NlcnZpY2U6IEJyb3dzZXJQbGF0Zm9ybVV0aWxzU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBzdG9yYWdlU2VydmljZTogU3RvcmFnZVNlcnZpY2UsIHByaXZhdGUgaTE4blNlcnZpY2U6IEkxOG5TZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIGFuYWx5dGljczogQW5hbHl0aWNzLCBwcml2YXRlIG5vdGlmaWNhdGlvbnNTZXJ2aWNlOiBOb3RpZmljYXRpb25zU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBzeXN0ZW1TZXJ2aWNlOiBTeXN0ZW1TZXJ2aWNlLCBwcml2YXRlIHZhdWx0VGltZW91dFNlcnZpY2U6IFZhdWx0VGltZW91dFNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgZW52aXJvbm1lbnRTZXJ2aWNlOiBFbnZpcm9ubWVudFNlcnZpY2UpIHtcbiAgICAgICAgdGhpcy5pc1NhZmFyaSA9IHRoaXMucGxhdGZvcm1VdGlsc1NlcnZpY2UuaXNTYWZhcmkoKTtcbiAgICAgICAgdGhpcy5ydW50aW1lID0gdGhpcy5pc1NhZmFyaSA/IHt9IDogY2hyb21lLnJ1bnRpbWU7XG5cbiAgICAgICAgLy8gb25JbnN0YWxsZWQgbGlzdGVuZXIgbXVzdCBiZSB3aXJlZCB1cCBiZWZvcmUgYW55dGhpbmcgZWxzZSwgc28gd2UgZG8gaXQgaW4gdGhlIGN0b3JcbiAgICAgICAgaWYgKCF0aGlzLmlzU2FmYXJpKSB7XG4gICAgICAgICAgICB0aGlzLnJ1bnRpbWUub25JbnN0YWxsZWQuYWRkTGlzdGVuZXIoKGRldGFpbHM6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMub25JbnN0YWxsZWRSZWFzb24gPSBkZXRhaWxzLnJlYXNvbjtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgaW5pdCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLnJ1bnRpbWUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGF3YWl0IHRoaXMuY2hlY2tPbkluc3RhbGxlZCgpO1xuICAgICAgICBCcm93c2VyQXBpLm1lc3NhZ2VMaXN0ZW5lcigncnVudGltZS5iYWNrZ3JvdW5kJywgYXN5bmMgKG1zZzogYW55LCBzZW5kZXI6IGFueSwgc2VuZFJlc3BvbnNlOiBhbnkpID0+IHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucHJvY2Vzc01lc3NhZ2UobXNnLCBzZW5kZXIsIHNlbmRSZXNwb25zZSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGFzeW5jIHByb2Nlc3NNZXNzYWdlKG1zZzogYW55LCBzZW5kZXI6IGFueSwgc2VuZFJlc3BvbnNlOiBhbnkpIHtcbiAgICAgICAgc3dpdGNoIChtc2cuY29tbWFuZCkge1xuICAgICAgICAgICAgY2FzZSAnbG9nZ2VkSW4nOlxuICAgICAgICAgICAgY2FzZSAndW5sb2NrZWQnOlxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMubWFpbi5zZXRJY29uKCk7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5tYWluLnJlZnJlc2hCYWRnZUFuZE1lbnUoZmFsc2UpO1xuICAgICAgICAgICAgICAgIHRoaXMubm90aWZpY2F0aW9uc1NlcnZpY2UudXBkYXRlQ29ubmVjdGlvbihtc2cuY29tbWFuZCA9PT0gJ3VubG9ja2VkJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5zeXN0ZW1TZXJ2aWNlLmNhbmNlbFByb2Nlc3NSZWxvYWQoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2xvZ291dCc6XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5tYWluLmxvZ291dChtc2cuZXhwaXJlZCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdzeW5jQ29tcGxldGVkJzpcbiAgICAgICAgICAgICAgICBpZiAobXNnLnN1Y2Nlc3NmdWxseSkge1xuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGFzeW5jICgpID0+IGF3YWl0IHRoaXMubWFpbi5yZWZyZXNoQmFkZ2VBbmRNZW51KCksIDIwMDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ29wZW5Qb3B1cCc6XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5tYWluLm9wZW5Qb3B1cCgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnc2hvd0RpYWxvZ1Jlc29sdmUnOlxuICAgICAgICAgICAgICAgIHRoaXMucGxhdGZvcm1VdGlsc1NlcnZpY2UucmVzb2x2ZURpYWxvZ1Byb21pc2UobXNnLmRpYWxvZ0lkLCBtc2cuY29uZmlybWVkKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2JnR2V0RGF0YUZvclRhYic6XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5nZXREYXRhRm9yVGFiKHNlbmRlci50YWIsIG1zZy5yZXNwb25zZUNvbW1hbmQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnYmdPcGVuTm90aWZpY2F0aW9uQmFyJzpcbiAgICAgICAgICAgICAgICBhd2FpdCBCcm93c2VyQXBpLnRhYlNlbmRNZXNzYWdlRGF0YShzZW5kZXIudGFiLCAnb3Blbk5vdGlmaWNhdGlvbkJhcicsIG1zZy5kYXRhKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2JnQ2xvc2VOb3RpZmljYXRpb25CYXInOlxuICAgICAgICAgICAgICAgIGF3YWl0IEJyb3dzZXJBcGkudGFiU2VuZE1lc3NhZ2VEYXRhKHNlbmRlci50YWIsICdjbG9zZU5vdGlmaWNhdGlvbkJhcicpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnYmdBZGp1c3ROb3RpZmljYXRpb25CYXInOlxuICAgICAgICAgICAgICAgIGF3YWl0IEJyb3dzZXJBcGkudGFiU2VuZE1lc3NhZ2VEYXRhKHNlbmRlci50YWIsICdhZGp1c3ROb3RpZmljYXRpb25CYXInLCBtc2cuZGF0YSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdiZ0NvbGxlY3RQYWdlRGV0YWlscyc6XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5tYWluLmNvbGxlY3RQYWdlRGV0YWlsc0ZvckNvbnRlbnRTY3JpcHQoc2VuZGVyLnRhYiwgbXNnLnNlbmRlciwgc2VuZGVyLmZyYW1lSWQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnYmdBZGRMb2dpbic6XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5hZGRMb2dpbihtc2cubG9naW4sIHNlbmRlci50YWIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnYmdDaGFuZ2VkUGFzc3dvcmQnOlxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuY2hhbmdlZFBhc3N3b3JkKG1zZy5kYXRhLCBzZW5kZXIudGFiKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2JnQWRkQ2xvc2UnOlxuICAgICAgICAgICAgY2FzZSAnYmdDaGFuZ2VDbG9zZSc6XG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVUYWJGcm9tTm90aWZpY2F0aW9uUXVldWUoc2VuZGVyLnRhYik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdiZ0FkZFNhdmUnOlxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuc2F2ZUFkZExvZ2luKHNlbmRlci50YWIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnYmdDaGFuZ2VTYXZlJzpcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnNhdmVDaGFuZ2VQYXNzd29yZChzZW5kZXIudGFiKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2JnTmV2ZXJTYXZlJzpcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnNhdmVOZXZlcihzZW5kZXIudGFiKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2JnVXBkYXRlQ29udGV4dE1lbnUnOlxuICAgICAgICAgICAgY2FzZSAnZWRpdGVkQ2lwaGVyJzpcbiAgICAgICAgICAgIGNhc2UgJ2FkZGVkQ2lwaGVyJzpcbiAgICAgICAgICAgIGNhc2UgJ2RlbGV0ZWRDaXBoZXInOlxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMubWFpbi5yZWZyZXNoQmFkZ2VBbmRNZW51KCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdiZ1Jlc2VlZFN0b3JhZ2UnOlxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMubWFpbi5yZXNlZWRTdG9yYWdlKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdjb2xsZWN0UGFnZURldGFpbHNSZXNwb25zZSc6XG4gICAgICAgICAgICAgICAgaWYgKGF3YWl0IHRoaXMudmF1bHRUaW1lb3V0U2VydmljZS5pc0xvY2tlZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc3dpdGNoIChtc2cuc2VuZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ25vdGlmaWNhdGlvbkJhcic6XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmb3JtcyA9IHRoaXMuYXV0b2ZpbGxTZXJ2aWNlLmdldEZvcm1zV2l0aFBhc3N3b3JkRmllbGRzKG1zZy5kZXRhaWxzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IEJyb3dzZXJBcGkudGFiU2VuZE1lc3NhZ2VEYXRhKG1zZy50YWIsICdub3RpZmljYXRpb25CYXJQYWdlRGV0YWlscycsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXRhaWxzOiBtc2cuZGV0YWlscyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtczogZm9ybXMsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdhdXRvZmlsbGVyJzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYXV0b2ZpbGxfY21kJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRvdHBDb2RlID0gYXdhaXQgdGhpcy5hdXRvZmlsbFNlcnZpY2UuZG9BdXRvRmlsbEFjdGl2ZVRhYihbe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1lSWQ6IHNlbmRlci5mcmFtZUlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYjogbXNnLnRhYixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXRhaWxzOiBtc2cuZGV0YWlscyxcbiAgICAgICAgICAgICAgICAgICAgICAgIH1dLCBtc2cuc2VuZGVyID09PSAnYXV0b2ZpbGxfY21kJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodG90cENvZGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGxhdGZvcm1VdGlsc1NlcnZpY2UuY29weVRvQ2xpcGJvYXJkKHRvdHBDb2RlLCB7IHdpbmRvdzogd2luZG93IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2NvbnRleHRNZW51JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLmF1dG9maWxsVGltZW91dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBhZ2VEZXRhaWxzVG9BdXRvRmlsbC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcmFtZUlkOiBzZW5kZXIuZnJhbWVJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWI6IG1zZy50YWIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGV0YWlsczogbXNnLmRldGFpbHMsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYXV0b2ZpbGxUaW1lb3V0ID0gc2V0VGltZW91dChhc3luYyAoKSA9PiBhd2FpdCB0aGlzLmF1dG9maWxsUGFnZSgpLCAzMDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdhdXRoUmVzdWx0JzpcbiAgICAgICAgICAgICAgICBsZXQgdmF1bHRVcmwgPSB0aGlzLmVudmlyb25tZW50U2VydmljZS5nZXRXZWJWYXVsdFVybCgpO1xuICAgICAgICAgICAgICAgIGlmICh2YXVsdFVybCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhdWx0VXJsID0gJ2h0dHBzOi8vdmF1bHQuYml0d2FyZGVuLmNvbSc7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKG1zZy5yZWZlcnJlciA9PSBudWxsIHx8IFV0aWxzLmdldEhvc3RuYW1lKHZhdWx0VXJsKSAhPT0gbXNnLnJlZmVycmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBCcm93c2VyQXBpLmNyZWF0ZU5ld1RhYigncG9wdXAvaW5kZXguaHRtbD91aWxvY2F0aW9uPXBvcG91dCMvc3NvP2NvZGU9JyArXG4gICAgICAgICAgICAgICAgICAgICAgICBtc2cuY29kZSArICcmc3RhdGU9JyArIG1zZy5zdGF0ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIHsgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgYXV0b2ZpbGxQYWdlKCkge1xuICAgICAgICBjb25zdCB0b3RwQ29kZSA9IGF3YWl0IHRoaXMuYXV0b2ZpbGxTZXJ2aWNlLmRvQXV0b0ZpbGwoe1xuICAgICAgICAgICAgY2lwaGVyOiB0aGlzLm1haW4ubG9naW5Ub0F1dG9GaWxsLFxuICAgICAgICAgICAgcGFnZURldGFpbHM6IHRoaXMucGFnZURldGFpbHNUb0F1dG9GaWxsLFxuICAgICAgICAgICAgZmlsbE5ld1Bhc3N3b3JkOiB0cnVlXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICh0b3RwQ29kZSAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnBsYXRmb3JtVXRpbHNTZXJ2aWNlLmNvcHlUb0NsaXBib2FyZCh0b3RwQ29kZSwgeyB3aW5kb3c6IHdpbmRvdyB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJlc2V0XG4gICAgICAgIHRoaXMubWFpbi5sb2dpblRvQXV0b0ZpbGwgPSBudWxsO1xuICAgICAgICB0aGlzLnBhZ2VEZXRhaWxzVG9BdXRvRmlsbCA9IFtdO1xuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgc2F2ZUFkZExvZ2luKHRhYjogYW55KSB7XG4gICAgICAgIGlmIChhd2FpdCB0aGlzLnZhdWx0VGltZW91dFNlcnZpY2UuaXNMb2NrZWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IHRoaXMubWFpbi5ub3RpZmljYXRpb25RdWV1ZS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgY29uc3QgcXVldWVNZXNzYWdlID0gdGhpcy5tYWluLm5vdGlmaWNhdGlvblF1ZXVlW2ldO1xuICAgICAgICAgICAgaWYgKHF1ZXVlTWVzc2FnZS50YWJJZCAhPT0gdGFiLmlkIHx8IHF1ZXVlTWVzc2FnZS50eXBlICE9PSAnYWRkTG9naW4nKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHRhYkRvbWFpbiA9IFV0aWxzLmdldERvbWFpbih0YWIudXJsKTtcbiAgICAgICAgICAgIGlmICh0YWJEb21haW4gIT0gbnVsbCAmJiB0YWJEb21haW4gIT09IHF1ZXVlTWVzc2FnZS5kb21haW4pIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5tYWluLm5vdGlmaWNhdGlvblF1ZXVlLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgIEJyb3dzZXJBcGkudGFiU2VuZE1lc3NhZ2VEYXRhKHRhYiwgJ2Nsb3NlTm90aWZpY2F0aW9uQmFyJyk7XG5cbiAgICAgICAgICAgIGNvbnN0IGxvZ2luTW9kZWwgPSBuZXcgTG9naW5WaWV3KCk7XG4gICAgICAgICAgICBjb25zdCBsb2dpblVyaSA9IG5ldyBMb2dpblVyaVZpZXcoKTtcbiAgICAgICAgICAgIGxvZ2luVXJpLnVyaSA9IHF1ZXVlTWVzc2FnZS51cmk7XG4gICAgICAgICAgICBsb2dpbk1vZGVsLnVyaXMgPSBbbG9naW5VcmldO1xuICAgICAgICAgICAgbG9naW5Nb2RlbC51c2VybmFtZSA9IHF1ZXVlTWVzc2FnZS51c2VybmFtZTtcbiAgICAgICAgICAgIGxvZ2luTW9kZWwucGFzc3dvcmQgPSBxdWV1ZU1lc3NhZ2UucGFzc3dvcmQ7XG4gICAgICAgICAgICBjb25zdCBtb2RlbCA9IG5ldyBDaXBoZXJWaWV3KCk7XG4gICAgICAgICAgICBtb2RlbC5uYW1lID0gVXRpbHMuZ2V0SG9zdG5hbWUocXVldWVNZXNzYWdlLnVyaSkgfHwgcXVldWVNZXNzYWdlLmRvbWFpbjtcbiAgICAgICAgICAgIG1vZGVsLm5hbWUgPSBtb2RlbC5uYW1lLnJlcGxhY2UoL153d3dcXC4vLCAnJyk7XG4gICAgICAgICAgICBtb2RlbC50eXBlID0gQ2lwaGVyVHlwZS5Mb2dpbjtcbiAgICAgICAgICAgIG1vZGVsLmxvZ2luID0gbG9naW5Nb2RlbDtcblxuICAgICAgICAgICAgY29uc3QgY2lwaGVyID0gYXdhaXQgdGhpcy5jaXBoZXJTZXJ2aWNlLmVuY3J5cHQobW9kZWwpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5jaXBoZXJTZXJ2aWNlLnNhdmVXaXRoU2VydmVyKGNpcGhlcik7XG4gICAgICAgICAgICB0aGlzLmFuYWx5dGljcy5nYSgnc2VuZCcsIHtcbiAgICAgICAgICAgICAgICBoaXRUeXBlOiAnZXZlbnQnLFxuICAgICAgICAgICAgICAgIGV2ZW50QWN0aW9uOiAnQWRkZWQgTG9naW4gZnJvbSBOb3RpZmljYXRpb24gQmFyJyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBzYXZlQ2hhbmdlUGFzc3dvcmQodGFiOiBhbnkpIHtcbiAgICAgICAgaWYgKGF3YWl0IHRoaXMudmF1bHRUaW1lb3V0U2VydmljZS5pc0xvY2tlZCgpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGxldCBpID0gdGhpcy5tYWluLm5vdGlmaWNhdGlvblF1ZXVlLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICBjb25zdCBxdWV1ZU1lc3NhZ2UgPSB0aGlzLm1haW4ubm90aWZpY2F0aW9uUXVldWVbaV07XG4gICAgICAgICAgICBpZiAocXVldWVNZXNzYWdlLnRhYklkICE9PSB0YWIuaWQgfHwgcXVldWVNZXNzYWdlLnR5cGUgIT09ICdjaGFuZ2VQYXNzd29yZCcpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgdGFiRG9tYWluID0gVXRpbHMuZ2V0RG9tYWluKHRhYi51cmwpO1xuICAgICAgICAgICAgaWYgKHRhYkRvbWFpbiAhPSBudWxsICYmIHRhYkRvbWFpbiAhPT0gcXVldWVNZXNzYWdlLmRvbWFpbikge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLm1haW4ubm90aWZpY2F0aW9uUXVldWUuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgQnJvd3NlckFwaS50YWJTZW5kTWVzc2FnZURhdGEodGFiLCAnY2xvc2VOb3RpZmljYXRpb25CYXInKTtcblxuICAgICAgICAgICAgY29uc3QgY2lwaGVyID0gYXdhaXQgdGhpcy5jaXBoZXJTZXJ2aWNlLmdldChxdWV1ZU1lc3NhZ2UuY2lwaGVySWQpO1xuICAgICAgICAgICAgaWYgKGNpcGhlciAhPSBudWxsICYmIGNpcGhlci50eXBlID09PSBDaXBoZXJUeXBlLkxvZ2luKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbW9kZWwgPSBhd2FpdCBjaXBoZXIuZGVjcnlwdCgpO1xuICAgICAgICAgICAgICAgIG1vZGVsLmxvZ2luLnBhc3N3b3JkID0gcXVldWVNZXNzYWdlLm5ld1Bhc3N3b3JkO1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld0NpcGhlciA9IGF3YWl0IHRoaXMuY2lwaGVyU2VydmljZS5lbmNyeXB0KG1vZGVsKTtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmNpcGhlclNlcnZpY2Uuc2F2ZVdpdGhTZXJ2ZXIobmV3Q2lwaGVyKTtcbiAgICAgICAgICAgICAgICB0aGlzLmFuYWx5dGljcy5nYSgnc2VuZCcsIHtcbiAgICAgICAgICAgICAgICAgICAgaGl0VHlwZTogJ2V2ZW50JyxcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRBY3Rpb246ICdDaGFuZ2VkIFBhc3N3b3JkIGZyb20gTm90aWZpY2F0aW9uIEJhcicsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIHNhdmVOZXZlcih0YWI6IGFueSkge1xuICAgICAgICBmb3IgKGxldCBpID0gdGhpcy5tYWluLm5vdGlmaWNhdGlvblF1ZXVlLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICBjb25zdCBxdWV1ZU1lc3NhZ2UgPSB0aGlzLm1haW4ubm90aWZpY2F0aW9uUXVldWVbaV07XG4gICAgICAgICAgICBpZiAocXVldWVNZXNzYWdlLnRhYklkICE9PSB0YWIuaWQgfHwgcXVldWVNZXNzYWdlLnR5cGUgIT09ICdhZGRMb2dpbicpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgdGFiRG9tYWluID0gVXRpbHMuZ2V0RG9tYWluKHRhYi51cmwpO1xuICAgICAgICAgICAgaWYgKHRhYkRvbWFpbiAhPSBudWxsICYmIHRhYkRvbWFpbiAhPT0gcXVldWVNZXNzYWdlLmRvbWFpbikge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLm1haW4ubm90aWZpY2F0aW9uUXVldWUuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgQnJvd3NlckFwaS50YWJTZW5kTWVzc2FnZURhdGEodGFiLCAnY2xvc2VOb3RpZmljYXRpb25CYXInKTtcblxuICAgICAgICAgICAgY29uc3QgaG9zdG5hbWUgPSBVdGlscy5nZXRIb3N0bmFtZSh0YWIudXJsKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuY2lwaGVyU2VydmljZS5zYXZlTmV2ZXJEb21haW4oaG9zdG5hbWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBhZGRMb2dpbihsb2dpbkluZm86IGFueSwgdGFiOiBhbnkpIHtcbiAgICAgICAgaWYgKGF3YWl0IHRoaXMudmF1bHRUaW1lb3V0U2VydmljZS5pc0xvY2tlZCgpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBsb2dpbkRvbWFpbiA9IFV0aWxzLmdldERvbWFpbihsb2dpbkluZm8udXJsKTtcbiAgICAgICAgaWYgKGxvZ2luRG9tYWluID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBub3JtYWxpemVkVXNlcm5hbWUgPSBsb2dpbkluZm8udXNlcm5hbWU7XG4gICAgICAgIGlmIChub3JtYWxpemVkVXNlcm5hbWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgbm9ybWFsaXplZFVzZXJuYW1lID0gbm9ybWFsaXplZFVzZXJuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjaXBoZXJzID0gYXdhaXQgdGhpcy5jaXBoZXJTZXJ2aWNlLmdldEFsbERlY3J5cHRlZEZvclVybChsb2dpbkluZm8udXJsKTtcbiAgICAgICAgY29uc3QgdXNlcm5hbWVNYXRjaGVzID0gY2lwaGVycy5maWx0ZXIoKGMpID0+XG4gICAgICAgICAgICBjLmxvZ2luLnVzZXJuYW1lICE9IG51bGwgJiYgYy5sb2dpbi51c2VybmFtZS50b0xvd2VyQ2FzZSgpID09PSBub3JtYWxpemVkVXNlcm5hbWUpO1xuICAgICAgICBpZiAodXNlcm5hbWVNYXRjaGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgY29uc3QgZGlzYWJsZWRBZGRMb2dpbiA9IGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2UuZ2V0PGJvb2xlYW4+KFxuICAgICAgICAgICAgICAgIENvbnN0YW50c1NlcnZpY2UuZGlzYWJsZUFkZExvZ2luTm90aWZpY2F0aW9uS2V5KTtcbiAgICAgICAgICAgIGlmIChkaXNhYmxlZEFkZExvZ2luKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gcmVtb3ZlIGFueSBvbGQgbWVzc2FnZXMgZm9yIHRoaXMgdGFiXG4gICAgICAgICAgICB0aGlzLnJlbW92ZVRhYkZyb21Ob3RpZmljYXRpb25RdWV1ZSh0YWIpO1xuICAgICAgICAgICAgdGhpcy5tYWluLm5vdGlmaWNhdGlvblF1ZXVlLnB1c2goe1xuICAgICAgICAgICAgICAgIHR5cGU6ICdhZGRMb2dpbicsXG4gICAgICAgICAgICAgICAgdXNlcm5hbWU6IGxvZ2luSW5mby51c2VybmFtZSxcbiAgICAgICAgICAgICAgICBwYXNzd29yZDogbG9naW5JbmZvLnBhc3N3b3JkLFxuICAgICAgICAgICAgICAgIGRvbWFpbjogbG9naW5Eb21haW4sXG4gICAgICAgICAgICAgICAgdXJpOiBsb2dpbkluZm8udXJsLFxuICAgICAgICAgICAgICAgIHRhYklkOiB0YWIuaWQsXG4gICAgICAgICAgICAgICAgZXhwaXJlczogbmV3IERhdGUoKG5ldyBEYXRlKCkpLmdldFRpbWUoKSArIDMwICogNjAwMDApLCAvLyAzMCBtaW51dGVzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMubWFpbi5jaGVja05vdGlmaWNhdGlvblF1ZXVlKHRhYik7XG4gICAgICAgIH0gZWxzZSBpZiAodXNlcm5hbWVNYXRjaGVzLmxlbmd0aCA9PT0gMSAmJiB1c2VybmFtZU1hdGNoZXNbMF0ubG9naW4ucGFzc3dvcmQgIT09IGxvZ2luSW5mby5wYXNzd29yZCkge1xuICAgICAgICAgICAgY29uc3QgZGlzYWJsZWRDaGFuZ2VQYXNzd29yZCA9IGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2UuZ2V0PGJvb2xlYW4+KFxuICAgICAgICAgICAgICAgIENvbnN0YW50c1NlcnZpY2UuZGlzYWJsZUNoYW5nZWRQYXNzd29yZE5vdGlmaWNhdGlvbktleSk7XG4gICAgICAgICAgICBpZiAoZGlzYWJsZWRDaGFuZ2VQYXNzd29yZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuYWRkQ2hhbmdlZFBhc3N3b3JkVG9RdWV1ZSh1c2VybmFtZU1hdGNoZXNbMF0uaWQsIGxvZ2luRG9tYWluLCBsb2dpbkluZm8ucGFzc3dvcmQsIHRhYik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIGNoYW5nZWRQYXNzd29yZChjaGFuZ2VEYXRhOiBhbnksIHRhYjogYW55KSB7XG4gICAgICAgIGlmIChhd2FpdCB0aGlzLnZhdWx0VGltZW91dFNlcnZpY2UuaXNMb2NrZWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbG9naW5Eb21haW4gPSBVdGlscy5nZXREb21haW4oY2hhbmdlRGF0YS51cmwpO1xuICAgICAgICBpZiAobG9naW5Eb21haW4gPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGlkOiBzdHJpbmcgPSBudWxsO1xuICAgICAgICBjb25zdCBjaXBoZXJzID0gYXdhaXQgdGhpcy5jaXBoZXJTZXJ2aWNlLmdldEFsbERlY3J5cHRlZEZvclVybChjaGFuZ2VEYXRhLnVybCk7XG4gICAgICAgIGlmIChjaGFuZ2VEYXRhLmN1cnJlbnRQYXNzd29yZCAhPSBudWxsKSB7XG4gICAgICAgICAgICBjb25zdCBwYXNzd29yZE1hdGNoZXMgPSBjaXBoZXJzLmZpbHRlcigoYykgPT4gYy5sb2dpbi5wYXNzd29yZCA9PT0gY2hhbmdlRGF0YS5jdXJyZW50UGFzc3dvcmQpO1xuICAgICAgICAgICAgaWYgKHBhc3N3b3JkTWF0Y2hlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICBpZCA9IHBhc3N3b3JkTWF0Y2hlc1swXS5pZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChjaXBoZXJzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgaWQgPSBjaXBoZXJzWzBdLmlkO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmFkZENoYW5nZWRQYXNzd29yZFRvUXVldWUoaWQsIGxvZ2luRG9tYWluLCBjaGFuZ2VEYXRhLm5ld1Bhc3N3b3JkLCB0YWIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBhZGRDaGFuZ2VkUGFzc3dvcmRUb1F1ZXVlKGNpcGhlcklkOiBzdHJpbmcsIGxvZ2luRG9tYWluOiBzdHJpbmcsIG5ld1Bhc3N3b3JkOiBzdHJpbmcsIHRhYjogYW55KSB7XG4gICAgICAgIC8vIHJlbW92ZSBhbnkgb2xkIG1lc3NhZ2VzIGZvciB0aGlzIHRhYlxuICAgICAgICB0aGlzLnJlbW92ZVRhYkZyb21Ob3RpZmljYXRpb25RdWV1ZSh0YWIpO1xuICAgICAgICB0aGlzLm1haW4ubm90aWZpY2F0aW9uUXVldWUucHVzaCh7XG4gICAgICAgICAgICB0eXBlOiAnY2hhbmdlUGFzc3dvcmQnLFxuICAgICAgICAgICAgY2lwaGVySWQ6IGNpcGhlcklkLFxuICAgICAgICAgICAgbmV3UGFzc3dvcmQ6IG5ld1Bhc3N3b3JkLFxuICAgICAgICAgICAgZG9tYWluOiBsb2dpbkRvbWFpbixcbiAgICAgICAgICAgIHRhYklkOiB0YWIuaWQsXG4gICAgICAgICAgICBleHBpcmVzOiBuZXcgRGF0ZSgobmV3IERhdGUoKSkuZ2V0VGltZSgpICsgMzAgKiA2MDAwMCksIC8vIDMwIG1pbnV0ZXNcbiAgICAgICAgfSk7XG4gICAgICAgIGF3YWl0IHRoaXMubWFpbi5jaGVja05vdGlmaWNhdGlvblF1ZXVlKHRhYik7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZW1vdmVUYWJGcm9tTm90aWZpY2F0aW9uUXVldWUodGFiOiBhbnkpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IHRoaXMubWFpbi5ub3RpZmljYXRpb25RdWV1ZS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgaWYgKHRoaXMubWFpbi5ub3RpZmljYXRpb25RdWV1ZVtpXS50YWJJZCA9PT0gdGFiLmlkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tYWluLm5vdGlmaWNhdGlvblF1ZXVlLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgY2hlY2tPbkluc3RhbGxlZCgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNTYWZhcmkpIHtcbiAgICAgICAgICAgIGNvbnN0IGluc3RhbGxlZFZlcnNpb24gPSBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldDxzdHJpbmc+KENvbnN0YW50c1NlcnZpY2UuaW5zdGFsbGVkVmVyc2lvbktleSk7XG4gICAgICAgICAgICBpZiAoaW5zdGFsbGVkVmVyc2lvbiA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vbkluc3RhbGxlZFJlYXNvbiA9ICdpbnN0YWxsJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoQnJvd3NlckFwaS5nZXRBcHBsaWNhdGlvblZlcnNpb24oKSAhPT0gaW5zdGFsbGVkVmVyc2lvbikge1xuICAgICAgICAgICAgICAgIHRoaXMub25JbnN0YWxsZWRSZWFzb24gPSAndXBkYXRlJztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMub25JbnN0YWxsZWRSZWFzb24gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2Uuc2F2ZShDb25zdGFudHNTZXJ2aWNlLmluc3RhbGxlZFZlcnNpb25LZXksXG4gICAgICAgICAgICAgICAgICAgIEJyb3dzZXJBcGkuZ2V0QXBwbGljYXRpb25WZXJzaW9uKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgc2V0VGltZW91dChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5vbkluc3RhbGxlZFJlYXNvbiAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub25JbnN0YWxsZWRSZWFzb24gPT09ICdpbnN0YWxsJykge1xuICAgICAgICAgICAgICAgICAgICBCcm93c2VyQXBpLmNyZWF0ZU5ld1RhYignaHR0cHM6Ly9iaXR3YXJkZW4uY29tL2Jyb3dzZXItc3RhcnQvJyk7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuc2V0RGVmYXVsdFNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5hbmFseXRpY3MuZ2EoJ3NlbmQnLCB7XG4gICAgICAgICAgICAgICAgICAgIGhpdFR5cGU6ICdldmVudCcsXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50QWN0aW9uOiAnb25JbnN0YWxsZWQgJyArIHRoaXMub25JbnN0YWxsZWRSZWFzb24sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5vbkluc3RhbGxlZFJlYXNvbiA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIDEwMCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBzZXREZWZhdWx0U2V0dGluZ3MoKSB7XG4gICAgICAgIC8vIERlZmF1bHQgdGltZW91dCBvcHRpb24gdG8gXCJvbiByZXN0YXJ0XCIuXG4gICAgICAgIGNvbnN0IGN1cnJlbnRWYXVsdFRpbWVvdXQgPSBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldDxudW1iZXI+KENvbnN0YW50c1NlcnZpY2UudmF1bHRUaW1lb3V0S2V5KTtcbiAgICAgICAgaWYgKGN1cnJlbnRWYXVsdFRpbWVvdXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5zYXZlKENvbnN0YW50c1NlcnZpY2UudmF1bHRUaW1lb3V0S2V5LCAtMSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBEZWZhdWx0IGFjdGlvbiB0byBcImxvY2tcIi5cbiAgICAgICAgY29uc3QgY3VycmVudFZhdWx0VGltZW91dEFjdGlvbiA9IGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2UuZ2V0PHN0cmluZz4oQ29uc3RhbnRzU2VydmljZS52YXVsdFRpbWVvdXRBY3Rpb25LZXkpO1xuICAgICAgICBpZiAoY3VycmVudFZhdWx0VGltZW91dEFjdGlvbiA9PSBudWxsKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLnNhdmUoQ29uc3RhbnRzU2VydmljZS52YXVsdFRpbWVvdXRBY3Rpb25LZXksICdsb2NrJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIGdldERhdGFGb3JUYWIodGFiOiBhbnksIHJlc3BvbnNlQ29tbWFuZDogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlRGF0YTogYW55ID0ge307XG4gICAgICAgIGlmIChyZXNwb25zZUNvbW1hbmQgPT09ICdub3RpZmljYXRpb25CYXJEYXRhUmVzcG9uc2UnKSB7XG4gICAgICAgICAgICByZXNwb25zZURhdGEubmV2ZXJEb21haW5zID0gYXdhaXQgdGhpcy5zdG9yYWdlU2VydmljZS5nZXQ8YW55PihDb25zdGFudHNTZXJ2aWNlLm5ldmVyRG9tYWluc0tleSk7XG4gICAgICAgICAgICByZXNwb25zZURhdGEuZGlzYWJsZWRBZGRMb2dpbk5vdGlmaWNhdGlvbiA9IGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2UuZ2V0PGJvb2xlYW4+KFxuICAgICAgICAgICAgICAgIENvbnN0YW50c1NlcnZpY2UuZGlzYWJsZUFkZExvZ2luTm90aWZpY2F0aW9uS2V5KTtcbiAgICAgICAgICAgIHJlc3BvbnNlRGF0YS5kaXNhYmxlZENoYW5nZWRQYXNzd29yZE5vdGlmaWNhdGlvbiA9IGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2UuZ2V0PGJvb2xlYW4+KFxuICAgICAgICAgICAgICAgIENvbnN0YW50c1NlcnZpY2UuZGlzYWJsZUNoYW5nZWRQYXNzd29yZE5vdGlmaWNhdGlvbktleSk7XG4gICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2VDb21tYW5kID09PSAnYXV0b2ZpbGxlckF1dG9maWxsT25QYWdlTG9hZEVuYWJsZWRSZXNwb25zZScpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlRGF0YS5hdXRvZmlsbEVuYWJsZWQgPSBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldDxib29sZWFuPihcbiAgICAgICAgICAgICAgICBDb25zdGFudHNTZXJ2aWNlLmVuYWJsZUF1dG9GaWxsT25QYWdlTG9hZEtleSk7XG4gICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2VDb21tYW5kID09PSAnbm90aWZpY2F0aW9uQmFyRnJhbWVEYXRhUmVzcG9uc2UnKSB7XG4gICAgICAgICAgICByZXNwb25zZURhdGEuaTE4biA9IHtcbiAgICAgICAgICAgICAgICBhcHBOYW1lOiB0aGlzLmkxOG5TZXJ2aWNlLnQoJ2FwcE5hbWUnKSxcbiAgICAgICAgICAgICAgICBjbG9zZTogdGhpcy5pMThuU2VydmljZS50KCdjbG9zZScpLFxuICAgICAgICAgICAgICAgIHllczogdGhpcy5pMThuU2VydmljZS50KCd5ZXMnKSxcbiAgICAgICAgICAgICAgICBuZXZlcjogdGhpcy5pMThuU2VydmljZS50KCduZXZlcicpLFxuICAgICAgICAgICAgICAgIG5vdGlmaWNhdGlvbkFkZFNhdmU6IHRoaXMuaTE4blNlcnZpY2UudCgnbm90aWZpY2F0aW9uQWRkU2F2ZScpLFxuICAgICAgICAgICAgICAgIG5vdGlmaWNhdGlvbk5ldmVyU2F2ZTogdGhpcy5pMThuU2VydmljZS50KCdub3RpZmljYXRpb25OZXZlclNhdmUnKSxcbiAgICAgICAgICAgICAgICBub3RpZmljYXRpb25BZGREZXNjOiB0aGlzLmkxOG5TZXJ2aWNlLnQoJ25vdGlmaWNhdGlvbkFkZERlc2MnKSxcbiAgICAgICAgICAgICAgICBub3RpZmljYXRpb25DaGFuZ2VTYXZlOiB0aGlzLmkxOG5TZXJ2aWNlLnQoJ25vdGlmaWNhdGlvbkNoYW5nZVNhdmUnKSxcbiAgICAgICAgICAgICAgICBub3RpZmljYXRpb25DaGFuZ2VEZXNjOiB0aGlzLmkxOG5TZXJ2aWNlLnQoJ25vdGlmaWNhdGlvbkNoYW5nZURlc2MnKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBhd2FpdCBCcm93c2VyQXBpLnRhYlNlbmRNZXNzYWdlRGF0YSh0YWIsIHJlc3BvbnNlQ29tbWFuZCwgcmVzcG9uc2VEYXRhKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgTWFpbkJhY2tncm91bmQgZnJvbSAnLi9tYWluLmJhY2tncm91bmQnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUYWJzQmFja2dyb3VuZCB7XG4gICAgcHJpdmF0ZSB0YWJzOiBhbnk7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIG1haW46IE1haW5CYWNrZ3JvdW5kKSB7XG4gICAgICAgIHRoaXMudGFicyA9IGNocm9tZS50YWJzO1xuICAgIH1cblxuICAgIGFzeW5jIGluaXQoKSB7XG4gICAgICAgIGlmICghdGhpcy50YWJzKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnRhYnMub25BY3RpdmF0ZWQuYWRkTGlzdGVuZXIoYXN5bmMgKGFjdGl2ZUluZm86IGFueSkgPT4ge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5tYWluLnJlZnJlc2hCYWRnZUFuZE1lbnUoKTtcbiAgICAgICAgICAgIHRoaXMubWFpbi5tZXNzYWdpbmdTZXJ2aWNlLnNlbmQoJ3RhYkFjdGl2YXRlZCcpO1xuICAgICAgICAgICAgdGhpcy5tYWluLm1lc3NhZ2luZ1NlcnZpY2Uuc2VuZCgndGFiQ2hhbmdlZCcpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnRhYnMub25SZXBsYWNlZC5hZGRMaXN0ZW5lcihhc3luYyAoYWRkZWRUYWJJZDogYW55LCByZW1vdmVkVGFiSWQ6IGFueSkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMubWFpbi5vblJlcGxhY2VkUmFuKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5tYWluLm9uUmVwbGFjZWRSYW4gPSB0cnVlO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5tYWluLmNoZWNrTm90aWZpY2F0aW9uUXVldWUoKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMubWFpbi5yZWZyZXNoQmFkZ2VBbmRNZW51KCk7XG4gICAgICAgICAgICB0aGlzLm1haW4ubWVzc2FnaW5nU2VydmljZS5zZW5kKCd0YWJSZXBsYWNlZCcpO1xuICAgICAgICAgICAgdGhpcy5tYWluLm1lc3NhZ2luZ1NlcnZpY2Uuc2VuZCgndGFiQ2hhbmdlZCcpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnRhYnMub25VcGRhdGVkLmFkZExpc3RlbmVyKGFzeW5jICh0YWJJZDogYW55LCBjaGFuZ2VJbmZvOiBhbnksIHRhYjogYW55KSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5tYWluLm9uVXBkYXRlZFJhbikge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMubWFpbi5vblVwZGF0ZWRSYW4gPSB0cnVlO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5tYWluLmNoZWNrTm90aWZpY2F0aW9uUXVldWUoKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMubWFpbi5yZWZyZXNoQmFkZ2VBbmRNZW51KCk7XG4gICAgICAgICAgICB0aGlzLm1haW4ubWVzc2FnaW5nU2VydmljZS5zZW5kKCd0YWJVcGRhdGVkJyk7XG4gICAgICAgICAgICB0aGlzLm1haW4ubWVzc2FnaW5nU2VydmljZS5zZW5kKCd0YWJDaGFuZ2VkJyk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IENpcGhlclNlcnZpY2UgfSBmcm9tICdqc2xpYi9hYnN0cmFjdGlvbnMvY2lwaGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgUGxhdGZvcm1VdGlsc1NlcnZpY2UgfSBmcm9tICdqc2xpYi9hYnN0cmFjdGlvbnMvcGxhdGZvcm1VdGlscy5zZXJ2aWNlJztcbmltcG9ydCB7IFZhdWx0VGltZW91dFNlcnZpY2UgfSBmcm9tICdqc2xpYi9hYnN0cmFjdGlvbnMvdmF1bHRUaW1lb3V0LnNlcnZpY2UnO1xuXG5pbXBvcnQgeyBVcmlNYXRjaFR5cGUgfSBmcm9tICdqc2xpYi9lbnVtcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFdlYlJlcXVlc3RCYWNrZ3JvdW5kIHtcbiAgICBwcml2YXRlIHBlbmRpbmdBdXRoUmVxdWVzdHM6IGFueVtdID0gW107XG4gICAgcHJpdmF0ZSB3ZWJSZXF1ZXN0OiBhbnk7XG4gICAgcHJpdmF0ZSBpc0ZpcmVmb3g6IGJvb2xlYW47XG5cbiAgICBjb25zdHJ1Y3RvcihwbGF0Zm9ybVV0aWxzU2VydmljZTogUGxhdGZvcm1VdGlsc1NlcnZpY2UsIHByaXZhdGUgY2lwaGVyU2VydmljZTogQ2lwaGVyU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSB2YXVsdFRpbWVvdXRTZXJ2aWNlOiBWYXVsdFRpbWVvdXRTZXJ2aWNlKSB7XG4gICAgICAgIHRoaXMud2ViUmVxdWVzdCA9ICh3aW5kb3cgYXMgYW55KS5jaHJvbWUud2ViUmVxdWVzdDtcbiAgICAgICAgdGhpcy5pc0ZpcmVmb3ggPSBwbGF0Zm9ybVV0aWxzU2VydmljZS5pc0ZpcmVmb3goKTtcbiAgICB9XG5cbiAgICBhc3luYyBpbml0KCkge1xuICAgICAgICBpZiAoIXRoaXMud2ViUmVxdWVzdCB8fCAhdGhpcy53ZWJSZXF1ZXN0Lm9uQXV0aFJlcXVpcmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLndlYlJlcXVlc3Qub25BdXRoUmVxdWlyZWQuYWRkTGlzdGVuZXIoYXN5bmMgKGRldGFpbHM6IGFueSwgY2FsbGJhY2s6IGFueSkgPT4ge1xuICAgICAgICAgICAgaWYgKCFkZXRhaWxzLnVybCB8fCB0aGlzLnBlbmRpbmdBdXRoUmVxdWVzdHMuaW5kZXhPZihkZXRhaWxzLnJlcXVlc3RJZCkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5wZW5kaW5nQXV0aFJlcXVlc3RzLnB1c2goZGV0YWlscy5yZXF1ZXN0SWQpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5pc0ZpcmVmb3gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoYXN5bmMgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnJlc29sdmVBdXRoQ3JlZGVudGlhbHMoZGV0YWlscy51cmwsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucmVzb2x2ZUF1dGhDcmVkZW50aWFscyhkZXRhaWxzLnVybCwgY2FsbGJhY2ssIGNhbGxiYWNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgeyB1cmxzOiBbJ2h0dHA6Ly8qLyonLCAnaHR0cHM6Ly8qLyonXSB9LCBbdGhpcy5pc0ZpcmVmb3ggPyAnYmxvY2tpbmcnIDogJ2FzeW5jQmxvY2tpbmcnXSk7XG5cbiAgICAgICAgdGhpcy53ZWJSZXF1ZXN0Lm9uQ29tcGxldGVkLmFkZExpc3RlbmVyKFxuICAgICAgICAgICAgKGRldGFpbHM6IGFueSkgPT4gdGhpcy5jb21wbGV0ZUF1dGhSZXF1ZXN0KGRldGFpbHMpLCB7IHVybHM6IFsnaHR0cDovLyovKiddIH0pO1xuICAgICAgICB0aGlzLndlYlJlcXVlc3Qub25FcnJvck9jY3VycmVkLmFkZExpc3RlbmVyKFxuICAgICAgICAgICAgKGRldGFpbHM6IGFueSkgPT4gdGhpcy5jb21wbGV0ZUF1dGhSZXF1ZXN0KGRldGFpbHMpLCB7IHVybHM6IFsnaHR0cDovLyovKiddIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgcmVzb2x2ZUF1dGhDcmVkZW50aWFscyhkb21haW46IHN0cmluZywgc3VjY2VzczogRnVuY3Rpb24sIGVycm9yOiBGdW5jdGlvbikge1xuICAgICAgICBpZiAoYXdhaXQgdGhpcy52YXVsdFRpbWVvdXRTZXJ2aWNlLmlzTG9ja2VkKCkpIHtcbiAgICAgICAgICAgIGVycm9yKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgY2lwaGVycyA9IGF3YWl0IHRoaXMuY2lwaGVyU2VydmljZS5nZXRBbGxEZWNyeXB0ZWRGb3JVcmwoZG9tYWluLCBudWxsLCBVcmlNYXRjaFR5cGUuSG9zdCk7XG4gICAgICAgICAgICBpZiAoY2lwaGVycyA9PSBudWxsIHx8IGNpcGhlcnMubGVuZ3RoICE9PSAxKSB7XG4gICAgICAgICAgICAgICAgZXJyb3IoKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHN1Y2Nlc3Moe1xuICAgICAgICAgICAgICAgIGF1dGhDcmVkZW50aWFsczoge1xuICAgICAgICAgICAgICAgICAgICB1c2VybmFtZTogY2lwaGVyc1swXS5sb2dpbi51c2VybmFtZSxcbiAgICAgICAgICAgICAgICAgICAgcGFzc3dvcmQ6IGNpcGhlcnNbMF0ubG9naW4ucGFzc3dvcmQsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICAgIGVycm9yKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGNvbXBsZXRlQXV0aFJlcXVlc3QoZGV0YWlsczogYW55KSB7XG4gICAgICAgIGNvbnN0IGkgPSB0aGlzLnBlbmRpbmdBdXRoUmVxdWVzdHMuaW5kZXhPZihkZXRhaWxzLnJlcXVlc3RJZCk7XG4gICAgICAgIGlmIChpID4gLTEpIHtcbiAgICAgICAgICAgIHRoaXMucGVuZGluZ0F1dGhSZXF1ZXN0cy5zcGxpY2UoaSwgMSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQgTWFpbkJhY2tncm91bmQgZnJvbSAnLi9tYWluLmJhY2tncm91bmQnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBXaW5kb3dzQmFja2dyb3VuZCB7XG4gICAgcHJpdmF0ZSB3aW5kb3dzOiBhbnk7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIG1haW46IE1haW5CYWNrZ3JvdW5kKSB7XG4gICAgICAgIHRoaXMud2luZG93cyA9IGNocm9tZS53aW5kb3dzO1xuICAgIH1cblxuICAgIGFzeW5jIGluaXQoKSB7XG4gICAgICAgIGlmICghdGhpcy53aW5kb3dzKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLndpbmRvd3Mub25Gb2N1c0NoYW5nZWQuYWRkTGlzdGVuZXIoYXN5bmMgKHdpbmRvd0lkOiBhbnkpID0+IHtcbiAgICAgICAgICAgIGlmICh3aW5kb3dJZCA9PT0gbnVsbCB8fCB3aW5kb3dJZCA8IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGF3YWl0IHRoaXMubWFpbi5yZWZyZXNoQmFkZ2VBbmRNZW51KCk7XG4gICAgICAgICAgICB0aGlzLm1haW4ubWVzc2FnaW5nU2VydmljZS5zZW5kKCd3aW5kb3dGb2N1c2VkJyk7XG4gICAgICAgICAgICB0aGlzLm1haW4ubWVzc2FnaW5nU2VydmljZS5zZW5kKCd3aW5kb3dDaGFuZ2VkJyk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIEF1dG9maWxsU2NyaXB0IHtcbiAgICBzY3JpcHQ6IHN0cmluZ1tdW10gPSBbXTtcbiAgICBkb2N1bWVudFVVSUQ6IGFueSA9IHt9O1xuICAgIHByb3BlcnRpZXM6IGFueSA9IHt9O1xuICAgIG9wdGlvbnM6IGFueSA9IHt9O1xuICAgIG1ldGFkYXRhOiBhbnkgPSB7fTtcbiAgICBhdXRvc3VibWl0OiBhbnkgPSBudWxsO1xuXG4gICAgY29uc3RydWN0b3IoZG9jdW1lbnRVVUlEOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5kb2N1bWVudFVVSUQgPSBkb2N1bWVudFVVSUQ7XG4gICAgfVxufVxuIiwiaW1wb3J0IHtcbiAgICBDaXBoZXJUeXBlLFxuICAgIEZpZWxkVHlwZSxcbn0gZnJvbSAnanNsaWIvZW51bXMnO1xuXG5pbXBvcnQgeyBDaXBoZXJWaWV3IH0gZnJvbSAnanNsaWIvbW9kZWxzL3ZpZXcnO1xuXG5pbXBvcnQgQXV0b2ZpbGxGaWVsZCBmcm9tICcuLi9tb2RlbHMvYXV0b2ZpbGxGaWVsZCc7XG5pbXBvcnQgQXV0b2ZpbGxQYWdlRGV0YWlscyBmcm9tICcuLi9tb2RlbHMvYXV0b2ZpbGxQYWdlRGV0YWlscyc7XG5pbXBvcnQgQXV0b2ZpbGxTY3JpcHQgZnJvbSAnLi4vbW9kZWxzL2F1dG9maWxsU2NyaXB0JztcblxuaW1wb3J0IHsgQnJvd3NlckFwaSB9IGZyb20gJy4uL2Jyb3dzZXIvYnJvd3NlckFwaSc7XG5cbmltcG9ydCB7IEF1dG9maWxsU2VydmljZSBhcyBBdXRvZmlsbFNlcnZpY2VJbnRlcmZhY2UgfSBmcm9tICcuL2Fic3RyYWN0aW9ucy9hdXRvZmlsbC5zZXJ2aWNlJztcblxuaW1wb3J0IHtcbiAgICBDaXBoZXJTZXJ2aWNlLFxuICAgIFRvdHBTZXJ2aWNlLFxuICAgIFVzZXJTZXJ2aWNlLFxufSBmcm9tICdqc2xpYi9hYnN0cmFjdGlvbnMnO1xuXG5pbXBvcnQgeyBFdmVudFNlcnZpY2UgfSBmcm9tICdqc2xpYi9hYnN0cmFjdGlvbnMvZXZlbnQuc2VydmljZSc7XG5pbXBvcnQgeyBFdmVudFR5cGUgfSBmcm9tICdqc2xpYi9lbnVtcy9ldmVudFR5cGUnO1xuXG5jb25zdCBDYXJkQXR0cmlidXRlczogc3RyaW5nW10gPSBbJ2F1dG9Db21wbGV0ZVR5cGUnLCAnZGF0YS1zdHJpcGUnLCAnaHRtbE5hbWUnLCAnaHRtbElEJywgJ2xhYmVsLXRhZycsXG4gICAgJ3BsYWNlaG9sZGVyJywgJ2xhYmVsLWxlZnQnLCAnbGFiZWwtdG9wJywgJ2RhdGEtcmVjdXJseSddO1xuXG5jb25zdCBDYXJkQXR0cmlidXRlc0V4dGVuZGVkOiBzdHJpbmdbXSA9IFsuLi5DYXJkQXR0cmlidXRlcywgJ2xhYmVsLXJpZ2h0J107XG5cbmNvbnN0IElkZW50aXR5QXR0cmlidXRlczogc3RyaW5nW10gPSBbJ2F1dG9Db21wbGV0ZVR5cGUnLCAnZGF0YS1zdHJpcGUnLCAnaHRtbE5hbWUnLCAnaHRtbElEJywgJ2xhYmVsLXRhZycsXG4gICAgJ3BsYWNlaG9sZGVyJywgJ2xhYmVsLWxlZnQnLCAnbGFiZWwtdG9wJywgJ2RhdGEtcmVjdXJseSddO1xuXG5jb25zdCBVc2VybmFtZUZpZWxkTmFtZXM6IHN0cmluZ1tdID0gW1xuICAgIC8vIEVuZ2xpc2hcbiAgICAndXNlcm5hbWUnLCAndXNlciBuYW1lJywgJ2VtYWlsJywgJ2VtYWlsIGFkZHJlc3MnLCAnZS1tYWlsJywgJ2UtbWFpbCBhZGRyZXNzJywgJ3VzZXJpZCcsICd1c2VyIGlkJyxcbiAgICAnY3VzdG9tZXIgaWQnLCAnbG9naW4gaWQnLFxuICAgIC8vIEdlcm1hblxuICAgICdiZW51dHplcm5hbWUnLCAnYmVudXR6ZXIgbmFtZScsICdlbWFpbCBhZHJlc3NlJywgJ2UtbWFpbCBhZHJlc3NlJywgJ2JlbnV0emVyaWQnLCAnYmVudXR6ZXIgaWQnXTtcblxuY29uc3QgRmlyc3RuYW1lRmllbGROYW1lczogc3RyaW5nW10gPSBbXG4gICAgLy8gRW5nbGlzaFxuICAgICdmLW5hbWUnLCAnZmlyc3QtbmFtZScsICdnaXZlbi1uYW1lJywgJ2ZpcnN0LW4nLFxuICAgIC8vIEdlcm1hblxuICAgICd2b3JuYW1lJ1xuXVxuXG5jb25zdCBMYXN0bmFtZUZpZWxkTmFtZXM6IHN0cmluZ1tdID0gW1xuICAgIC8vIEVuZ2xpc2hcbiAgICAnbC1uYW1lJywgJ2xhc3QtbmFtZScsICdzLW5hbWUnLCAnc3VybmFtZScsICdmYW1pbHktbmFtZScsICdmYW1pbHktbicsICdsYXN0LW4nLFxuICAgIC8vIEdlcm1hblxuICAgICduYWNobmFtZScsICdmYW1pbGllbm5hbWUnXG5dXG5cbmNvbnN0IEV4Y2x1ZGVkQXV0b2ZpbGxUeXBlczogc3RyaW5nW10gPSBbJ3JhZGlvJywgJ2NoZWNrYm94JywgJ2hpZGRlbicsICdmaWxlJywgJ2J1dHRvbicsICdpbWFnZScsICdyZXNldCcsICdzZWFyY2gnXTtcblxuLy8gRWFjaCBpbmRleCByZXByZXNlbnRzIGEgbGFuZ3VhZ2UuIFRoZXNlIHRocmVlIGFycmF5cyBzaG91bGQgYWxsIGJlIHRoZSBzYW1lIGxlbmd0aC5cbi8vIDA6IEVuZ2xpc2gsIDE6IERhbmlzaCwgMjogR2VybWFuL0R1dGNoLCAzOiBGcmVuY2gvU3BhbmlzaC9JdGFsaWFuLCA0OiBSdXNzaWFuLCA1OiBQb3J0dWd1ZXNlXG5jb25zdCBNb250aEFiYnIgPSBbJ21tJywgJ21tJywgJ21tJywgJ21tJywgJ21tJywgJ21tJ107XG5jb25zdCBZZWFyQWJiclNob3J0ID0gWyd5eScsICfDpcOlJywgJ2pqJywgJ2FhJywgJ9Cz0LMnLCAncnInXTtcbmNvbnN0IFllYXJBYmJyTG9uZyA9IFsneXl5eScsICfDpcOlw6XDpScsICdqampqJywgJ2FhJywgJ9Cz0LPQs9CzJywgJ3JycnInXTtcblxuY29uc3QgT3BlcmF0aW9uRGVsYXlzID0gbmV3IE1hcDxzdHJpbmcsIG51bWJlcj4oW1xuICAgIFsnYnV6enNwcm91dC5jb20nLCAxMDBdLFxuXSk7XG5cbi8qIHRzbGludDpkaXNhYmxlICovXG5jb25zdCBJc29Db3VudHJpZXM6IHsgW2lkOiBzdHJpbmddOiBzdHJpbmc7IH0gPSB7XG4gICAgYWZnaGFuaXN0YW46IFwiQUZcIiwgXCJhbGFuZCBpc2xhbmRzXCI6IFwiQVhcIiwgYWxiYW5pYTogXCJBTFwiLCBhbGdlcmlhOiBcIkRaXCIsIFwiYW1lcmljYW4gc2Ftb2FcIjogXCJBU1wiLCBhbmRvcnJhOiBcIkFEXCIsXG4gICAgYW5nb2xhOiBcIkFPXCIsIGFuZ3VpbGxhOiBcIkFJXCIsIGFudGFyY3RpY2E6IFwiQVFcIiwgXCJhbnRpZ3VhIGFuZCBiYXJidWRhXCI6IFwiQUdcIiwgYXJnZW50aW5hOiBcIkFSXCIsIGFybWVuaWE6IFwiQU1cIixcbiAgICBhcnViYTogXCJBV1wiLCBhdXN0cmFsaWE6IFwiQVVcIiwgYXVzdHJpYTogXCJBVFwiLCBhemVyYmFpamFuOiBcIkFaXCIsIGJhaGFtYXM6IFwiQlNcIiwgYmFocmFpbjogXCJCSFwiLCBiYW5nbGFkZXNoOiBcIkJEXCIsXG4gICAgYmFyYmFkb3M6IFwiQkJcIiwgYmVsYXJ1czogXCJCWVwiLCBiZWxnaXVtOiBcIkJFXCIsIGJlbGl6ZTogXCJCWlwiLCBiZW5pbjogXCJCSlwiLCBiZXJtdWRhOiBcIkJNXCIsIGJodXRhbjogXCJCVFwiLFxuICAgIGJvbGl2aWE6IFwiQk9cIiwgXCJib3NuaWEgYW5kIGhlcnplZ292aW5hXCI6IFwiQkFcIiwgYm90c3dhbmE6IFwiQldcIiwgXCJib3V2ZXQgaXNsYW5kXCI6IFwiQlZcIiwgYnJhemlsOiBcIkJSXCIsXG4gICAgXCJicml0aXNoIGluZGlhbiBvY2VhbiB0ZXJyaXRvcnlcIjogXCJJT1wiLCBcImJydW5laSBkYXJ1c3NhbGFtXCI6IFwiQk5cIiwgYnVsZ2FyaWE6IFwiQkdcIiwgXCJidXJraW5hIGZhc29cIjogXCJCRlwiLFxuICAgIGJ1cnVuZGk6IFwiQklcIiwgY2FtYm9kaWE6IFwiS0hcIiwgY2FtZXJvb246IFwiQ01cIiwgY2FuYWRhOiBcIkNBXCIsIFwiY2FwZSB2ZXJkZVwiOiBcIkNWXCIsIFwiY2F5bWFuIGlzbGFuZHNcIjogXCJLWVwiLFxuICAgIFwiY2VudHJhbCBhZnJpY2FuIHJlcHVibGljXCI6IFwiQ0ZcIiwgY2hhZDogXCJURFwiLCBjaGlsZTogXCJDTFwiLCBjaGluYTogXCJDTlwiLCBcImNocmlzdG1hcyBpc2xhbmRcIjogXCJDWFwiLFxuICAgIFwiY29jb3MgKGtlZWxpbmcpIGlzbGFuZHNcIjogXCJDQ1wiLCBjb2xvbWJpYTogXCJDT1wiLCBjb21vcm9zOiBcIktNXCIsIGNvbmdvOiBcIkNHXCIsIFwiY29uZ28sIGRlbW9jcmF0aWMgcmVwdWJsaWNcIjogXCJDRFwiLFxuICAgIFwiY29vayBpc2xhbmRzXCI6IFwiQ0tcIiwgXCJjb3N0YSByaWNhXCI6IFwiQ1JcIiwgXCJjb3RlIGQnaXZvaXJlXCI6IFwiQ0lcIiwgY3JvYXRpYTogXCJIUlwiLCBjdWJhOiBcIkNVXCIsIGN5cHJ1czogXCJDWVwiLFxuICAgIFwiY3plY2ggcmVwdWJsaWNcIjogXCJDWlwiLCBkZW5tYXJrOiBcIkRLXCIsIGRqaWJvdXRpOiBcIkRKXCIsIGRvbWluaWNhOiBcIkRNXCIsIFwiZG9taW5pY2FuIHJlcHVibGljXCI6IFwiRE9cIiwgZWN1YWRvcjogXCJFQ1wiLFxuICAgIGVneXB0OiBcIkVHXCIsIFwiZWwgc2FsdmFkb3JcIjogXCJTVlwiLCBcImVxdWF0b3JpYWwgZ3VpbmVhXCI6IFwiR1FcIiwgZXJpdHJlYTogXCJFUlwiLCBlc3RvbmlhOiBcIkVFXCIsIGV0aGlvcGlhOiBcIkVUXCIsXG4gICAgXCJmYWxrbGFuZCBpc2xhbmRzXCI6IFwiRktcIiwgXCJmYXJvZSBpc2xhbmRzXCI6IFwiRk9cIiwgZmlqaTogXCJGSlwiLCBmaW5sYW5kOiBcIkZJXCIsIGZyYW5jZTogXCJGUlwiLCBcImZyZW5jaCBndWlhbmFcIjogXCJHRlwiLFxuICAgIFwiZnJlbmNoIHBvbHluZXNpYVwiOiBcIlBGXCIsIFwiZnJlbmNoIHNvdXRoZXJuIHRlcnJpdG9yaWVzXCI6IFwiVEZcIiwgZ2Fib246IFwiR0FcIiwgZ2FtYmlhOiBcIkdNXCIsIGdlb3JnaWE6IFwiR0VcIixcbiAgICBnZXJtYW55OiBcIkRFXCIsIGdoYW5hOiBcIkdIXCIsIGdpYnJhbHRhcjogXCJHSVwiLCBncmVlY2U6IFwiR1JcIiwgZ3JlZW5sYW5kOiBcIkdMXCIsIGdyZW5hZGE6IFwiR0RcIiwgZ3VhZGVsb3VwZTogXCJHUFwiLFxuICAgIGd1YW06IFwiR1VcIiwgZ3VhdGVtYWxhOiBcIkdUXCIsIGd1ZXJuc2V5OiBcIkdHXCIsIGd1aW5lYTogXCJHTlwiLCBcImd1aW5lYS1iaXNzYXVcIjogXCJHV1wiLCBndXlhbmE6IFwiR1lcIiwgaGFpdGk6IFwiSFRcIixcbiAgICBcImhlYXJkIGlzbGFuZCAmIG1jZG9uYWxkIGlzbGFuZHNcIjogXCJITVwiLCBcImhvbHkgc2VlICh2YXRpY2FuIGNpdHkgc3RhdGUpXCI6IFwiVkFcIiwgaG9uZHVyYXM6IFwiSE5cIiwgXCJob25nIGtvbmdcIjogXCJIS1wiLFxuICAgIGh1bmdhcnk6IFwiSFVcIiwgaWNlbGFuZDogXCJJU1wiLCBpbmRpYTogXCJJTlwiLCBpbmRvbmVzaWE6IFwiSURcIiwgXCJpcmFuLCBpc2xhbWljIHJlcHVibGljIG9mXCI6IFwiSVJcIiwgaXJhcTogXCJJUVwiLFxuICAgIGlyZWxhbmQ6IFwiSUVcIiwgXCJpc2xlIG9mIG1hblwiOiBcIklNXCIsIGlzcmFlbDogXCJJTFwiLCBpdGFseTogXCJJVFwiLCBqYW1haWNhOiBcIkpNXCIsIGphcGFuOiBcIkpQXCIsIGplcnNleTogXCJKRVwiLFxuICAgIGpvcmRhbjogXCJKT1wiLCBrYXpha2hzdGFuOiBcIktaXCIsIGtlbnlhOiBcIktFXCIsIGtpcmliYXRpOiBcIktJXCIsIFwicmVwdWJsaWMgb2Yga29yZWFcIjogXCJLUlwiLCBcInNvdXRoIGtvcmVhXCI6IFwiS1JcIixcbiAgICBcImRlbW9jcmF0aWMgcGVvcGxlJ3MgcmVwdWJsaWMgb2Yga29yZWFcIjogXCJLUFwiLCBcIm5vcnRoIGtvcmVhXCI6IFwiS1BcIiwga3V3YWl0OiBcIktXXCIsIGt5cmd5enN0YW46IFwiS0dcIixcbiAgICBcImxhbyBwZW9wbGUncyBkZW1vY3JhdGljIHJlcHVibGljXCI6IFwiTEFcIiwgbGF0dmlhOiBcIkxWXCIsIGxlYmFub246IFwiTEJcIiwgbGVzb3RobzogXCJMU1wiLCBsaWJlcmlhOiBcIkxSXCIsXG4gICAgXCJsaWJ5YW4gYXJhYiBqYW1haGlyaXlhXCI6IFwiTFlcIiwgbGllY2h0ZW5zdGVpbjogXCJMSVwiLCBsaXRodWFuaWE6IFwiTFRcIiwgbHV4ZW1ib3VyZzogXCJMVVwiLCBtYWNhbzogXCJNT1wiLFxuICAgIG1hY2Vkb25pYTogXCJNS1wiLCBtYWRhZ2FzY2FyOiBcIk1HXCIsIG1hbGF3aTogXCJNV1wiLCBtYWxheXNpYTogXCJNWVwiLCBtYWxkaXZlczogXCJNVlwiLCBtYWxpOiBcIk1MXCIsIG1hbHRhOiBcIk1UXCIsXG4gICAgXCJtYXJzaGFsbCBpc2xhbmRzXCI6IFwiTUhcIiwgbWFydGluaXF1ZTogXCJNUVwiLCBtYXVyaXRhbmlhOiBcIk1SXCIsIG1hdXJpdGl1czogXCJNVVwiLCBtYXlvdHRlOiBcIllUXCIsIG1leGljbzogXCJNWFwiLFxuICAgIFwibWljcm9uZXNpYSwgZmVkZXJhdGVkIHN0YXRlcyBvZlwiOiBcIkZNXCIsIG1vbGRvdmE6IFwiTURcIiwgbW9uYWNvOiBcIk1DXCIsIG1vbmdvbGlhOiBcIk1OXCIsIG1vbnRlbmVncm86IFwiTUVcIixcbiAgICBtb250c2VycmF0OiBcIk1TXCIsIG1vcm9jY286IFwiTUFcIiwgbW96YW1iaXF1ZTogXCJNWlwiLCBteWFubWFyOiBcIk1NXCIsIG5hbWliaWE6IFwiTkFcIiwgbmF1cnU6IFwiTlJcIiwgbmVwYWw6IFwiTlBcIixcbiAgICBuZXRoZXJsYW5kczogXCJOTFwiLCBcIm5ldGhlcmxhbmRzIGFudGlsbGVzXCI6IFwiQU5cIiwgXCJuZXcgY2FsZWRvbmlhXCI6IFwiTkNcIiwgXCJuZXcgemVhbGFuZFwiOiBcIk5aXCIsIG5pY2FyYWd1YTogXCJOSVwiLFxuICAgIG5pZ2VyOiBcIk5FXCIsIG5pZ2VyaWE6IFwiTkdcIiwgbml1ZTogXCJOVVwiLCBcIm5vcmZvbGsgaXNsYW5kXCI6IFwiTkZcIiwgXCJub3J0aGVybiBtYXJpYW5hIGlzbGFuZHNcIjogXCJNUFwiLCBub3J3YXk6IFwiTk9cIixcbiAgICBvbWFuOiBcIk9NXCIsIHBha2lzdGFuOiBcIlBLXCIsIHBhbGF1OiBcIlBXXCIsIFwicGFsZXN0aW5pYW4gdGVycml0b3J5LCBvY2N1cGllZFwiOiBcIlBTXCIsIHBhbmFtYTogXCJQQVwiLFxuICAgIFwicGFwdWEgbmV3IGd1aW5lYVwiOiBcIlBHXCIsIHBhcmFndWF5OiBcIlBZXCIsIHBlcnU6IFwiUEVcIiwgcGhpbGlwcGluZXM6IFwiUEhcIiwgcGl0Y2Fpcm46IFwiUE5cIiwgcG9sYW5kOiBcIlBMXCIsXG4gICAgcG9ydHVnYWw6IFwiUFRcIiwgXCJwdWVydG8gcmljb1wiOiBcIlBSXCIsIHFhdGFyOiBcIlFBXCIsIHJldW5pb246IFwiUkVcIiwgcm9tYW5pYTogXCJST1wiLCBcInJ1c3NpYW4gZmVkZXJhdGlvblwiOiBcIlJVXCIsXG4gICAgcndhbmRhOiBcIlJXXCIsIFwic2FpbnQgYmFydGhlbGVteVwiOiBcIkJMXCIsIFwic2FpbnQgaGVsZW5hXCI6IFwiU0hcIiwgXCJzYWludCBraXR0cyBhbmQgbmV2aXNcIjogXCJLTlwiLCBcInNhaW50IGx1Y2lhXCI6IFwiTENcIixcbiAgICBcInNhaW50IG1hcnRpblwiOiBcIk1GXCIsIFwic2FpbnQgcGllcnJlIGFuZCBtaXF1ZWxvblwiOiBcIlBNXCIsIFwic2FpbnQgdmluY2VudCBhbmQgZ3JlbmFkaW5lc1wiOiBcIlZDXCIsIHNhbW9hOiBcIldTXCIsXG4gICAgXCJzYW4gbWFyaW5vXCI6IFwiU01cIiwgXCJzYW8gdG9tZSBhbmQgcHJpbmNpcGVcIjogXCJTVFwiLCBcInNhdWRpIGFyYWJpYVwiOiBcIlNBXCIsIHNlbmVnYWw6IFwiU05cIiwgc2VyYmlhOiBcIlJTXCIsXG4gICAgc2V5Y2hlbGxlczogXCJTQ1wiLCBcInNpZXJyYSBsZW9uZVwiOiBcIlNMXCIsIHNpbmdhcG9yZTogXCJTR1wiLCBzbG92YWtpYTogXCJTS1wiLCBzbG92ZW5pYTogXCJTSVwiLCBcInNvbG9tb24gaXNsYW5kc1wiOiBcIlNCXCIsXG4gICAgc29tYWxpYTogXCJTT1wiLCBcInNvdXRoIGFmcmljYVwiOiBcIlpBXCIsIFwic291dGggZ2VvcmdpYSBhbmQgc2FuZHdpY2ggaXNsLlwiOiBcIkdTXCIsIHNwYWluOiBcIkVTXCIsIFwic3JpIGxhbmthXCI6IFwiTEtcIixcbiAgICBzdWRhbjogXCJTRFwiLCBzdXJpbmFtZTogXCJTUlwiLCBcInN2YWxiYXJkIGFuZCBqYW4gbWF5ZW5cIjogXCJTSlwiLCBzd2F6aWxhbmQ6IFwiU1pcIiwgc3dlZGVuOiBcIlNFXCIsIHN3aXR6ZXJsYW5kOiBcIkNIXCIsXG4gICAgXCJzeXJpYW4gYXJhYiByZXB1YmxpY1wiOiBcIlNZXCIsIHRhaXdhbjogXCJUV1wiLCB0YWppa2lzdGFuOiBcIlRKXCIsIHRhbnphbmlhOiBcIlRaXCIsIHRoYWlsYW5kOiBcIlRIXCIsIFwidGltb3ItbGVzdGVcIjogXCJUTFwiLFxuICAgIHRvZ286IFwiVEdcIiwgdG9rZWxhdTogXCJUS1wiLCB0b25nYTogXCJUT1wiLCBcInRyaW5pZGFkIGFuZCB0b2JhZ29cIjogXCJUVFwiLCB0dW5pc2lhOiBcIlROXCIsIHR1cmtleTogXCJUUlwiLFxuICAgIHR1cmttZW5pc3RhbjogXCJUTVwiLCBcInR1cmtzIGFuZCBjYWljb3MgaXNsYW5kc1wiOiBcIlRDXCIsIHR1dmFsdTogXCJUVlwiLCB1Z2FuZGE6IFwiVUdcIiwgdWtyYWluZTogXCJVQVwiLFxuICAgIFwidW5pdGVkIGFyYWIgZW1pcmF0ZXNcIjogXCJBRVwiLCBcInVuaXRlZCBraW5nZG9tXCI6IFwiR0JcIiwgXCJ1bml0ZWQgc3RhdGVzXCI6IFwiVVNcIixcbiAgICBcInVuaXRlZCBzdGF0ZXMgb3V0bHlpbmcgaXNsYW5kc1wiOiBcIlVNXCIsIHVydWd1YXk6IFwiVVlcIiwgdXpiZWtpc3RhbjogXCJVWlwiLCB2YW51YXR1OiBcIlZVXCIsIHZlbmV6dWVsYTogXCJWRVwiLFxuICAgIHZpZXRuYW06IFwiVk5cIiwgXCJ2aXJnaW4gaXNsYW5kcywgYnJpdGlzaFwiOiBcIlZHXCIsIFwidmlyZ2luIGlzbGFuZHMsIHUucy5cIjogXCJWSVwiLCBcIndhbGxpcyBhbmQgZnV0dW5hXCI6IFwiV0ZcIixcbiAgICBcIndlc3Rlcm4gc2FoYXJhXCI6IFwiRUhcIiwgeWVtZW46IFwiWUVcIiwgemFtYmlhOiBcIlpNXCIsIHppbWJhYndlOiBcIlpXXCIsXG59O1xuXG5jb25zdCBJc29TdGF0ZXM6IHsgW2lkOiBzdHJpbmddOiBzdHJpbmc7IH0gPSB7XG4gICAgYWxhYmFtYTogJ0FMJywgYWxhc2thOiAnQUsnLCAnYW1lcmljYW4gc2Ftb2EnOiAnQVMnLCBhcml6b25hOiAnQVonLCBhcmthbnNhczogJ0FSJywgY2FsaWZvcm5pYTogJ0NBJyxcbiAgICBjb2xvcmFkbzogJ0NPJywgY29ubmVjdGljdXQ6ICdDVCcsIGRlbGF3YXJlOiAnREUnLCAnZGlzdHJpY3Qgb2YgY29sdW1iaWEnOiAnREMnLFxuICAgICdmZWRlcmF0ZWQgc3RhdGVzIG9mIG1pY3JvbmVzaWEnOiAnRk0nLCBmbG9yaWRhOiAnRkwnLCBnZW9yZ2lhOiAnR0EnLCBndWFtOiAnR1UnLCBoYXdhaWk6ICdISScsIGlkYWhvOiAnSUQnLFxuICAgIGlsbGlub2lzOiAnSUwnLCBpbmRpYW5hOiAnSU4nLCBpb3dhOiAnSUEnLCBrYW5zYXM6ICdLUycsIGtlbnR1Y2t5OiAnS1knLCBsb3Vpc2lhbmE6ICdMQScsIG1haW5lOiAnTUUnLFxuICAgICdtYXJzaGFsbCBpc2xhbmRzJzogJ01IJywgbWFyeWxhbmQ6ICdNRCcsIG1hc3NhY2h1c2V0dHM6ICdNQScsIG1pY2hpZ2FuOiAnTUknLCBtaW5uZXNvdGE6ICdNTicsIG1pc3Npc3NpcHBpOiAnTVMnLFxuICAgIG1pc3NvdXJpOiAnTU8nLCBtb250YW5hOiAnTVQnLCBuZWJyYXNrYTogJ05FJywgbmV2YWRhOiAnTlYnLCAnbmV3IGhhbXBzaGlyZSc6ICdOSCcsICduZXcgamVyc2V5JzogJ05KJyxcbiAgICAnbmV3IG1leGljbyc6ICdOTScsICduZXcgeW9yayc6ICdOWScsICdub3J0aCBjYXJvbGluYSc6ICdOQycsICdub3J0aCBkYWtvdGEnOiAnTkQnLFxuICAgICdub3J0aGVybiBtYXJpYW5hIGlzbGFuZHMnOiAnTVAnLCBvaGlvOiAnT0gnLCBva2xhaG9tYTogJ09LJywgb3JlZ29uOiAnT1InLCBwYWxhdTogJ1BXJywgcGVubnN5bHZhbmlhOiAnUEEnLFxuICAgICdwdWVydG8gcmljbyc6ICdQUicsICdyaG9kZSBpc2xhbmQnOiAnUkknLCAnc291dGggY2Fyb2xpbmEnOiAnU0MnLCAnc291dGggZGFrb3RhJzogJ1NEJywgdGVubmVzc2VlOiAnVE4nLFxuICAgIHRleGFzOiAnVFgnLCB1dGFoOiAnVVQnLCB2ZXJtb250OiAnVlQnLCAndmlyZ2luIGlzbGFuZHMnOiAnVkknLCB2aXJnaW5pYTogJ1ZBJywgd2FzaGluZ3RvbjogJ1dBJyxcbiAgICAnd2VzdCB2aXJnaW5pYSc6ICdXVicsIHdpc2NvbnNpbjogJ1dJJywgd3lvbWluZzogJ1dZJyxcbn07XG5cbnZhciBJc29Qcm92aW5jZXM6IHsgW2lkOiBzdHJpbmddOiBzdHJpbmc7IH0gPSB7XG4gICAgYWxiZXJ0YTogJ0FCJywgJ2JyaXRpc2ggY29sdW1iaWEnOiAnQkMnLCBtYW5pdG9iYTogJ01CJywgJ25ldyBicnVuc3dpY2snOiAnTkInLCAnbmV3Zm91bmRsYW5kIGFuZCBsYWJyYWRvcic6ICdOTCcsXG4gICAgJ25vdmEgc2NvdGlhJzogJ05TJywgb250YXJpbzogJ09OJywgJ3ByaW5jZSBlZHdhcmQgaXNsYW5kJzogJ1BFJywgcXVlYmVjOiAnUUMnLCBzYXNrYXRjaGV3YW46ICdTSycsXG59O1xuLyogdHNsaW50OmVuYWJsZSAqL1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBdXRvZmlsbFNlcnZpY2UgaW1wbGVtZW50cyBBdXRvZmlsbFNlcnZpY2VJbnRlcmZhY2Uge1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBjaXBoZXJTZXJ2aWNlOiBDaXBoZXJTZXJ2aWNlLCBwcml2YXRlIHVzZXJTZXJ2aWNlOiBVc2VyU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSB0b3RwU2VydmljZTogVG90cFNlcnZpY2UsIHByaXZhdGUgZXZlbnRTZXJ2aWNlOiBFdmVudFNlcnZpY2UpIHsgfVxuXG4gICAgZ2V0Rm9ybXNXaXRoUGFzc3dvcmRGaWVsZHMocGFnZURldGFpbHM6IEF1dG9maWxsUGFnZURldGFpbHMpOiBhbnlbXSB7XG4gICAgICAgIGNvbnN0IGZvcm1EYXRhOiBhbnlbXSA9IFtdO1xuXG4gICAgICAgIGNvbnN0IHBhc3N3b3JkRmllbGRzID0gdGhpcy5sb2FkUGFzc3dvcmRGaWVsZHMocGFnZURldGFpbHMsIHRydWUsIHRydWUsIGZhbHNlLCBmYWxzZSk7XG4gICAgICAgIGlmIChwYXNzd29yZEZpZWxkcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBmb3JtRGF0YTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoY29uc3QgZm9ybUtleSBpbiBwYWdlRGV0YWlscy5mb3Jtcykge1xuICAgICAgICAgICAgaWYgKCFwYWdlRGV0YWlscy5mb3Jtcy5oYXNPd25Qcm9wZXJ0eShmb3JtS2V5KSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBmb3JtUGFzc3dvcmRGaWVsZHMgPSBwYXNzd29yZEZpZWxkcy5maWx0ZXIoKHBmKSA9PiBmb3JtS2V5ID09PSBwZi5mb3JtKTtcbiAgICAgICAgICAgIGlmIChmb3JtUGFzc3dvcmRGaWVsZHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGxldCB1ZiA9IHRoaXMuZmluZFVzZXJuYW1lRmllbGQocGFnZURldGFpbHMsIGZvcm1QYXNzd29yZEZpZWxkc1swXSwgZmFsc2UsIGZhbHNlLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgaWYgKHVmID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gbm90IGFibGUgdG8gZmluZCBhbnkgdmlld2FibGUgdXNlcm5hbWUgZmllbGRzLiBtYXliZSB0aGVyZSBhcmUgc29tZSBcImhpZGRlblwiIG9uZXM/XG4gICAgICAgICAgICAgICAgICAgIHVmID0gdGhpcy5maW5kVXNlcm5hbWVGaWVsZChwYWdlRGV0YWlscywgZm9ybVBhc3N3b3JkRmllbGRzWzBdLCB0cnVlLCB0cnVlLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvcm1EYXRhLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBmb3JtOiBwYWdlRGV0YWlscy5mb3Jtc1tmb3JtS2V5XSxcbiAgICAgICAgICAgICAgICAgICAgcGFzc3dvcmQ6IGZvcm1QYXNzd29yZEZpZWxkc1swXSxcbiAgICAgICAgICAgICAgICAgICAgdXNlcm5hbWU6IHVmLFxuICAgICAgICAgICAgICAgICAgICBwYXNzd29yZHM6IGZvcm1QYXNzd29yZEZpZWxkcyxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmb3JtRGF0YTtcbiAgICB9XG5cbiAgICBhc3luYyBkb0F1dG9GaWxsKG9wdGlvbnM6IGFueSkge1xuICAgICAgICBsZXQgdG90cFByb21pc2U6IFByb21pc2U8c3RyaW5nPiA9IG51bGw7XG4gICAgICAgIGNvbnN0IHRhYiA9IGF3YWl0IHRoaXMuZ2V0QWN0aXZlVGFiKCk7XG4gICAgICAgIGlmICghdGFiIHx8ICFvcHRpb25zLmNpcGhlciB8fCAhb3B0aW9ucy5wYWdlRGV0YWlscyB8fCAhb3B0aW9ucy5wYWdlRGV0YWlscy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm90aGluZyB0byBhdXRvLWZpbGwuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjYW5BY2Nlc3NQcmVtaXVtID0gYXdhaXQgdGhpcy51c2VyU2VydmljZS5jYW5BY2Nlc3NQcmVtaXVtKCk7XG4gICAgICAgIGxldCBkaWRBdXRvZmlsbCA9IGZhbHNlO1xuICAgICAgICBvcHRpb25zLnBhZ2VEZXRhaWxzLmZvckVhY2goKHBkOiBhbnkpID0+IHtcbiAgICAgICAgICAgIC8vIG1ha2Ugc3VyZSB3ZSdyZSBzdGlsbCBvbiBjb3JyZWN0IHRhYlxuICAgICAgICAgICAgaWYgKHBkLnRhYi5pZCAhPT0gdGFiLmlkIHx8IHBkLnRhYi51cmwgIT09IHRhYi51cmwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGZpbGxTY3JpcHQgPSB0aGlzLmdlbmVyYXRlRmlsbFNjcmlwdChwZC5kZXRhaWxzLCB7XG4gICAgICAgICAgICAgICAgc2tpcFVzZXJuYW1lT25seUZpbGw6IG9wdGlvbnMuc2tpcFVzZXJuYW1lT25seUZpbGwgfHwgZmFsc2UsXG4gICAgICAgICAgICAgICAgb25seUVtcHR5RmllbGRzOiBvcHRpb25zLm9ubHlFbXB0eUZpZWxkcyB8fCBmYWxzZSxcbiAgICAgICAgICAgICAgICBvbmx5VmlzaWJsZUZpZWxkczogb3B0aW9ucy5vbmx5VmlzaWJsZUZpZWxkcyB8fCBmYWxzZSxcbiAgICAgICAgICAgICAgICBmaWxsTmV3UGFzc3dvcmQ6IG9wdGlvbnMuZmlsbE5ld1Bhc3N3b3JkIHx8IGZhbHNlLFxuICAgICAgICAgICAgICAgIGNpcGhlcjogb3B0aW9ucy5jaXBoZXIsXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKCFmaWxsU2NyaXB0IHx8ICFmaWxsU2NyaXB0LnNjcmlwdCB8fCAhZmlsbFNjcmlwdC5zY3JpcHQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBBZGQgYSBzbWFsbCBkZWxheSBiZXR3ZWVuIG9wZXJhdGlvbnNcbiAgICAgICAgICAgIGZpbGxTY3JpcHQucHJvcGVydGllcy5kZWxheV9iZXR3ZWVuX29wZXJhdGlvbnMgPSAyMDtcblxuICAgICAgICAgICAgZGlkQXV0b2ZpbGwgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKCFvcHRpb25zLnNraXBMYXN0VXNlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2lwaGVyU2VydmljZS51cGRhdGVMYXN0VXNlZERhdGUob3B0aW9ucy5jaXBoZXIuaWQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBCcm93c2VyQXBpLnRhYlNlbmRNZXNzYWdlKHRhYiwge1xuICAgICAgICAgICAgICAgIGNvbW1hbmQ6ICdmaWxsRm9ybScsXG4gICAgICAgICAgICAgICAgZmlsbFNjcmlwdDogZmlsbFNjcmlwdCxcbiAgICAgICAgICAgICAgICB1cmw6IHRhYi51cmwsXG4gICAgICAgICAgICB9LCB7IGZyYW1lSWQ6IHBkLmZyYW1lSWQgfSk7XG5cbiAgICAgICAgICAgIGlmIChvcHRpb25zLmNpcGhlci50eXBlICE9PSBDaXBoZXJUeXBlLkxvZ2luIHx8IHRvdHBQcm9taXNlIHx8IG9wdGlvbnMuc2tpcFRvdHAgfHxcbiAgICAgICAgICAgICAgICAhb3B0aW9ucy5jaXBoZXIubG9naW4udG90cCB8fCAoIWNhbkFjY2Vzc1ByZW1pdW0gJiYgIW9wdGlvbnMuY2lwaGVyLm9yZ2FuaXphdGlvblVzZVRvdHApKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0b3RwUHJvbWlzZSA9IHRoaXMudG90cFNlcnZpY2UuaXNBdXRvQ29weUVuYWJsZWQoKS50aGVuKChlbmFibGVkKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudG90cFNlcnZpY2UuZ2V0Q29kZShvcHRpb25zLmNpcGhlci5sb2dpbi50b3RwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKGRpZEF1dG9maWxsKSB7XG4gICAgICAgICAgICB0aGlzLmV2ZW50U2VydmljZS5jb2xsZWN0KEV2ZW50VHlwZS5DaXBoZXJfQ2xpZW50QXV0b2ZpbGxlZCwgb3B0aW9ucy5jaXBoZXIuaWQpO1xuICAgICAgICAgICAgaWYgKHRvdHBQcm9taXNlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgdG90cFByb21pc2U7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdEaWQgbm90IGF1dG8tZmlsbC4nKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIGRvQXV0b0ZpbGxBY3RpdmVUYWIocGFnZURldGFpbHM6IGFueSwgZnJvbUNvbW1hbmQ6IGJvb2xlYW4pIHtcbiAgICAgICAgY29uc3QgdGFiID0gYXdhaXQgdGhpcy5nZXRBY3RpdmVUYWIoKTtcbiAgICAgICAgaWYgKCF0YWIgfHwgIXRhYi51cmwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBjaXBoZXI6IENpcGhlclZpZXc7XG4gICAgICAgIGlmIChmcm9tQ29tbWFuZCkge1xuICAgICAgICAgICAgY2lwaGVyID0gYXdhaXQgdGhpcy5jaXBoZXJTZXJ2aWNlLmdldE5leHRDaXBoZXJGb3JVcmwodGFiLnVybCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBsYXN0TGF1bmNoZWRDaXBoZXIgPSBhd2FpdCB0aGlzLmNpcGhlclNlcnZpY2UuZ2V0TGFzdExhdW5jaGVkRm9yVXJsKHRhYi51cmwpO1xuICAgICAgICAgICAgaWYgKGxhc3RMYXVuY2hlZENpcGhlciAmJiBEYXRlLm5vdygpLnZhbHVlT2YoKSAtIGxhc3RMYXVuY2hlZENpcGhlci5sb2NhbERhdGE/Lmxhc3RMYXVuY2hlZD8udmFsdWVPZigpIDwgMzAwMDApIHtcbiAgICAgICAgICAgICAgICBjaXBoZXIgPSBsYXN0TGF1bmNoZWRDaXBoZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjaXBoZXIgPSBhd2FpdCB0aGlzLmNpcGhlclNlcnZpY2UuZ2V0TGFzdFVzZWRGb3JVcmwodGFiLnVybCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBhdXRvRmlsbFJlc3BvbnNlID0gYXdhaXQgdGhpcy5kb0F1dG9GaWxsKHtcbiAgICAgICAgICAgIGNpcGhlcjogY2lwaGVyLFxuICAgICAgICAgICAgcGFnZURldGFpbHM6IHBhZ2VEZXRhaWxzLFxuICAgICAgICAgICAgc2tpcFRvdHA6ICFmcm9tQ29tbWFuZCxcbiAgICAgICAgICAgIHNraXBMYXN0VXNlZDogIWZyb21Db21tYW5kLFxuICAgICAgICAgICAgc2tpcFVzZXJuYW1lT25seUZpbGw6ICFmcm9tQ29tbWFuZCxcbiAgICAgICAgICAgIG9ubHlFbXB0eUZpZWxkczogIWZyb21Db21tYW5kLFxuICAgICAgICAgICAgb25seVZpc2libGVGaWVsZHM6ICFmcm9tQ29tbWFuZCxcbiAgICAgICAgICAgIGZpbGxOZXdQYXNzd29yZDogZnJvbUNvbW1hbmQsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIE9ubHkgdXBkYXRlIGxhc3QgdXNlZCBpbmRleCBpZiBkb0F1dG9GaWxsIGRpZG4ndCB0aHJvdyBhbiBleGNlcHRpb25cbiAgICAgICAgaWYgKGZyb21Db21tYW5kKSB7XG4gICAgICAgICAgICB0aGlzLmNpcGhlclNlcnZpY2UudXBkYXRlTGFzdFVzZWRJbmRleEZvclVybCh0YWIudXJsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhdXRvRmlsbFJlc3BvbnNlO1xuICAgIH1cblxuICAgIC8vIEhlbHBlcnNcblxuICAgIHByaXZhdGUgYXN5bmMgZ2V0QWN0aXZlVGFiKCk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIGNvbnN0IHRhYiA9IGF3YWl0IEJyb3dzZXJBcGkuZ2V0VGFiRnJvbUN1cnJlbnRXaW5kb3coKTtcbiAgICAgICAgaWYgKCF0YWIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gdGFiIGZvdW5kLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRhYjtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdlbmVyYXRlRmlsbFNjcmlwdChwYWdlRGV0YWlsczogQXV0b2ZpbGxQYWdlRGV0YWlscywgb3B0aW9uczogYW55KTogQXV0b2ZpbGxTY3JpcHQge1xuICAgICAgICBpZiAoIXBhZ2VEZXRhaWxzIHx8ICFvcHRpb25zLmNpcGhlcikge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgZmlsbFNjcmlwdCA9IG5ldyBBdXRvZmlsbFNjcmlwdChwYWdlRGV0YWlscy5kb2N1bWVudFVVSUQpO1xuICAgICAgICBjb25zdCBmaWxsZWRGaWVsZHM6IHsgW2lkOiBzdHJpbmddOiBBdXRvZmlsbEZpZWxkOyB9ID0ge307XG4gICAgICAgIGNvbnN0IGZpZWxkcyA9IG9wdGlvbnMuY2lwaGVyLmZpZWxkcztcblxuICAgICAgICBpZiAoZmllbGRzICYmIGZpZWxkcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IGZpZWxkTmFtZXM6IHN0cmluZ1tdID0gW107XG5cbiAgICAgICAgICAgIGZpZWxkcy5mb3JFYWNoKChmOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5oYXNWYWx1ZShmLm5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpZWxkTmFtZXMucHVzaChmLm5hbWUudG9Mb3dlckNhc2UoKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHBhZ2VEZXRhaWxzLmZpZWxkcy5mb3JFYWNoKChmaWVsZDogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGZpbGxlZEZpZWxkcy5oYXNPd25Qcm9wZXJ0eShmaWVsZC5vcGlkKSB8fCAhZmllbGQudmlld2FibGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnN0IG1hdGNoaW5nSW5kZXggPSB0aGlzLmZpbmRNYXRjaGluZ0ZpZWxkSW5kZXgoZmllbGQsIGZpZWxkTmFtZXMpO1xuICAgICAgICAgICAgICAgIGlmIChtYXRjaGluZ0luZGV4ID4gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHZhbCA9IGZpZWxkc1ttYXRjaGluZ0luZGV4XS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbCA9PSBudWxsICYmIGZpZWxkc1ttYXRjaGluZ0luZGV4XS50eXBlID09PSBGaWVsZFR5cGUuQm9vbGVhbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsID0gJ2ZhbHNlJztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGZpbGxlZEZpZWxkc1tmaWVsZC5vcGlkXSA9IGZpZWxkO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZpbGxCeU9waWQoZmlsbFNjcmlwdCwgZmllbGQsIHZhbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBzd2l0Y2ggKG9wdGlvbnMuY2lwaGVyLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgQ2lwaGVyVHlwZS5Mb2dpbjpcbiAgICAgICAgICAgICAgICBmaWxsU2NyaXB0ID0gdGhpcy5nZW5lcmF0ZUxvZ2luRmlsbFNjcmlwdChmaWxsU2NyaXB0LCBwYWdlRGV0YWlscywgZmlsbGVkRmllbGRzLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgQ2lwaGVyVHlwZS5DYXJkOlxuICAgICAgICAgICAgICAgIGZpbGxTY3JpcHQgPSB0aGlzLmdlbmVyYXRlQ2FyZEZpbGxTY3JpcHQoZmlsbFNjcmlwdCwgcGFnZURldGFpbHMsIGZpbGxlZEZpZWxkcywgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIENpcGhlclR5cGUuSWRlbnRpdHk6XG4gICAgICAgICAgICAgICAgZmlsbFNjcmlwdCA9IHRoaXMuZ2VuZXJhdGVJZGVudGl0eUZpbGxTY3JpcHQoZmlsbFNjcmlwdCwgcGFnZURldGFpbHMsIGZpbGxlZEZpZWxkcywgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZpbGxTY3JpcHQ7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZW5lcmF0ZUxvZ2luRmlsbFNjcmlwdChmaWxsU2NyaXB0OiBBdXRvZmlsbFNjcmlwdCwgcGFnZURldGFpbHM6IGFueSxcbiAgICAgICAgZmlsbGVkRmllbGRzOiB7IFtpZDogc3RyaW5nXTogQXV0b2ZpbGxGaWVsZDsgfSwgb3B0aW9uczogYW55KTogQXV0b2ZpbGxTY3JpcHQge1xuICAgICAgICBpZiAoIW9wdGlvbnMuY2lwaGVyLmxvZ2luKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHBhc3N3b3JkczogQXV0b2ZpbGxGaWVsZFtdID0gW107XG4gICAgICAgIGNvbnN0IHVzZXJuYW1lczogQXV0b2ZpbGxGaWVsZFtdID0gW107XG4gICAgICAgIGxldCBwZjogQXV0b2ZpbGxGaWVsZCA9IG51bGw7XG4gICAgICAgIGxldCB1c2VybmFtZTogQXV0b2ZpbGxGaWVsZCA9IG51bGw7XG4gICAgICAgIGNvbnN0IGxvZ2luID0gb3B0aW9ucy5jaXBoZXIubG9naW47XG5cbiAgICAgICAgaWYgKCFsb2dpbi5wYXNzd29yZCB8fCBsb2dpbi5wYXNzd29yZCA9PT0gJycpIHtcbiAgICAgICAgICAgIC8vIE5vIHBhc3N3b3JkIGZvciB0aGlzIGxvZ2luLiBNYXliZSB0aGV5IGp1c3Qgd2FudGVkIHRvIGF1dG8tZmlsbCBzb21lIGN1c3RvbSBmaWVsZHM/XG4gICAgICAgICAgICBmaWxsU2NyaXB0ID0gdGhpcy5zZXRGaWxsU2NyaXB0Rm9yRm9jdXMoZmlsbGVkRmllbGRzLCBmaWxsU2NyaXB0KTtcbiAgICAgICAgICAgIHJldHVybiBmaWxsU2NyaXB0O1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHBhc3N3b3JkRmllbGRzID0gdGhpcy5sb2FkUGFzc3dvcmRGaWVsZHMocGFnZURldGFpbHMsIGZhbHNlLCBmYWxzZSwgb3B0aW9ucy5vbmx5RW1wdHlGaWVsZHMsXG4gICAgICAgICAgICBvcHRpb25zLmZpbGxOZXdQYXNzd29yZCk7XG4gICAgICAgIGlmICghcGFzc3dvcmRGaWVsZHMubGVuZ3RoICYmICFvcHRpb25zLm9ubHlWaXNpYmxlRmllbGRzKSB7XG4gICAgICAgICAgICAvLyBub3QgYWJsZSB0byBmaW5kIGFueSB2aWV3YWJsZSBwYXNzd29yZCBmaWVsZHMuIG1heWJlIHRoZXJlIGFyZSBzb21lIFwiaGlkZGVuXCIgb25lcz9cbiAgICAgICAgICAgIHBhc3N3b3JkRmllbGRzID0gdGhpcy5sb2FkUGFzc3dvcmRGaWVsZHMocGFnZURldGFpbHMsIHRydWUsIHRydWUsIG9wdGlvbnMub25seUVtcHR5RmllbGRzLFxuICAgICAgICAgICAgICAgIG9wdGlvbnMuZmlsbE5ld1Bhc3N3b3JkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoY29uc3QgZm9ybUtleSBpbiBwYWdlRGV0YWlscy5mb3Jtcykge1xuICAgICAgICAgICAgaWYgKCFwYWdlRGV0YWlscy5mb3Jtcy5oYXNPd25Qcm9wZXJ0eShmb3JtS2V5KSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBwYXNzd29yZEZpZWxkc0ZvckZvcm06IEF1dG9maWxsRmllbGRbXSA9IFtdO1xuICAgICAgICAgICAgcGFzc3dvcmRGaWVsZHMuZm9yRWFjaCgocGFzc0ZpZWxkKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGZvcm1LZXkgPT09IHBhc3NGaWVsZC5mb3JtKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhc3N3b3JkRmllbGRzRm9yRm9ybS5wdXNoKHBhc3NGaWVsZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHBhc3N3b3JkRmllbGRzLmZvckVhY2goKHBhc3NGaWVsZCkgPT4ge1xuICAgICAgICAgICAgICAgIHBmID0gcGFzc0ZpZWxkO1xuICAgICAgICAgICAgICAgIHBhc3N3b3Jkcy5wdXNoKHBmKTtcblxuICAgICAgICAgICAgICAgIGlmIChsb2dpbi51c2VybmFtZSkge1xuICAgICAgICAgICAgICAgICAgICB1c2VybmFtZSA9IHRoaXMuZmluZFVzZXJuYW1lRmllbGQocGFnZURldGFpbHMsIHBmLCBmYWxzZSwgZmFsc2UsIGZhbHNlKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIXVzZXJuYW1lICYmICFvcHRpb25zLm9ubHlWaXNpYmxlRmllbGRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBub3QgYWJsZSB0byBmaW5kIGFueSB2aWV3YWJsZSB1c2VybmFtZSBmaWVsZHMuIG1heWJlIHRoZXJlIGFyZSBzb21lIFwiaGlkZGVuXCIgb25lcz9cbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJuYW1lID0gdGhpcy5maW5kVXNlcm5hbWVGaWVsZChwYWdlRGV0YWlscywgcGYsIHRydWUsIHRydWUsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmICh1c2VybmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdXNlcm5hbWVzLnB1c2godXNlcm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGFzc3dvcmRGaWVsZHMubGVuZ3RoICYmICFwYXNzd29yZHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAvLyBUaGUgcGFnZSBkb2VzIG5vdCBoYXZlIGFueSBmb3JtcyB3aXRoIHBhc3N3b3JkIGZpZWxkcy4gVXNlIHRoZSBmaXJzdCBwYXNzd29yZCBmaWVsZCBvbiB0aGUgcGFnZSBhbmQgdGhlXG4gICAgICAgICAgICAvLyBpbnB1dCBmaWVsZCBqdXN0IGJlZm9yZSBpdCBhcyB0aGUgdXNlcm5hbWUuXG5cbiAgICAgICAgICAgIHBmID0gcGFzc3dvcmRGaWVsZHNbMF07XG4gICAgICAgICAgICBwYXNzd29yZHMucHVzaChwZik7XG5cbiAgICAgICAgICAgIGlmIChsb2dpbi51c2VybmFtZSAmJiBwZi5lbGVtZW50TnVtYmVyID4gMCkge1xuICAgICAgICAgICAgICAgIHVzZXJuYW1lID0gdGhpcy5maW5kVXNlcm5hbWVGaWVsZChwYWdlRGV0YWlscywgcGYsIGZhbHNlLCBmYWxzZSwgdHJ1ZSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIXVzZXJuYW1lICYmICFvcHRpb25zLm9ubHlWaXNpYmxlRmllbGRzKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIG5vdCBhYmxlIHRvIGZpbmQgYW55IHZpZXdhYmxlIHVzZXJuYW1lIGZpZWxkcy4gbWF5YmUgdGhlcmUgYXJlIHNvbWUgXCJoaWRkZW5cIiBvbmVzP1xuICAgICAgICAgICAgICAgICAgICB1c2VybmFtZSA9IHRoaXMuZmluZFVzZXJuYW1lRmllbGQocGFnZURldGFpbHMsIHBmLCB0cnVlLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodXNlcm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdXNlcm5hbWVzLnB1c2godXNlcm5hbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghcGFzc3dvcmRGaWVsZHMubGVuZ3RoICYmICFvcHRpb25zLnNraXBVc2VybmFtZU9ubHlGaWxsKSB7XG4gICAgICAgICAgICAvLyBObyBwYXNzd29yZCBmaWVsZHMgb24gdGhpcyBwYWdlLiBMZXQncyB0cnkgdG8ganVzdCBmdXp6eSBmaWxsIHRoZSB1c2VybmFtZS5cbiAgICAgICAgICAgIHBhZ2VEZXRhaWxzLmZpZWxkcy5mb3JFYWNoKChmOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZi52aWV3YWJsZSAmJiAoZi50eXBlID09PSAndGV4dCcgfHwgZi50eXBlID09PSAnZW1haWwnIHx8IGYudHlwZSA9PT0gJ3RlbCcpICYmXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmllbGRJc0Z1enp5TWF0Y2goZiwgVXNlcm5hbWVGaWVsZE5hbWVzKSkge1xuICAgICAgICAgICAgICAgICAgICB1c2VybmFtZXMucHVzaChmKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHVzZXJuYW1lcy5mb3JFYWNoKCh1KSA9PiB7XG4gICAgICAgICAgICBpZiAoZmlsbGVkRmllbGRzLmhhc093blByb3BlcnR5KHUub3BpZCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZpbGxlZEZpZWxkc1t1Lm9waWRdID0gdTtcbiAgICAgICAgICAgIHRoaXMuZmlsbEJ5T3BpZChmaWxsU2NyaXB0LCB1LCBsb2dpbi51c2VybmFtZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHBhc3N3b3Jkcy5mb3JFYWNoKChwKSA9PiB7XG4gICAgICAgICAgICBpZiAoZmlsbGVkRmllbGRzLmhhc093blByb3BlcnR5KHAub3BpZCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZpbGxlZEZpZWxkc1twLm9waWRdID0gcDtcbiAgICAgICAgICAgIHRoaXMuZmlsbEJ5T3BpZChmaWxsU2NyaXB0LCBwLCBsb2dpbi5wYXNzd29yZCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGZpbGxTY3JpcHQgPSB0aGlzLnNldEZpbGxTY3JpcHRGb3JGb2N1cyhmaWxsZWRGaWVsZHMsIGZpbGxTY3JpcHQpO1xuICAgICAgICByZXR1cm4gZmlsbFNjcmlwdDtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdlbmVyYXRlQ2FyZEZpbGxTY3JpcHQoZmlsbFNjcmlwdDogQXV0b2ZpbGxTY3JpcHQsIHBhZ2VEZXRhaWxzOiBhbnksXG4gICAgICAgIGZpbGxlZEZpZWxkczogeyBbaWQ6IHN0cmluZ106IEF1dG9maWxsRmllbGQ7IH0sIG9wdGlvbnM6IGFueSk6IEF1dG9maWxsU2NyaXB0IHtcbiAgICAgICAgaWYgKCFvcHRpb25zLmNpcGhlci5jYXJkKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGZpbGxGaWVsZHM6IHsgW2lkOiBzdHJpbmddOiBBdXRvZmlsbEZpZWxkOyB9ID0ge307XG5cbiAgICAgICAgcGFnZURldGFpbHMuZmllbGRzLmZvckVhY2goKGY6IGFueSkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNFeGNsdWRlZFR5cGUoZi50eXBlLCBFeGNsdWRlZEF1dG9maWxsVHlwZXMpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IENhcmRBdHRyaWJ1dGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXR0ciA9IENhcmRBdHRyaWJ1dGVzW2ldO1xuICAgICAgICAgICAgICAgIGlmICghZi5oYXNPd25Qcm9wZXJ0eShhdHRyKSB8fCAhZlthdHRyXSB8fCAhZi52aWV3YWJsZSkge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyByZWYgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybS1jb250cm9sLWluZnJhc3RydWN0dXJlLmh0bWwjYXV0b2ZpbGxcbiAgICAgICAgICAgICAgICAvLyByZWYgaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vd2ViL2Z1bmRhbWVudGFscy9kZXNpZ24tYW5kLXV4L2lucHV0L2Zvcm1zL1xuICAgICAgICAgICAgICAgIGlmICghZmlsbEZpZWxkcy5jYXJkaG9sZGVyTmFtZSAmJiB0aGlzLmlzRmllbGRNYXRjaChmW2F0dHJdLFxuICAgICAgICAgICAgICAgICAgICBbJ2NjLW5hbWUnLCAnY2FyZC1uYW1lJywgJ2NhcmRob2xkZXItbmFtZScsICdjYXJkaG9sZGVyJywgJ25hbWUnLCAnbm9tJ10sXG4gICAgICAgICAgICAgICAgICAgIFsnY2MtbmFtZScsICdjYXJkLW5hbWUnLCAnY2FyZGhvbGRlci1uYW1lJywgJ2NhcmRob2xkZXInLCAndGJOYW1lJ10pKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpbGxGaWVsZHMuY2FyZGhvbGRlck5hbWUgPSBmO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFmaWxsRmllbGRzLm51bWJlciAmJiB0aGlzLmlzRmllbGRNYXRjaChmW2F0dHJdLFxuICAgICAgICAgICAgICAgICAgICBbJ2NjLW51bWJlcicsICdjYy1udW0nLCAnY2FyZC1udW1iZXInLCAnY2FyZC1udW0nLCAnbnVtYmVyJywgJ2NjJywgJ2NjLW5vJywgJ2NhcmQtbm8nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2NyZWRpdC1jYXJkJywgJ251bWVyby1jYXJ0ZScsICdjYXJ0ZScsICdjYXJ0ZS1jcmVkaXQnLCAnbnVtLWNhcnRlJywgJ2NiLW51bSddLFxuICAgICAgICAgICAgICAgICAgICBbJ2NjLW51bWJlcicsICdjYy1udW0nLCAnY2FyZC1udW1iZXInLCAnY2FyZC1udW0nLCAnY2Mtbm8nLCAnY2FyZC1ubycsICdudW1lcm8tY2FydGUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ251bS1jYXJ0ZScsICdjYi1udW0nXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZmlsbEZpZWxkcy5udW1iZXIgPSBmO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFmaWxsRmllbGRzLmV4cCAmJiB0aGlzLmlzRmllbGRNYXRjaChmW2F0dHJdLFxuICAgICAgICAgICAgICAgICAgICBbJ2NjLWV4cCcsICdjYXJkLWV4cCcsICdjYy1leHBpcmF0aW9uJywgJ2NhcmQtZXhwaXJhdGlvbicsICdjYy1leCcsICdjYXJkLWV4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdjYXJkLWV4cGlyZScsICdjYXJkLWV4cGlyeScsICd2YWxpZGl0ZScsICdleHBpcmF0aW9uJywgJ2V4cGlyeScsICdtbS15eScsXG4gICAgICAgICAgICAgICAgICAgICAgICAnbW0teXl5eScsICd5eS1tbScsICd5eXl5LW1tJywgJ2V4cGlyYXRpb24tZGF0ZScsICdwYXltZW50LWNhcmQtZXhwaXJhdGlvbicsXG4gICAgICAgICAgICAgICAgICAgICAgICAncGF5bWVudC1jYy1kYXRlJ10sXG4gICAgICAgICAgICAgICAgICAgIFsnbW0teXknLCAnbW0teXl5eScsICd5eS1tbScsICd5eXl5LW1tJywgJ2V4cGlyYXRpb24tZGF0ZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAncGF5bWVudC1jYXJkLWV4cGlyYXRpb24nXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZmlsbEZpZWxkcy5leHAgPSBmO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFmaWxsRmllbGRzLmV4cE1vbnRoICYmIHRoaXMuaXNGaWVsZE1hdGNoKGZbYXR0cl0sXG4gICAgICAgICAgICAgICAgICAgIFsnZXhwLW1vbnRoJywgJ2NjLWV4cC1tb250aCcsICdjYy1tb250aCcsICdjYXJkLW1vbnRoJywgJ2NjLW1vJywgJ2NhcmQtbW8nLCAnZXhwLW1vJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdjYXJkLWV4cC1tbycsICdjYy1leHAtbW8nLCAnY2FyZC1leHBpcmF0aW9uLW1vbnRoJywgJ2V4cGlyYXRpb24tbW9udGgnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2NjLW1tJywgJ2NjLW0nLCAnY2FyZC1tbScsICdjYXJkLW0nLCAnY2FyZC1leHAtbW0nLCAnY2MtZXhwLW1tJywgJ2V4cC1tbScsICdleHAtbScsXG4gICAgICAgICAgICAgICAgICAgICAgICAnZXhwaXJlLW1vbnRoJywgJ2V4cGlyZS1tbycsICdleHBpcnktbW9udGgnLCAnZXhwaXJ5LW1vJywgJ2NhcmQtZXhwaXJlLW1vbnRoJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdjYXJkLWV4cGlyZS1tbycsICdjYXJkLWV4cGlyeS1tb250aCcsICdjYXJkLWV4cGlyeS1tbycsICdtb2lzLXZhbGlkaXRlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdtb2lzLWV4cGlyYXRpb24nLCAnbS12YWxpZGl0ZScsICdtLWV4cGlyYXRpb24nLCAnZXhwaXJ5LWRhdGUtZmllbGQtbW9udGgnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2V4cGlyYXRpb24tZGF0ZS1tb250aCcsICdleHBpcmF0aW9uLWRhdGUtbW0nLCAnZXhwLW1vbicsICd2YWxpZGl0eS1tbycsXG4gICAgICAgICAgICAgICAgICAgICAgICAnZXhwLWRhdGUtbW8nLCAnY2ItZGF0ZS1tb2lzJywgJ2RhdGUtbSddKSkge1xuICAgICAgICAgICAgICAgICAgICBmaWxsRmllbGRzLmV4cE1vbnRoID0gZjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghZmlsbEZpZWxkcy5leHBZZWFyICYmIHRoaXMuaXNGaWVsZE1hdGNoKGZbYXR0cl0sXG4gICAgICAgICAgICAgICAgICAgIFsnZXhwLXllYXInLCAnY2MtZXhwLXllYXInLCAnY2MteWVhcicsICdjYXJkLXllYXInLCAnY2MteXInLCAnY2FyZC15cicsICdleHAteXInLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2NhcmQtZXhwLXlyJywgJ2NjLWV4cC15cicsICdjYXJkLWV4cGlyYXRpb24teWVhcicsICdleHBpcmF0aW9uLXllYXInLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2NjLXl5JywgJ2NjLXknLCAnY2FyZC15eScsICdjYXJkLXknLCAnY2FyZC1leHAteXknLCAnY2MtZXhwLXl5JywgJ2V4cC15eScsICdleHAteScsXG4gICAgICAgICAgICAgICAgICAgICAgICAnY2MteXl5eScsICdjYXJkLXl5eXknLCAnY2FyZC1leHAteXl5eScsICdjYy1leHAteXl5eScsICdleHBpcmUteWVhcicsICdleHBpcmUteXInLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2V4cGlyeS15ZWFyJywgJ2V4cGlyeS15cicsICdjYXJkLWV4cGlyZS15ZWFyJywgJ2NhcmQtZXhwaXJlLXlyJywgJ2NhcmQtZXhwaXJ5LXllYXInLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2NhcmQtZXhwaXJ5LXlyJywgJ2FuLXZhbGlkaXRlJywgJ2FuLWV4cGlyYXRpb24nLCAnYW5uZWUtdmFsaWRpdGUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2FubmVlLWV4cGlyYXRpb24nLCAnZXhwaXJ5LWRhdGUtZmllbGQteWVhcicsICdleHBpcmF0aW9uLWRhdGUteWVhcicsICdjYi1kYXRlLWFubicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnZXhwaXJhdGlvbi1kYXRlLXl5JywgJ2V4cGlyYXRpb24tZGF0ZS15eXl5JywgJ3ZhbGlkaXR5LXllYXInLCAnZXhwLWRhdGUteWVhcicsICdkYXRlLXknXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZmlsbEZpZWxkcy5leHBZZWFyID0gZjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghZmlsbEZpZWxkcy5jb2RlICYmIHRoaXMuaXNGaWVsZE1hdGNoKGZbYXR0cl0sXG4gICAgICAgICAgICAgICAgICAgIFsnY3Z2JywgJ2N2YycsICdjdnYyJywgJ2NjLWNzYycsICdjYy1jdnYnLCAnY2FyZC1jc2MnLCAnY2FyZC1jdnYnLCAnY3ZkJywgJ2NpZCcsICdjdmMyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdjbnYnLCAnY3ZuMicsICdjYy1jb2RlJywgJ2NhcmQtY29kZScsICdjb2RlLXNlY3VyaXRlJywgJ3NlY3VyaXR5LWNvZGUnLCAnY3J5cHRvJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdjYXJkLXZlcmlmJywgJ3ZlcmlmaWNhdGlvbi1jb2RlJywgJ2NzYycsICdjY3YnXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZmlsbEZpZWxkcy5jb2RlID0gZjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghZmlsbEZpZWxkcy5icmFuZCAmJiB0aGlzLmlzRmllbGRNYXRjaChmW2F0dHJdLFxuICAgICAgICAgICAgICAgICAgICBbJ2NjLXR5cGUnLCAnY2FyZC10eXBlJywgJ2NhcmQtYnJhbmQnLCAnY2MtYnJhbmQnLCAnY2ItdHlwZSddKSkge1xuICAgICAgICAgICAgICAgICAgICBmaWxsRmllbGRzLmJyYW5kID0gZjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBjYXJkID0gb3B0aW9ucy5jaXBoZXIuY2FyZDtcbiAgICAgICAgdGhpcy5tYWtlU2NyaXB0QWN0aW9uKGZpbGxTY3JpcHQsIGNhcmQsIGZpbGxGaWVsZHMsIGZpbGxlZEZpZWxkcywgJ2NhcmRob2xkZXJOYW1lJyk7XG4gICAgICAgIHRoaXMubWFrZVNjcmlwdEFjdGlvbihmaWxsU2NyaXB0LCBjYXJkLCBmaWxsRmllbGRzLCBmaWxsZWRGaWVsZHMsICdudW1iZXInKTtcbiAgICAgICAgdGhpcy5tYWtlU2NyaXB0QWN0aW9uKGZpbGxTY3JpcHQsIGNhcmQsIGZpbGxGaWVsZHMsIGZpbGxlZEZpZWxkcywgJ2NvZGUnKTtcbiAgICAgICAgdGhpcy5tYWtlU2NyaXB0QWN0aW9uKGZpbGxTY3JpcHQsIGNhcmQsIGZpbGxGaWVsZHMsIGZpbGxlZEZpZWxkcywgJ2JyYW5kJyk7XG5cbiAgICAgICAgaWYgKGZpbGxGaWVsZHMuZXhwTW9udGggJiYgdGhpcy5oYXNWYWx1ZShjYXJkLmV4cE1vbnRoKSkge1xuICAgICAgICAgICAgbGV0IGV4cE1vbnRoOiBzdHJpbmcgPSBjYXJkLmV4cE1vbnRoO1xuXG4gICAgICAgICAgICBpZiAoZmlsbEZpZWxkcy5leHBNb250aC5zZWxlY3RJbmZvICYmIGZpbGxGaWVsZHMuZXhwTW9udGguc2VsZWN0SW5mby5vcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgbGV0IGluZGV4OiBudW1iZXIgPSBudWxsO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNpT3B0aW9ucyA9IGZpbGxGaWVsZHMuZXhwTW9udGguc2VsZWN0SW5mby5vcHRpb25zO1xuICAgICAgICAgICAgICAgIGlmIChzaU9wdGlvbnMubGVuZ3RoID09PSAxMikge1xuICAgICAgICAgICAgICAgICAgICBpbmRleCA9IHBhcnNlSW50KGNhcmQuZXhwTW9udGgsIG51bGwpIC0gMTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNpT3B0aW9ucy5sZW5ndGggPT09IDEzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzaU9wdGlvbnNbMF1bMF0gIT0gbnVsbCAmJiBzaU9wdGlvbnNbMF1bMF0gIT09ICcnICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAoc2lPcHRpb25zWzEyXVswXSA9PSBudWxsIHx8IHNpT3B0aW9uc1sxMl1bMF0gPT09ICcnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXggPSBwYXJzZUludChjYXJkLmV4cE1vbnRoLCBudWxsKSAtIDE7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleCA9IHBhcnNlSW50KGNhcmQuZXhwTW9udGgsIG51bGwpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3B0aW9uID0gc2lPcHRpb25zW2luZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbi5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBleHBNb250aCA9IG9wdGlvblsxXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoKHRoaXMuZmllbGRBdHRyc0NvbnRhaW4oZmlsbEZpZWxkcy5leHBNb250aCwgJ21tJykgfHwgZmlsbEZpZWxkcy5leHBNb250aC5tYXhMZW5ndGggPT09IDIpXG4gICAgICAgICAgICAgICAgJiYgZXhwTW9udGgubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgZXhwTW9udGggPSAnMCcgKyBleHBNb250aDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZmlsbGVkRmllbGRzW2ZpbGxGaWVsZHMuZXhwTW9udGgub3BpZF0gPSBmaWxsRmllbGRzLmV4cE1vbnRoO1xuICAgICAgICAgICAgdGhpcy5maWxsQnlPcGlkKGZpbGxTY3JpcHQsIGZpbGxGaWVsZHMuZXhwTW9udGgsIGV4cE1vbnRoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChmaWxsRmllbGRzLmV4cFllYXIgJiYgdGhpcy5oYXNWYWx1ZShjYXJkLmV4cFllYXIpKSB7XG4gICAgICAgICAgICBsZXQgZXhwWWVhcjogc3RyaW5nID0gY2FyZC5leHBZZWFyO1xuICAgICAgICAgICAgaWYgKGZpbGxGaWVsZHMuZXhwWWVhci5zZWxlY3RJbmZvICYmIGZpbGxGaWVsZHMuZXhwWWVhci5zZWxlY3RJbmZvLm9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZpbGxGaWVsZHMuZXhwWWVhci5zZWxlY3RJbmZvLm9wdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbzogW3N0cmluZywgc3RyaW5nXSA9IGZpbGxGaWVsZHMuZXhwWWVhci5zZWxlY3RJbmZvLm9wdGlvbnNbaV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChvWzBdID09PSBjYXJkLmV4cFllYXIgfHwgb1sxXSA9PT0gY2FyZC5leHBZZWFyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBleHBZZWFyID0gb1sxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChvWzFdLmxlbmd0aCA9PT0gMiAmJiBjYXJkLmV4cFllYXIubGVuZ3RoID09PSA0ICYmIG9bMV0gPT09IGNhcmQuZXhwWWVhci5zdWJzdHJpbmcoMikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cFllYXIgPSBvWzFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29sb25JbmRleCA9IG9bMV0uaW5kZXhPZignOicpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29sb25JbmRleCA+IC0xICYmIG9bMV0ubGVuZ3RoID4gY29sb25JbmRleCArIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbCA9IG9bMV0uc3Vic3RyaW5nKGNvbG9uSW5kZXggKyAyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWwgIT0gbnVsbCAmJiB2YWwudHJpbSgpICE9PSAnJyAmJiB2YWwgPT09IGNhcmQuZXhwWWVhcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cFllYXIgPSBvWzFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmZpZWxkQXR0cnNDb250YWluKGZpbGxGaWVsZHMuZXhwWWVhciwgJ3l5eXknKSB8fCBmaWxsRmllbGRzLmV4cFllYXIubWF4TGVuZ3RoID09PSA0KSB7XG4gICAgICAgICAgICAgICAgaWYgKGV4cFllYXIubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIGV4cFllYXIgPSAnMjAnICsgZXhwWWVhcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZmllbGRBdHRyc0NvbnRhaW4oZmlsbEZpZWxkcy5leHBZZWFyLCAneXknKSB8fCBmaWxsRmllbGRzLmV4cFllYXIubWF4TGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICAgICAgaWYgKGV4cFllYXIubGVuZ3RoID09PSA0KSB7XG4gICAgICAgICAgICAgICAgICAgIGV4cFllYXIgPSBleHBZZWFyLnN1YnN0cigyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZpbGxlZEZpZWxkc1tmaWxsRmllbGRzLmV4cFllYXIub3BpZF0gPSBmaWxsRmllbGRzLmV4cFllYXI7XG4gICAgICAgICAgICB0aGlzLmZpbGxCeU9waWQoZmlsbFNjcmlwdCwgZmlsbEZpZWxkcy5leHBZZWFyLCBleHBZZWFyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChmaWxsRmllbGRzLmV4cCAmJiB0aGlzLmhhc1ZhbHVlKGNhcmQuZXhwTW9udGgpICYmIHRoaXMuaGFzVmFsdWUoY2FyZC5leHBZZWFyKSkge1xuICAgICAgICAgICAgY29uc3QgZnVsbE1vbnRoID0gKCcwJyArIGNhcmQuZXhwTW9udGgpLnNsaWNlKC0yKTtcblxuICAgICAgICAgICAgbGV0IGZ1bGxZZWFyOiBzdHJpbmcgPSBjYXJkLmV4cFllYXI7XG4gICAgICAgICAgICBsZXQgcGFydFllYXI6IHN0cmluZyA9IG51bGw7XG4gICAgICAgICAgICBpZiAoZnVsbFllYXIubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICAgICAgcGFydFllYXIgPSBmdWxsWWVhcjtcbiAgICAgICAgICAgICAgICBmdWxsWWVhciA9ICcyMCcgKyBmdWxsWWVhcjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZnVsbFllYXIubGVuZ3RoID09PSA0KSB7XG4gICAgICAgICAgICAgICAgcGFydFllYXIgPSBmdWxsWWVhci5zdWJzdHIoMiwgMik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBleHA6IHN0cmluZyA9IG51bGw7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IE1vbnRoQWJici5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmZpZWxkQXR0cnNDb250YWluKGZpbGxGaWVsZHMuZXhwLCBNb250aEFiYnJbaV0gKyAnLycgKyBZZWFyQWJiclNob3J0W2ldKSAmJlxuICAgICAgICAgICAgICAgICAgICBwYXJ0WWVhciAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGV4cCA9IGZ1bGxNb250aCArICcvJyArIHBhcnRZZWFyO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5maWVsZEF0dHJzQ29udGFpbihmaWxsRmllbGRzLmV4cCwgTW9udGhBYmJyW2ldICsgJy8nICsgWWVhckFiYnJMb25nW2ldKSkge1xuICAgICAgICAgICAgICAgICAgICBleHAgPSBmdWxsTW9udGggKyAnLycgKyBmdWxsWWVhcjtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZmllbGRBdHRyc0NvbnRhaW4oZmlsbEZpZWxkcy5leHAsIFllYXJBYmJyU2hvcnRbaV0gKyAnLycgKyBNb250aEFiYnJbaV0pICYmXG4gICAgICAgICAgICAgICAgICAgIHBhcnRZZWFyICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgZXhwID0gcGFydFllYXIgKyAnLycgKyBmdWxsTW9udGg7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmZpZWxkQXR0cnNDb250YWluKGZpbGxGaWVsZHMuZXhwLCBZZWFyQWJickxvbmdbaV0gKyAnLycgKyBNb250aEFiYnJbaV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIGV4cCA9IGZ1bGxZZWFyICsgJy8nICsgZnVsbE1vbnRoO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5maWVsZEF0dHJzQ29udGFpbihmaWxsRmllbGRzLmV4cCwgTW9udGhBYmJyW2ldICsgJy0nICsgWWVhckFiYnJTaG9ydFtpXSkgJiZcbiAgICAgICAgICAgICAgICAgICAgcGFydFllYXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBleHAgPSBmdWxsTW9udGggKyAnLScgKyBwYXJ0WWVhcjtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZmllbGRBdHRyc0NvbnRhaW4oZmlsbEZpZWxkcy5leHAsIE1vbnRoQWJicltpXSArICctJyArIFllYXJBYmJyTG9uZ1tpXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZXhwID0gZnVsbE1vbnRoICsgJy0nICsgZnVsbFllYXI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmZpZWxkQXR0cnNDb250YWluKGZpbGxGaWVsZHMuZXhwLCBZZWFyQWJiclNob3J0W2ldICsgJy0nICsgTW9udGhBYmJyW2ldKSAmJlxuICAgICAgICAgICAgICAgICAgICBwYXJ0WWVhciAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGV4cCA9IHBhcnRZZWFyICsgJy0nICsgZnVsbE1vbnRoO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5maWVsZEF0dHJzQ29udGFpbihmaWxsRmllbGRzLmV4cCwgWWVhckFiYnJMb25nW2ldICsgJy0nICsgTW9udGhBYmJyW2ldKSkge1xuICAgICAgICAgICAgICAgICAgICBleHAgPSBmdWxsWWVhciArICctJyArIGZ1bGxNb250aDtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZmllbGRBdHRyc0NvbnRhaW4oZmlsbEZpZWxkcy5leHAsIFllYXJBYmJyU2hvcnRbaV0gKyBNb250aEFiYnJbaV0pICYmXG4gICAgICAgICAgICAgICAgICAgIHBhcnRZZWFyICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgZXhwID0gcGFydFllYXIgKyBmdWxsTW9udGg7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmZpZWxkQXR0cnNDb250YWluKGZpbGxGaWVsZHMuZXhwLCBZZWFyQWJickxvbmdbaV0gKyBNb250aEFiYnJbaV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIGV4cCA9IGZ1bGxZZWFyICsgZnVsbE1vbnRoO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5maWVsZEF0dHJzQ29udGFpbihmaWxsRmllbGRzLmV4cCwgTW9udGhBYmJyW2ldICsgWWVhckFiYnJTaG9ydFtpXSkgJiZcbiAgICAgICAgICAgICAgICAgICAgcGFydFllYXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBleHAgPSBmdWxsTW9udGggKyBwYXJ0WWVhcjtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZmllbGRBdHRyc0NvbnRhaW4oZmlsbEZpZWxkcy5leHAsIE1vbnRoQWJicltpXSArIFllYXJBYmJyTG9uZ1tpXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZXhwID0gZnVsbE1vbnRoICsgZnVsbFllYXI7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGV4cCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGV4cCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgZXhwID0gZnVsbFllYXIgKyAnLScgKyBmdWxsTW9udGg7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMubWFrZVNjcmlwdEFjdGlvbldpdGhWYWx1ZShmaWxsU2NyaXB0LCBleHAsIGZpbGxGaWVsZHMuZXhwLCBmaWxsZWRGaWVsZHMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZpbGxTY3JpcHQ7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBmaWVsZEF0dHJzQ29udGFpbihmaWVsZDogYW55LCBjb250YWluc1ZhbDogc3RyaW5nKSB7XG4gICAgICAgIGlmICghZmllbGQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBkb2VzQ29udGFpbiA9IGZhbHNlO1xuICAgICAgICBDYXJkQXR0cmlidXRlc0V4dGVuZGVkLmZvckVhY2goKGF0dHIpID0+IHtcbiAgICAgICAgICAgIGlmIChkb2VzQ29udGFpbiB8fCAhZmllbGQuaGFzT3duUHJvcGVydHkoYXR0cikgfHwgIWZpZWxkW2F0dHJdKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgdmFsID0gZmllbGRbYXR0cl07XG4gICAgICAgICAgICB2YWwgPSB2YWwucmVwbGFjZSgvIC9nLCAnJykudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIGRvZXNDb250YWluID0gdmFsLmluZGV4T2YoY29udGFpbnNWYWwpID4gLTE7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBkb2VzQ29udGFpbjtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdlbmVyYXRlSWRlbnRpdHlGaWxsU2NyaXB0KGZpbGxTY3JpcHQ6IEF1dG9maWxsU2NyaXB0LCBwYWdlRGV0YWlsczogYW55LFxuICAgICAgICBmaWxsZWRGaWVsZHM6IHsgW2lkOiBzdHJpbmddOiBBdXRvZmlsbEZpZWxkOyB9LCBvcHRpb25zOiBhbnkpOiBBdXRvZmlsbFNjcmlwdCB7XG4gICAgICAgIGlmICghb3B0aW9ucy5jaXBoZXIuaWRlbnRpdHkpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZmlsbEZpZWxkczogeyBbaWQ6IHN0cmluZ106IEF1dG9maWxsRmllbGQ7IH0gPSB7fTtcblxuICAgICAgICBwYWdlRGV0YWlscy5maWVsZHMuZm9yRWFjaCgoZjogYW55KSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5pc0V4Y2x1ZGVkVHlwZShmLnR5cGUsIEV4Y2x1ZGVkQXV0b2ZpbGxUeXBlcykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgSWRlbnRpdHlBdHRyaWJ1dGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXR0ciA9IElkZW50aXR5QXR0cmlidXRlc1tpXTtcbiAgICAgICAgICAgICAgICBpZiAoIWYuaGFzT3duUHJvcGVydHkoYXR0cikgfHwgIWZbYXR0cl0gfHwgIWYudmlld2FibGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gcmVmIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm0tY29udHJvbC1pbmZyYXN0cnVjdHVyZS5odG1sI2F1dG9maWxsXG4gICAgICAgICAgICAgICAgLy8gcmVmIGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL3dlYi9mdW5kYW1lbnRhbHMvZGVzaWduLWFuZC11eC9pbnB1dC9mb3Jtcy9cbiAgICAgICAgICAgICAgICBpZiAoIWZpbGxGaWVsZHMubmFtZSAmJiB0aGlzLmlzRmllbGRNYXRjaChmW2F0dHJdLFxuICAgICAgICAgICAgICAgICAgICBbJ25hbWUnLCAnZnVsbC1uYW1lJywgJ3lvdXItbmFtZSddLCBbJ2Z1bGwtbmFtZScsICd5b3VyLW5hbWUnXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZmlsbEZpZWxkcy5uYW1lID0gZjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghZmlsbEZpZWxkcy5maXJzdE5hbWUgJiYgdGhpcy5pc0ZpZWxkTWF0Y2goZlthdHRyXSxcbiAgICAgICAgICAgICAgICAgICAgRmlyc3RuYW1lRmllbGROYW1lcykpIHtcbiAgICAgICAgICAgICAgICAgICAgZmlsbEZpZWxkcy5maXJzdE5hbWUgPSBmO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFmaWxsRmllbGRzLm1pZGRsZU5hbWUgJiYgdGhpcy5pc0ZpZWxkTWF0Y2goZlthdHRyXSxcbiAgICAgICAgICAgICAgICAgICAgWydtLW5hbWUnLCAnbWlkZGxlLW5hbWUnLCAnYWRkaXRpb25hbC1uYW1lJywgJ21pZGRsZS1pbml0aWFsJywgJ21pZGRsZS1uJywgJ21pZGRsZS1pJ10pKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpbGxGaWVsZHMubWlkZGxlTmFtZSA9IGY7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWZpbGxGaWVsZHMubGFzdE5hbWUgJiYgdGhpcy5pc0ZpZWxkTWF0Y2goZlthdHRyXSxcbiAgICAgICAgICAgICAgICAgICAgTGFzdG5hbWVGaWVsZE5hbWVzKSkge1xuICAgICAgICAgICAgICAgICAgICBmaWxsRmllbGRzLmxhc3ROYW1lID0gZjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghZmlsbEZpZWxkcy50aXRsZSAmJiB0aGlzLmlzRmllbGRNYXRjaChmW2F0dHJdLFxuICAgICAgICAgICAgICAgICAgICBbJ2hvbm9yaWZpYy1wcmVmaXgnLCAncHJlZml4JywgJ3RpdGxlJ10pKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpbGxGaWVsZHMudGl0bGUgPSBmO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFmaWxsRmllbGRzLmVtYWlsICYmIHRoaXMuaXNGaWVsZE1hdGNoKGZbYXR0cl0sXG4gICAgICAgICAgICAgICAgICAgIFsnZS1tYWlsJywgJ2VtYWlsLWFkZHJlc3MnXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZmlsbEZpZWxkcy5lbWFpbCA9IGY7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWZpbGxGaWVsZHMuYWRkcmVzcyAmJiB0aGlzLmlzRmllbGRNYXRjaChmW2F0dHJdLFxuICAgICAgICAgICAgICAgICAgICBbJ2FkZHJlc3MnLCAnc3RyZWV0LWFkZHJlc3MnLCAnYWRkcicsICdzdHJlZXQnLCAnbWFpbGluZy1hZGRyJywgJ2JpbGxpbmctYWRkcicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnbWFpbC1hZGRyJywgJ2JpbGwtYWRkciddLCBbJ21haWxpbmctYWRkcicsICdiaWxsaW5nLWFkZHInLCAnbWFpbC1hZGRyJywgJ2JpbGwtYWRkciddKSkge1xuICAgICAgICAgICAgICAgICAgICBmaWxsRmllbGRzLmFkZHJlc3MgPSBmO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFmaWxsRmllbGRzLmFkZHJlc3MxICYmIHRoaXMuaXNGaWVsZE1hdGNoKGZbYXR0cl0sXG4gICAgICAgICAgICAgICAgICAgIFsnYWRkcmVzcy0xJywgJ2FkZHJlc3MtbGluZS0xJywgJ2FkZHItMScsICdzdHJlZXQtMSddKSkge1xuICAgICAgICAgICAgICAgICAgICBmaWxsRmllbGRzLmFkZHJlc3MxID0gZjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghZmlsbEZpZWxkcy5hZGRyZXNzMiAmJiB0aGlzLmlzRmllbGRNYXRjaChmW2F0dHJdLFxuICAgICAgICAgICAgICAgICAgICBbJ2FkZHJlc3MtMicsICdhZGRyZXNzLWxpbmUtMicsICdhZGRyLTInLCAnc3RyZWV0LTInXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZmlsbEZpZWxkcy5hZGRyZXNzMiA9IGY7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWZpbGxGaWVsZHMuYWRkcmVzczMgJiYgdGhpcy5pc0ZpZWxkTWF0Y2goZlthdHRyXSxcbiAgICAgICAgICAgICAgICAgICAgWydhZGRyZXNzLTMnLCAnYWRkcmVzcy1saW5lLTMnLCAnYWRkci0zJywgJ3N0cmVldC0zJ10pKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpbGxGaWVsZHMuYWRkcmVzczMgPSBmO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFmaWxsRmllbGRzLnBvc3RhbENvZGUgJiYgdGhpcy5pc0ZpZWxkTWF0Y2goZlthdHRyXSxcbiAgICAgICAgICAgICAgICAgICAgWydwb3N0YWwnLCAnemlwJywgJ3ppcDInLCAnemlwLWNvZGUnLCAncG9zdGFsLWNvZGUnLCAncG9zdC1jb2RlJywgJ2FkZHJlc3MtemlwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdhZGRyZXNzLXBvc3RhbCcsICdhZGRyZXNzLWNvZGUnLCAnYWRkcmVzcy1wb3N0YWwtY29kZScsICdhZGRyZXNzLXppcC1jb2RlJ10pKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpbGxGaWVsZHMucG9zdGFsQ29kZSA9IGY7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWZpbGxGaWVsZHMuY2l0eSAmJiB0aGlzLmlzRmllbGRNYXRjaChmW2F0dHJdLFxuICAgICAgICAgICAgICAgICAgICBbJ2NpdHknLCAndG93bicsICdhZGRyZXNzLWxldmVsLTInLCAnYWRkcmVzcy1jaXR5JywgJ2FkZHJlc3MtdG93biddKSkge1xuICAgICAgICAgICAgICAgICAgICBmaWxsRmllbGRzLmNpdHkgPSBmO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFmaWxsRmllbGRzLnN0YXRlICYmIHRoaXMuaXNGaWVsZE1hdGNoKGZbYXR0cl0sXG4gICAgICAgICAgICAgICAgICAgIFsnc3RhdGUnLCAncHJvdmluY2UnLCAncHJvdmVuY2UnLCAnYWRkcmVzcy1sZXZlbC0xJywgJ2FkZHJlc3Mtc3RhdGUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2FkZHJlc3MtcHJvdmluY2UnXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZmlsbEZpZWxkcy5zdGF0ZSA9IGY7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWZpbGxGaWVsZHMuY291bnRyeSAmJiB0aGlzLmlzRmllbGRNYXRjaChmW2F0dHJdLFxuICAgICAgICAgICAgICAgICAgICBbJ2NvdW50cnknLCAnY291bnRyeS1jb2RlJywgJ2NvdW50cnktbmFtZScsICdhZGRyZXNzLWNvdW50cnknLCAnYWRkcmVzcy1jb3VudHJ5LW5hbWUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2FkZHJlc3MtY291bnRyeS1jb2RlJ10pKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpbGxGaWVsZHMuY291bnRyeSA9IGY7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWZpbGxGaWVsZHMucGhvbmUgJiYgdGhpcy5pc0ZpZWxkTWF0Y2goZlthdHRyXSxcbiAgICAgICAgICAgICAgICAgICAgWydwaG9uZScsICdtb2JpbGUnLCAnbW9iaWxlLXBob25lJywgJ3RlbCcsICd0ZWxlcGhvbmUnLCAncGhvbmUtbnVtYmVyJ10pKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpbGxGaWVsZHMucGhvbmUgPSBmO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFmaWxsRmllbGRzLnVzZXJuYW1lICYmIHRoaXMuaXNGaWVsZE1hdGNoKGZbYXR0cl0sXG4gICAgICAgICAgICAgICAgICAgIFsndXNlci1uYW1lJywgJ3VzZXItaWQnLCAnc2NyZWVuLW5hbWUnXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZmlsbEZpZWxkcy51c2VybmFtZSA9IGY7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWZpbGxGaWVsZHMuY29tcGFueSAmJiB0aGlzLmlzRmllbGRNYXRjaChmW2F0dHJdLFxuICAgICAgICAgICAgICAgICAgICBbJ2NvbXBhbnknLCAnY29tcGFueS1uYW1lJywgJ29yZ2FuaXphdGlvbicsICdvcmdhbml6YXRpb24tbmFtZSddKSkge1xuICAgICAgICAgICAgICAgICAgICBmaWxsRmllbGRzLmNvbXBhbnkgPSBmO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IGlkZW50aXR5ID0gb3B0aW9ucy5jaXBoZXIuaWRlbnRpdHk7XG4gICAgICAgIHRoaXMubWFrZVNjcmlwdEFjdGlvbihmaWxsU2NyaXB0LCBpZGVudGl0eSwgZmlsbEZpZWxkcywgZmlsbGVkRmllbGRzLCAndGl0bGUnKTtcbiAgICAgICAgdGhpcy5tYWtlU2NyaXB0QWN0aW9uKGZpbGxTY3JpcHQsIGlkZW50aXR5LCBmaWxsRmllbGRzLCBmaWxsZWRGaWVsZHMsICdmaXJzdE5hbWUnKTtcbiAgICAgICAgdGhpcy5tYWtlU2NyaXB0QWN0aW9uKGZpbGxTY3JpcHQsIGlkZW50aXR5LCBmaWxsRmllbGRzLCBmaWxsZWRGaWVsZHMsICdtaWRkbGVOYW1lJyk7XG4gICAgICAgIHRoaXMubWFrZVNjcmlwdEFjdGlvbihmaWxsU2NyaXB0LCBpZGVudGl0eSwgZmlsbEZpZWxkcywgZmlsbGVkRmllbGRzLCAnbGFzdE5hbWUnKTtcbiAgICAgICAgdGhpcy5tYWtlU2NyaXB0QWN0aW9uKGZpbGxTY3JpcHQsIGlkZW50aXR5LCBmaWxsRmllbGRzLCBmaWxsZWRGaWVsZHMsICdhZGRyZXNzMScpO1xuICAgICAgICB0aGlzLm1ha2VTY3JpcHRBY3Rpb24oZmlsbFNjcmlwdCwgaWRlbnRpdHksIGZpbGxGaWVsZHMsIGZpbGxlZEZpZWxkcywgJ2FkZHJlc3MyJyk7XG4gICAgICAgIHRoaXMubWFrZVNjcmlwdEFjdGlvbihmaWxsU2NyaXB0LCBpZGVudGl0eSwgZmlsbEZpZWxkcywgZmlsbGVkRmllbGRzLCAnYWRkcmVzczMnKTtcbiAgICAgICAgdGhpcy5tYWtlU2NyaXB0QWN0aW9uKGZpbGxTY3JpcHQsIGlkZW50aXR5LCBmaWxsRmllbGRzLCBmaWxsZWRGaWVsZHMsICdjaXR5Jyk7XG4gICAgICAgIHRoaXMubWFrZVNjcmlwdEFjdGlvbihmaWxsU2NyaXB0LCBpZGVudGl0eSwgZmlsbEZpZWxkcywgZmlsbGVkRmllbGRzLCAncG9zdGFsQ29kZScpO1xuICAgICAgICB0aGlzLm1ha2VTY3JpcHRBY3Rpb24oZmlsbFNjcmlwdCwgaWRlbnRpdHksIGZpbGxGaWVsZHMsIGZpbGxlZEZpZWxkcywgJ2NvbXBhbnknKTtcbiAgICAgICAgdGhpcy5tYWtlU2NyaXB0QWN0aW9uKGZpbGxTY3JpcHQsIGlkZW50aXR5LCBmaWxsRmllbGRzLCBmaWxsZWRGaWVsZHMsICdlbWFpbCcpO1xuICAgICAgICB0aGlzLm1ha2VTY3JpcHRBY3Rpb24oZmlsbFNjcmlwdCwgaWRlbnRpdHksIGZpbGxGaWVsZHMsIGZpbGxlZEZpZWxkcywgJ3Bob25lJyk7XG4gICAgICAgIHRoaXMubWFrZVNjcmlwdEFjdGlvbihmaWxsU2NyaXB0LCBpZGVudGl0eSwgZmlsbEZpZWxkcywgZmlsbGVkRmllbGRzLCAndXNlcm5hbWUnKTtcblxuICAgICAgICBsZXQgZmlsbGVkU3RhdGUgPSBmYWxzZTtcbiAgICAgICAgaWYgKGZpbGxGaWVsZHMuc3RhdGUgJiYgaWRlbnRpdHkuc3RhdGUgJiYgaWRlbnRpdHkuc3RhdGUubGVuZ3RoID4gMikge1xuICAgICAgICAgICAgY29uc3Qgc3RhdGVMb3dlciA9IGlkZW50aXR5LnN0YXRlLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICBjb25zdCBpc29TdGF0ZSA9IElzb1N0YXRlc1tzdGF0ZUxvd2VyXSB8fCBJc29Qcm92aW5jZXNbc3RhdGVMb3dlcl07XG4gICAgICAgICAgICBpZiAoaXNvU3RhdGUpIHtcbiAgICAgICAgICAgICAgICBmaWxsZWRTdGF0ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5tYWtlU2NyaXB0QWN0aW9uV2l0aFZhbHVlKGZpbGxTY3JpcHQsIGlzb1N0YXRlLCBmaWxsRmllbGRzLnN0YXRlLCBmaWxsZWRGaWVsZHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFmaWxsZWRTdGF0ZSkge1xuICAgICAgICAgICAgdGhpcy5tYWtlU2NyaXB0QWN0aW9uKGZpbGxTY3JpcHQsIGlkZW50aXR5LCBmaWxsRmllbGRzLCBmaWxsZWRGaWVsZHMsICdzdGF0ZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGZpbGxlZENvdW50cnkgPSBmYWxzZTtcbiAgICAgICAgaWYgKGZpbGxGaWVsZHMuY291bnRyeSAmJiBpZGVudGl0eS5jb3VudHJ5ICYmIGlkZW50aXR5LmNvdW50cnkubGVuZ3RoID4gMikge1xuICAgICAgICAgICAgY29uc3QgY291bnRyeUxvd2VyID0gaWRlbnRpdHkuY291bnRyeS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgY29uc3QgaXNvQ291bnRyeSA9IElzb0NvdW50cmllc1tjb3VudHJ5TG93ZXJdO1xuICAgICAgICAgICAgaWYgKGlzb0NvdW50cnkpIHtcbiAgICAgICAgICAgICAgICBmaWxsZWRDb3VudHJ5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLm1ha2VTY3JpcHRBY3Rpb25XaXRoVmFsdWUoZmlsbFNjcmlwdCwgaXNvQ291bnRyeSwgZmlsbEZpZWxkcy5jb3VudHJ5LCBmaWxsZWRGaWVsZHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFmaWxsZWRDb3VudHJ5KSB7XG4gICAgICAgICAgICB0aGlzLm1ha2VTY3JpcHRBY3Rpb24oZmlsbFNjcmlwdCwgaWRlbnRpdHksIGZpbGxGaWVsZHMsIGZpbGxlZEZpZWxkcywgJ2NvdW50cnknKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChmaWxsRmllbGRzLm5hbWUgJiYgKGlkZW50aXR5LmZpcnN0TmFtZSB8fCBpZGVudGl0eS5sYXN0TmFtZSkpIHtcbiAgICAgICAgICAgIGxldCBmdWxsTmFtZSA9ICcnO1xuICAgICAgICAgICAgaWYgKHRoaXMuaGFzVmFsdWUoaWRlbnRpdHkuZmlyc3ROYW1lKSkge1xuICAgICAgICAgICAgICAgIGZ1bGxOYW1lID0gaWRlbnRpdHkuZmlyc3ROYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuaGFzVmFsdWUoaWRlbnRpdHkubWlkZGxlTmFtZSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoZnVsbE5hbWUgIT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bGxOYW1lICs9ICcgJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZnVsbE5hbWUgKz0gaWRlbnRpdHkubWlkZGxlTmFtZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmhhc1ZhbHVlKGlkZW50aXR5Lmxhc3ROYW1lKSkge1xuICAgICAgICAgICAgICAgIGlmIChmdWxsTmFtZSAhPT0gJycpIHtcbiAgICAgICAgICAgICAgICAgICAgZnVsbE5hbWUgKz0gJyAnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmdWxsTmFtZSArPSBpZGVudGl0eS5sYXN0TmFtZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5tYWtlU2NyaXB0QWN0aW9uV2l0aFZhbHVlKGZpbGxTY3JpcHQsIGZ1bGxOYW1lLCBmaWxsRmllbGRzLm5hbWUsIGZpbGxlZEZpZWxkcyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZmlsbEZpZWxkcy5hZGRyZXNzICYmIHRoaXMuaGFzVmFsdWUoaWRlbnRpdHkuYWRkcmVzczEpKSB7XG4gICAgICAgICAgICBsZXQgYWRkcmVzcyA9ICcnO1xuICAgICAgICAgICAgaWYgKHRoaXMuaGFzVmFsdWUoaWRlbnRpdHkuYWRkcmVzczEpKSB7XG4gICAgICAgICAgICAgICAgYWRkcmVzcyA9IGlkZW50aXR5LmFkZHJlc3MxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuaGFzVmFsdWUoaWRlbnRpdHkuYWRkcmVzczIpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFkZHJlc3MgIT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgIGFkZHJlc3MgKz0gJywgJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYWRkcmVzcyArPSBpZGVudGl0eS5hZGRyZXNzMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmhhc1ZhbHVlKGlkZW50aXR5LmFkZHJlc3MzKSkge1xuICAgICAgICAgICAgICAgIGlmIChhZGRyZXNzICE9PSAnJykge1xuICAgICAgICAgICAgICAgICAgICBhZGRyZXNzICs9ICcsICc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGFkZHJlc3MgKz0gaWRlbnRpdHkuYWRkcmVzczM7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMubWFrZVNjcmlwdEFjdGlvbldpdGhWYWx1ZShmaWxsU2NyaXB0LCBhZGRyZXNzLCBmaWxsRmllbGRzLmFkZHJlc3MsIGZpbGxlZEZpZWxkcyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmlsbFNjcmlwdDtcbiAgICB9XG5cbiAgICBwcml2YXRlIGlzRXhjbHVkZWRUeXBlKHR5cGU6IHN0cmluZywgZXhjbHVkZWRUeXBlczogc3RyaW5nW10pIHtcbiAgICAgICAgcmV0dXJuIGV4Y2x1ZGVkVHlwZXMuaW5kZXhPZih0eXBlKSA+IC0xO1xuICAgIH1cblxuICAgIHByaXZhdGUgaXNGaWVsZE1hdGNoKHZhbHVlOiBzdHJpbmcsIG9wdGlvbnM6IHN0cmluZ1tdLCBjb250YWluc09wdGlvbnM/OiBzdHJpbmdbXSk6IGJvb2xlYW4ge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlLnRyaW0oKS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1teYS16QS1aMC05XSsvZywgJycpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9wdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBvcHRpb24gPSBvcHRpb25zW2ldO1xuICAgICAgICAgICAgY29uc3QgY2hlY2tWYWx1ZUNvbnRhaW5zID0gY29udGFpbnNPcHRpb25zID09IG51bGwgfHwgY29udGFpbnNPcHRpb25zLmluZGV4T2Yob3B0aW9uKSA+IC0xO1xuICAgICAgICAgICAgb3B0aW9uID0gb3B0aW9uLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvLS9nLCAnJyk7XG4gICAgICAgICAgICBpZiAodmFsdWUgPT09IG9wdGlvbiB8fCAoY2hlY2tWYWx1ZUNvbnRhaW5zICYmIHZhbHVlLmluZGV4T2Yob3B0aW9uKSA+IC0xKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHByaXZhdGUgbWFrZVNjcmlwdEFjdGlvbihmaWxsU2NyaXB0OiBBdXRvZmlsbFNjcmlwdCwgY2lwaGVyRGF0YTogYW55LCBmaWxsRmllbGRzOiB7IFtpZDogc3RyaW5nXTogQXV0b2ZpbGxGaWVsZDsgfSxcbiAgICAgICAgZmlsbGVkRmllbGRzOiB7IFtpZDogc3RyaW5nXTogQXV0b2ZpbGxGaWVsZDsgfSwgZGF0YVByb3A6IHN0cmluZywgZmllbGRQcm9wPzogc3RyaW5nKSB7XG4gICAgICAgIGZpZWxkUHJvcCA9IGZpZWxkUHJvcCB8fCBkYXRhUHJvcDtcbiAgICAgICAgdGhpcy5tYWtlU2NyaXB0QWN0aW9uV2l0aFZhbHVlKGZpbGxTY3JpcHQsIGNpcGhlckRhdGFbZGF0YVByb3BdLCBmaWxsRmllbGRzW2ZpZWxkUHJvcF0sIGZpbGxlZEZpZWxkcyk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBtYWtlU2NyaXB0QWN0aW9uV2l0aFZhbHVlKGZpbGxTY3JpcHQ6IEF1dG9maWxsU2NyaXB0LCBkYXRhVmFsdWU6IGFueSwgZmllbGQ6IEF1dG9maWxsRmllbGQsXG4gICAgICAgIGZpbGxlZEZpZWxkczogeyBbaWQ6IHN0cmluZ106IEF1dG9maWxsRmllbGQ7IH0pIHtcblxuICAgICAgICBsZXQgZG9GaWxsID0gZmFsc2U7XG4gICAgICAgIGlmICh0aGlzLmhhc1ZhbHVlKGRhdGFWYWx1ZSkgJiYgZmllbGQpIHtcbiAgICAgICAgICAgIGlmIChmaWVsZC50eXBlID09PSAnc2VsZWN0LW9uZScgJiYgZmllbGQuc2VsZWN0SW5mbyAmJiBmaWVsZC5zZWxlY3RJbmZvLm9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZpZWxkLnNlbGVjdEluZm8ub3B0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBvcHRpb24gPSBmaWVsZC5zZWxlY3RJbmZvLm9wdGlvbnNbaV07XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgb3B0aW9uLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5oYXNWYWx1ZShvcHRpb25bal0pICYmIG9wdGlvbltqXS50b0xvd2VyQ2FzZSgpID09PSBkYXRhVmFsdWUudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvRmlsbCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbi5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFWYWx1ZSA9IG9wdGlvblsxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoZG9GaWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZG9GaWxsID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkb0ZpbGwpIHtcbiAgICAgICAgICAgIGZpbGxlZEZpZWxkc1tmaWVsZC5vcGlkXSA9IGZpZWxkO1xuICAgICAgICAgICAgdGhpcy5maWxsQnlPcGlkKGZpbGxTY3JpcHQsIGZpZWxkLCBkYXRhVmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBsb2FkUGFzc3dvcmRGaWVsZHMocGFnZURldGFpbHM6IEF1dG9maWxsUGFnZURldGFpbHMsIGNhbkJlSGlkZGVuOiBib29sZWFuLCBjYW5CZVJlYWRPbmx5OiBib29sZWFuLFxuICAgICAgICBtdXN0QmVFbXB0eTogYm9vbGVhbiwgZmlsbE5ld1Bhc3N3b3JkOiBib29sZWFuKSB7XG4gICAgICAgIGNvbnN0IGFycjogQXV0b2ZpbGxGaWVsZFtdID0gW107XG4gICAgICAgIHBhZ2VEZXRhaWxzLmZpZWxkcy5mb3JFYWNoKChmKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpc1Bhc3N3b3JkID0gZi50eXBlID09PSAncGFzc3dvcmQnO1xuICAgICAgICAgICAgY29uc3QgdmFsdWVJc0xpa2VQYXNzd29yZCA9ICh2YWx1ZTogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBSZW1vdmVzIGFsbCB3aGl0ZXNwYWNlLCBfIGFuZCAtIGNoYXJhY3RlcnNcbiAgICAgICAgICAgICAgICBjb25zdCBjbGVhbmVkVmFsdWUgPSB2YWx1ZS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1tcXHNfXFwtXS9nLCAnJyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoY2xlYW5lZFZhbHVlLmluZGV4T2YoJ3Bhc3N3b3JkJykgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zdCBpZ25vcmVMaXN0ID0gWydvbmV0aW1lcGFzc3dvcmQnLCAnY2FwdGNoYScsICdmaW5kYW55dGhpbmcnXTtcbiAgICAgICAgICAgICAgICBpZiAoaWdub3JlTGlzdC5zb21lKChpKSA9PiBjbGVhbmVkVmFsdWUuaW5kZXhPZihpKSA+IC0xKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgaXNMaWtlUGFzc3dvcmQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGYudHlwZSAhPT0gJ3RleHQnKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlSXNMaWtlUGFzc3dvcmQoZi5odG1sSUQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodmFsdWVJc0xpa2VQYXNzd29yZChmLmh0bWxOYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlSXNMaWtlUGFzc3dvcmQoZi5wbGFjZWhvbGRlcikpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoIWYuZGlzYWJsZWQgJiYgKGNhbkJlUmVhZE9ubHkgfHwgIWYucmVhZG9ubHkpICYmIChpc1Bhc3N3b3JkIHx8IGlzTGlrZVBhc3N3b3JkKCkpXG4gICAgICAgICAgICAgICAgJiYgKGNhbkJlSGlkZGVuIHx8IGYudmlld2FibGUpICYmICghbXVzdEJlRW1wdHkgfHwgZi52YWx1ZSA9PSBudWxsIHx8IGYudmFsdWUudHJpbSgpID09PSAnJylcbiAgICAgICAgICAgICAgICAmJiAoZmlsbE5ld1Bhc3N3b3JkIHx8IGYuYXV0b0NvbXBsZXRlVHlwZSAhPT0gJ25ldy1wYXNzd29yZCcpKSB7XG4gICAgICAgICAgICAgICAgYXJyLnB1c2goZik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gYXJyO1xuICAgIH1cblxuICAgIHByaXZhdGUgZmluZFVzZXJuYW1lRmllbGQocGFnZURldGFpbHM6IEF1dG9maWxsUGFnZURldGFpbHMsIHBhc3N3b3JkRmllbGQ6IEF1dG9maWxsRmllbGQsIGNhbkJlSGlkZGVuOiBib29sZWFuLFxuICAgICAgICBjYW5CZVJlYWRPbmx5OiBib29sZWFuLCB3aXRob3V0Rm9ybTogYm9vbGVhbikge1xuICAgICAgICBsZXQgdXNlcm5hbWVGaWVsZDogQXV0b2ZpbGxGaWVsZCA9IG51bGw7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFnZURldGFpbHMuZmllbGRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBmID0gcGFnZURldGFpbHMuZmllbGRzW2ldO1xuICAgICAgICAgICAgaWYgKGYuZWxlbWVudE51bWJlciA+PSBwYXNzd29yZEZpZWxkLmVsZW1lbnROdW1iZXIpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFmLmRpc2FibGVkICYmIChjYW5CZVJlYWRPbmx5IHx8ICFmLnJlYWRvbmx5KSAmJlxuICAgICAgICAgICAgICAgICh3aXRob3V0Rm9ybSB8fCBmLmZvcm0gPT09IHBhc3N3b3JkRmllbGQuZm9ybSkgJiYgKGNhbkJlSGlkZGVuIHx8IGYudmlld2FibGUpICYmXG4gICAgICAgICAgICAgICAgKGYudHlwZSA9PT0gJ3RleHQnIHx8IGYudHlwZSA9PT0gJ2VtYWlsJyB8fCBmLnR5cGUgPT09ICd0ZWwnKSkge1xuICAgICAgICAgICAgICAgIHVzZXJuYW1lRmllbGQgPSBmO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZmluZE1hdGNoaW5nRmllbGRJbmRleChmLCBVc2VybmFtZUZpZWxkTmFtZXMpID4gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gV2UgZm91bmQgYW4gZXhhY3QgbWF0Y2guIE5vIG5lZWQgdG8ga2VlcCBsb29raW5nLlxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdXNlcm5hbWVGaWVsZDtcbiAgICB9XG5cbiAgICBwcml2YXRlIGZpbmRNYXRjaGluZ0ZpZWxkSW5kZXgoZmllbGQ6IEF1dG9maWxsRmllbGQsIG5hbWVzOiBzdHJpbmdbXSk6IG51bWJlciB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChuYW1lc1tpXS5pbmRleE9mKCc9JykgPiAtMSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmZpZWxkUHJvcGVydHlJc1ByZWZpeE1hdGNoKGZpZWxkLCAnaHRtbElEJywgbmFtZXNbaV0sICdpZCcpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5maWVsZFByb3BlcnR5SXNQcmVmaXhNYXRjaChmaWVsZCwgJ2h0bWxOYW1lJywgbmFtZXNbaV0sICduYW1lJykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmZpZWxkUHJvcGVydHlJc1ByZWZpeE1hdGNoKGZpZWxkLCAnbGFiZWwtdGFnJywgbmFtZXNbaV0sICdsYWJlbCcpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5maWVsZFByb3BlcnR5SXNQcmVmaXhNYXRjaChmaWVsZCwgJ2xhYmVsLWFyaWEnLCBuYW1lc1tpXSwgJ2xhYmVsJykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmZpZWxkUHJvcGVydHlJc1ByZWZpeE1hdGNoKGZpZWxkLCAncGxhY2Vob2xkZXInLCBuYW1lc1tpXSwgJ3BsYWNlaG9sZGVyJykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhpcy5maWVsZFByb3BlcnR5SXNNYXRjaChmaWVsZCwgJ2h0bWxJRCcsIG5hbWVzW2ldKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuZmllbGRQcm9wZXJ0eUlzTWF0Y2goZmllbGQsICdodG1sTmFtZScsIG5hbWVzW2ldKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuZmllbGRQcm9wZXJ0eUlzTWF0Y2goZmllbGQsICdsYWJlbC10YWcnLCBuYW1lc1tpXSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmZpZWxkUHJvcGVydHlJc01hdGNoKGZpZWxkLCAnbGFiZWwtYXJpYScsIG5hbWVzW2ldKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuZmllbGRQcm9wZXJ0eUlzTWF0Y2goZmllbGQsICdwbGFjZWhvbGRlcicsIG5hbWVzW2ldKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIHByaXZhdGUgZmllbGRQcm9wZXJ0eUlzUHJlZml4TWF0Y2goZmllbGQ6IGFueSwgcHJvcGVydHk6IHN0cmluZywgbmFtZTogc3RyaW5nLCBwcmVmaXg6IHN0cmluZyxcbiAgICAgICAgc2VwYXJhdG9yID0gJz0nKTogYm9vbGVhbiB7XG4gICAgICAgIGlmIChuYW1lLmluZGV4T2YocHJlZml4ICsgc2VwYXJhdG9yKSA9PT0gMCkge1xuICAgICAgICAgICAgY29uc3Qgc2VwSW5kZXggPSBuYW1lLmluZGV4T2Yoc2VwYXJhdG9yKTtcbiAgICAgICAgICAgIGNvbnN0IHZhbCA9IG5hbWUuc3Vic3RyaW5nKHNlcEluZGV4ICsgMSk7XG4gICAgICAgICAgICByZXR1cm4gdmFsICE9IG51bGwgJiYgdGhpcy5maWVsZFByb3BlcnR5SXNNYXRjaChmaWVsZCwgcHJvcGVydHksIHZhbCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHByaXZhdGUgZmllbGRQcm9wZXJ0eUlzTWF0Y2goZmllbGQ6IGFueSwgcHJvcGVydHk6IHN0cmluZywgbmFtZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIGxldCBmaWVsZFZhbCA9IGZpZWxkW3Byb3BlcnR5XSBhcyBzdHJpbmc7XG4gICAgICAgIGlmICghdGhpcy5oYXNWYWx1ZShmaWVsZFZhbCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZpZWxkVmFsID0gZmllbGRWYWwudHJpbSgpLnJlcGxhY2UoLyg/OlxcclxcbnxcXHJ8XFxuKS9nLCAnJyk7XG4gICAgICAgIGlmIChuYW1lLnN0YXJ0c1dpdGgoJ3JlZ2V4PScpKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlZ2V4UGFydHMgPSBuYW1lLnNwbGl0KCc9JywgMik7XG4gICAgICAgICAgICAgICAgaWYgKHJlZ2V4UGFydHMubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlZ2V4ID0gbmV3IFJlZ0V4cChyZWdleFBhcnRzWzFdLCAnaScpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVnZXgudGVzdChmaWVsZFZhbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZSkgeyB9XG4gICAgICAgIH0gZWxzZSBpZiAobmFtZS5zdGFydHNXaXRoKCdjc3Y9JykpIHtcbiAgICAgICAgICAgIGNvbnN0IGNzdlBhcnRzID0gbmFtZS5zcGxpdCgnPScsIDIpO1xuICAgICAgICAgICAgaWYgKGNzdlBhcnRzLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNzdlZhbHMgPSBjc3ZQYXJ0c1sxXS5zcGxpdCgnLCcpO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY3N2VmFscy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWwgPSBjc3ZWYWxzW2ldO1xuICAgICAgICAgICAgICAgICAgICBpZiAodmFsICE9IG51bGwgJiYgdmFsLnRyaW0oKS50b0xvd2VyQ2FzZSgpID09PSBmaWVsZFZhbC50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmllbGRWYWwudG9Mb3dlckNhc2UoKSA9PT0gbmFtZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGZpZWxkSXNGdXp6eU1hdGNoKGZpZWxkOiBBdXRvZmlsbEZpZWxkLCBuYW1lczogc3RyaW5nW10pOiBib29sZWFuIHtcbiAgICAgICAgaWYgKHRoaXMuaGFzVmFsdWUoZmllbGQuaHRtbElEKSAmJiB0aGlzLmZ1enp5TWF0Y2gobmFtZXMsIGZpZWxkLmh0bWxJRCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmhhc1ZhbHVlKGZpZWxkLmh0bWxOYW1lKSAmJiB0aGlzLmZ1enp5TWF0Y2gobmFtZXMsIGZpZWxkLmh0bWxOYW1lKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaGFzVmFsdWUoZmllbGRbJ2xhYmVsLXRhZyddKSAmJiB0aGlzLmZ1enp5TWF0Y2gobmFtZXMsIGZpZWxkWydsYWJlbC10YWcnXSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmhhc1ZhbHVlKGZpZWxkLnBsYWNlaG9sZGVyKSAmJiB0aGlzLmZ1enp5TWF0Y2gobmFtZXMsIGZpZWxkLnBsYWNlaG9sZGVyKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaGFzVmFsdWUoZmllbGRbJ2xhYmVsLWxlZnQnXSkgJiYgdGhpcy5mdXp6eU1hdGNoKG5hbWVzLCBmaWVsZFsnbGFiZWwtbGVmdCddKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaGFzVmFsdWUoZmllbGRbJ2xhYmVsLXRvcCddKSAmJiB0aGlzLmZ1enp5TWF0Y2gobmFtZXMsIGZpZWxkWydsYWJlbC10b3AnXSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmhhc1ZhbHVlKGZpZWxkWydsYWJlbC1hcmlhJ10pICYmIHRoaXMuZnV6enlNYXRjaChuYW1lcywgZmllbGRbJ2xhYmVsLWFyaWEnXSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHByaXZhdGUgZnV6enlNYXRjaChvcHRpb25zOiBzdHJpbmdbXSwgdmFsdWU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICBpZiAob3B0aW9ucyA9PSBudWxsIHx8IG9wdGlvbnMubGVuZ3RoID09PSAwIHx8IHZhbHVlID09IG51bGwgfHwgdmFsdWUgPT09ICcnKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoLyg/OlxcclxcbnxcXHJ8XFxuKS9nLCAnJykudHJpbSgpLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvcHRpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUuaW5kZXhPZihvcHRpb25zW2ldKSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBoYXNWYWx1ZShzdHI6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gc3RyICYmIHN0ciAhPT0gJyc7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzZXRGaWxsU2NyaXB0Rm9yRm9jdXMoZmlsbGVkRmllbGRzOiB7IFtpZDogc3RyaW5nXTogQXV0b2ZpbGxGaWVsZDsgfSxcbiAgICAgICAgZmlsbFNjcmlwdDogQXV0b2ZpbGxTY3JpcHQpOiBBdXRvZmlsbFNjcmlwdCB7XG4gICAgICAgIGxldCBsYXN0RmllbGQ6IEF1dG9maWxsRmllbGQgPSBudWxsO1xuICAgICAgICBsZXQgbGFzdFBhc3N3b3JkRmllbGQ6IEF1dG9maWxsRmllbGQgPSBudWxsO1xuXG4gICAgICAgIGZvciAoY29uc3Qgb3BpZCBpbiBmaWxsZWRGaWVsZHMpIHtcbiAgICAgICAgICAgIGlmIChmaWxsZWRGaWVsZHMuaGFzT3duUHJvcGVydHkob3BpZCkgJiYgZmlsbGVkRmllbGRzW29waWRdLnZpZXdhYmxlKSB7XG4gICAgICAgICAgICAgICAgbGFzdEZpZWxkID0gZmlsbGVkRmllbGRzW29waWRdO1xuXG4gICAgICAgICAgICAgICAgaWYgKGZpbGxlZEZpZWxkc1tvcGlkXS50eXBlID09PSAncGFzc3dvcmQnKSB7XG4gICAgICAgICAgICAgICAgICAgIGxhc3RQYXNzd29yZEZpZWxkID0gZmlsbGVkRmllbGRzW29waWRdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFByaW9yaXRpemUgcGFzc3dvcmQgZmllbGQgb3ZlciBvdGhlcnMuXG4gICAgICAgIGlmIChsYXN0UGFzc3dvcmRGaWVsZCkge1xuICAgICAgICAgICAgZmlsbFNjcmlwdC5zY3JpcHQucHVzaChbJ2ZvY3VzX2J5X29waWQnLCBsYXN0UGFzc3dvcmRGaWVsZC5vcGlkXSk7XG4gICAgICAgIH0gZWxzZSBpZiAobGFzdEZpZWxkKSB7XG4gICAgICAgICAgICBmaWxsU2NyaXB0LnNjcmlwdC5wdXNoKFsnZm9jdXNfYnlfb3BpZCcsIGxhc3RGaWVsZC5vcGlkXSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmlsbFNjcmlwdDtcbiAgICB9XG5cbiAgICBwcml2YXRlIGZpbGxCeU9waWQoZmlsbFNjcmlwdDogQXV0b2ZpbGxTY3JpcHQsIGZpZWxkOiBBdXRvZmlsbEZpZWxkLCB2YWx1ZTogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIGlmIChmaWVsZC5tYXhMZW5ndGggJiYgdmFsdWUgJiYgdmFsdWUubGVuZ3RoID4gZmllbGQubWF4TGVuZ3RoKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnN1YnN0cigwLCB2YWx1ZS5sZW5ndGgpO1xuICAgICAgICB9XG4gICAgICAgIGZpbGxTY3JpcHQuc2NyaXB0LnB1c2goWydjbGlja19vbl9vcGlkJywgZmllbGQub3BpZF0pO1xuICAgICAgICBmaWxsU2NyaXB0LnNjcmlwdC5wdXNoKFsnZm9jdXNfYnlfb3BpZCcsIGZpZWxkLm9waWRdKTtcbiAgICAgICAgZmlsbFNjcmlwdC5zY3JpcHQucHVzaChbJ2ZpbGxfYnlfb3BpZCcsIGZpZWxkLm9waWQsIHZhbHVlXSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQnJvd3NlckFwaSB9IGZyb20gJy4uL2Jyb3dzZXIvYnJvd3NlckFwaSc7XG5pbXBvcnQgeyBTYWZhcmlBcHAgfSBmcm9tICcuLi9icm93c2VyL3NhZmFyaUFwcCc7XG5cbmltcG9ydCB7IERldmljZVR5cGUgfSBmcm9tICdqc2xpYi9lbnVtcy9kZXZpY2VUeXBlJztcblxuaW1wb3J0IHsgTWVzc2FnaW5nU2VydmljZSB9IGZyb20gJ2pzbGliL2Fic3RyYWN0aW9ucy9tZXNzYWdpbmcuc2VydmljZSc7XG5pbXBvcnQgeyBQbGF0Zm9ybVV0aWxzU2VydmljZSB9IGZyb20gJ2pzbGliL2Fic3RyYWN0aW9ucy9wbGF0Zm9ybVV0aWxzLnNlcnZpY2UnO1xuXG5pbXBvcnQgeyBBbmFseXRpY3NJZHMgfSBmcm9tICdqc2xpYi9taXNjL2FuYWx5dGljcyc7XG5cbmNvbnN0IERpYWxvZ1Byb21pc2VFeHBpcmF0aW9uID0gNjAwMDAwOyAvLyAxMCBtaW51dGVzXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJyb3dzZXJQbGF0Zm9ybVV0aWxzU2VydmljZSBpbXBsZW1lbnRzIFBsYXRmb3JtVXRpbHNTZXJ2aWNlIHtcbiAgICBpZGVudGl0eUNsaWVudElkOiBzdHJpbmcgPSAnYnJvd3Nlcic7XG5cbiAgICBwcml2YXRlIHNob3dEaWFsb2dSZXNvbHZlcyA9IG5ldyBNYXA8bnVtYmVyLCB7IHJlc29sdmU6ICh2YWx1ZTogYm9vbGVhbikgPT4gdm9pZCwgZGF0ZTogRGF0ZSB9PigpO1xuICAgIHByaXZhdGUgZGV2aWNlQ2FjaGU6IERldmljZVR5cGUgPSBudWxsO1xuICAgIHByaXZhdGUgYW5hbHl0aWNzSWRDYWNoZTogc3RyaW5nID0gbnVsbDtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgbWVzc2FnaW5nU2VydmljZTogTWVzc2FnaW5nU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBjbGlwYm9hcmRXcml0ZUNhbGxiYWNrOiAoY2xpcGJvYXJkVmFsdWU6IHN0cmluZywgY2xlYXJNczogbnVtYmVyKSA9PiB2b2lkKSB7IH1cblxuICAgIGdldERldmljZSgpOiBEZXZpY2VUeXBlIHtcbiAgICAgICAgaWYgKHRoaXMuZGV2aWNlQ2FjaGUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRldmljZUNhY2hlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuaXNTYWZhcmlFeHRlbnNpb24oKSkge1xuICAgICAgICAgICAgdGhpcy5kZXZpY2VDYWNoZSA9IERldmljZVR5cGUuU2FmYXJpRXh0ZW5zaW9uO1xuICAgICAgICB9IGVsc2UgaWYgKG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignIEZpcmVmb3gvJykgIT09IC0xIHx8IG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignIEdlY2tvLycpICE9PSAtMSkge1xuICAgICAgICAgICAgdGhpcy5kZXZpY2VDYWNoZSA9IERldmljZVR5cGUuRmlyZWZveEV4dGVuc2lvbjtcbiAgICAgICAgfSBlbHNlIGlmICgoISEod2luZG93IGFzIGFueSkub3ByICYmICEhb3ByLmFkZG9ucykgfHwgISEod2luZG93IGFzIGFueSkub3BlcmEgfHxcbiAgICAgICAgICAgIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignIE9QUi8nKSA+PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmRldmljZUNhY2hlID0gRGV2aWNlVHlwZS5PcGVyYUV4dGVuc2lvbjtcbiAgICAgICAgfSBlbHNlIGlmIChuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJyBFZGcvJykgIT09IC0xKSB7XG4gICAgICAgICAgICB0aGlzLmRldmljZUNhY2hlID0gRGV2aWNlVHlwZS5FZGdlRXh0ZW5zaW9uO1xuICAgICAgICB9IGVsc2UgaWYgKG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignIFZpdmFsZGkvJykgIT09IC0xKSB7XG4gICAgICAgICAgICB0aGlzLmRldmljZUNhY2hlID0gRGV2aWNlVHlwZS5WaXZhbGRpRXh0ZW5zaW9uO1xuICAgICAgICB9IGVsc2UgaWYgKCh3aW5kb3cgYXMgYW55KS5jaHJvbWUgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCcgQ2hyb21lLycpICE9PSAtMSkge1xuICAgICAgICAgICAgdGhpcy5kZXZpY2VDYWNoZSA9IERldmljZVR5cGUuQ2hyb21lRXh0ZW5zaW9uO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZGV2aWNlQ2FjaGU7XG4gICAgfVxuXG4gICAgZ2V0RGV2aWNlU3RyaW5nKCk6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IGRldmljZSA9IERldmljZVR5cGVbdGhpcy5nZXREZXZpY2UoKV0udG9Mb3dlckNhc2UoKTtcbiAgICAgICAgcmV0dXJuIGRldmljZS5yZXBsYWNlKCdleHRlbnNpb24nLCAnJyk7XG4gICAgfVxuXG4gICAgaXNGaXJlZm94KCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXREZXZpY2UoKSA9PT0gRGV2aWNlVHlwZS5GaXJlZm94RXh0ZW5zaW9uO1xuICAgIH1cblxuICAgIGlzQ2hyb21lKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXREZXZpY2UoKSA9PT0gRGV2aWNlVHlwZS5DaHJvbWVFeHRlbnNpb247XG4gICAgfVxuXG4gICAgaXNFZGdlKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXREZXZpY2UoKSA9PT0gRGV2aWNlVHlwZS5FZGdlRXh0ZW5zaW9uO1xuICAgIH1cblxuICAgIGlzT3BlcmEoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldERldmljZSgpID09PSBEZXZpY2VUeXBlLk9wZXJhRXh0ZW5zaW9uO1xuICAgIH1cblxuICAgIGlzVml2YWxkaSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RGV2aWNlKCkgPT09IERldmljZVR5cGUuVml2YWxkaUV4dGVuc2lvbjtcbiAgICB9XG5cbiAgICBpc1NhZmFyaSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RGV2aWNlKCkgPT09IERldmljZVR5cGUuU2FmYXJpRXh0ZW5zaW9uO1xuICAgIH1cblxuICAgIGlzSUUoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpc01hY0FwcFN0b3JlKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgYW5hbHl0aWNzSWQoKTogc3RyaW5nIHtcbiAgICAgICAgaWYgKHRoaXMuYW5hbHl0aWNzSWRDYWNoZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYW5hbHl0aWNzSWRDYWNoZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuYW5hbHl0aWNzSWRDYWNoZSA9IChBbmFseXRpY3NJZHMgYXMgYW55KVt0aGlzLmdldERldmljZSgpXTtcbiAgICAgICAgcmV0dXJuIHRoaXMuYW5hbHl0aWNzSWRDYWNoZTtcbiAgICB9XG5cbiAgICBhc3luYyBpc1ZpZXdPcGVuKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgICAgICBpZiAoYXdhaXQgQnJvd3NlckFwaS5pc1BvcHVwT3BlbigpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmlzU2FmYXJpKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHNpZGViYXJWaWV3ID0gdGhpcy5zaWRlYmFyVmlld05hbWUoKTtcbiAgICAgICAgY29uc3Qgc2lkZWJhck9wZW4gPSBzaWRlYmFyVmlldyAhPSBudWxsICYmIGNocm9tZS5leHRlbnNpb24uZ2V0Vmlld3MoeyB0eXBlOiBzaWRlYmFyVmlldyB9KS5sZW5ndGggPiAwO1xuICAgICAgICBpZiAoc2lkZWJhck9wZW4pIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdGFiT3BlbiA9IGNocm9tZS5leHRlbnNpb24uZ2V0Vmlld3MoeyB0eXBlOiAndGFiJyB9KS5sZW5ndGggPiAwO1xuICAgICAgICByZXR1cm4gdGFiT3BlbjtcbiAgICB9XG5cbiAgICBsb2NrVGltZW91dCgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBsYXVuY2hVcmkodXJpOiBzdHJpbmcsIG9wdGlvbnM/OiBhbnkpOiB2b2lkIHtcbiAgICAgICAgQnJvd3NlckFwaS5jcmVhdGVOZXdUYWIodXJpLCBvcHRpb25zICYmIG9wdGlvbnMuZXh0ZW5zaW9uUGFnZSA9PT0gdHJ1ZSk7XG4gICAgfVxuXG4gICAgc2F2ZUZpbGUod2luOiBXaW5kb3csIGJsb2JEYXRhOiBhbnksIGJsb2JPcHRpb25zOiBhbnksIGZpbGVOYW1lOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgQnJvd3NlckFwaS5kb3dubG9hZEZpbGUod2luLCBibG9iRGF0YSwgYmxvYk9wdGlvbnMsIGZpbGVOYW1lKTtcbiAgICB9XG5cbiAgICBnZXRBcHBsaWNhdGlvblZlcnNpb24oKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIEJyb3dzZXJBcGkuZ2V0QXBwbGljYXRpb25WZXJzaW9uKCk7XG4gICAgfVxuXG4gICAgc3VwcG9ydHNVMmYod2luOiBXaW5kb3cpOiBib29sZWFuIHtcbiAgICAgICAgaWYgKHdpbiAhPSBudWxsICYmICh3aW4gYXMgYW55KS51MmYgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5pc0Nocm9tZSgpIHx8IHRoaXMuaXNPcGVyYSgpIHx8IHRoaXMuaXNWaXZhbGRpKCk7XG4gICAgfVxuXG4gICAgc3VwcG9ydHNEdW8oKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHNob3dUb2FzdCh0eXBlOiAnZXJyb3InIHwgJ3N1Y2Nlc3MnIHwgJ3dhcm5pbmcnIHwgJ2luZm8nLCB0aXRsZTogc3RyaW5nLCB0ZXh0OiBzdHJpbmcgfCBzdHJpbmdbXSxcbiAgICAgICAgb3B0aW9ucz86IGFueSk6IHZvaWQge1xuICAgICAgICB0aGlzLm1lc3NhZ2luZ1NlcnZpY2Uuc2VuZCgnc2hvd1RvYXN0Jywge1xuICAgICAgICAgICAgdGV4dDogdGV4dCxcbiAgICAgICAgICAgIHRpdGxlOiB0aXRsZSxcbiAgICAgICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgICAgICBvcHRpb25zOiBvcHRpb25zLFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzaG93RGlhbG9nKHRleHQ6IHN0cmluZywgdGl0bGU/OiBzdHJpbmcsIGNvbmZpcm1UZXh0Pzogc3RyaW5nLCBjYW5jZWxUZXh0Pzogc3RyaW5nLCB0eXBlPzogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IGRpYWxvZ0lkID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIpO1xuICAgICAgICB0aGlzLm1lc3NhZ2luZ1NlcnZpY2Uuc2VuZCgnc2hvd0RpYWxvZycsIHtcbiAgICAgICAgICAgIHRleHQ6IHRleHQsXG4gICAgICAgICAgICB0aXRsZTogdGl0bGUsXG4gICAgICAgICAgICBjb25maXJtVGV4dDogY29uZmlybVRleHQsXG4gICAgICAgICAgICBjYW5jZWxUZXh0OiBjYW5jZWxUZXh0LFxuICAgICAgICAgICAgdHlwZTogdHlwZSxcbiAgICAgICAgICAgIGRpYWxvZ0lkOiBkaWFsb2dJZCxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTxib29sZWFuPigocmVzb2x2ZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zaG93RGlhbG9nUmVzb2x2ZXMuc2V0KGRpYWxvZ0lkLCB7IHJlc29sdmU6IHJlc29sdmUsIGRhdGU6IG5ldyBEYXRlKCkgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGV2ZW50VHJhY2soYWN0aW9uOiBzdHJpbmcsIGxhYmVsPzogc3RyaW5nLCBvcHRpb25zPzogYW55KSB7XG4gICAgICAgIHRoaXMubWVzc2FnaW5nU2VydmljZS5zZW5kKCdhbmFseXRpY3NFdmVudFRyYWNrJywge1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsYWJlbDogbGFiZWwsXG4gICAgICAgICAgICBvcHRpb25zOiBvcHRpb25zLFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBpc0RldigpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHByb2Nlc3MuZW52LkVOViA9PT0gJ2RldmVsb3BtZW50JztcbiAgICB9XG5cbiAgICBpc1NlbGZIb3N0KCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgY29weVRvQ2xpcGJvYXJkKHRleHQ6IHN0cmluZywgb3B0aW9ucz86IGFueSk6IHZvaWQge1xuICAgICAgICBsZXQgd2luID0gd2luZG93O1xuICAgICAgICBsZXQgZG9jID0gd2luZG93LmRvY3VtZW50O1xuICAgICAgICBpZiAob3B0aW9ucyAmJiAob3B0aW9ucy53aW5kb3cgfHwgb3B0aW9ucy53aW4pKSB7XG4gICAgICAgICAgICB3aW4gPSBvcHRpb25zLndpbmRvdyB8fCBvcHRpb25zLndpbjtcbiAgICAgICAgICAgIGRvYyA9IHdpbi5kb2N1bWVudDtcbiAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zICYmIG9wdGlvbnMuZG9jKSB7XG4gICAgICAgICAgICBkb2MgPSBvcHRpb25zLmRvYztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjbGVhcmluZyA9IG9wdGlvbnMgPyAhIW9wdGlvbnMuY2xlYXJpbmcgOiBmYWxzZTtcbiAgICAgICAgY29uc3QgY2xlYXJNczogbnVtYmVyID0gb3B0aW9ucyAmJiBvcHRpb25zLmNsZWFyTXMgPyBvcHRpb25zLmNsZWFyTXMgOiBudWxsO1xuICAgICAgICBpZiAodGhpcy5pc1NhZmFyaUV4dGVuc2lvbigpKSB7XG4gICAgICAgICAgICBTYWZhcmlBcHAuc2VuZE1lc3NhZ2VUb0FwcCgnY29weVRvQ2xpcGJvYXJkJywgdGV4dCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFjbGVhcmluZyAmJiB0aGlzLmNsaXBib2FyZFdyaXRlQ2FsbGJhY2sgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsaXBib2FyZFdyaXRlQ2FsbGJhY2sodGV4dCwgY2xlYXJNcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5pc0ZpcmVmb3goKSAmJiAod2luIGFzIGFueSkubmF2aWdhdG9yLmNsaXBib2FyZCAmJiAod2luIGFzIGFueSkubmF2aWdhdG9yLmNsaXBib2FyZC53cml0ZVRleHQpIHtcbiAgICAgICAgICAgICh3aW4gYXMgYW55KS5uYXZpZ2F0b3IuY2xpcGJvYXJkLndyaXRlVGV4dCh0ZXh0KS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIWNsZWFyaW5nICYmIHRoaXMuY2xpcGJvYXJkV3JpdGVDYWxsYmFjayAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xpcGJvYXJkV3JpdGVDYWxsYmFjayh0ZXh0LCBjbGVhck1zKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmICgod2luIGFzIGFueSkuY2xpcGJvYXJkRGF0YSAmJiAod2luIGFzIGFueSkuY2xpcGJvYXJkRGF0YS5zZXREYXRhKSB7XG4gICAgICAgICAgICAvLyBJRSBzcGVjaWZpYyBjb2RlIHBhdGggdG8gcHJldmVudCB0ZXh0YXJlYSBiZWluZyBzaG93biB3aGlsZSBkaWFsb2cgaXMgdmlzaWJsZS5cbiAgICAgICAgICAgICh3aW4gYXMgYW55KS5jbGlwYm9hcmREYXRhLnNldERhdGEoJ1RleHQnLCB0ZXh0KTtcbiAgICAgICAgICAgIGlmICghY2xlYXJpbmcgJiYgdGhpcy5jbGlwYm9hcmRXcml0ZUNhbGxiYWNrICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNsaXBib2FyZFdyaXRlQ2FsbGJhY2sodGV4dCwgY2xlYXJNcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoZG9jLnF1ZXJ5Q29tbWFuZFN1cHBvcnRlZCAmJiBkb2MucXVlcnlDb21tYW5kU3VwcG9ydGVkKCdjb3B5JykpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzQ2hyb21lKCkgJiYgdGV4dCA9PT0gJycpIHtcbiAgICAgICAgICAgICAgICB0ZXh0ID0gJ1xcdTAwMDAnO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCB0ZXh0YXJlYSA9IGRvYy5jcmVhdGVFbGVtZW50KCd0ZXh0YXJlYScpO1xuICAgICAgICAgICAgdGV4dGFyZWEudGV4dENvbnRlbnQgPSB0ZXh0ID09IG51bGwgfHwgdGV4dCA9PT0gJycgPyAnICcgOiB0ZXh0O1xuICAgICAgICAgICAgLy8gUHJldmVudCBzY3JvbGxpbmcgdG8gYm90dG9tIG9mIHBhZ2UgaW4gTVMgRWRnZS5cbiAgICAgICAgICAgIHRleHRhcmVhLnN0eWxlLnBvc2l0aW9uID0gJ2ZpeGVkJztcbiAgICAgICAgICAgIGRvYy5ib2R5LmFwcGVuZENoaWxkKHRleHRhcmVhKTtcbiAgICAgICAgICAgIHRleHRhcmVhLnNlbGVjdCgpO1xuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIC8vIFNlY3VyaXR5IGV4Y2VwdGlvbiBtYXkgYmUgdGhyb3duIGJ5IHNvbWUgYnJvd3NlcnMuXG4gICAgICAgICAgICAgICAgaWYgKGRvYy5leGVjQ29tbWFuZCgnY29weScpICYmICFjbGVhcmluZyAmJiB0aGlzLmNsaXBib2FyZFdyaXRlQ2FsbGJhY2sgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsaXBib2FyZFdyaXRlQ2FsbGJhY2sodGV4dCwgY2xlYXJNcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZVxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignQ29weSB0byBjbGlwYm9hcmQgZmFpbGVkLicsIGUpO1xuICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICBkb2MuYm9keS5yZW1vdmVDaGlsZCh0ZXh0YXJlYSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhc3luYyByZWFkRnJvbUNsaXBib2FyZChvcHRpb25zPzogYW55KTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgbGV0IHdpbiA9IHdpbmRvdztcbiAgICAgICAgbGV0IGRvYyA9IHdpbmRvdy5kb2N1bWVudDtcbiAgICAgICAgaWYgKG9wdGlvbnMgJiYgKG9wdGlvbnMud2luZG93IHx8IG9wdGlvbnMud2luKSkge1xuICAgICAgICAgICAgd2luID0gb3B0aW9ucy53aW5kb3cgfHwgb3B0aW9ucy53aW47XG4gICAgICAgICAgICBkb2MgPSB3aW4uZG9jdW1lbnQ7XG4gICAgICAgIH0gZWxzZSBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmRvYykge1xuICAgICAgICAgICAgZG9jID0gb3B0aW9ucy5kb2M7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5pc1NhZmFyaUV4dGVuc2lvbigpKSB7XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgU2FmYXJpQXBwLnNlbmRNZXNzYWdlVG9BcHAoJ3JlYWRGcm9tQ2xpcGJvYXJkJyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5pc0ZpcmVmb3goKSAmJiAod2luIGFzIGFueSkubmF2aWdhdG9yLmNsaXBib2FyZCAmJiAod2luIGFzIGFueSkubmF2aWdhdG9yLmNsaXBib2FyZC5yZWFkVGV4dCkge1xuICAgICAgICAgICAgcmV0dXJuIGF3YWl0ICh3aW4gYXMgYW55KS5uYXZpZ2F0b3IuY2xpcGJvYXJkLnJlYWRUZXh0KCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZG9jLnF1ZXJ5Q29tbWFuZFN1cHBvcnRlZCAmJiBkb2MucXVlcnlDb21tYW5kU3VwcG9ydGVkKCdwYXN0ZScpKSB7XG4gICAgICAgICAgICBjb25zdCB0ZXh0YXJlYSA9IGRvYy5jcmVhdGVFbGVtZW50KCd0ZXh0YXJlYScpO1xuICAgICAgICAgICAgLy8gUHJldmVudCBzY3JvbGxpbmcgdG8gYm90dG9tIG9mIHBhZ2UgaW4gTVMgRWRnZS5cbiAgICAgICAgICAgIHRleHRhcmVhLnN0eWxlLnBvc2l0aW9uID0gJ2ZpeGVkJztcbiAgICAgICAgICAgIGRvYy5ib2R5LmFwcGVuZENoaWxkKHRleHRhcmVhKTtcbiAgICAgICAgICAgIHRleHRhcmVhLmZvY3VzKCk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIC8vIFNlY3VyaXR5IGV4Y2VwdGlvbiBtYXkgYmUgdGhyb3duIGJ5IHNvbWUgYnJvd3NlcnMuXG4gICAgICAgICAgICAgICAgaWYgKGRvYy5leGVjQ29tbWFuZCgncGFzdGUnKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGV4dGFyZWEudmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZVxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignUmVhZCBmcm9tIGNsaXBib2FyZCBmYWlsZWQuJywgZSk7XG4gICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIGRvYy5ib2R5LnJlbW92ZUNoaWxkKHRleHRhcmVhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXNvbHZlRGlhbG9nUHJvbWlzZShkaWFsb2dJZDogbnVtYmVyLCBjb25maXJtZWQ6IGJvb2xlYW4pIHtcbiAgICAgICAgaWYgKHRoaXMuc2hvd0RpYWxvZ1Jlc29sdmVzLmhhcyhkaWFsb2dJZCkpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc29sdmVPYmogPSB0aGlzLnNob3dEaWFsb2dSZXNvbHZlcy5nZXQoZGlhbG9nSWQpO1xuICAgICAgICAgICAgcmVzb2x2ZU9iai5yZXNvbHZlKGNvbmZpcm1lZCk7XG4gICAgICAgICAgICB0aGlzLnNob3dEaWFsb2dSZXNvbHZlcy5kZWxldGUoZGlhbG9nSWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2xlYW4gdXAgb2xkIHByb21pc2VzXG4gICAgICAgIGNvbnN0IGRlbGV0ZUlkczogbnVtYmVyW10gPSBbXTtcbiAgICAgICAgdGhpcy5zaG93RGlhbG9nUmVzb2x2ZXMuZm9yRWFjaCgodmFsLCBrZXkpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGFnZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gdmFsLmRhdGUuZ2V0VGltZSgpO1xuICAgICAgICAgICAgaWYgKGFnZSA+IERpYWxvZ1Byb21pc2VFeHBpcmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlSWRzLnB1c2goa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGRlbGV0ZUlkcy5mb3JFYWNoKChpZCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zaG93RGlhbG9nUmVzb2x2ZXMuZGVsZXRlKGlkKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc3VwcG9ydHNCaW9tZXRyaWMoKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZmFsc2UpO1xuICAgIH1cblxuICAgIGF1dGhlbnRpY2F0ZUJpb21ldHJpYygpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShmYWxzZSk7XG4gICAgfVxuXG4gICAgc2lkZWJhclZpZXdOYW1lKCk6IHN0cmluZyB7XG4gICAgICAgIGlmICgod2luZG93IGFzIGFueSkuY2hyb21lLnNpZGViYXJBY3Rpb24gJiYgdGhpcy5pc0ZpcmVmb3goKSkge1xuICAgICAgICAgICAgcmV0dXJuICdzaWRlYmFyJztcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlzT3BlcmEoKSAmJiAodHlwZW9mIG9wciAhPT0gJ3VuZGVmaW5lZCcpICYmIG9wci5zaWRlYmFyQWN0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gJ3NpZGViYXJfcGFuZWwnO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgc3VwcG9ydHNTZWN1cmVTdG9yYWdlKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpc1NhZmFyaUV4dGVuc2lvbigpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuICh3aW5kb3cgYXMgYW55KS5zYWZhcmlBcHBFeHRlbnNpb24gPT09IHRydWU7XG4gICAgfVxufVxuIiwiaW1wb3J0IHtcbiAgICBQbGF0Zm9ybVV0aWxzU2VydmljZSxcbiAgICBTdG9yYWdlU2VydmljZSxcbn0gZnJvbSAnanNsaWIvYWJzdHJhY3Rpb25zJztcblxuaW1wb3J0IHsgU2FmYXJpQXBwIH0gZnJvbSAnLi4vYnJvd3Nlci9zYWZhcmlBcHAnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCcm93c2VyU3RvcmFnZVNlcnZpY2UgaW1wbGVtZW50cyBTdG9yYWdlU2VydmljZSB7XG4gICAgcHJpdmF0ZSBjaHJvbWVTdG9yYWdlQXBpOiBhbnk7XG4gICAgcHJpdmF0ZSBpc1NhZmFyaTogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKHBsYXRmb3JtVXRpbHNTZXJ2aWNlOiBQbGF0Zm9ybVV0aWxzU2VydmljZSkge1xuICAgICAgICB0aGlzLmlzU2FmYXJpID0gcGxhdGZvcm1VdGlsc1NlcnZpY2UuaXNTYWZhcmkoKTtcbiAgICAgICAgaWYgKCF0aGlzLmlzU2FmYXJpKSB7XG4gICAgICAgICAgICB0aGlzLmNocm9tZVN0b3JhZ2VBcGkgPSBjaHJvbWUuc3RvcmFnZS5sb2NhbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIGdldDxUPihrZXk6IHN0cmluZyk6IFByb21pc2U8VD4ge1xuICAgICAgICBpZiAodGhpcy5pc1NhZmFyaSkge1xuICAgICAgICAgICAgY29uc3Qgb2JqID0gYXdhaXQgU2FmYXJpQXBwLnNlbmRNZXNzYWdlVG9BcHAoJ3N0b3JhZ2VfZ2V0Jywga2V5KTtcbiAgICAgICAgICAgIHJldHVybiBvYmogPT0gbnVsbCA/IG51bGwgOiBKU09OLnBhcnNlKG9iaikgYXMgVDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuY2hyb21lU3RvcmFnZUFwaS5nZXQoa2V5LCAob2JqOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9iaiAhPSBudWxsICYmIG9ialtrZXldICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUob2JqW2tleV0gYXMgVCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShudWxsKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgc2F2ZShrZXk6IHN0cmluZywgb2JqOiBhbnkpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICBjb25zdCBrZXllZE9iaiA9IHsgW2tleV06IG9iaiB9O1xuICAgICAgICBpZiAodGhpcy5pc1NhZmFyaSkge1xuICAgICAgICAgICAgYXdhaXQgU2FmYXJpQXBwLnNlbmRNZXNzYWdlVG9BcHAoJ3N0b3JhZ2Vfc2F2ZScsIEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICAgICAgICBvYmo6IEpTT04uc3RyaW5naWZ5KG9iaiksXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmNocm9tZVN0b3JhZ2VBcGkuc2V0KGtleWVkT2JqLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgcmVtb3ZlKGtleTogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgaWYgKHRoaXMuaXNTYWZhcmkpIHtcbiAgICAgICAgICAgIGF3YWl0IFNhZmFyaUFwcC5zZW5kTWVzc2FnZVRvQXBwKCdzdG9yYWdlX3JlbW92ZScsIGtleSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmNocm9tZVN0b3JhZ2VBcGkucmVtb3ZlKGtleSwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7IEkxOG5TZXJ2aWNlIGFzIEJhc2VJMThuU2VydmljZSB9IGZyb20gJ2pzbGliL3NlcnZpY2VzL2kxOG4uc2VydmljZSc7XG5cbmltcG9ydCB7IEJyb3dzZXJBcGkgfSBmcm9tICcuLi9icm93c2VyL2Jyb3dzZXJBcGknO1xuaW1wb3J0IHsgU2FmYXJpQXBwIH0gZnJvbSAnLi4vYnJvd3Nlci9zYWZhcmlBcHAnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJMThuU2VydmljZSBleHRlbmRzIEJhc2VJMThuU2VydmljZSB7XG4gICAgY29uc3RydWN0b3Ioc3lzdGVtTGFuZ3VhZ2U6IHN0cmluZykge1xuICAgICAgICBzdXBlcihzeXN0ZW1MYW5ndWFnZSwgQnJvd3NlckFwaS5pc1NhZmFyaUFwaSA/ICdzYWZhcmknIDogbnVsbCwgYXN5bmMgKGZvcm1hdHRlZExvY2FsZTogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICBpZiAoQnJvd3NlckFwaS5pc1NhZmFyaUFwaSkge1xuICAgICAgICAgICAgICAgIGF3YWl0IFNhZmFyaUFwcC5zZW5kTWVzc2FnZVRvQXBwKCdnZXRMb2NhbGVTdHJpbmdzJywgZm9ybWF0dGVkTG9jYWxlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHdpbmRvdyBhcyBhbnkpLmJpdHdhcmRlbkxvY2FsZVN0cmluZ3M7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIERlcHJlY2F0ZWRcbiAgICAgICAgICAgICAgICBjb25zdCBmaWxlID0gYXdhaXQgZmV0Y2godGhpcy5sb2NhbGVzRGlyZWN0b3J5ICsgZm9ybWF0dGVkTG9jYWxlICsgJy9tZXNzYWdlcy5qc29uJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IGZpbGUuanNvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnN1cHBvcnRlZFRyYW5zbGF0aW9uTG9jYWxlcyA9IFtcbiAgICAgICAgICAgICdlbicsICdiZScsICdiZycsICdjYScsICdjcycsICdkYScsICdkZScsICdlbCcsICdlbi1HQicsICdlcycsICdldCcsICdmYScsICdmaScsICdmcicsICdoZScsICdocicsICdodScsXG4gICAgICAgICAgICAnaWQnLCAnaXQnLCAnamEnLCAna28nLCAnbmInLCAnbmwnLCAncGwnLCAncHQtQlInLCAncHQtUFQnLCAncm8nLCAncnUnLCAnc2snLCAnc3InLCAnc3YnLCAndGgnLCAndHInLCAndWsnLFxuICAgICAgICAgICAgJ3ZpJywgJ3poLUNOJywgJ3poLVRXJyxcbiAgICAgICAgXTtcbiAgICB9XG5cbiAgICB0KGlkOiBzdHJpbmcsIHAxPzogc3RyaW5nLCBwMj86IHN0cmluZywgcDM/OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy50cmFuc2xhdGUoaWQsIHAxLCBwMiwgcDMpO1xuICAgIH1cblxuICAgIHRyYW5zbGF0ZShpZDogc3RyaW5nLCBwMT86IHN0cmluZywgcDI/OiBzdHJpbmcsIHAzPzogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgaWYgKHRoaXMubG9jYWxlc0RpcmVjdG9yeSA9PSBudWxsKSB7XG4gICAgICAgICAgICBjb25zdCBwbGFjZWhvbGRlcnM6IHN0cmluZ1tdID0gW107XG4gICAgICAgICAgICBpZiAocDEgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVycy5wdXNoKHAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwMiAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXJzLnB1c2gocDIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHAzICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcnMucHVzaChwMyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChwbGFjZWhvbGRlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNocm9tZS5pMThuLmdldE1lc3NhZ2UoaWQsIHBsYWNlaG9sZGVycyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBjaHJvbWUuaTE4bi5nZXRNZXNzYWdlKGlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzdXBlci50cmFuc2xhdGUoaWQsIHAxLCBwMiwgcDMpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IENpcGhlclR5cGUgfSBmcm9tICdqc2xpYi9lbnVtcyc7XG5cbmltcG9ydCB7XG4gICAgQXBpU2VydmljZSxcbiAgICBBcHBJZFNlcnZpY2UsXG4gICAgQXVkaXRTZXJ2aWNlLFxuICAgIEF1dGhTZXJ2aWNlLFxuICAgIENpcGhlclNlcnZpY2UsXG4gICAgQ29sbGVjdGlvblNlcnZpY2UsXG4gICAgQ29uc3RhbnRzU2VydmljZSxcbiAgICBDb250YWluZXJTZXJ2aWNlLFxuICAgIENyeXB0b1NlcnZpY2UsXG4gICAgRW52aXJvbm1lbnRTZXJ2aWNlLFxuICAgIEZvbGRlclNlcnZpY2UsXG4gICAgUGFzc3dvcmRHZW5lcmF0aW9uU2VydmljZSxcbiAgICBTZXR0aW5nc1NlcnZpY2UsXG4gICAgU3RhdGVTZXJ2aWNlLFxuICAgIFN5bmNTZXJ2aWNlLFxuICAgIFRva2VuU2VydmljZSxcbiAgICBUb3RwU2VydmljZSxcbiAgICBVc2VyU2VydmljZSxcbiAgICBWYXVsdFRpbWVvdXRTZXJ2aWNlLFxufSBmcm9tICdqc2xpYi9zZXJ2aWNlcyc7XG5pbXBvcnQgeyBFdmVudFNlcnZpY2UgfSBmcm9tICdqc2xpYi9zZXJ2aWNlcy9ldmVudC5zZXJ2aWNlJztcbmltcG9ydCB7IEV4cG9ydFNlcnZpY2UgfSBmcm9tICdqc2xpYi9zZXJ2aWNlcy9leHBvcnQuc2VydmljZSc7XG5pbXBvcnQgeyBOb3RpZmljYXRpb25zU2VydmljZSB9IGZyb20gJ2pzbGliL3NlcnZpY2VzL25vdGlmaWNhdGlvbnMuc2VydmljZSc7XG5pbXBvcnQgeyBQb2xpY3lTZXJ2aWNlIH0gZnJvbSAnanNsaWIvc2VydmljZXMvcG9saWN5LnNlcnZpY2UnO1xuaW1wb3J0IHsgU2VhcmNoU2VydmljZSB9IGZyb20gJ2pzbGliL3NlcnZpY2VzL3NlYXJjaC5zZXJ2aWNlJztcbmltcG9ydCB7IFNlbmRTZXJ2aWNlIH0gZnJvbSAnanNsaWIvc2VydmljZXMvc2VuZC5zZXJ2aWNlJztcbmltcG9ydCB7IFN5c3RlbVNlcnZpY2UgfSBmcm9tICdqc2xpYi9zZXJ2aWNlcy9zeXN0ZW0uc2VydmljZSc7XG5pbXBvcnQgeyBXZWJDcnlwdG9GdW5jdGlvblNlcnZpY2UgfSBmcm9tICdqc2xpYi9zZXJ2aWNlcy93ZWJDcnlwdG9GdW5jdGlvbi5zZXJ2aWNlJztcblxuaW1wb3J0IHtcbiAgICBBcGlTZXJ2aWNlIGFzIEFwaVNlcnZpY2VBYnN0cmFjdGlvbixcbiAgICBBcHBJZFNlcnZpY2UgYXMgQXBwSWRTZXJ2aWNlQWJzdHJhY3Rpb24sXG4gICAgQXVkaXRTZXJ2aWNlIGFzIEF1ZGl0U2VydmljZUFic3RyYWN0aW9uLFxuICAgIEF1dGhTZXJ2aWNlIGFzIEF1dGhTZXJ2aWNlQWJzdHJhY3Rpb24sXG4gICAgQ2lwaGVyU2VydmljZSBhcyBDaXBoZXJTZXJ2aWNlQWJzdHJhY3Rpb24sXG4gICAgQ29sbGVjdGlvblNlcnZpY2UgYXMgQ29sbGVjdGlvblNlcnZpY2VBYnN0cmFjdGlvbixcbiAgICBDcnlwdG9TZXJ2aWNlIGFzIENyeXB0b1NlcnZpY2VBYnN0cmFjdGlvbixcbiAgICBFbnZpcm9ubWVudFNlcnZpY2UgYXMgRW52aXJvbm1lbnRTZXJ2aWNlQWJzdHJhY3Rpb24sXG4gICAgRm9sZGVyU2VydmljZSBhcyBGb2xkZXJTZXJ2aWNlQWJzdHJhY3Rpb24sXG4gICAgSTE4blNlcnZpY2UgYXMgSTE4blNlcnZpY2VBYnN0cmFjdGlvbixcbiAgICBNZXNzYWdpbmdTZXJ2aWNlIGFzIE1lc3NhZ2luZ1NlcnZpY2VBYnN0cmFjdGlvbixcbiAgICBQYXNzd29yZEdlbmVyYXRpb25TZXJ2aWNlIGFzIFBhc3N3b3JkR2VuZXJhdGlvblNlcnZpY2VBYnN0cmFjdGlvbixcbiAgICBQbGF0Zm9ybVV0aWxzU2VydmljZSBhcyBQbGF0Zm9ybVV0aWxzU2VydmljZUFic3RyYWN0aW9uLFxuICAgIFNldHRpbmdzU2VydmljZSBhcyBTZXR0aW5nc1NlcnZpY2VBYnN0cmFjdGlvbixcbiAgICBTdGF0ZVNlcnZpY2UgYXMgU3RhdGVTZXJ2aWNlQWJzdHJhY3Rpb24sXG4gICAgU3RvcmFnZVNlcnZpY2UgYXMgU3RvcmFnZVNlcnZpY2VBYnN0cmFjdGlvbixcbiAgICBTeW5jU2VydmljZSBhcyBTeW5jU2VydmljZUFic3RyYWN0aW9uLFxuICAgIFRva2VuU2VydmljZSBhcyBUb2tlblNlcnZpY2VBYnN0cmFjdGlvbixcbiAgICBUb3RwU2VydmljZSBhcyBUb3RwU2VydmljZUFic3RyYWN0aW9uLFxuICAgIFVzZXJTZXJ2aWNlIGFzIFVzZXJTZXJ2aWNlQWJzdHJhY3Rpb24sXG4gICAgVmF1bHRUaW1lb3V0U2VydmljZSBhcyBWYXVsdFRpbWVvdXRTZXJ2aWNlQWJzdHJhY3Rpb24sXG59IGZyb20gJ2pzbGliL2Fic3RyYWN0aW9ucyc7XG5pbXBvcnQgeyBDcnlwdG9GdW5jdGlvblNlcnZpY2UgYXMgQ3J5cHRvRnVuY3Rpb25TZXJ2aWNlQWJzdHJhY3Rpb24gfSBmcm9tICdqc2xpYi9hYnN0cmFjdGlvbnMvY3J5cHRvRnVuY3Rpb24uc2VydmljZSc7XG5pbXBvcnQgeyBFdmVudFNlcnZpY2UgYXMgRXZlbnRTZXJ2aWNlQWJzdHJhY3Rpb24gfSBmcm9tICdqc2xpYi9hYnN0cmFjdGlvbnMvZXZlbnQuc2VydmljZSc7XG5pbXBvcnQgeyBFeHBvcnRTZXJ2aWNlIGFzIEV4cG9ydFNlcnZpY2VBYnN0cmFjdGlvbiB9IGZyb20gJ2pzbGliL2Fic3RyYWN0aW9ucy9leHBvcnQuc2VydmljZSc7XG5pbXBvcnQgeyBOb3RpZmljYXRpb25zU2VydmljZSBhcyBOb3RpZmljYXRpb25zU2VydmljZUFic3RyYWN0aW9uIH0gZnJvbSAnanNsaWIvYWJzdHJhY3Rpb25zL25vdGlmaWNhdGlvbnMuc2VydmljZSc7XG5pbXBvcnQgeyBQb2xpY3lTZXJ2aWNlIGFzIFBvbGljeVNlcnZpY2VBYnN0cmFjdGlvbiB9IGZyb20gJ2pzbGliL2Fic3RyYWN0aW9ucy9wb2xpY3kuc2VydmljZSc7XG5pbXBvcnQgeyBTZWFyY2hTZXJ2aWNlIGFzIFNlYXJjaFNlcnZpY2VBYnN0cmFjdGlvbiB9IGZyb20gJ2pzbGliL2Fic3RyYWN0aW9ucy9zZWFyY2guc2VydmljZSc7XG5pbXBvcnQgeyBTZW5kU2VydmljZSBhcyBTZW5kU2VydmljZUFic3RyYWN0aW9uIH0gZnJvbSAnanNsaWIvYWJzdHJhY3Rpb25zL3NlbmQuc2VydmljZSc7XG5pbXBvcnQgeyBTeXN0ZW1TZXJ2aWNlIGFzIFN5c3RlbVNlcnZpY2VBYnN0cmFjdGlvbiB9IGZyb20gJ2pzbGliL2Fic3RyYWN0aW9ucy9zeXN0ZW0uc2VydmljZSc7XG5cbmltcG9ydCB7IEFuYWx5dGljcyB9IGZyb20gJ2pzbGliL21pc2MnO1xuaW1wb3J0IHsgVXRpbHMgfSBmcm9tICdqc2xpYi9taXNjL3V0aWxzJztcblxuaW1wb3J0IHsgQnJvd3NlckFwaSB9IGZyb20gJy4uL2Jyb3dzZXIvYnJvd3NlckFwaSc7XG5pbXBvcnQgeyBTYWZhcmlBcHAgfSBmcm9tICcuLi9icm93c2VyL3NhZmFyaUFwcCc7XG5cbmltcG9ydCBDb21tYW5kc0JhY2tncm91bmQgZnJvbSAnLi9jb21tYW5kcy5iYWNrZ3JvdW5kJztcbmltcG9ydCBDb250ZXh0TWVudXNCYWNrZ3JvdW5kIGZyb20gJy4vY29udGV4dE1lbnVzLmJhY2tncm91bmQnO1xuaW1wb3J0IElkbGVCYWNrZ3JvdW5kIGZyb20gJy4vaWRsZS5iYWNrZ3JvdW5kJztcbmltcG9ydCBSdW50aW1lQmFja2dyb3VuZCBmcm9tICcuL3J1bnRpbWUuYmFja2dyb3VuZCc7XG5pbXBvcnQgVGFic0JhY2tncm91bmQgZnJvbSAnLi90YWJzLmJhY2tncm91bmQnO1xuaW1wb3J0IFdlYlJlcXVlc3RCYWNrZ3JvdW5kIGZyb20gJy4vd2ViUmVxdWVzdC5iYWNrZ3JvdW5kJztcbmltcG9ydCBXaW5kb3dzQmFja2dyb3VuZCBmcm9tICcuL3dpbmRvd3MuYmFja2dyb3VuZCc7XG5cbmltcG9ydCBBdXRvZmlsbFNlcnZpY2UgZnJvbSAnLi4vc2VydmljZXMvYXV0b2ZpbGwuc2VydmljZSc7XG5pbXBvcnQgQnJvd3Nlck1lc3NhZ2luZ1NlcnZpY2UgZnJvbSAnLi4vc2VydmljZXMvYnJvd3Nlck1lc3NhZ2luZy5zZXJ2aWNlJztcbmltcG9ydCBCcm93c2VyUGxhdGZvcm1VdGlsc1NlcnZpY2UgZnJvbSAnLi4vc2VydmljZXMvYnJvd3NlclBsYXRmb3JtVXRpbHMuc2VydmljZSc7XG5pbXBvcnQgQnJvd3NlclN0b3JhZ2VTZXJ2aWNlIGZyb20gJy4uL3NlcnZpY2VzL2Jyb3dzZXJTdG9yYWdlLnNlcnZpY2UnO1xuaW1wb3J0IEkxOG5TZXJ2aWNlIGZyb20gJy4uL3NlcnZpY2VzL2kxOG4uc2VydmljZSc7XG5pbXBvcnQgeyBQb3B1cFV0aWxzU2VydmljZSB9IGZyb20gJy4uL3BvcHVwL3NlcnZpY2VzL3BvcHVwLXV0aWxzLnNlcnZpY2UnO1xuXG5pbXBvcnQgeyBBdXRvZmlsbFNlcnZpY2UgYXMgQXV0b2ZpbGxTZXJ2aWNlQWJzdHJhY3Rpb24gfSBmcm9tICcuLi9zZXJ2aWNlcy9hYnN0cmFjdGlvbnMvYXV0b2ZpbGwuc2VydmljZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1haW5CYWNrZ3JvdW5kIHtcbiAgICBtZXNzYWdpbmdTZXJ2aWNlOiBNZXNzYWdpbmdTZXJ2aWNlQWJzdHJhY3Rpb247XG4gICAgc3RvcmFnZVNlcnZpY2U6IFN0b3JhZ2VTZXJ2aWNlQWJzdHJhY3Rpb247XG4gICAgc2VjdXJlU3RvcmFnZVNlcnZpY2U6IFN0b3JhZ2VTZXJ2aWNlQWJzdHJhY3Rpb247XG4gICAgaTE4blNlcnZpY2U6IEkxOG5TZXJ2aWNlQWJzdHJhY3Rpb247XG4gICAgcGxhdGZvcm1VdGlsc1NlcnZpY2U6IFBsYXRmb3JtVXRpbHNTZXJ2aWNlQWJzdHJhY3Rpb247XG4gICAgY29uc3RhbnRzU2VydmljZTogQ29uc3RhbnRzU2VydmljZTtcbiAgICBjcnlwdG9TZXJ2aWNlOiBDcnlwdG9TZXJ2aWNlQWJzdHJhY3Rpb247XG4gICAgY3J5cHRvRnVuY3Rpb25TZXJ2aWNlOiBDcnlwdG9GdW5jdGlvblNlcnZpY2VBYnN0cmFjdGlvbjtcbiAgICB0b2tlblNlcnZpY2U6IFRva2VuU2VydmljZUFic3RyYWN0aW9uO1xuICAgIGFwcElkU2VydmljZTogQXBwSWRTZXJ2aWNlQWJzdHJhY3Rpb247XG4gICAgYXBpU2VydmljZTogQXBpU2VydmljZUFic3RyYWN0aW9uO1xuICAgIGVudmlyb25tZW50U2VydmljZTogRW52aXJvbm1lbnRTZXJ2aWNlQWJzdHJhY3Rpb247XG4gICAgdXNlclNlcnZpY2U6IFVzZXJTZXJ2aWNlQWJzdHJhY3Rpb247XG4gICAgc2V0dGluZ3NTZXJ2aWNlOiBTZXR0aW5nc1NlcnZpY2VBYnN0cmFjdGlvbjtcbiAgICBjaXBoZXJTZXJ2aWNlOiBDaXBoZXJTZXJ2aWNlQWJzdHJhY3Rpb247XG4gICAgZm9sZGVyU2VydmljZTogRm9sZGVyU2VydmljZUFic3RyYWN0aW9uO1xuICAgIGNvbGxlY3Rpb25TZXJ2aWNlOiBDb2xsZWN0aW9uU2VydmljZUFic3RyYWN0aW9uO1xuICAgIHZhdWx0VGltZW91dFNlcnZpY2U6IFZhdWx0VGltZW91dFNlcnZpY2VBYnN0cmFjdGlvbjtcbiAgICBzeW5jU2VydmljZTogU3luY1NlcnZpY2VBYnN0cmFjdGlvbjtcbiAgICBwYXNzd29yZEdlbmVyYXRpb25TZXJ2aWNlOiBQYXNzd29yZEdlbmVyYXRpb25TZXJ2aWNlQWJzdHJhY3Rpb247XG4gICAgdG90cFNlcnZpY2U6IFRvdHBTZXJ2aWNlQWJzdHJhY3Rpb247XG4gICAgYXV0b2ZpbGxTZXJ2aWNlOiBBdXRvZmlsbFNlcnZpY2VBYnN0cmFjdGlvbjtcbiAgICBjb250YWluZXJTZXJ2aWNlOiBDb250YWluZXJTZXJ2aWNlO1xuICAgIGF1ZGl0U2VydmljZTogQXVkaXRTZXJ2aWNlQWJzdHJhY3Rpb247XG4gICAgYXV0aFNlcnZpY2U6IEF1dGhTZXJ2aWNlQWJzdHJhY3Rpb247XG4gICAgZXhwb3J0U2VydmljZTogRXhwb3J0U2VydmljZUFic3RyYWN0aW9uO1xuICAgIHNlYXJjaFNlcnZpY2U6IFNlYXJjaFNlcnZpY2VBYnN0cmFjdGlvbjtcbiAgICBub3RpZmljYXRpb25zU2VydmljZTogTm90aWZpY2F0aW9uc1NlcnZpY2VBYnN0cmFjdGlvbjtcbiAgICBzdGF0ZVNlcnZpY2U6IFN0YXRlU2VydmljZUFic3RyYWN0aW9uO1xuICAgIHN5c3RlbVNlcnZpY2U6IFN5c3RlbVNlcnZpY2VBYnN0cmFjdGlvbjtcbiAgICBldmVudFNlcnZpY2U6IEV2ZW50U2VydmljZUFic3RyYWN0aW9uO1xuICAgIHBvbGljeVNlcnZpY2U6IFBvbGljeVNlcnZpY2VBYnN0cmFjdGlvbjtcbiAgICBhbmFseXRpY3M6IEFuYWx5dGljcztcbiAgICBwb3B1cFV0aWxzU2VydmljZTogUG9wdXBVdGlsc1NlcnZpY2U7XG4gICAgc2VuZFNlcnZpY2U6IFNlbmRTZXJ2aWNlQWJzdHJhY3Rpb247XG5cbiAgICBvblVwZGF0ZWRSYW46IGJvb2xlYW47XG4gICAgb25SZXBsYWNlZFJhbjogYm9vbGVhbjtcbiAgICBsb2dpblRvQXV0b0ZpbGw6IGFueSA9IG51bGw7XG4gICAgbm90aWZpY2F0aW9uUXVldWU6IGFueVtdID0gW107XG5cbiAgICBwcml2YXRlIGNvbW1hbmRzQmFja2dyb3VuZDogQ29tbWFuZHNCYWNrZ3JvdW5kO1xuICAgIHByaXZhdGUgY29udGV4dE1lbnVzQmFja2dyb3VuZDogQ29udGV4dE1lbnVzQmFja2dyb3VuZDtcbiAgICBwcml2YXRlIGlkbGVCYWNrZ3JvdW5kOiBJZGxlQmFja2dyb3VuZDtcbiAgICBwcml2YXRlIHJ1bnRpbWVCYWNrZ3JvdW5kOiBSdW50aW1lQmFja2dyb3VuZDtcbiAgICBwcml2YXRlIHRhYnNCYWNrZ3JvdW5kOiBUYWJzQmFja2dyb3VuZDtcbiAgICBwcml2YXRlIHdlYlJlcXVlc3RCYWNrZ3JvdW5kOiBXZWJSZXF1ZXN0QmFja2dyb3VuZDtcbiAgICBwcml2YXRlIHdpbmRvd3NCYWNrZ3JvdW5kOiBXaW5kb3dzQmFja2dyb3VuZDtcblxuICAgIHByaXZhdGUgc2lkZWJhckFjdGlvbjogYW55O1xuICAgIHByaXZhdGUgYnVpbGRpbmdDb250ZXh0TWVudTogYm9vbGVhbjtcbiAgICBwcml2YXRlIG1lbnVPcHRpb25zTG9hZGVkOiBhbnlbXSA9IFtdO1xuICAgIHByaXZhdGUgc3luY1RpbWVvdXQ6IGFueTtcbiAgICBwcml2YXRlIGlzU2FmYXJpOiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIC8vIFNlcnZpY2VzXG4gICAgICAgIHRoaXMubWVzc2FnaW5nU2VydmljZSA9IG5ldyBCcm93c2VyTWVzc2FnaW5nU2VydmljZSgpO1xuICAgICAgICB0aGlzLnBsYXRmb3JtVXRpbHNTZXJ2aWNlID0gbmV3IEJyb3dzZXJQbGF0Zm9ybVV0aWxzU2VydmljZSh0aGlzLm1lc3NhZ2luZ1NlcnZpY2UsXG4gICAgICAgICAgICAoY2xpcGJvYXJkVmFsdWUsIGNsZWFyTXMpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zeXN0ZW1TZXJ2aWNlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zeXN0ZW1TZXJ2aWNlLmNsZWFyQ2xpcGJvYXJkKGNsaXBib2FyZFZhbHVlLCBjbGVhck1zKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zdG9yYWdlU2VydmljZSA9IG5ldyBCcm93c2VyU3RvcmFnZVNlcnZpY2UodGhpcy5wbGF0Zm9ybVV0aWxzU2VydmljZSk7XG4gICAgICAgIHRoaXMuc2VjdXJlU3RvcmFnZVNlcnZpY2UgPSBuZXcgQnJvd3NlclN0b3JhZ2VTZXJ2aWNlKHRoaXMucGxhdGZvcm1VdGlsc1NlcnZpY2UpO1xuICAgICAgICB0aGlzLmkxOG5TZXJ2aWNlID0gbmV3IEkxOG5TZXJ2aWNlKEJyb3dzZXJBcGkuZ2V0VUlMYW5ndWFnZSh3aW5kb3cpKTtcbiAgICAgICAgdGhpcy5jcnlwdG9GdW5jdGlvblNlcnZpY2UgPSBuZXcgV2ViQ3J5cHRvRnVuY3Rpb25TZXJ2aWNlKHdpbmRvdywgdGhpcy5wbGF0Zm9ybVV0aWxzU2VydmljZSk7XG4gICAgICAgIHRoaXMuY3J5cHRvU2VydmljZSA9IG5ldyBDcnlwdG9TZXJ2aWNlKHRoaXMuc3RvcmFnZVNlcnZpY2UsIHRoaXMuc2VjdXJlU3RvcmFnZVNlcnZpY2UsXG4gICAgICAgICAgICB0aGlzLmNyeXB0b0Z1bmN0aW9uU2VydmljZSwgdGhpcy5wbGF0Zm9ybVV0aWxzU2VydmljZSk7XG4gICAgICAgIHRoaXMudG9rZW5TZXJ2aWNlID0gbmV3IFRva2VuU2VydmljZSh0aGlzLnN0b3JhZ2VTZXJ2aWNlKTtcbiAgICAgICAgdGhpcy5hcHBJZFNlcnZpY2UgPSBuZXcgQXBwSWRTZXJ2aWNlKHRoaXMuc3RvcmFnZVNlcnZpY2UpO1xuICAgICAgICB0aGlzLmFwaVNlcnZpY2UgPSBuZXcgQXBpU2VydmljZSh0aGlzLnRva2VuU2VydmljZSwgdGhpcy5wbGF0Zm9ybVV0aWxzU2VydmljZSxcbiAgICAgICAgICAgIChleHBpcmVkOiBib29sZWFuKSA9PiB0aGlzLmxvZ291dChleHBpcmVkKSk7XG4gICAgICAgIHRoaXMudXNlclNlcnZpY2UgPSBuZXcgVXNlclNlcnZpY2UodGhpcy50b2tlblNlcnZpY2UsIHRoaXMuc3RvcmFnZVNlcnZpY2UpO1xuICAgICAgICB0aGlzLmF1dGhTZXJ2aWNlID0gbmV3IEF1dGhTZXJ2aWNlKHRoaXMuY3J5cHRvU2VydmljZSwgdGhpcy5hcGlTZXJ2aWNlLCB0aGlzLnVzZXJTZXJ2aWNlLFxuICAgICAgICAgICAgdGhpcy50b2tlblNlcnZpY2UsIHRoaXMuYXBwSWRTZXJ2aWNlLCB0aGlzLmkxOG5TZXJ2aWNlLCB0aGlzLnBsYXRmb3JtVXRpbHNTZXJ2aWNlLFxuICAgICAgICAgICAgdGhpcy5tZXNzYWdpbmdTZXJ2aWNlLCB0aGlzLnZhdWx0VGltZW91dFNlcnZpY2UpO1xuICAgICAgICB0aGlzLnNldHRpbmdzU2VydmljZSA9IG5ldyBTZXR0aW5nc1NlcnZpY2UodGhpcy51c2VyU2VydmljZSwgdGhpcy5zdG9yYWdlU2VydmljZSk7XG4gICAgICAgIHRoaXMuY2lwaGVyU2VydmljZSA9IG5ldyBDaXBoZXJTZXJ2aWNlKHRoaXMuY3J5cHRvU2VydmljZSwgdGhpcy51c2VyU2VydmljZSwgdGhpcy5zZXR0aW5nc1NlcnZpY2UsXG4gICAgICAgICAgICB0aGlzLmFwaVNlcnZpY2UsIHRoaXMuc3RvcmFnZVNlcnZpY2UsIHRoaXMuaTE4blNlcnZpY2UsICgpID0+IHRoaXMuc2VhcmNoU2VydmljZSk7XG4gICAgICAgIHRoaXMuZm9sZGVyU2VydmljZSA9IG5ldyBGb2xkZXJTZXJ2aWNlKHRoaXMuY3J5cHRvU2VydmljZSwgdGhpcy51c2VyU2VydmljZSwgdGhpcy5hcGlTZXJ2aWNlLFxuICAgICAgICAgICAgdGhpcy5zdG9yYWdlU2VydmljZSwgdGhpcy5pMThuU2VydmljZSwgdGhpcy5jaXBoZXJTZXJ2aWNlKTtcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uU2VydmljZSA9IG5ldyBDb2xsZWN0aW9uU2VydmljZSh0aGlzLmNyeXB0b1NlcnZpY2UsIHRoaXMudXNlclNlcnZpY2UsIHRoaXMuc3RvcmFnZVNlcnZpY2UsXG4gICAgICAgICAgICB0aGlzLmkxOG5TZXJ2aWNlKTtcbiAgICAgICAgdGhpcy5zZWFyY2hTZXJ2aWNlID0gbmV3IFNlYXJjaFNlcnZpY2UodGhpcy5jaXBoZXJTZXJ2aWNlKTtcbiAgICAgICAgdGhpcy5zZW5kU2VydmljZSA9IG5ldyBTZW5kU2VydmljZSh0aGlzLmNyeXB0b1NlcnZpY2UsIHRoaXMudXNlclNlcnZpY2UsIHRoaXMuYXBpU2VydmljZSwgdGhpcy5zdG9yYWdlU2VydmljZSxcbiAgICAgICAgICAgIHRoaXMuaTE4blNlcnZpY2UsIHRoaXMuY3J5cHRvRnVuY3Rpb25TZXJ2aWNlKTtcbiAgICAgICAgdGhpcy5zdGF0ZVNlcnZpY2UgPSBuZXcgU3RhdGVTZXJ2aWNlKCk7XG4gICAgICAgIHRoaXMucG9saWN5U2VydmljZSA9IG5ldyBQb2xpY3lTZXJ2aWNlKHRoaXMudXNlclNlcnZpY2UsIHRoaXMuc3RvcmFnZVNlcnZpY2UpO1xuICAgICAgICB0aGlzLnZhdWx0VGltZW91dFNlcnZpY2UgPSBuZXcgVmF1bHRUaW1lb3V0U2VydmljZSh0aGlzLmNpcGhlclNlcnZpY2UsIHRoaXMuZm9sZGVyU2VydmljZSxcbiAgICAgICAgICAgIHRoaXMuY29sbGVjdGlvblNlcnZpY2UsIHRoaXMuY3J5cHRvU2VydmljZSwgdGhpcy5wbGF0Zm9ybVV0aWxzU2VydmljZSwgdGhpcy5zdG9yYWdlU2VydmljZSxcbiAgICAgICAgICAgIHRoaXMubWVzc2FnaW5nU2VydmljZSwgdGhpcy5zZWFyY2hTZXJ2aWNlLCB0aGlzLnVzZXJTZXJ2aWNlLCB0aGlzLnRva2VuU2VydmljZSxcbiAgICAgICAgICAgIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5ub3RpZmljYXRpb25zU2VydmljZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubm90aWZpY2F0aW9uc1NlcnZpY2UudXBkYXRlQ29ubmVjdGlvbihmYWxzZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuc2V0SWNvbigpO1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucmVmcmVzaEJhZGdlQW5kTWVudSh0cnVlKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zeXN0ZW1TZXJ2aWNlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zeXN0ZW1TZXJ2aWNlLnN0YXJ0UHJvY2Vzc1JlbG9hZCgpO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnN5c3RlbVNlcnZpY2UuY2xlYXJQZW5kaW5nQ2xpcGJvYXJkKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgYXN5bmMgKCkgPT4gYXdhaXQgdGhpcy5sb2dvdXQoZmFsc2UpKTtcbiAgICAgICAgdGhpcy5zeW5jU2VydmljZSA9IG5ldyBTeW5jU2VydmljZSh0aGlzLnVzZXJTZXJ2aWNlLCB0aGlzLmFwaVNlcnZpY2UsIHRoaXMuc2V0dGluZ3NTZXJ2aWNlLFxuICAgICAgICAgICAgdGhpcy5mb2xkZXJTZXJ2aWNlLCB0aGlzLmNpcGhlclNlcnZpY2UsIHRoaXMuY3J5cHRvU2VydmljZSwgdGhpcy5jb2xsZWN0aW9uU2VydmljZSxcbiAgICAgICAgICAgIHRoaXMuc3RvcmFnZVNlcnZpY2UsIHRoaXMubWVzc2FnaW5nU2VydmljZSwgdGhpcy5wb2xpY3lTZXJ2aWNlLCB0aGlzLnNlbmRTZXJ2aWNlLFxuICAgICAgICAgICAgYXN5bmMgKGV4cGlyZWQ6IGJvb2xlYW4pID0+IGF3YWl0IHRoaXMubG9nb3V0KGV4cGlyZWQpKTtcbiAgICAgICAgdGhpcy5ldmVudFNlcnZpY2UgPSBuZXcgRXZlbnRTZXJ2aWNlKHRoaXMuc3RvcmFnZVNlcnZpY2UsIHRoaXMuYXBpU2VydmljZSwgdGhpcy51c2VyU2VydmljZSxcbiAgICAgICAgICAgIHRoaXMuY2lwaGVyU2VydmljZSk7XG4gICAgICAgIHRoaXMucGFzc3dvcmRHZW5lcmF0aW9uU2VydmljZSA9IG5ldyBQYXNzd29yZEdlbmVyYXRpb25TZXJ2aWNlKHRoaXMuY3J5cHRvU2VydmljZSwgdGhpcy5zdG9yYWdlU2VydmljZSxcbiAgICAgICAgICAgIHRoaXMucG9saWN5U2VydmljZSk7XG4gICAgICAgIHRoaXMudG90cFNlcnZpY2UgPSBuZXcgVG90cFNlcnZpY2UodGhpcy5zdG9yYWdlU2VydmljZSwgdGhpcy5jcnlwdG9GdW5jdGlvblNlcnZpY2UpO1xuICAgICAgICB0aGlzLmF1dG9maWxsU2VydmljZSA9IG5ldyBBdXRvZmlsbFNlcnZpY2UodGhpcy5jaXBoZXJTZXJ2aWNlLCB0aGlzLnVzZXJTZXJ2aWNlLCB0aGlzLnRvdHBTZXJ2aWNlLFxuICAgICAgICAgICAgdGhpcy5ldmVudFNlcnZpY2UpO1xuICAgICAgICB0aGlzLmNvbnRhaW5lclNlcnZpY2UgPSBuZXcgQ29udGFpbmVyU2VydmljZSh0aGlzLmNyeXB0b1NlcnZpY2UpO1xuICAgICAgICB0aGlzLmF1ZGl0U2VydmljZSA9IG5ldyBBdWRpdFNlcnZpY2UodGhpcy5jcnlwdG9GdW5jdGlvblNlcnZpY2UsIHRoaXMuYXBpU2VydmljZSk7XG4gICAgICAgIHRoaXMuZXhwb3J0U2VydmljZSA9IG5ldyBFeHBvcnRTZXJ2aWNlKHRoaXMuZm9sZGVyU2VydmljZSwgdGhpcy5jaXBoZXJTZXJ2aWNlLCB0aGlzLmFwaVNlcnZpY2UpO1xuICAgICAgICB0aGlzLm5vdGlmaWNhdGlvbnNTZXJ2aWNlID0gbmV3IE5vdGlmaWNhdGlvbnNTZXJ2aWNlKHRoaXMudXNlclNlcnZpY2UsIHRoaXMuc3luY1NlcnZpY2UsIHRoaXMuYXBwSWRTZXJ2aWNlLFxuICAgICAgICAgICAgdGhpcy5hcGlTZXJ2aWNlLCB0aGlzLnZhdWx0VGltZW91dFNlcnZpY2UsICgpID0+IHRoaXMubG9nb3V0KHRydWUpKTtcbiAgICAgICAgdGhpcy5lbnZpcm9ubWVudFNlcnZpY2UgPSBuZXcgRW52aXJvbm1lbnRTZXJ2aWNlKHRoaXMuYXBpU2VydmljZSwgdGhpcy5zdG9yYWdlU2VydmljZSxcbiAgICAgICAgICAgIHRoaXMubm90aWZpY2F0aW9uc1NlcnZpY2UpO1xuICAgICAgICB0aGlzLmFuYWx5dGljcyA9IG5ldyBBbmFseXRpY3Mod2luZG93LCAoKSA9PiBCcm93c2VyQXBpLmdhRmlsdGVyKCksIHRoaXMucGxhdGZvcm1VdGlsc1NlcnZpY2UsXG4gICAgICAgICAgICB0aGlzLnN0b3JhZ2VTZXJ2aWNlLCB0aGlzLmFwcElkU2VydmljZSk7XG4gICAgICAgIHRoaXMucG9wdXBVdGlsc1NlcnZpY2UgPSBuZXcgUG9wdXBVdGlsc1NlcnZpY2UodGhpcy5wbGF0Zm9ybVV0aWxzU2VydmljZSk7XG4gICAgICAgIHRoaXMuc3lzdGVtU2VydmljZSA9IG5ldyBTeXN0ZW1TZXJ2aWNlKHRoaXMuc3RvcmFnZVNlcnZpY2UsIHRoaXMudmF1bHRUaW1lb3V0U2VydmljZSxcbiAgICAgICAgICAgIHRoaXMubWVzc2FnaW5nU2VydmljZSwgdGhpcy5wbGF0Zm9ybVV0aWxzU2VydmljZSwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZvcmNlV2luZG93UmVsb2FkID0gdGhpcy5wbGF0Zm9ybVV0aWxzU2VydmljZS5pc1NhZmFyaSgpIHx8XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGxhdGZvcm1VdGlsc1NlcnZpY2UuaXNGaXJlZm94KCkgfHwgdGhpcy5wbGF0Zm9ybVV0aWxzU2VydmljZS5pc09wZXJhKCk7XG4gICAgICAgICAgICAgICAgQnJvd3NlckFwaS5yZWxvYWRFeHRlbnNpb24oZm9yY2VXaW5kb3dSZWxvYWQgPyB3aW5kb3cgOiBudWxsKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAvLyBPdGhlciBmaWVsZHNcbiAgICAgICAgdGhpcy5pc1NhZmFyaSA9IHRoaXMucGxhdGZvcm1VdGlsc1NlcnZpY2UuaXNTYWZhcmkoKTtcbiAgICAgICAgdGhpcy5zaWRlYmFyQWN0aW9uID0gdGhpcy5pc1NhZmFyaSA/IG51bGwgOiAodHlwZW9mIG9wciAhPT0gJ3VuZGVmaW5lZCcpICYmIG9wci5zaWRlYmFyQWN0aW9uID9cbiAgICAgICAgICAgIG9wci5zaWRlYmFyQWN0aW9uIDogKHdpbmRvdyBhcyBhbnkpLmNocm9tZS5zaWRlYmFyQWN0aW9uO1xuXG4gICAgICAgIC8vIEJhY2tncm91bmRcbiAgICAgICAgdGhpcy5ydW50aW1lQmFja2dyb3VuZCA9IG5ldyBSdW50aW1lQmFja2dyb3VuZCh0aGlzLCB0aGlzLmF1dG9maWxsU2VydmljZSwgdGhpcy5jaXBoZXJTZXJ2aWNlLFxuICAgICAgICAgICAgdGhpcy5wbGF0Zm9ybVV0aWxzU2VydmljZSBhcyBCcm93c2VyUGxhdGZvcm1VdGlsc1NlcnZpY2UsIHRoaXMuc3RvcmFnZVNlcnZpY2UsIHRoaXMuaTE4blNlcnZpY2UsXG4gICAgICAgICAgICB0aGlzLmFuYWx5dGljcywgdGhpcy5ub3RpZmljYXRpb25zU2VydmljZSwgdGhpcy5zeXN0ZW1TZXJ2aWNlLCB0aGlzLnZhdWx0VGltZW91dFNlcnZpY2UsXG4gICAgICAgICAgICB0aGlzLmVudmlyb25tZW50U2VydmljZSk7XG4gICAgICAgIHRoaXMuY29tbWFuZHNCYWNrZ3JvdW5kID0gbmV3IENvbW1hbmRzQmFja2dyb3VuZCh0aGlzLCB0aGlzLnBhc3N3b3JkR2VuZXJhdGlvblNlcnZpY2UsXG4gICAgICAgICAgICB0aGlzLnBsYXRmb3JtVXRpbHNTZXJ2aWNlLCB0aGlzLmFuYWx5dGljcywgdGhpcy52YXVsdFRpbWVvdXRTZXJ2aWNlKTtcblxuICAgICAgICBpZiAoIXRoaXMuaXNTYWZhcmkpIHtcbiAgICAgICAgICAgIHRoaXMudGFic0JhY2tncm91bmQgPSBuZXcgVGFic0JhY2tncm91bmQodGhpcyk7XG4gICAgICAgICAgICB0aGlzLmNvbnRleHRNZW51c0JhY2tncm91bmQgPSBuZXcgQ29udGV4dE1lbnVzQmFja2dyb3VuZCh0aGlzLCB0aGlzLmNpcGhlclNlcnZpY2UsXG4gICAgICAgICAgICAgICAgdGhpcy5wYXNzd29yZEdlbmVyYXRpb25TZXJ2aWNlLCB0aGlzLmFuYWx5dGljcywgdGhpcy5wbGF0Zm9ybVV0aWxzU2VydmljZSwgdGhpcy52YXVsdFRpbWVvdXRTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHRoaXMuZXZlbnRTZXJ2aWNlLCB0aGlzLnRvdHBTZXJ2aWNlKTtcbiAgICAgICAgICAgIHRoaXMuaWRsZUJhY2tncm91bmQgPSBuZXcgSWRsZUJhY2tncm91bmQodGhpcy52YXVsdFRpbWVvdXRTZXJ2aWNlLCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHRoaXMubm90aWZpY2F0aW9uc1NlcnZpY2UpO1xuICAgICAgICAgICAgdGhpcy53ZWJSZXF1ZXN0QmFja2dyb3VuZCA9IG5ldyBXZWJSZXF1ZXN0QmFja2dyb3VuZCh0aGlzLnBsYXRmb3JtVXRpbHNTZXJ2aWNlLCB0aGlzLmNpcGhlclNlcnZpY2UsXG4gICAgICAgICAgICAgICAgdGhpcy52YXVsdFRpbWVvdXRTZXJ2aWNlKTtcbiAgICAgICAgICAgIHRoaXMud2luZG93c0JhY2tncm91bmQgPSBuZXcgV2luZG93c0JhY2tncm91bmQodGhpcyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhc3luYyBib290c3RyYXAoKSB7XG4gICAgICAgIFNhZmFyaUFwcC5pbml0KCk7XG4gICAgICAgIHRoaXMuYW5hbHl0aWNzLmdhKCdzZW5kJywgJ3BhZ2V2aWV3JywgJy9iYWNrZ3JvdW5kLmh0bWwnKTtcbiAgICAgICAgdGhpcy5jb250YWluZXJTZXJ2aWNlLmF0dGFjaFRvV2luZG93KHdpbmRvdyk7XG5cbiAgICAgICAgYXdhaXQgKHRoaXMudmF1bHRUaW1lb3V0U2VydmljZSBhcyBWYXVsdFRpbWVvdXRTZXJ2aWNlKS5pbml0KHRydWUpO1xuICAgICAgICBhd2FpdCAodGhpcy5pMThuU2VydmljZSBhcyBJMThuU2VydmljZSkuaW5pdCgpO1xuICAgICAgICBhd2FpdCAodGhpcy5ldmVudFNlcnZpY2UgYXMgRXZlbnRTZXJ2aWNlKS5pbml0KHRydWUpO1xuICAgICAgICBhd2FpdCB0aGlzLnJ1bnRpbWVCYWNrZ3JvdW5kLmluaXQoKTtcbiAgICAgICAgYXdhaXQgdGhpcy5jb21tYW5kc0JhY2tncm91bmQuaW5pdCgpO1xuXG4gICAgICAgIGlmICghdGhpcy5pc1NhZmFyaSkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy50YWJzQmFja2dyb3VuZC5pbml0KCk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmNvbnRleHRNZW51c0JhY2tncm91bmQuaW5pdCgpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5pZGxlQmFja2dyb3VuZC5pbml0KCk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLndlYlJlcXVlc3RCYWNrZ3JvdW5kLmluaXQoKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMud2luZG93c0JhY2tncm91bmQuaW5pdCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmVudmlyb25tZW50U2VydmljZS5zZXRVcmxzRnJvbVN0b3JhZ2UoKTtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnNldEljb24oKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNsZWFudXBOb3RpZmljYXRpb25RdWV1ZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuZnVsbFN5bmModHJ1ZSk7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLm5vdGlmaWNhdGlvbnNTZXJ2aWNlLmluaXQodGhpcy5lbnZpcm9ubWVudFNlcnZpY2UpLCAyNTAwKTtcbiAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICB9LCA1MDApO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBhc3luYyBzZXRJY29uKCkge1xuICAgICAgICBpZiAodGhpcy5pc1NhZmFyaSB8fCAoIWNocm9tZS5icm93c2VyQWN0aW9uICYmICF0aGlzLnNpZGViYXJBY3Rpb24pKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBpc0F1dGhlbnRpY2F0ZWQgPSBhd2FpdCB0aGlzLnVzZXJTZXJ2aWNlLmlzQXV0aGVudGljYXRlZCgpO1xuICAgICAgICBjb25zdCBsb2NrZWQgPSBhd2FpdCB0aGlzLnZhdWx0VGltZW91dFNlcnZpY2UuaXNMb2NrZWQoKTtcblxuICAgICAgICBsZXQgc3VmZml4ID0gJyc7XG4gICAgICAgIGlmICghaXNBdXRoZW50aWNhdGVkKSB7XG4gICAgICAgICAgICBzdWZmaXggPSAnX2dyYXknO1xuICAgICAgICB9IGVsc2UgaWYgKGxvY2tlZCkge1xuICAgICAgICAgICAgc3VmZml4ID0gJ19sb2NrZWQnO1xuICAgICAgICB9XG5cbiAgICAgICAgYXdhaXQgdGhpcy5hY3Rpb25TZXRJY29uKGNocm9tZS5icm93c2VyQWN0aW9uLCBzdWZmaXgpO1xuICAgICAgICBhd2FpdCB0aGlzLmFjdGlvblNldEljb24odGhpcy5zaWRlYmFyQWN0aW9uLCBzdWZmaXgpO1xuICAgIH1cblxuICAgIGFzeW5jIHJlZnJlc2hCYWRnZUFuZE1lbnUoZm9yTG9ja2VkOiBib29sZWFuID0gZmFsc2UpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNTYWZhcmkgfHwgIWNocm9tZS53aW5kb3dzIHx8ICFjaHJvbWUuY29udGV4dE1lbnVzKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBtZW51RGlzYWJsZWQgPSBhd2FpdCB0aGlzLnN0b3JhZ2VTZXJ2aWNlLmdldDxib29sZWFuPihDb25zdGFudHNTZXJ2aWNlLmRpc2FibGVDb250ZXh0TWVudUl0ZW1LZXkpO1xuICAgICAgICBpZiAoIW1lbnVEaXNhYmxlZCkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5idWlsZENvbnRleHRNZW51KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmNvbnRleHRNZW51c1JlbW92ZUFsbCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGZvckxvY2tlZCkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5sb2FkTWVudUFuZFVwZGF0ZUJhZGdlRm9yTm9BY2Nlc3NTdGF0ZSghbWVudURpc2FibGVkKTtcbiAgICAgICAgICAgIHRoaXMub25VcGRhdGVkUmFuID0gdGhpcy5vblJlcGxhY2VkUmFuID0gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB0YWIgPSBhd2FpdCBCcm93c2VyQXBpLmdldFRhYkZyb21DdXJyZW50V2luZG93KCk7XG4gICAgICAgIGlmICh0YWIpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuY29udGV4dE1lbnVSZWFkeSh0YWIsICFtZW51RGlzYWJsZWQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgbG9nb3V0KGV4cGlyZWQ6IGJvb2xlYW4pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5ldmVudFNlcnZpY2UudXBsb2FkRXZlbnRzKCk7XG4gICAgICAgIGNvbnN0IHVzZXJJZCA9IGF3YWl0IHRoaXMudXNlclNlcnZpY2UuZ2V0VXNlcklkKCk7XG5cbiAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgICAgICAgdGhpcy5ldmVudFNlcnZpY2UuY2xlYXJFdmVudHMoKSxcbiAgICAgICAgICAgIHRoaXMuc3luY1NlcnZpY2Uuc2V0TGFzdFN5bmMobmV3IERhdGUoMCkpLFxuICAgICAgICAgICAgdGhpcy50b2tlblNlcnZpY2UuY2xlYXJUb2tlbigpLFxuICAgICAgICAgICAgdGhpcy5jcnlwdG9TZXJ2aWNlLmNsZWFyS2V5cygpLFxuICAgICAgICAgICAgdGhpcy51c2VyU2VydmljZS5jbGVhcigpLFxuICAgICAgICAgICAgdGhpcy5zZXR0aW5nc1NlcnZpY2UuY2xlYXIodXNlcklkKSxcbiAgICAgICAgICAgIHRoaXMuY2lwaGVyU2VydmljZS5jbGVhcih1c2VySWQpLFxuICAgICAgICAgICAgdGhpcy5mb2xkZXJTZXJ2aWNlLmNsZWFyKHVzZXJJZCksXG4gICAgICAgICAgICB0aGlzLmNvbGxlY3Rpb25TZXJ2aWNlLmNsZWFyKHVzZXJJZCksXG4gICAgICAgICAgICB0aGlzLnBvbGljeVNlcnZpY2UuY2xlYXIodXNlcklkKSxcbiAgICAgICAgICAgIHRoaXMucGFzc3dvcmRHZW5lcmF0aW9uU2VydmljZS5jbGVhcigpLFxuICAgICAgICAgICAgdGhpcy52YXVsdFRpbWVvdXRTZXJ2aWNlLmNsZWFyKCksXG4gICAgICAgIF0pO1xuXG4gICAgICAgIHRoaXMuc2VhcmNoU2VydmljZS5jbGVhckluZGV4KCk7XG4gICAgICAgIHRoaXMubWVzc2FnaW5nU2VydmljZS5zZW5kKCdkb25lTG9nZ2luZ091dCcsIHsgZXhwaXJlZDogZXhwaXJlZCB9KTtcblxuICAgICAgICBhd2FpdCB0aGlzLnNldEljb24oKTtcbiAgICAgICAgYXdhaXQgdGhpcy5yZWZyZXNoQmFkZ2VBbmRNZW51KCk7XG4gICAgICAgIGF3YWl0IHRoaXMucmVzZWVkU3RvcmFnZSgpO1xuICAgICAgICB0aGlzLm5vdGlmaWNhdGlvbnNTZXJ2aWNlLnVwZGF0ZUNvbm5lY3Rpb24oZmFsc2UpO1xuICAgICAgICB0aGlzLnN5c3RlbVNlcnZpY2Uuc3RhcnRQcm9jZXNzUmVsb2FkKCk7XG4gICAgICAgIGF3YWl0IHRoaXMuc3lzdGVtU2VydmljZS5jbGVhclBlbmRpbmdDbGlwYm9hcmQoKTtcbiAgICB9XG5cbiAgICBhc3luYyBjb2xsZWN0UGFnZURldGFpbHNGb3JDb250ZW50U2NyaXB0KHRhYjogYW55LCBzZW5kZXI6IHN0cmluZywgZnJhbWVJZDogbnVtYmVyID0gbnVsbCkge1xuICAgICAgICBpZiAodGFiID09IG51bGwgfHwgIXRhYi5pZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGF3YWl0IHRoaXMudmF1bHRUaW1lb3V0U2VydmljZS5pc0xvY2tlZCgpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBvcHRpb25zOiBhbnkgPSB7fTtcbiAgICAgICAgaWYgKGZyYW1lSWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgb3B0aW9ucy5mcmFtZUlkID0gZnJhbWVJZDtcbiAgICAgICAgfVxuXG4gICAgICAgIEJyb3dzZXJBcGkudGFiU2VuZE1lc3NhZ2UodGFiLCB7XG4gICAgICAgICAgICBjb21tYW5kOiAnY29sbGVjdFBhZ2VEZXRhaWxzJyxcbiAgICAgICAgICAgIHRhYjogdGFiLFxuICAgICAgICAgICAgc2VuZGVyOiBzZW5kZXIsXG4gICAgICAgIH0sIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIGFzeW5jIGNoZWNrTm90aWZpY2F0aW9uUXVldWUodGFiOiBhbnkgPSBudWxsKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgaWYgKHRoaXMubm90aWZpY2F0aW9uUXVldWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGFiICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuZG9Ob3RpZmljYXRpb25RdWV1ZUNoZWNrKHRhYik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjdXJyZW50VGFiID0gYXdhaXQgQnJvd3NlckFwaS5nZXRUYWJGcm9tQ3VycmVudFdpbmRvdygpO1xuICAgICAgICBpZiAoY3VycmVudFRhYiAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmRvTm90aWZpY2F0aW9uUXVldWVDaGVjayhjdXJyZW50VGFiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIG9wZW5Qb3B1cCgpIHtcbiAgICAgICAgLy8gQ2hyb21lIEFQSXMgY2Fubm90IG9wZW4gcG9wdXBcblxuICAgICAgICAvLyBUT0RPOiBEbyB3ZSBuZWVkIHRvIG9wZW4gdGhpcyBwb3B1cD9cbiAgICAgICAgaWYgKCF0aGlzLmlzU2FmYXJpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgU2FmYXJpQXBwLnNlbmRNZXNzYWdlVG9BcHAoJ3Nob3dQb3BvdmVyJywgbnVsbCwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgYXN5bmMgcmVzZWVkU3RvcmFnZSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLnBsYXRmb3JtVXRpbHNTZXJ2aWNlLmlzQ2hyb21lKCkgJiYgIXRoaXMucGxhdGZvcm1VdGlsc1NlcnZpY2UuaXNWaXZhbGRpKCkgJiZcbiAgICAgICAgICAgICF0aGlzLnBsYXRmb3JtVXRpbHNTZXJ2aWNlLmlzT3BlcmEoKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgY3VycmVudFZhdWx0VGltZW91dCA9IGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2UuZ2V0PG51bWJlcj4oQ29uc3RhbnRzU2VydmljZS52YXVsdFRpbWVvdXRLZXkpO1xuICAgICAgICBpZiAoY3VycmVudFZhdWx0VGltZW91dCA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBnZXRTdG9yYWdlID0gKCk6IFByb21pc2U8YW55PiA9PiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICAgICAgY2hyb21lLnN0b3JhZ2UubG9jYWwuZ2V0KG51bGwsIChvOiBhbnkpID0+IHJlc29sdmUobykpO1xuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBjbGVhclN0b3JhZ2UgPSAoKTogUHJvbWlzZTx2b2lkPiA9PiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICAgICAgY2hyb21lLnN0b3JhZ2UubG9jYWwuY2xlYXIoKCkgPT4gcmVzb2x2ZSgpKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3Qgc3RvcmFnZSA9IGF3YWl0IGdldFN0b3JhZ2UoKTtcbiAgICAgICAgYXdhaXQgY2xlYXJTdG9yYWdlKCk7XG5cbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gc3RvcmFnZSkge1xuICAgICAgICAgICAgaWYgKCFzdG9yYWdlLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGF3YWl0IHRoaXMuc3RvcmFnZVNlcnZpY2Uuc2F2ZShrZXksIHN0b3JhZ2Vba2V5XSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIGJ1aWxkQ29udGV4dE1lbnUoKSB7XG4gICAgICAgIGlmICh0aGlzLmlzU2FmYXJpIHx8ICFjaHJvbWUuY29udGV4dE1lbnVzIHx8IHRoaXMuYnVpbGRpbmdDb250ZXh0TWVudSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5idWlsZGluZ0NvbnRleHRNZW51ID0gdHJ1ZTtcbiAgICAgICAgYXdhaXQgdGhpcy5jb250ZXh0TWVudXNSZW1vdmVBbGwoKTtcblxuICAgICAgICBhd2FpdCB0aGlzLmNvbnRleHRNZW51c0NyZWF0ZSh7XG4gICAgICAgICAgICB0eXBlOiAnbm9ybWFsJyxcbiAgICAgICAgICAgIGlkOiAncm9vdCcsXG4gICAgICAgICAgICBjb250ZXh0czogWydhbGwnXSxcbiAgICAgICAgICAgIHRpdGxlOiAnQml0d2FyZGVuJyxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgYXdhaXQgdGhpcy5jb250ZXh0TWVudXNDcmVhdGUoe1xuICAgICAgICAgICAgdHlwZTogJ25vcm1hbCcsXG4gICAgICAgICAgICBpZDogJ2F1dG9maWxsJyxcbiAgICAgICAgICAgIHBhcmVudElkOiAncm9vdCcsXG4gICAgICAgICAgICBjb250ZXh0czogWydhbGwnXSxcbiAgICAgICAgICAgIHRpdGxlOiB0aGlzLmkxOG5TZXJ2aWNlLnQoJ2F1dG9GaWxsJyksXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGF3YWl0IHRoaXMuY29udGV4dE1lbnVzQ3JlYXRlKHtcbiAgICAgICAgICAgIHR5cGU6ICdub3JtYWwnLFxuICAgICAgICAgICAgaWQ6ICdjb3B5LXVzZXJuYW1lJyxcbiAgICAgICAgICAgIHBhcmVudElkOiAncm9vdCcsXG4gICAgICAgICAgICBjb250ZXh0czogWydhbGwnXSxcbiAgICAgICAgICAgIHRpdGxlOiB0aGlzLmkxOG5TZXJ2aWNlLnQoJ2NvcHlVc2VybmFtZScpLFxuICAgICAgICB9KTtcblxuICAgICAgICBhd2FpdCB0aGlzLmNvbnRleHRNZW51c0NyZWF0ZSh7XG4gICAgICAgICAgICB0eXBlOiAnbm9ybWFsJyxcbiAgICAgICAgICAgIGlkOiAnY29weS1wYXNzd29yZCcsXG4gICAgICAgICAgICBwYXJlbnRJZDogJ3Jvb3QnLFxuICAgICAgICAgICAgY29udGV4dHM6IFsnYWxsJ10sXG4gICAgICAgICAgICB0aXRsZTogdGhpcy5pMThuU2VydmljZS50KCdjb3B5UGFzc3dvcmQnKSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKGF3YWl0IHRoaXMudXNlclNlcnZpY2UuY2FuQWNjZXNzUHJlbWl1bSgpKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmNvbnRleHRNZW51c0NyZWF0ZSh7XG4gICAgICAgICAgICAgICAgdHlwZTogJ25vcm1hbCcsXG4gICAgICAgICAgICAgICAgaWQ6ICdjb3B5LXRvdHAnLFxuICAgICAgICAgICAgICAgIHBhcmVudElkOiAncm9vdCcsXG4gICAgICAgICAgICAgICAgY29udGV4dHM6IFsnYWxsJ10sXG4gICAgICAgICAgICAgICAgdGl0bGU6IHRoaXMuaTE4blNlcnZpY2UudCgnY29weVZlcmlmaWNhdGlvbkNvZGUnKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgYXdhaXQgdGhpcy5jb250ZXh0TWVudXNDcmVhdGUoe1xuICAgICAgICAgICAgdHlwZTogJ3NlcGFyYXRvcicsXG4gICAgICAgICAgICBwYXJlbnRJZDogJ3Jvb3QnLFxuICAgICAgICB9KTtcblxuICAgICAgICBhd2FpdCB0aGlzLmNvbnRleHRNZW51c0NyZWF0ZSh7XG4gICAgICAgICAgICB0eXBlOiAnbm9ybWFsJyxcbiAgICAgICAgICAgIGlkOiAnZ2VuZXJhdGUtcGFzc3dvcmQnLFxuICAgICAgICAgICAgcGFyZW50SWQ6ICdyb290JyxcbiAgICAgICAgICAgIGNvbnRleHRzOiBbJ2FsbCddLFxuICAgICAgICAgICAgdGl0bGU6IHRoaXMuaTE4blNlcnZpY2UudCgnZ2VuZXJhdGVQYXNzd29yZENvcGllZCcpLFxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmJ1aWxkaW5nQ29udGV4dE1lbnUgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIGNvbnRleHRNZW51UmVhZHkodGFiOiBhbnksIGNvbnRleHRNZW51RW5hYmxlZDogYm9vbGVhbikge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNZW51QW5kVXBkYXRlQmFkZ2UodGFiLnVybCwgdGFiLmlkLCBjb250ZXh0TWVudUVuYWJsZWQpO1xuICAgICAgICB0aGlzLm9uVXBkYXRlZFJhbiA9IHRoaXMub25SZXBsYWNlZFJhbiA9IGZhbHNlO1xuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgbG9hZE1lbnVBbmRVcGRhdGVCYWRnZSh1cmw6IHN0cmluZywgdGFiSWQ6IG51bWJlciwgY29udGV4dE1lbnVFbmFibGVkOiBib29sZWFuKSB7XG4gICAgICAgIGlmICghdXJsIHx8ICghY2hyb21lLmJyb3dzZXJBY3Rpb24gJiYgIXRoaXMuc2lkZWJhckFjdGlvbikpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuYWN0aW9uU2V0QmFkZ2VCYWNrZ3JvdW5kQ29sb3IoY2hyb21lLmJyb3dzZXJBY3Rpb24pO1xuICAgICAgICB0aGlzLmFjdGlvblNldEJhZGdlQmFja2dyb3VuZENvbG9yKHRoaXMuc2lkZWJhckFjdGlvbik7XG5cbiAgICAgICAgdGhpcy5tZW51T3B0aW9uc0xvYWRlZCA9IFtdO1xuICAgICAgICBjb25zdCBsb2NrZWQgPSBhd2FpdCB0aGlzLnZhdWx0VGltZW91dFNlcnZpY2UuaXNMb2NrZWQoKTtcbiAgICAgICAgaWYgKCFsb2NrZWQpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2lwaGVycyA9IGF3YWl0IHRoaXMuY2lwaGVyU2VydmljZS5nZXRBbGxEZWNyeXB0ZWRGb3JVcmwodXJsKTtcbiAgICAgICAgICAgICAgICBjaXBoZXJzLnNvcnQoKGEsIGIpID0+IHRoaXMuY2lwaGVyU2VydmljZS5zb3J0Q2lwaGVyc0J5TGFzdFVzZWRUaGVuTmFtZShhLCBiKSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoY29udGV4dE1lbnVFbmFibGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNpcGhlcnMuZm9yRWFjaCgoY2lwaGVyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvYWRMb2dpbkNvbnRleHRNZW51T3B0aW9ucyhjaXBoZXIpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBsZXQgdGhlVGV4dCA9ICcnO1xuICAgICAgICAgICAgICAgIGlmIChjaXBoZXJzLmxlbmd0aCA+IDAgJiYgY2lwaGVycy5sZW5ndGggPD0gOSkge1xuICAgICAgICAgICAgICAgICAgICB0aGVUZXh0ID0gY2lwaGVycy5sZW5ndGgudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNpcGhlcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICB0aGVUZXh0ID0gJzkrJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29udGV4dE1lbnVFbmFibGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmxvYWROb0xvZ2luc0NvbnRleHRNZW51T3B0aW9ucyh0aGlzLmkxOG5TZXJ2aWNlLnQoJ25vTWF0Y2hpbmdMb2dpbnMnKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLmJyb3dzZXJBY3Rpb25TZXRCYWRnZVRleHQodGhlVGV4dCwgdGFiSWQpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2lkZWJhckFjdGlvblNldEJhZGdlVGV4dCh0aGVUZXh0LCB0YWJJZCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfSBjYXRjaCB7IH1cbiAgICAgICAgfVxuXG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1lbnVBbmRVcGRhdGVCYWRnZUZvck5vQWNjZXNzU3RhdGUoY29udGV4dE1lbnVFbmFibGVkKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIGxvYWRNZW51QW5kVXBkYXRlQmFkZ2VGb3JOb0FjY2Vzc1N0YXRlKGNvbnRleHRNZW51RW5hYmxlZDogYm9vbGVhbikge1xuICAgICAgICBpZiAoY29udGV4dE1lbnVFbmFibGVkKSB7XG4gICAgICAgICAgICBjb25zdCBhdXRoZWQgPSBhd2FpdCB0aGlzLnVzZXJTZXJ2aWNlLmlzQXV0aGVudGljYXRlZCgpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5sb2FkTm9Mb2dpbnNDb250ZXh0TWVudU9wdGlvbnModGhpcy5pMThuU2VydmljZS50KGF1dGhlZCA/ICd2YXVsdExvY2tlZCcgOiAndmF1bHRMb2dnZWRPdXQnKSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB0YWJzID0gYXdhaXQgQnJvd3NlckFwaS5nZXRBY3RpdmVUYWJzKCk7XG4gICAgICAgIGlmICh0YWJzICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRhYnMuZm9yRWFjaCgodGFiKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHRhYi5pZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYnJvd3NlckFjdGlvblNldEJhZGdlVGV4dCgnJywgdGFiLmlkKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaWRlYmFyQWN0aW9uU2V0QmFkZ2VUZXh0KCcnLCB0YWIuaWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBsb2FkTG9naW5Db250ZXh0TWVudU9wdGlvbnMoY2lwaGVyOiBhbnkpIHtcbiAgICAgICAgaWYgKGNpcGhlciA9PSBudWxsIHx8IGNpcGhlci50eXBlICE9PSBDaXBoZXJUeXBlLkxvZ2luKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgdGl0bGUgPSBjaXBoZXIubmFtZTtcbiAgICAgICAgaWYgKGNpcGhlci5sb2dpbi51c2VybmFtZSAmJiBjaXBoZXIubG9naW4udXNlcm5hbWUgIT09ICcnKSB7XG4gICAgICAgICAgICB0aXRsZSArPSAoJyAoJyArIGNpcGhlci5sb2dpbi51c2VybmFtZSArICcpJyk7XG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkQ29udGV4dE1lbnVPcHRpb25zKHRpdGxlLCBjaXBoZXIuaWQsIGNpcGhlcik7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBsb2FkTm9Mb2dpbnNDb250ZXh0TWVudU9wdGlvbnMobm9Mb2dpbnNNZXNzYWdlOiBzdHJpbmcpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkQ29udGV4dE1lbnVPcHRpb25zKG5vTG9naW5zTWVzc2FnZSwgJ25vb3AnLCBudWxsKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIGxvYWRDb250ZXh0TWVudU9wdGlvbnModGl0bGU6IHN0cmluZywgaWRTdWZmaXg6IHN0cmluZywgY2lwaGVyOiBhbnkpIHtcbiAgICAgICAgaWYgKCFjaHJvbWUuY29udGV4dE1lbnVzIHx8IHRoaXMubWVudU9wdGlvbnNMb2FkZWQuaW5kZXhPZihpZFN1ZmZpeCkgPiAtMSB8fFxuICAgICAgICAgICAgKGNpcGhlciAhPSBudWxsICYmIGNpcGhlci50eXBlICE9PSBDaXBoZXJUeXBlLkxvZ2luKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5tZW51T3B0aW9uc0xvYWRlZC5wdXNoKGlkU3VmZml4KTtcblxuICAgICAgICBpZiAoY2lwaGVyID09IG51bGwgfHwgKGNpcGhlci5sb2dpbi5wYXNzd29yZCAmJiBjaXBoZXIubG9naW4ucGFzc3dvcmQgIT09ICcnKSkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5jb250ZXh0TWVudXNDcmVhdGUoe1xuICAgICAgICAgICAgICAgIHR5cGU6ICdub3JtYWwnLFxuICAgICAgICAgICAgICAgIGlkOiAnYXV0b2ZpbGxfJyArIGlkU3VmZml4LFxuICAgICAgICAgICAgICAgIHBhcmVudElkOiAnYXV0b2ZpbGwnLFxuICAgICAgICAgICAgICAgIGNvbnRleHRzOiBbJ2FsbCddLFxuICAgICAgICAgICAgICAgIHRpdGxlOiB0aGlzLnNhbml0aXplQ29udGV4dE1lbnVUaXRsZSh0aXRsZSksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjaXBoZXIgPT0gbnVsbCB8fCAoY2lwaGVyLmxvZ2luLnVzZXJuYW1lICYmIGNpcGhlci5sb2dpbi51c2VybmFtZSAhPT0gJycpKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmNvbnRleHRNZW51c0NyZWF0ZSh7XG4gICAgICAgICAgICAgICAgdHlwZTogJ25vcm1hbCcsXG4gICAgICAgICAgICAgICAgaWQ6ICdjb3B5LXVzZXJuYW1lXycgKyBpZFN1ZmZpeCxcbiAgICAgICAgICAgICAgICBwYXJlbnRJZDogJ2NvcHktdXNlcm5hbWUnLFxuICAgICAgICAgICAgICAgIGNvbnRleHRzOiBbJ2FsbCddLFxuICAgICAgICAgICAgICAgIHRpdGxlOiB0aGlzLnNhbml0aXplQ29udGV4dE1lbnVUaXRsZSh0aXRsZSksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjaXBoZXIgPT0gbnVsbCB8fCAoY2lwaGVyLmxvZ2luLnBhc3N3b3JkICYmIGNpcGhlci5sb2dpbi5wYXNzd29yZCAhPT0gJycgJiYgY2lwaGVyLnZpZXdQYXNzd29yZCkpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuY29udGV4dE1lbnVzQ3JlYXRlKHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnbm9ybWFsJyxcbiAgICAgICAgICAgICAgICBpZDogJ2NvcHktcGFzc3dvcmRfJyArIGlkU3VmZml4LFxuICAgICAgICAgICAgICAgIHBhcmVudElkOiAnY29weS1wYXNzd29yZCcsXG4gICAgICAgICAgICAgICAgY29udGV4dHM6IFsnYWxsJ10sXG4gICAgICAgICAgICAgICAgdGl0bGU6IHRoaXMuc2FuaXRpemVDb250ZXh0TWVudVRpdGxlKHRpdGxlKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgY2FuQWNjZXNzUHJlbWl1bSA9IGF3YWl0IHRoaXMudXNlclNlcnZpY2UuY2FuQWNjZXNzUHJlbWl1bSgpO1xuICAgICAgICBpZiAoY2FuQWNjZXNzUHJlbWl1bSAmJiAoY2lwaGVyID09IG51bGwgfHwgKGNpcGhlci5sb2dpbi50b3RwICYmIGNpcGhlci5sb2dpbi50b3RwICE9PSAnJykpKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmNvbnRleHRNZW51c0NyZWF0ZSh7XG4gICAgICAgICAgICAgICAgdHlwZTogJ25vcm1hbCcsXG4gICAgICAgICAgICAgICAgaWQ6ICdjb3B5LXRvdHBfJyArIGlkU3VmZml4LFxuICAgICAgICAgICAgICAgIHBhcmVudElkOiAnY29weS10b3RwJyxcbiAgICAgICAgICAgICAgICBjb250ZXh0czogWydhbGwnXSxcbiAgICAgICAgICAgICAgICB0aXRsZTogdGhpcy5zYW5pdGl6ZUNvbnRleHRNZW51VGl0bGUodGl0bGUpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHNhbml0aXplQ29udGV4dE1lbnVUaXRsZSh0aXRsZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRpdGxlLnJlcGxhY2UoLyYvZywgJyYmJyk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjbGVhbnVwTm90aWZpY2F0aW9uUXVldWUoKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSB0aGlzLm5vdGlmaWNhdGlvblF1ZXVlLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5ub3RpZmljYXRpb25RdWV1ZVtpXS5leHBpcmVzIDwgbmV3IERhdGUoKSkge1xuICAgICAgICAgICAgICAgIHRoaXMubm90aWZpY2F0aW9uUXVldWUuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5jbGVhbnVwTm90aWZpY2F0aW9uUXVldWUoKSwgMiAqIDYwICogMTAwMCk7IC8vIGNoZWNrIGV2ZXJ5IDIgbWludXRlc1xuICAgIH1cblxuICAgIHByaXZhdGUgZG9Ob3RpZmljYXRpb25RdWV1ZUNoZWNrKHRhYjogYW55KSB7XG4gICAgICAgIGlmICh0YWIgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdGFiRG9tYWluID0gVXRpbHMuZ2V0RG9tYWluKHRhYi51cmwpO1xuICAgICAgICBpZiAodGFiRG9tYWluID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5ub3RpZmljYXRpb25RdWV1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHRoaXMubm90aWZpY2F0aW9uUXVldWVbaV0udGFiSWQgIT09IHRhYi5pZCB8fCB0aGlzLm5vdGlmaWNhdGlvblF1ZXVlW2ldLmRvbWFpbiAhPT0gdGFiRG9tYWluKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5ub3RpZmljYXRpb25RdWV1ZVtpXS50eXBlID09PSAnYWRkTG9naW4nKSB7XG4gICAgICAgICAgICAgICAgQnJvd3NlckFwaS50YWJTZW5kTWVzc2FnZURhdGEodGFiLCAnb3Blbk5vdGlmaWNhdGlvbkJhcicsIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2FkZCcsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMubm90aWZpY2F0aW9uUXVldWVbaV0udHlwZSA9PT0gJ2NoYW5nZVBhc3N3b3JkJykge1xuICAgICAgICAgICAgICAgIEJyb3dzZXJBcGkudGFiU2VuZE1lc3NhZ2VEYXRhKHRhYiwgJ29wZW5Ob3RpZmljYXRpb25CYXInLCB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdjaGFuZ2UnLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGFzeW5jIGZ1bGxTeW5jKG92ZXJyaWRlOiBib29sZWFuID0gZmFsc2UpIHtcbiAgICAgICAgY29uc3Qgc3luY0ludGVybmFsID0gNiAqIDYwICogNjAgKiAxMDAwOyAvLyA2IGhvdXJzXG4gICAgICAgIGNvbnN0IGxhc3RTeW5jID0gYXdhaXQgdGhpcy5zeW5jU2VydmljZS5nZXRMYXN0U3luYygpO1xuXG4gICAgICAgIGxldCBsYXN0U3luY0FnbyA9IHN5bmNJbnRlcm5hbCArIDE7XG4gICAgICAgIGlmIChsYXN0U3luYyAhPSBudWxsKSB7XG4gICAgICAgICAgICBsYXN0U3luY0FnbyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gbGFzdFN5bmMuZ2V0VGltZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG92ZXJyaWRlIHx8IGxhc3RTeW5jQWdvID49IHN5bmNJbnRlcm5hbCkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5zeW5jU2VydmljZS5mdWxsU3luYyhvdmVycmlkZSk7XG4gICAgICAgICAgICB0aGlzLnNjaGVkdWxlTmV4dFN5bmMoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2NoZWR1bGVOZXh0U3luYygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzY2hlZHVsZU5leHRTeW5jKCkge1xuICAgICAgICBpZiAodGhpcy5zeW5jVGltZW91dCkge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuc3luY1RpbWVvdXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zeW5jVGltZW91dCA9IHNldFRpbWVvdXQoYXN5bmMgKCkgPT4gYXdhaXQgdGhpcy5mdWxsU3luYygpLCA1ICogNjAgKiAxMDAwKTsgLy8gY2hlY2sgZXZlcnkgNSBtaW51dGVzXG4gICAgfVxuXG4gICAgLy8gQnJvd3NlciBBUEkgSGVscGVyc1xuXG4gICAgcHJpdmF0ZSBjb250ZXh0TWVudXNSZW1vdmVBbGwoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICAgICAgY2hyb21lLmNvbnRleHRNZW51cy5yZW1vdmVBbGwoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICBpZiAoY2hyb21lLnJ1bnRpbWUubGFzdEVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjb250ZXh0TWVudXNDcmVhdGUob3B0aW9uczogYW55KSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICAgICAgY2hyb21lLmNvbnRleHRNZW51cy5jcmVhdGUob3B0aW9ucywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICBpZiAoY2hyb21lLnJ1bnRpbWUubGFzdEVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBhY3Rpb25TZXRJY29uKHRoZUFjdGlvbjogYW55LCBzdWZmaXg6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgICAgIGlmICghdGhlQWN0aW9uIHx8ICF0aGVBY3Rpb24uc2V0SWNvbikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHBhdGg6IHtcbiAgICAgICAgICAgICAgICAxOTogJ2ltYWdlcy9pY29uMTknICsgc3VmZml4ICsgJy5wbmcnLFxuICAgICAgICAgICAgICAgIDM4OiAnaW1hZ2VzL2ljb24zOCcgKyBzdWZmaXggKyAnLnBuZycsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuXG4gICAgICAgIGlmICh0aGlzLnBsYXRmb3JtVXRpbHNTZXJ2aWNlLmlzRmlyZWZveCgpKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGVBY3Rpb24uc2V0SWNvbihvcHRpb25zKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoZUFjdGlvbi5zZXRJY29uKG9wdGlvbnMsICgpID0+IHJlc29sdmUoKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgYWN0aW9uU2V0QmFkZ2VCYWNrZ3JvdW5kQ29sb3IoYWN0aW9uOiBhbnkpIHtcbiAgICAgICAgaWYgKGFjdGlvbiAmJiBhY3Rpb24uc2V0QmFkZ2VCYWNrZ3JvdW5kQ29sb3IpIHtcbiAgICAgICAgICAgIGFjdGlvbi5zZXRCYWRnZUJhY2tncm91bmRDb2xvcih7IGNvbG9yOiAnIzI5NGU1ZicgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGJyb3dzZXJBY3Rpb25TZXRCYWRnZVRleHQodGV4dDogc3RyaW5nLCB0YWJJZDogbnVtYmVyKSB7XG4gICAgICAgIGlmIChjaHJvbWUuYnJvd3NlckFjdGlvbiAmJiBjaHJvbWUuYnJvd3NlckFjdGlvbi5zZXRCYWRnZVRleHQpIHtcbiAgICAgICAgICAgIGNocm9tZS5icm93c2VyQWN0aW9uLnNldEJhZGdlVGV4dCh7XG4gICAgICAgICAgICAgICAgdGV4dDogdGV4dCxcbiAgICAgICAgICAgICAgICB0YWJJZDogdGFiSWQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgc2lkZWJhckFjdGlvblNldEJhZGdlVGV4dCh0ZXh0OiBzdHJpbmcsIHRhYklkOiBudW1iZXIpIHtcbiAgICAgICAgaWYgKCF0aGlzLnNpZGViYXJBY3Rpb24pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnNpZGViYXJBY3Rpb24uc2V0QmFkZ2VUZXh0KSB7XG4gICAgICAgICAgICB0aGlzLnNpZGViYXJBY3Rpb24uc2V0QmFkZ2VUZXh0KHtcbiAgICAgICAgICAgICAgICB0ZXh0OiB0ZXh0LFxuICAgICAgICAgICAgICAgIHRhYklkOiB0YWJJZCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc2lkZWJhckFjdGlvbi5zZXRUaXRsZSkge1xuICAgICAgICAgICAgbGV0IHRpdGxlID0gJ0JpdHdhcmRlbic7XG4gICAgICAgICAgICBpZiAodGV4dCAmJiB0ZXh0ICE9PSAnJykge1xuICAgICAgICAgICAgICAgIHRpdGxlICs9ICgnIFsnICsgdGV4dCArICddJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuc2lkZWJhckFjdGlvbi5zZXRUaXRsZSh7XG4gICAgICAgICAgICAgICAgdGl0bGU6IHRpdGxlLFxuICAgICAgICAgICAgICAgIHRhYklkOiB0YWJJZCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IE1haW5CYWNrZ3JvdW5kIGZyb20gJy4vYmFja2dyb3VuZC9tYWluLmJhY2tncm91bmQnO1xuXG5jb25zdCBiaXR3YXJkZW5NYWluID0gKHdpbmRvdyBhcyBhbnkpLmJpdHdhcmRlbk1haW4gPSBuZXcgTWFpbkJhY2tncm91bmQoKTtcbmJpdHdhcmRlbk1haW4uYm9vdHN0cmFwKCkudGhlbigoKSA9PiB7XG4gICAgLy8gRmluaXNoZWQgYm9vdHN0cmFwcGluZ1xufSk7XG4iLCJpbXBvcnQgeyBDaXBoZXJUeXBlIH0gZnJvbSAnLi4vLi4vZW51bXMvY2lwaGVyVHlwZSc7XG5cbmltcG9ydCB7IENpcGhlciB9IGZyb20gJy4uL2RvbWFpbi9jaXBoZXInO1xuXG5pbXBvcnQgeyBBdHRhY2htZW50VmlldyB9IGZyb20gJy4vYXR0YWNobWVudFZpZXcnO1xuaW1wb3J0IHsgQ2FyZFZpZXcgfSBmcm9tICcuL2NhcmRWaWV3JztcbmltcG9ydCB7IEZpZWxkVmlldyB9IGZyb20gJy4vZmllbGRWaWV3JztcbmltcG9ydCB7IElkZW50aXR5VmlldyB9IGZyb20gJy4vaWRlbnRpdHlWaWV3JztcbmltcG9ydCB7IExvZ2luVmlldyB9IGZyb20gJy4vbG9naW5WaWV3JztcbmltcG9ydCB7IFBhc3N3b3JkSGlzdG9yeVZpZXcgfSBmcm9tICcuL3Bhc3N3b3JkSGlzdG9yeVZpZXcnO1xuaW1wb3J0IHsgU2VjdXJlTm90ZVZpZXcgfSBmcm9tICcuL3NlY3VyZU5vdGVWaWV3JztcbmltcG9ydCB7IFZpZXcgfSBmcm9tICcuL3ZpZXcnO1xuXG5leHBvcnQgY2xhc3MgQ2lwaGVyVmlldyBpbXBsZW1lbnRzIFZpZXcge1xuICAgIGlkOiBzdHJpbmcgPSBudWxsO1xuICAgIG9yZ2FuaXphdGlvbklkOiBzdHJpbmcgPSBudWxsO1xuICAgIGZvbGRlcklkOiBzdHJpbmcgPSBudWxsO1xuICAgIG5hbWU6IHN0cmluZyA9IG51bGw7XG4gICAgbm90ZXM6IHN0cmluZyA9IG51bGw7XG4gICAgdHlwZTogQ2lwaGVyVHlwZSA9IG51bGw7XG4gICAgZmF2b3JpdGUgPSBmYWxzZTtcbiAgICBvcmdhbml6YXRpb25Vc2VUb3RwID0gZmFsc2U7XG4gICAgZWRpdCA9IGZhbHNlO1xuICAgIHZpZXdQYXNzd29yZCA9IHRydWU7XG4gICAgbG9jYWxEYXRhOiBhbnk7XG4gICAgbG9naW4gPSBuZXcgTG9naW5WaWV3KCk7XG4gICAgaWRlbnRpdHkgPSBuZXcgSWRlbnRpdHlWaWV3KCk7XG4gICAgY2FyZCA9IG5ldyBDYXJkVmlldygpO1xuICAgIHNlY3VyZU5vdGUgPSBuZXcgU2VjdXJlTm90ZVZpZXcoKTtcbiAgICBhdHRhY2htZW50czogQXR0YWNobWVudFZpZXdbXSA9IG51bGw7XG4gICAgZmllbGRzOiBGaWVsZFZpZXdbXSA9IG51bGw7XG4gICAgcGFzc3dvcmRIaXN0b3J5OiBQYXNzd29yZEhpc3RvcnlWaWV3W10gPSBudWxsO1xuICAgIGNvbGxlY3Rpb25JZHM6IHN0cmluZ1tdID0gbnVsbDtcbiAgICByZXZpc2lvbkRhdGU6IERhdGUgPSBudWxsO1xuICAgIGRlbGV0ZWREYXRlOiBEYXRlID0gbnVsbDtcblxuICAgIGNvbnN0cnVjdG9yKGM/OiBDaXBoZXIpIHtcbiAgICAgICAgaWYgKCFjKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmlkID0gYy5pZDtcbiAgICAgICAgdGhpcy5vcmdhbml6YXRpb25JZCA9IGMub3JnYW5pemF0aW9uSWQ7XG4gICAgICAgIHRoaXMuZm9sZGVySWQgPSBjLmZvbGRlcklkO1xuICAgICAgICB0aGlzLmZhdm9yaXRlID0gYy5mYXZvcml0ZTtcbiAgICAgICAgdGhpcy5vcmdhbml6YXRpb25Vc2VUb3RwID0gYy5vcmdhbml6YXRpb25Vc2VUb3RwO1xuICAgICAgICB0aGlzLmVkaXQgPSBjLmVkaXQ7XG4gICAgICAgIHRoaXMudmlld1Bhc3N3b3JkID0gYy52aWV3UGFzc3dvcmQ7XG4gICAgICAgIHRoaXMudHlwZSA9IGMudHlwZTtcbiAgICAgICAgdGhpcy5sb2NhbERhdGEgPSBjLmxvY2FsRGF0YTtcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uSWRzID0gYy5jb2xsZWN0aW9uSWRzO1xuICAgICAgICB0aGlzLnJldmlzaW9uRGF0ZSA9IGMucmV2aXNpb25EYXRlO1xuICAgICAgICB0aGlzLmRlbGV0ZWREYXRlID0gYy5kZWxldGVkRGF0ZTtcbiAgICB9XG5cbiAgICBnZXQgc3ViVGl0bGUoKTogc3RyaW5nIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgQ2lwaGVyVHlwZS5Mb2dpbjpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sb2dpbi5zdWJUaXRsZTtcbiAgICAgICAgICAgIGNhc2UgQ2lwaGVyVHlwZS5TZWN1cmVOb3RlOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNlY3VyZU5vdGUuc3ViVGl0bGU7XG4gICAgICAgICAgICBjYXNlIENpcGhlclR5cGUuQ2FyZDpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jYXJkLnN1YlRpdGxlO1xuICAgICAgICAgICAgY2FzZSBDaXBoZXJUeXBlLklkZW50aXR5OlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmlkZW50aXR5LnN1YlRpdGxlO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGdldCBoYXNQYXNzd29yZEhpc3RvcnkoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhc3N3b3JkSGlzdG9yeSAmJiB0aGlzLnBhc3N3b3JkSGlzdG9yeS5sZW5ndGggPiAwO1xuICAgIH1cblxuICAgIGdldCBoYXNBdHRhY2htZW50cygpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXR0YWNobWVudHMgJiYgdGhpcy5hdHRhY2htZW50cy5sZW5ndGggPiAwO1xuICAgIH1cblxuICAgIGdldCBoYXNPbGRBdHRhY2htZW50cygpOiBib29sZWFuIHtcbiAgICAgICAgaWYgKHRoaXMuaGFzQXR0YWNobWVudHMpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5hdHRhY2htZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmF0dGFjaG1lbnRzW2ldLmtleSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgZ2V0IGhhc0ZpZWxkcygpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmllbGRzICYmIHRoaXMuZmllbGRzLmxlbmd0aCA+IDA7XG4gICAgfVxuXG4gICAgZ2V0IHBhc3N3b3JkUmV2aXNpb25EaXNwbGF5RGF0ZSgpOiBEYXRlIHtcbiAgICAgICAgaWYgKHRoaXMudHlwZSAhPT0gQ2lwaGVyVHlwZS5Mb2dpbiB8fCB0aGlzLmxvZ2luID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMubG9naW4ucGFzc3dvcmQgPT0gbnVsbCB8fCB0aGlzLmxvZ2luLnBhc3N3b3JkID09PSAnJykge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMubG9naW4ucGFzc3dvcmRSZXZpc2lvbkRhdGU7XG4gICAgfVxuXG4gICAgZ2V0IGlzRGVsZXRlZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVsZXRlZERhdGUgIT0gbnVsbDtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBWaWV3IH0gZnJvbSAnLi92aWV3JztcblxuaW1wb3J0IHsgQ2FyZCB9IGZyb20gJy4uL2RvbWFpbi9jYXJkJztcblxuZXhwb3J0IGNsYXNzIENhcmRWaWV3IGltcGxlbWVudHMgVmlldyB7XG4gICAgY2FyZGhvbGRlck5hbWU6IHN0cmluZyA9IG51bGw7XG4gICAgZXhwTW9udGg6IHN0cmluZyA9IG51bGw7XG4gICAgZXhwWWVhcjogc3RyaW5nID0gbnVsbDtcbiAgICBjb2RlOiBzdHJpbmcgPSBudWxsO1xuXG4gICAgLy8gdHNsaW50OmRpc2FibGVcbiAgICBwcml2YXRlIF9icmFuZDogc3RyaW5nID0gbnVsbDtcbiAgICBwcml2YXRlIF9udW1iZXI6IHN0cmluZyA9IG51bGw7XG4gICAgcHJpdmF0ZSBfc3ViVGl0bGU6IHN0cmluZyA9IG51bGw7XG4gICAgLy8gdHNsaW50OmVuYWJsZVxuXG4gICAgY29uc3RydWN0b3IoYz86IENhcmQpIHtcbiAgICAgICAgLy8gY3RvclxuICAgIH1cblxuICAgIGdldCBtYXNrZWRDb2RlKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvZGUgIT0gbnVsbCA/ICfigKInLnJlcGVhdCh0aGlzLmNvZGUubGVuZ3RoKSA6IG51bGw7XG4gICAgfVxuXG4gICAgZ2V0IGJyYW5kKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLl9icmFuZDtcbiAgICB9XG4gICAgc2V0IGJyYW5kKHZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5fYnJhbmQgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5fc3ViVGl0bGUgPSBudWxsO1xuICAgIH1cblxuICAgIGdldCBudW1iZXIoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX251bWJlcjtcbiAgICB9XG4gICAgc2V0IG51bWJlcih2YWx1ZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuX251bWJlciA9IHZhbHVlO1xuICAgICAgICB0aGlzLl9zdWJUaXRsZSA9IG51bGw7XG4gICAgfVxuXG4gICAgZ2V0IHN1YlRpdGxlKCk6IHN0cmluZyB7XG4gICAgICAgIGlmICh0aGlzLl9zdWJUaXRsZSA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLl9zdWJUaXRsZSA9IHRoaXMuYnJhbmQ7XG4gICAgICAgICAgICBpZiAodGhpcy5udW1iZXIgIT0gbnVsbCAmJiB0aGlzLm51bWJlci5sZW5ndGggPj0gNCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9zdWJUaXRsZSAhPSBudWxsICYmIHRoaXMuX3N1YlRpdGxlICE9PSAnJykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdWJUaXRsZSArPSAnLCAnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3N1YlRpdGxlID0gJyc7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gU2hvdyBsYXN0IDUgb24gYW1leCwgbGFzdCA0IGZvciBhbGwgb3RoZXJzXG4gICAgICAgICAgICAgICAgY29uc3QgY291bnQgPSB0aGlzLm51bWJlci5sZW5ndGggPj0gNSAmJiB0aGlzLm51bWJlci5tYXRjaChuZXcgUmVnRXhwKCdeM1s0N10nKSkgIT0gbnVsbCA/IDUgOiA0O1xuICAgICAgICAgICAgICAgIHRoaXMuX3N1YlRpdGxlICs9ICgnKicgKyB0aGlzLm51bWJlci5zdWJzdHIodGhpcy5udW1iZXIubGVuZ3RoIC0gY291bnQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fc3ViVGl0bGU7XG4gICAgfVxuXG4gICAgZ2V0IGV4cGlyYXRpb24oKTogc3RyaW5nIHtcbiAgICAgICAgaWYgKCF0aGlzLmV4cE1vbnRoICYmICF0aGlzLmV4cFllYXIpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGV4cCA9IHRoaXMuZXhwTW9udGggIT0gbnVsbCA/ICgnMCcgKyB0aGlzLmV4cE1vbnRoKS5zbGljZSgtMikgOiAnX18nO1xuICAgICAgICBleHAgKz0gKCcgLyAnICsgKHRoaXMuZXhwWWVhciAhPSBudWxsID8gdGhpcy5mb3JtYXRZZWFyKHRoaXMuZXhwWWVhcikgOiAnX19fXycpKTtcbiAgICAgICAgcmV0dXJuIGV4cDtcbiAgICB9XG5cbiAgICBwcml2YXRlIGZvcm1hdFllYXIoeWVhcjogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHllYXIubGVuZ3RoID09PSAyID8gJzIwJyArIHllYXIgOiB5ZWFyO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IFZpZXcgfSBmcm9tICcuL3ZpZXcnO1xuXG5pbXBvcnQgeyBJZGVudGl0eSB9IGZyb20gJy4uL2RvbWFpbi9pZGVudGl0eSc7XG5cbmltcG9ydCB7IFV0aWxzIH0gZnJvbSAnLi4vLi4vbWlzYy91dGlscyc7XG5cbmV4cG9ydCBjbGFzcyBJZGVudGl0eVZpZXcgaW1wbGVtZW50cyBWaWV3IHtcbiAgICB0aXRsZTogc3RyaW5nID0gbnVsbDtcbiAgICBtaWRkbGVOYW1lOiBzdHJpbmcgPSBudWxsO1xuICAgIGFkZHJlc3MxOiBzdHJpbmcgPSBudWxsO1xuICAgIGFkZHJlc3MyOiBzdHJpbmcgPSBudWxsO1xuICAgIGFkZHJlc3MzOiBzdHJpbmcgPSBudWxsO1xuICAgIGNpdHk6IHN0cmluZyA9IG51bGw7XG4gICAgc3RhdGU6IHN0cmluZyA9IG51bGw7XG4gICAgcG9zdGFsQ29kZTogc3RyaW5nID0gbnVsbDtcbiAgICBjb3VudHJ5OiBzdHJpbmcgPSBudWxsO1xuICAgIGNvbXBhbnk6IHN0cmluZyA9IG51bGw7XG4gICAgZW1haWw6IHN0cmluZyA9IG51bGw7XG4gICAgcGhvbmU6IHN0cmluZyA9IG51bGw7XG4gICAgc3NuOiBzdHJpbmcgPSBudWxsO1xuICAgIHVzZXJuYW1lOiBzdHJpbmcgPSBudWxsO1xuICAgIHBhc3Nwb3J0TnVtYmVyOiBzdHJpbmcgPSBudWxsO1xuICAgIGxpY2Vuc2VOdW1iZXI6IHN0cmluZyA9IG51bGw7XG5cbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZVxuICAgIHByaXZhdGUgX2ZpcnN0TmFtZTogc3RyaW5nID0gbnVsbDtcbiAgICBwcml2YXRlIF9sYXN0TmFtZTogc3RyaW5nID0gbnVsbDtcbiAgICBwcml2YXRlIF9zdWJUaXRsZTogc3RyaW5nID0gbnVsbDtcbiAgICAvLyB0c2xpbnQ6ZW5hYmxlXG5cbiAgICBjb25zdHJ1Y3RvcihpPzogSWRlbnRpdHkpIHtcbiAgICAgICAgLy8gY3RvclxuICAgIH1cblxuICAgIGdldCBmaXJzdE5hbWUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZpcnN0TmFtZTtcbiAgICB9XG4gICAgc2V0IGZpcnN0TmFtZSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuX2ZpcnN0TmFtZSA9IHZhbHVlO1xuICAgICAgICB0aGlzLl9zdWJUaXRsZSA9IG51bGw7XG4gICAgfVxuXG4gICAgZ2V0IGxhc3ROYW1lKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLl9sYXN0TmFtZTtcbiAgICB9XG4gICAgc2V0IGxhc3ROYW1lKHZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5fbGFzdE5hbWUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5fc3ViVGl0bGUgPSBudWxsO1xuICAgIH1cblxuICAgIGdldCBzdWJUaXRsZSgpOiBzdHJpbmcge1xuICAgICAgICBpZiAodGhpcy5fc3ViVGl0bGUgPT0gbnVsbCAmJiAodGhpcy5maXJzdE5hbWUgIT0gbnVsbCB8fCB0aGlzLmxhc3ROYW1lICE9IG51bGwpKSB7XG4gICAgICAgICAgICB0aGlzLl9zdWJUaXRsZSA9ICcnO1xuICAgICAgICAgICAgaWYgKHRoaXMuZmlyc3ROYW1lICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdWJUaXRsZSA9IHRoaXMuZmlyc3ROYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMubGFzdE5hbWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9zdWJUaXRsZSAhPT0gJycpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3ViVGl0bGUgKz0gJyAnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLl9zdWJUaXRsZSArPSB0aGlzLmxhc3ROYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX3N1YlRpdGxlO1xuICAgIH1cblxuICAgIGdldCBmdWxsTmFtZSgpOiBzdHJpbmcge1xuICAgICAgICBpZiAodGhpcy50aXRsZSAhPSBudWxsIHx8IHRoaXMuZmlyc3ROYW1lICE9IG51bGwgfHwgdGhpcy5taWRkbGVOYW1lICE9IG51bGwgfHwgdGhpcy5sYXN0TmFtZSAhPSBudWxsKSB7XG4gICAgICAgICAgICBsZXQgbmFtZSA9ICcnO1xuICAgICAgICAgICAgaWYgKHRoaXMudGl0bGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG5hbWUgKz0gKHRoaXMudGl0bGUgKyAnICcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuZmlyc3ROYW1lICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBuYW1lICs9ICh0aGlzLmZpcnN0TmFtZSArICcgJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5taWRkbGVOYW1lICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBuYW1lICs9ICh0aGlzLm1pZGRsZU5hbWUgKyAnICcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMubGFzdE5hbWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG5hbWUgKz0gdGhpcy5sYXN0TmFtZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuYW1lLnRyaW0oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGdldCBmdWxsQWRkcmVzcygpOiBzdHJpbmcge1xuICAgICAgICBsZXQgYWRkcmVzcyA9IHRoaXMuYWRkcmVzczE7XG4gICAgICAgIGlmICghVXRpbHMuaXNOdWxsT3JXaGl0ZXNwYWNlKHRoaXMuYWRkcmVzczIpKSB7XG4gICAgICAgICAgICBpZiAoIVV0aWxzLmlzTnVsbE9yV2hpdGVzcGFjZShhZGRyZXNzKSkge1xuICAgICAgICAgICAgICAgIGFkZHJlc3MgKz0gJywgJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFkZHJlc3MgKz0gdGhpcy5hZGRyZXNzMjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIVV0aWxzLmlzTnVsbE9yV2hpdGVzcGFjZSh0aGlzLmFkZHJlc3MzKSkge1xuICAgICAgICAgICAgaWYgKCFVdGlscy5pc051bGxPcldoaXRlc3BhY2UoYWRkcmVzcykpIHtcbiAgICAgICAgICAgICAgICBhZGRyZXNzICs9ICcsICc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhZGRyZXNzICs9IHRoaXMuYWRkcmVzczM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFkZHJlc3M7XG4gICAgfVxuXG4gICAgZ2V0IGZ1bGxBZGRyZXNzUGFydDIoKTogc3RyaW5nIHtcbiAgICAgICAgaWYgKHRoaXMuY2l0eSA9PSBudWxsICYmIHRoaXMuc3RhdGUgPT0gbnVsbCAmJiB0aGlzLnBvc3RhbENvZGUgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY2l0eSA9IHRoaXMuY2l0eSB8fCAnLSc7XG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgY29uc3QgcG9zdGFsQ29kZSA9IHRoaXMucG9zdGFsQ29kZSB8fCAnLSc7XG4gICAgICAgIGxldCBhZGRyZXNzUGFydDIgPSBjaXR5O1xuICAgICAgICBpZiAoIVV0aWxzLmlzTnVsbE9yV2hpdGVzcGFjZShzdGF0ZSkpIHtcbiAgICAgICAgICAgIGFkZHJlc3NQYXJ0MiArPSAnLCAnICsgc3RhdGU7XG4gICAgICAgIH1cbiAgICAgICAgYWRkcmVzc1BhcnQyICs9ICcsICcgKyBwb3N0YWxDb2RlO1xuICAgICAgICByZXR1cm4gYWRkcmVzc1BhcnQyO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IFNlY3VyZU5vdGVUeXBlIH0gZnJvbSAnLi4vLi4vZW51bXMvc2VjdXJlTm90ZVR5cGUnO1xuXG5pbXBvcnQgeyBWaWV3IH0gZnJvbSAnLi92aWV3JztcblxuaW1wb3J0IHsgU2VjdXJlTm90ZSB9IGZyb20gJy4uL2RvbWFpbi9zZWN1cmVOb3RlJztcblxuZXhwb3J0IGNsYXNzIFNlY3VyZU5vdGVWaWV3IGltcGxlbWVudHMgVmlldyB7XG4gICAgdHlwZTogU2VjdXJlTm90ZVR5cGUgPSBudWxsO1xuXG4gICAgY29uc3RydWN0b3Iobj86IFNlY3VyZU5vdGUpIHtcbiAgICAgICAgaWYgKCFuKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnR5cGUgPSBuLnR5cGU7XG4gICAgfVxuXG4gICAgZ2V0IHN1YlRpdGxlKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IENpcGhlclR5cGUgfSBmcm9tICcuLi8uLi9lbnVtcy9jaXBoZXJUeXBlJztcblxuaW1wb3J0IHsgQXR0YWNobWVudERhdGEgfSBmcm9tICcuL2F0dGFjaG1lbnREYXRhJztcbmltcG9ydCB7IENhcmREYXRhIH0gZnJvbSAnLi9jYXJkRGF0YSc7XG5pbXBvcnQgeyBGaWVsZERhdGEgfSBmcm9tICcuL2ZpZWxkRGF0YSc7XG5pbXBvcnQgeyBJZGVudGl0eURhdGEgfSBmcm9tICcuL2lkZW50aXR5RGF0YSc7XG5pbXBvcnQgeyBMb2dpbkRhdGEgfSBmcm9tICcuL2xvZ2luRGF0YSc7XG5pbXBvcnQgeyBQYXNzd29yZEhpc3RvcnlEYXRhIH0gZnJvbSAnLi9wYXNzd29yZEhpc3RvcnlEYXRhJztcbmltcG9ydCB7IFNlY3VyZU5vdGVEYXRhIH0gZnJvbSAnLi9zZWN1cmVOb3RlRGF0YSc7XG5cbmltcG9ydCB7IENpcGhlclJlc3BvbnNlIH0gZnJvbSAnLi4vcmVzcG9uc2UvY2lwaGVyUmVzcG9uc2UnO1xuXG5leHBvcnQgY2xhc3MgQ2lwaGVyRGF0YSB7XG4gICAgaWQ6IHN0cmluZztcbiAgICBvcmdhbml6YXRpb25JZDogc3RyaW5nO1xuICAgIGZvbGRlcklkOiBzdHJpbmc7XG4gICAgdXNlcklkOiBzdHJpbmc7XG4gICAgZWRpdDogYm9vbGVhbjtcbiAgICB2aWV3UGFzc3dvcmQ6IGJvb2xlYW47XG4gICAgb3JnYW5pemF0aW9uVXNlVG90cDogYm9vbGVhbjtcbiAgICBmYXZvcml0ZTogYm9vbGVhbjtcbiAgICByZXZpc2lvbkRhdGU6IHN0cmluZztcbiAgICB0eXBlOiBDaXBoZXJUeXBlO1xuICAgIHNpemVOYW1lOiBzdHJpbmc7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIG5vdGVzOiBzdHJpbmc7XG4gICAgbG9naW4/OiBMb2dpbkRhdGE7XG4gICAgc2VjdXJlTm90ZT86IFNlY3VyZU5vdGVEYXRhO1xuICAgIGNhcmQ/OiBDYXJkRGF0YTtcbiAgICBpZGVudGl0eT86IElkZW50aXR5RGF0YTtcbiAgICBmaWVsZHM/OiBGaWVsZERhdGFbXTtcbiAgICBhdHRhY2htZW50cz86IEF0dGFjaG1lbnREYXRhW107XG4gICAgcGFzc3dvcmRIaXN0b3J5PzogUGFzc3dvcmRIaXN0b3J5RGF0YVtdO1xuICAgIGNvbGxlY3Rpb25JZHM/OiBzdHJpbmdbXTtcbiAgICBkZWxldGVkRGF0ZTogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IocmVzcG9uc2U/OiBDaXBoZXJSZXNwb25zZSwgdXNlcklkPzogc3RyaW5nLCBjb2xsZWN0aW9uSWRzPzogc3RyaW5nW10pIHtcbiAgICAgICAgaWYgKHJlc3BvbnNlID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuaWQgPSByZXNwb25zZS5pZDtcbiAgICAgICAgdGhpcy5vcmdhbml6YXRpb25JZCA9IHJlc3BvbnNlLm9yZ2FuaXphdGlvbklkO1xuICAgICAgICB0aGlzLmZvbGRlcklkID0gcmVzcG9uc2UuZm9sZGVySWQ7XG4gICAgICAgIHRoaXMudXNlcklkID0gdXNlcklkO1xuICAgICAgICB0aGlzLmVkaXQgPSByZXNwb25zZS5lZGl0O1xuICAgICAgICB0aGlzLnZpZXdQYXNzd29yZCA9IHJlc3BvbnNlLnZpZXdQYXNzd29yZDtcbiAgICAgICAgdGhpcy5vcmdhbml6YXRpb25Vc2VUb3RwID0gcmVzcG9uc2Uub3JnYW5pemF0aW9uVXNlVG90cDtcbiAgICAgICAgdGhpcy5mYXZvcml0ZSA9IHJlc3BvbnNlLmZhdm9yaXRlO1xuICAgICAgICB0aGlzLnJldmlzaW9uRGF0ZSA9IHJlc3BvbnNlLnJldmlzaW9uRGF0ZTtcbiAgICAgICAgdGhpcy50eXBlID0gcmVzcG9uc2UudHlwZTtcbiAgICAgICAgdGhpcy5uYW1lID0gcmVzcG9uc2UubmFtZTtcbiAgICAgICAgdGhpcy5ub3RlcyA9IHJlc3BvbnNlLm5vdGVzO1xuICAgICAgICB0aGlzLmNvbGxlY3Rpb25JZHMgPSBjb2xsZWN0aW9uSWRzICE9IG51bGwgPyBjb2xsZWN0aW9uSWRzIDogcmVzcG9uc2UuY29sbGVjdGlvbklkcztcbiAgICAgICAgdGhpcy5kZWxldGVkRGF0ZSA9IHJlc3BvbnNlLmRlbGV0ZWREYXRlO1xuXG4gICAgICAgIHN3aXRjaCAodGhpcy50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIENpcGhlclR5cGUuTG9naW46XG4gICAgICAgICAgICAgICAgdGhpcy5sb2dpbiA9IG5ldyBMb2dpbkRhdGEocmVzcG9uc2UubG9naW4pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBDaXBoZXJUeXBlLlNlY3VyZU5vdGU6XG4gICAgICAgICAgICAgICAgdGhpcy5zZWN1cmVOb3RlID0gbmV3IFNlY3VyZU5vdGVEYXRhKHJlc3BvbnNlLnNlY3VyZU5vdGUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBDaXBoZXJUeXBlLkNhcmQ6XG4gICAgICAgICAgICAgICAgdGhpcy5jYXJkID0gbmV3IENhcmREYXRhKHJlc3BvbnNlLmNhcmQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBDaXBoZXJUeXBlLklkZW50aXR5OlxuICAgICAgICAgICAgICAgIHRoaXMuaWRlbnRpdHkgPSBuZXcgSWRlbnRpdHlEYXRhKHJlc3BvbnNlLmlkZW50aXR5KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocmVzcG9uc2UuZmllbGRzICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuZmllbGRzID0gcmVzcG9uc2UuZmllbGRzLm1hcCgoZikgPT4gbmV3IEZpZWxkRGF0YShmKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlc3BvbnNlLmF0dGFjaG1lbnRzICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuYXR0YWNobWVudHMgPSByZXNwb25zZS5hdHRhY2htZW50cy5tYXAoKGEpID0+IG5ldyBBdHRhY2htZW50RGF0YShhKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlc3BvbnNlLnBhc3N3b3JkSGlzdG9yeSAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnBhc3N3b3JkSGlzdG9yeSA9IHJlc3BvbnNlLnBhc3N3b3JkSGlzdG9yeS5tYXAoKHBoKSA9PiBuZXcgUGFzc3dvcmRIaXN0b3J5RGF0YShwaCkpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgVXJpTWF0Y2hUeXBlIH0gZnJvbSAnLi4vLi4vZW51bXMvdXJpTWF0Y2hUeXBlJztcblxuaW1wb3J0IHsgVmlldyB9IGZyb20gJy4vdmlldyc7XG5cbmltcG9ydCB7IExvZ2luVXJpIH0gZnJvbSAnLi4vZG9tYWluL2xvZ2luVXJpJztcblxuaW1wb3J0IHsgVXRpbHMgfSBmcm9tICcuLi8uLi9taXNjL3V0aWxzJztcblxuY29uc3QgQ2FuTGF1bmNoV2hpdGVsaXN0ID0gW1xuICAgICdodHRwczovLycsXG4gICAgJ2h0dHA6Ly8nLFxuICAgICdzc2g6Ly8nLFxuICAgICdmdHA6Ly8nLFxuICAgICdzZnRwOi8vJyxcbiAgICAnaXJjOi8vJyxcbiAgICAndm5jOi8vJyxcbiAgICAvLyBodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9lbi11cy93aW5kb3dzLXNlcnZlci9yZW1vdGUvcmVtb3RlLWRlc2t0b3Atc2VydmljZXMvY2xpZW50cy9yZW1vdGUtZGVza3RvcC11cmlcbiAgICAncmRwOi8vJywgLy8gTGVnYWN5IFJEUCBVUkkgc2NoZW1lXG4gICAgJ21zLXJkOicsIC8vIFByZWZlcnJlZCBSRFAgVVJJIHNjaGVtZVxuICAgICdjaHJvbWU6Ly8nLFxuICAgICdpb3NhcHA6Ly8nLFxuICAgICdhbmRyb2lkYXBwOi8vJyxcbl07XG5cbmV4cG9ydCBjbGFzcyBMb2dpblVyaVZpZXcgaW1wbGVtZW50cyBWaWV3IHtcbiAgICBtYXRjaDogVXJpTWF0Y2hUeXBlID0gbnVsbDtcblxuICAgIC8vIHRzbGludDpkaXNhYmxlXG4gICAgcHJpdmF0ZSBfdXJpOiBzdHJpbmcgPSBudWxsO1xuICAgIHByaXZhdGUgX2RvbWFpbjogc3RyaW5nID0gbnVsbDtcbiAgICBwcml2YXRlIF9ob3N0bmFtZTogc3RyaW5nID0gbnVsbDtcbiAgICBwcml2YXRlIF9ob3N0OiBzdHJpbmcgPSBudWxsO1xuICAgIHByaXZhdGUgX2NhbkxhdW5jaDogYm9vbGVhbiA9IG51bGw7XG4gICAgLy8gdHNsaW50OmVuYWJsZVxuXG4gICAgY29uc3RydWN0b3IodT86IExvZ2luVXJpKSB7XG4gICAgICAgIGlmICghdSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5tYXRjaCA9IHUubWF0Y2g7XG4gICAgfVxuXG4gICAgZ2V0IHVyaSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5fdXJpO1xuICAgIH1cbiAgICBzZXQgdXJpKHZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5fdXJpID0gdmFsdWU7XG4gICAgICAgIHRoaXMuX2RvbWFpbiA9IG51bGw7XG4gICAgICAgIHRoaXMuX2NhbkxhdW5jaCA9IG51bGw7XG4gICAgfVxuXG4gICAgZ2V0IGRvbWFpbigpOiBzdHJpbmcge1xuICAgICAgICBpZiAodGhpcy5fZG9tYWluID09IG51bGwgJiYgdGhpcy51cmkgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5fZG9tYWluID0gVXRpbHMuZ2V0RG9tYWluKHRoaXMudXJpKTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9kb21haW4gPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZG9tYWluID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLl9kb21haW47XG4gICAgfVxuXG4gICAgZ2V0IGhvc3RuYW1lKCk6IHN0cmluZyB7XG4gICAgICAgIGlmICh0aGlzLm1hdGNoID09PSBVcmlNYXRjaFR5cGUuUmVndWxhckV4cHJlc3Npb24pIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9ob3N0bmFtZSA9PSBudWxsICYmIHRoaXMudXJpICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX2hvc3RuYW1lID0gVXRpbHMuZ2V0SG9zdG5hbWUodGhpcy51cmkpO1xuICAgICAgICAgICAgaWYgKHRoaXMuX2hvc3RuYW1lID09PSAnJykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2hvc3RuYW1lID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLl9ob3N0bmFtZTtcbiAgICB9XG5cbiAgICBnZXQgaG9zdCgpOiBzdHJpbmcge1xuICAgICAgICBpZiAodGhpcy5tYXRjaCA9PT0gVXJpTWF0Y2hUeXBlLlJlZ3VsYXJFeHByZXNzaW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5faG9zdCA9PSBudWxsICYmIHRoaXMudXJpICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX2hvc3QgPSBVdGlscy5nZXRIb3N0KHRoaXMudXJpKTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9ob3N0ID09PSAnJykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2hvc3QgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX2hvc3Q7XG4gICAgfVxuXG4gICAgZ2V0IGhvc3RuYW1lT3JVcmkoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaG9zdG5hbWUgIT0gbnVsbCA/IHRoaXMuaG9zdG5hbWUgOiB0aGlzLnVyaTtcbiAgICB9XG5cbiAgICBnZXQgaG9zdE9yVXJpKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLmhvc3QgIT0gbnVsbCA/IHRoaXMuaG9zdCA6IHRoaXMudXJpO1xuICAgIH1cblxuICAgIGdldCBpc1dlYnNpdGUoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLnVyaSAhPSBudWxsICYmICh0aGlzLnVyaS5pbmRleE9mKCdodHRwOi8vJykgPT09IDAgfHwgdGhpcy51cmkuaW5kZXhPZignaHR0cHM6Ly8nKSA9PT0gMCB8fFxuICAgICAgICAgICAgKHRoaXMudXJpLmluZGV4T2YoJzovLycpIDwgMCAmJiBVdGlscy50bGRFbmRpbmdSZWdleC50ZXN0KHRoaXMudXJpKSkpO1xuICAgIH1cblxuICAgIGdldCBjYW5MYXVuY2goKTogYm9vbGVhbiB7XG4gICAgICAgIGlmICh0aGlzLl9jYW5MYXVuY2ggIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NhbkxhdW5jaDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy51cmkgIT0gbnVsbCAmJiB0aGlzLm1hdGNoICE9PSBVcmlNYXRjaFR5cGUuUmVndWxhckV4cHJlc3Npb24pIHtcbiAgICAgICAgICAgIGNvbnN0IHVyaSA9IHRoaXMubGF1bmNoVXJpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBDYW5MYXVuY2hXaGl0ZWxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAodXJpLmluZGV4T2YoQ2FuTGF1bmNoV2hpdGVsaXN0W2ldKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jYW5MYXVuY2ggPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fY2FuTGF1bmNoO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9jYW5MYXVuY2ggPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NhbkxhdW5jaDtcbiAgICB9XG5cbiAgICBnZXQgbGF1bmNoVXJpKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLnVyaS5pbmRleE9mKCc6Ly8nKSA8IDAgJiYgVXRpbHMudGxkRW5kaW5nUmVnZXgudGVzdCh0aGlzLnVyaSkgPyAoJ2h0dHA6Ly8nICsgdGhpcy51cmkpIDogdGhpcy51cmk7XG4gICAgfVxufVxuIiwiaW1wb3J0ICogYXMgdGxkanMgZnJvbSAndGxkanMnO1xuXG5pbXBvcnQgeyBJMThuU2VydmljZSB9IGZyb20gJy4uL2Fic3RyYWN0aW9ucy9pMThuLnNlcnZpY2UnO1xuXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmVcbmNvbnN0IG5vZGVVUkwgPSB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyA/IHJlcXVpcmUoJ3VybCcpIDogbnVsbDtcblxuZXhwb3J0IGNsYXNzIFV0aWxzIHtcbiAgICBzdGF0aWMgaW5pdGVkID0gZmFsc2U7XG4gICAgc3RhdGljIGlzTmF0aXZlU2NyaXB0ID0gZmFsc2U7XG4gICAgc3RhdGljIGlzTm9kZSA9IGZhbHNlO1xuICAgIHN0YXRpYyBpc0Jyb3dzZXIgPSB0cnVlO1xuICAgIHN0YXRpYyBpc01vYmlsZUJyb3dzZXIgPSBmYWxzZTtcbiAgICBzdGF0aWMgaXNBcHBsZU1vYmlsZUJyb3dzZXIgPSBmYWxzZTtcbiAgICBzdGF0aWMgZ2xvYmFsOiBhbnkgPSBudWxsO1xuICAgIHN0YXRpYyB0bGRFbmRpbmdSZWdleCA9IC8uKlxcLihjb218bmV0fG9yZ3xlZHV8dWt8Z292fGNhfGRlfGpwfGZyfGF1fHJ1fGNofGlvfGVzfHVzfGNvfHh5enxpbmZvfGx5fG1pbCkkLztcblxuICAgIHN0YXRpYyBpbml0KCkge1xuICAgICAgICBpZiAoVXRpbHMuaW5pdGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBVdGlscy5pbml0ZWQgPSB0cnVlO1xuICAgICAgICBVdGlscy5pc05vZGUgPSB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgKHByb2Nlc3MgYXMgYW55KS5yZWxlYXNlICE9IG51bGwgJiZcbiAgICAgICAgICAgIChwcm9jZXNzIGFzIGFueSkucmVsZWFzZS5uYW1lID09PSAnbm9kZSc7XG4gICAgICAgIFV0aWxzLmlzQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xuICAgICAgICBVdGlscy5pc05hdGl2ZVNjcmlwdCA9ICFVdGlscy5pc05vZGUgJiYgIVV0aWxzLmlzQnJvd3NlcjtcbiAgICAgICAgVXRpbHMuaXNNb2JpbGVCcm93c2VyID0gVXRpbHMuaXNCcm93c2VyICYmIHRoaXMuaXNNb2JpbGUod2luZG93KTtcbiAgICAgICAgVXRpbHMuaXNBcHBsZU1vYmlsZUJyb3dzZXIgPSBVdGlscy5pc0Jyb3dzZXIgJiYgdGhpcy5pc0FwcGxlTW9iaWxlKHdpbmRvdyk7XG4gICAgICAgIFV0aWxzLmdsb2JhbCA9IFV0aWxzLmlzTmF0aXZlU2NyaXB0ID8gZ2xvYmFsIDogKFV0aWxzLmlzTm9kZSAmJiAhVXRpbHMuaXNCcm93c2VyID8gZ2xvYmFsIDogd2luZG93KTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZnJvbUI2NFRvQXJyYXkoc3RyOiBzdHJpbmcpOiBVaW50OEFycmF5IHtcbiAgICAgICAgaWYgKFV0aWxzLmlzTm9kZSB8fCBVdGlscy5pc05hdGl2ZVNjcmlwdCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KEJ1ZmZlci5mcm9tKHN0ciwgJ2Jhc2U2NCcpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGJpbmFyeVN0cmluZyA9IHdpbmRvdy5hdG9iKHN0cik7XG4gICAgICAgICAgICBjb25zdCBieXRlcyA9IG5ldyBVaW50OEFycmF5KGJpbmFyeVN0cmluZy5sZW5ndGgpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBiaW5hcnlTdHJpbmcubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBieXRlc1tpXSA9IGJpbmFyeVN0cmluZy5jaGFyQ29kZUF0KGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGJ5dGVzO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGljIGZyb21VcmxCNjRUb0FycmF5KHN0cjogc3RyaW5nKTogVWludDhBcnJheSB7XG4gICAgICAgIHJldHVybiBVdGlscy5mcm9tQjY0VG9BcnJheShVdGlscy5mcm9tVXJsQjY0VG9CNjQoc3RyKSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGZyb21IZXhUb0FycmF5KHN0cjogc3RyaW5nKTogVWludDhBcnJheSB7XG4gICAgICAgIGlmIChVdGlscy5pc05vZGUgfHwgVXRpbHMuaXNOYXRpdmVTY3JpcHQpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShCdWZmZXIuZnJvbShzdHIsICdoZXgnKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBieXRlcyA9IG5ldyBVaW50OEFycmF5KHN0ci5sZW5ndGggLyAyKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgICAgICAgICAgICAgYnl0ZXNbaSAvIDJdID0gcGFyc2VJbnQoc3RyLnN1YnN0cihpLCAyKSwgMTYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGJ5dGVzO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGljIGZyb21VdGY4VG9BcnJheShzdHI6IHN0cmluZyk6IFVpbnQ4QXJyYXkge1xuICAgICAgICBpZiAoVXRpbHMuaXNOb2RlIHx8IFV0aWxzLmlzTmF0aXZlU2NyaXB0KSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoQnVmZmVyLmZyb20oc3RyLCAndXRmOCcpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHN0clV0ZjggPSB1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoc3RyKSk7XG4gICAgICAgICAgICBjb25zdCBhcnIgPSBuZXcgVWludDhBcnJheShzdHJVdGY4Lmxlbmd0aCk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0clV0ZjgubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBhcnJbaV0gPSBzdHJVdGY4LmNoYXJDb2RlQXQoaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYXJyO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGljIGZyb21CeXRlU3RyaW5nVG9BcnJheShzdHI6IHN0cmluZyk6IFVpbnQ4QXJyYXkge1xuICAgICAgICBjb25zdCBhcnIgPSBuZXcgVWludDhBcnJheShzdHIubGVuZ3RoKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFycltpXSA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcnI7XG4gICAgfVxuXG4gICAgc3RhdGljIGZyb21CdWZmZXJUb0I2NChidWZmZXI6IEFycmF5QnVmZmVyKTogc3RyaW5nIHtcbiAgICAgICAgaWYgKFV0aWxzLmlzTm9kZSB8fCBVdGlscy5pc05hdGl2ZVNjcmlwdCkge1xuICAgICAgICAgICAgcmV0dXJuIEJ1ZmZlci5mcm9tKGJ1ZmZlcikudG9TdHJpbmcoJ2Jhc2U2NCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IGJpbmFyeSA9ICcnO1xuICAgICAgICAgICAgY29uc3QgYnl0ZXMgPSBuZXcgVWludDhBcnJheShidWZmZXIpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBieXRlcy5ieXRlTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBiaW5hcnkgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShieXRlc1tpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gd2luZG93LmJ0b2EoYmluYXJ5KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyBmcm9tQnVmZmVyVG9VcmxCNjQoYnVmZmVyOiBBcnJheUJ1ZmZlcik6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBVdGlscy5mcm9tQjY0dG9VcmxCNjQoVXRpbHMuZnJvbUJ1ZmZlclRvQjY0KGJ1ZmZlcikpXG4gICAgfVxuXG4gICAgc3RhdGljIGZyb21CNjR0b1VybEI2NChiNjRTdHI6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gYjY0U3RyLnJlcGxhY2UoL1xcKy9nLCAnLScpXG4gICAgICAgICAgICAucmVwbGFjZSgvXFwvL2csICdfJylcbiAgICAgICAgICAgIC5yZXBsYWNlKC89L2csICcnKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZnJvbUJ1ZmZlclRvVXRmOChidWZmZXI6IEFycmF5QnVmZmVyKTogc3RyaW5nIHtcbiAgICAgICAgaWYgKFV0aWxzLmlzTm9kZSB8fCBVdGlscy5pc05hdGl2ZVNjcmlwdCkge1xuICAgICAgICAgICAgcmV0dXJuIEJ1ZmZlci5mcm9tKGJ1ZmZlcikudG9TdHJpbmcoJ3V0ZjgnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyKTtcbiAgICAgICAgICAgIGNvbnN0IGVuY29kZWRTdHJpbmcgPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGJ5dGVzKTtcbiAgICAgICAgICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoZXNjYXBlKGVuY29kZWRTdHJpbmcpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyBmcm9tQnVmZmVyVG9CeXRlU3RyaW5nKGJ1ZmZlcjogQXJyYXlCdWZmZXIpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBuZXcgVWludDhBcnJheShidWZmZXIpKTtcbiAgICB9XG5cbiAgICAvLyByZWY6IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS80MDAzMTk3OS8xMDkwMzU5XG4gICAgc3RhdGljIGZyb21CdWZmZXJUb0hleChidWZmZXI6IEFycmF5QnVmZmVyKTogc3RyaW5nIHtcbiAgICAgICAgaWYgKFV0aWxzLmlzTm9kZSB8fCBVdGlscy5pc05hdGl2ZVNjcmlwdCkge1xuICAgICAgICAgICAgcmV0dXJuIEJ1ZmZlci5mcm9tKGJ1ZmZlcikudG9TdHJpbmcoJ2hleCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgYnl0ZXMgPSBuZXcgVWludDhBcnJheShidWZmZXIpO1xuICAgICAgICAgICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5tYXAuY2FsbChieXRlcywgKHg6IG51bWJlcikgPT4gKCcwMCcgKyB4LnRvU3RyaW5nKDE2KSkuc2xpY2UoLTIpKS5qb2luKCcnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyBmcm9tVXJsQjY0VG9CNjQodXJsQjY0U3RyOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICBsZXQgb3V0cHV0ID0gdXJsQjY0U3RyLnJlcGxhY2UoLy0vZywgJysnKS5yZXBsYWNlKC9fL2csICcvJyk7XG4gICAgICAgIHN3aXRjaCAob3V0cHV0Lmxlbmd0aCAlIDQpIHtcbiAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICBvdXRwdXQgKz0gJz09JztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICBvdXRwdXQgKz0gJz0nO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0lsbGVnYWwgYmFzZTY0dXJsIHN0cmluZyEnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgfVxuXG4gICAgc3RhdGljIGZyb21VcmxCNjRUb1V0ZjgodXJsQjY0U3RyOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gVXRpbHMuZnJvbUI2NFRvVXRmOChVdGlscy5mcm9tVXJsQjY0VG9CNjQodXJsQjY0U3RyKSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGZyb21CNjRUb1V0ZjgoYjY0U3RyOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICBpZiAoVXRpbHMuaXNOb2RlIHx8IFV0aWxzLmlzTmF0aXZlU2NyaXB0KSB7XG4gICAgICAgICAgICByZXR1cm4gQnVmZmVyLmZyb20oYjY0U3RyLCAnYmFzZTY0JykudG9TdHJpbmcoJ3V0ZjgnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoZXNjYXBlKHdpbmRvdy5hdG9iKGI2NFN0cikpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIHJlZjogaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjExNzUyMy8xMDkwMzU5XG4gICAgc3RhdGljIG5ld0d1aWQoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuICd4eHh4eHh4eC14eHh4LTR4eHgteXh4eC14eHh4eHh4eHh4eHgnLnJlcGxhY2UoL1t4eV0vZywgKGMpID0+IHtcbiAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZVxuICAgICAgICAgICAgY29uc3QgciA9IE1hdGgucmFuZG9tKCkgKiAxNiB8IDA7XG4gICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgICAgIGNvbnN0IHYgPSBjID09PSAneCcgPyByIDogKHIgJiAweDMgfCAweDgpO1xuICAgICAgICAgICAgcmV0dXJuIHYudG9TdHJpbmcoMTYpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzdGF0aWMgaXNHdWlkKGlkOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIFJlZ0V4cCgvXlswLTlhLWZdezh9LVswLTlhLWZdezR9LVsxLTVdWzAtOWEtZl17M30tWzg5YWJdWzAtOWEtZl17M30tWzAtOWEtZl17MTJ9JC8sICdpJykudGVzdChpZCk7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldEhvc3RuYW1lKHVyaVN0cmluZzogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgY29uc3QgdXJsID0gVXRpbHMuZ2V0VXJsKHVyaVN0cmluZyk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gdXJsICE9IG51bGwgJiYgdXJsLmhvc3RuYW1lICE9PSAnJyA/IHVybC5ob3N0bmFtZSA6IG51bGw7XG4gICAgICAgIH0gY2F0Y2gge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0SG9zdCh1cmlTdHJpbmc6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IHVybCA9IFV0aWxzLmdldFVybCh1cmlTdHJpbmcpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIHVybCAhPSBudWxsICYmIHVybC5ob3N0ICE9PSAnJyA/IHVybC5ob3N0IDogbnVsbDtcbiAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyBnZXREb21haW4odXJpU3RyaW5nOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICBpZiAodXJpU3RyaW5nID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgdXJpU3RyaW5nID0gdXJpU3RyaW5nLnRyaW0oKTtcbiAgICAgICAgaWYgKHVyaVN0cmluZyA9PT0gJycpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHVyaVN0cmluZy5zdGFydHNXaXRoKCdkYXRhOicpKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBodHRwVXJsID0gdXJpU3RyaW5nLnN0YXJ0c1dpdGgoJ2h0dHA6Ly8nKSB8fCB1cmlTdHJpbmcuc3RhcnRzV2l0aCgnaHR0cHM6Ly8nKTtcbiAgICAgICAgaWYgKCFodHRwVXJsICYmIHVyaVN0cmluZy5pbmRleE9mKCc6Ly8nKSA8IDAgJiYgVXRpbHMudGxkRW5kaW5nUmVnZXgudGVzdCh1cmlTdHJpbmcpKSB7XG4gICAgICAgICAgICB1cmlTdHJpbmcgPSAnaHR0cDovLycgKyB1cmlTdHJpbmc7XG4gICAgICAgICAgICBodHRwVXJsID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChodHRwVXJsKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHVybCA9IFV0aWxzLmdldFVybE9iamVjdCh1cmlTdHJpbmcpO1xuICAgICAgICAgICAgICAgIGlmICh1cmwuaG9zdG5hbWUgPT09ICdsb2NhbGhvc3QnIHx8IFV0aWxzLnZhbGlkSXBBZGRyZXNzKHVybC5ob3N0bmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVybC5ob3N0bmFtZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zdCB1cmxEb21haW4gPSB0bGRqcyAhPSBudWxsICYmIHRsZGpzLmdldERvbWFpbiAhPSBudWxsID8gdGxkanMuZ2V0RG9tYWluKHVybC5ob3N0bmFtZSkgOiBudWxsO1xuICAgICAgICAgICAgICAgIHJldHVybiB1cmxEb21haW4gIT0gbnVsbCA/IHVybERvbWFpbiA6IHVybC5ob3N0bmFtZTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsgfVxuICAgICAgICB9XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGRvbWFpbiA9IHRsZGpzICE9IG51bGwgJiYgdGxkanMuZ2V0RG9tYWluICE9IG51bGwgPyB0bGRqcy5nZXREb21haW4odXJpU3RyaW5nKSA6IG51bGw7XG5cbiAgICAgICAgICAgIGlmIChkb21haW4gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBkb21haW47XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2gge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0UXVlcnlQYXJhbXModXJpU3RyaW5nOiBzdHJpbmcpOiBNYXA8c3RyaW5nLCBzdHJpbmc+IHtcbiAgICAgICAgY29uc3QgdXJsID0gVXRpbHMuZ2V0VXJsKHVyaVN0cmluZyk7XG4gICAgICAgIGlmICh1cmwgPT0gbnVsbCB8fCB1cmwuc2VhcmNoID09IG51bGwgfHwgdXJsLnNlYXJjaCA9PT0gJycpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1hcCA9IG5ldyBNYXA8c3RyaW5nLCBzdHJpbmc+KCk7XG4gICAgICAgIGNvbnN0IHBhaXJzID0gKHVybC5zZWFyY2hbMF0gPT09ICc/JyA/IHVybC5zZWFyY2guc3Vic3RyKDEpIDogdXJsLnNlYXJjaCkuc3BsaXQoJyYnKTtcbiAgICAgICAgcGFpcnMuZm9yRWFjaCgocGFpcikgPT4ge1xuICAgICAgICAgICAgY29uc3QgcGFydHMgPSBwYWlyLnNwbGl0KCc9Jyk7XG4gICAgICAgICAgICBpZiAocGFydHMubGVuZ3RoIDwgMSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1hcC5zZXQoZGVjb2RlVVJJQ29tcG9uZW50KHBhcnRzWzBdKS50b0xvd2VyQ2FzZSgpLCBwYXJ0c1sxXSA9PSBudWxsID8gJycgOiBkZWNvZGVVUklDb21wb25lbnQocGFydHNbMV0pKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBtYXA7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldFNvcnRGdW5jdGlvbihpMThuU2VydmljZTogSTE4blNlcnZpY2UsIHByb3A6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gKGE6IGFueSwgYjogYW55KSA9PiB7XG4gICAgICAgICAgICBpZiAoYVtwcm9wXSA9PSBudWxsICYmIGJbcHJvcF0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhW3Byb3BdICE9IG51bGwgJiYgYltwcm9wXSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYVtwcm9wXSA9PSBudWxsICYmIGJbcHJvcF0gPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gaTE4blNlcnZpY2UuY29sbGF0b3IgPyBpMThuU2VydmljZS5jb2xsYXRvci5jb21wYXJlKGFbcHJvcF0sIGJbcHJvcF0pIDpcbiAgICAgICAgICAgICAgICBhW3Byb3BdLmxvY2FsZUNvbXBhcmUoYltwcm9wXSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgc3RhdGljIGlzTnVsbE9yV2hpdGVzcGFjZShzdHI6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gc3RyID09IG51bGwgfHwgdHlwZW9mIHN0ciAhPT0gJ3N0cmluZycgfHwgc3RyLnRyaW0oKSA9PT0gJyc7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgdmFsaWRJcEFkZHJlc3MoaXBTdHJpbmc6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgY29uc3QgaXBSZWdleCA9IC9eKDI1WzAtNV18MlswLTRdWzAtOV18WzAxXT9bMC05XVswLTldPylcXC4oMjVbMC01XXwyWzAtNF1bMC05XXxbMDFdP1swLTldWzAtOV0/KVxcLigyNVswLTVdfDJbMC00XVswLTldfFswMV0/WzAtOV1bMC05XT8pXFwuKDI1WzAtNV18MlswLTRdWzAtOV18WzAxXT9bMC05XVswLTldPykkLztcbiAgICAgICAgcmV0dXJuIGlwUmVnZXgudGVzdChpcFN0cmluZyk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgaXNNb2JpbGUod2luOiBXaW5kb3cpIHtcbiAgICAgICAgbGV0IG1vYmlsZSA9IGZhbHNlO1xuICAgICAgICAoKGEpID0+IHtcbiAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZVxuICAgICAgICAgICAgaWYgKC8oYW5kcm9pZHxiYlxcZCt8bWVlZ28pLittb2JpbGV8YXZhbnRnb3xiYWRhXFwvfGJsYWNrYmVycnl8YmxhemVyfGNvbXBhbHxlbGFpbmV8ZmVubmVjfGhpcHRvcHxpZW1vYmlsZXxpcChob25lfG9kKXxpcmlzfGtpbmRsZXxsZ2UgfG1hZW1vfG1pZHB8bW1wfG1vYmlsZS4rZmlyZWZveHxuZXRmcm9udHxvcGVyYSBtKG9ifGluKWl8cGFsbSggb3MpP3xwaG9uZXxwKGl4aXxyZSlcXC98cGx1Y2tlcnxwb2NrZXR8cHNwfHNlcmllcyg0fDYpMHxzeW1iaWFufHRyZW98dXBcXC4oYnJvd3NlcnxsaW5rKXx2b2RhZm9uZXx3YXB8d2luZG93cyBjZXx4ZGF8eGlpbm8vaS50ZXN0KGEpIHx8IC8xMjA3fDYzMTB8NjU5MHwzZ3NvfDR0aHB8NTBbMS02XWl8Nzcwc3w4MDJzfGEgd2F8YWJhY3xhYyhlcnxvb3xzXFwtKXxhaShrb3xybil8YWwoYXZ8Y2F8Y28pfGFtb2l8YW4oZXh8bnl8eXcpfGFwdHV8YXIoY2h8Z28pfGFzKHRlfHVzKXxhdHR3fGF1KGRpfFxcLW18ciB8cyApfGF2YW58YmUoY2t8bGx8bnEpfGJpKGxifHJkKXxibChhY3xheil8YnIoZXx2KXd8YnVtYnxid1xcLShufHUpfGM1NVxcL3xjYXBpfGNjd2F8Y2RtXFwtfGNlbGx8Y2h0bXxjbGRjfGNtZFxcLXxjbyhtcHxuZCl8Y3Jhd3xkYShpdHxsbHxuZyl8ZGJ0ZXxkY1xcLXN8ZGV2aXxkaWNhfGRtb2J8ZG8oY3xwKW98ZHMoMTJ8XFwtZCl8ZWwoNDl8YWkpfGVtKGwyfHVsKXxlcihpY3xrMCl8ZXNsOHxleihbNC03XTB8b3N8d2F8emUpfGZldGN8Zmx5KFxcLXxfKXxnMSB1fGc1NjB8Z2VuZXxnZlxcLTV8Z1xcLW1vfGdvKFxcLnd8b2QpfGdyKGFkfHVuKXxoYWllfGhjaXR8aGRcXC0obXxwfHQpfGhlaVxcLXxoaShwdHx0YSl8aHAoIGl8aXApfGhzXFwtY3xodChjKFxcLXwgfF98YXxnfHB8c3x0KXx0cCl8aHUoYXd8dGMpfGlcXC0oMjB8Z298bWEpfGkyMzB8aWFjKCB8XFwtfFxcLyl8aWJyb3xpZGVhfGlnMDF8aWtvbXxpbTFrfGlubm98aXBhcXxpcmlzfGphKHR8dilhfGpicm98amVtdXxqaWdzfGtkZGl8a2VqaXxrZ3QoIHxcXC8pfGtsb258a3B0IHxrd2NcXC18a3lvKGN8ayl8bGUobm98eGkpfGxnKCBnfFxcLyhrfGx8dSl8NTB8NTR8XFwtW2Etd10pfGxpYnd8bHlueHxtMVxcLXd8bTNnYXxtNTBcXC98bWEodGV8dWl8eG8pfG1jKDAxfDIxfGNhKXxtXFwtY3J8bWUocmN8cmkpfG1pKG84fG9hfHRzKXxtbWVmfG1vKDAxfDAyfGJpfGRlfGRvfHQoXFwtfCB8b3x2KXx6eil8bXQoNTB8cDF8diApfG13YnB8bXl3YXxuMTBbMC0yXXxuMjBbMi0zXXxuMzAoMHwyKXxuNTAoMHwyfDUpfG43KDAoMHwxKXwxMCl8bmUoKGN8bSlcXC18b258dGZ8d2Z8d2d8d3QpfG5vayg2fGkpfG56cGh8bzJpbXxvcCh0aXx3dil8b3Jhbnxvd2cxfHA4MDB8cGFuKGF8ZHx0KXxwZHhnfHBnKDEzfFxcLShbMS04XXxjKSl8cGhpbHxwaXJlfHBsKGF5fHVjKXxwblxcLTJ8cG8oY2t8cnR8c2UpfHByb3h8cHNpb3xwdFxcLWd8cWFcXC1hfHFjKDA3fDEyfDIxfDMyfDYwfFxcLVsyLTddfGlcXC0pfHF0ZWt8cjM4MHxyNjAwfHJha3N8cmltOXxybyh2ZXx6byl8czU1XFwvfHNhKGdlfG1hfG1tfG1zfG55fHZhKXxzYygwMXxoXFwtfG9vfHBcXC0pfHNka1xcL3xzZShjKFxcLXwwfDEpfDQ3fG1jfG5kfHJpKXxzZ2hcXC18c2hhcnxzaWUoXFwtfG0pfHNrXFwtMHxzbCg0NXxpZCl8c20oYWx8YXJ8YjN8aXR8dDUpfHNvKGZ0fG55KXxzcCgwMXxoXFwtfHZcXC18diApfHN5KDAxfG1iKXx0MigxOHw1MCl8dDYoMDB8MTB8MTgpfHRhKGd0fGxrKXx0Y2xcXC18dGRnXFwtfHRlbChpfG0pfHRpbVxcLXx0XFwtbW98dG8ocGx8c2gpfHRzKDcwfG1cXC18bTN8bTUpfHR4XFwtOXx1cChcXC5ifGcxfHNpKXx1dHN0fHY0MDB8djc1MHx2ZXJpfHZpKHJnfHRlKXx2ayg0MHw1WzAtM118XFwtdil8dm00MHx2b2RhfHZ1bGN8dngoNTJ8NTN8NjB8NjF8NzB8ODB8ODF8ODN8ODV8OTgpfHczYyhcXC18ICl8d2ViY3x3aGl0fHdpKGcgfG5jfG53KXx3bWxifHdvbnV8eDcwMHx5YXNcXC18eW91cnx6ZXRvfHp0ZVxcLS9pLnRlc3QoYS5zdWJzdHIoMCwgNCkpKSB7XG4gICAgICAgICAgICAgICAgbW9iaWxlID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkod2luLm5hdmlnYXRvci51c2VyQWdlbnQgfHwgd2luLm5hdmlnYXRvci52ZW5kb3IgfHwgKHdpbiBhcyBhbnkpLm9wZXJhKTtcbiAgICAgICAgcmV0dXJuIG1vYmlsZSB8fCB3aW4ubmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvaVBhZC9pKSAhPSBudWxsO1xuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIGlzQXBwbGVNb2JpbGUod2luOiBXaW5kb3cpIHtcbiAgICAgICAgcmV0dXJuIHdpbi5uYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9pUGhvbmUvaSkgIT0gbnVsbCB8fCB3aW4ubmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvaVBhZC9pKSAhPSBudWxsO1xuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIGdldFVybCh1cmlTdHJpbmc6IHN0cmluZyk6IFVSTCB7XG4gICAgICAgIGlmICh1cmlTdHJpbmcgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICB1cmlTdHJpbmcgPSB1cmlTdHJpbmcudHJpbSgpO1xuICAgICAgICBpZiAodXJpU3RyaW5nID09PSAnJykge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgdXJsID0gVXRpbHMuZ2V0VXJsT2JqZWN0KHVyaVN0cmluZyk7XG4gICAgICAgIGlmICh1cmwgPT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc3QgaGFzSHR0cFByb3RvY29sID0gdXJpU3RyaW5nLmluZGV4T2YoJ2h0dHA6Ly8nKSA9PT0gMCB8fCB1cmlTdHJpbmcuaW5kZXhPZignaHR0cHM6Ly8nKSA9PT0gMDtcbiAgICAgICAgICAgIGlmICghaGFzSHR0cFByb3RvY29sICYmIHVyaVN0cmluZy5pbmRleE9mKCcuJykgPiAtMSkge1xuICAgICAgICAgICAgICAgIHVybCA9IFV0aWxzLmdldFVybE9iamVjdCgnaHR0cDovLycgKyB1cmlTdHJpbmcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1cmw7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgZ2V0VXJsT2JqZWN0KHVyaVN0cmluZzogc3RyaW5nKTogVVJMIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChub2RlVVJMICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbm9kZVVSTC5VUkwgPyBuZXcgbm9kZVVSTC5VUkwodXJpU3RyaW5nKSA6IG5vZGVVUkwucGFyc2UodXJpU3RyaW5nKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIFVSTCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgVVJMKHVyaVN0cmluZyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHdpbmRvdyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaGFzUHJvdG9jb2wgPSB1cmlTdHJpbmcuaW5kZXhPZignOi8vJykgPiAtMTtcbiAgICAgICAgICAgICAgICBpZiAoIWhhc1Byb3RvY29sICYmIHVyaVN0cmluZy5pbmRleE9mKCcuJykgPiAtMSkge1xuICAgICAgICAgICAgICAgICAgICB1cmlTdHJpbmcgPSAnaHR0cDovLycgKyB1cmlTdHJpbmc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghaGFzUHJvdG9jb2wpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGFuY2hvciA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICAgICAgICAgICAgYW5jaG9yLmhyZWYgPSB1cmlTdHJpbmc7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFuY2hvciBhcyBhbnk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cblxuVXRpbHMuaW5pdCgpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==